import tables
import bitops
import strutils
import options
import decoding
import encoding
#This file was automatically generated by the tl scheme using Nimgram
type
    TL* = ref object of RootObj
    TLObject* = ref object of TL

    InputPeerI* = ref object of TLObject

    InputUserI* = ref object of TLObject

    InputContactI* = ref object of TLObject

    InputFileI* = ref object of TLObject

    InputMediaI* = ref object of TLObject

    InputDocumentI* = ref object of TLObject

    InputPhotoI* = ref object of TLObject

    InputGeoPointI* = ref object of TLObject

    DocumentAttributeI* = ref object of TLObject

    InputGameI* = ref object of TLObject

    InputWebDocumentI* = ref object of TLObject

    InvoiceI* = ref object of TLObject

    DataJSONI* = ref object of TLObject

    PollI* = ref object of TLObject

    MessageEntityI* = ref object of TLObject

    InputChatPhotoI* = ref object of TLObject

    InputFileLocationI* = ref object of TLObject

    InputStickerSetI* = ref object of TLObject

    PeerI* = ref object of TLObject

    storage_FileTypeI* = ref object of TLObject

    UserI* = ref object of TLObject

    UserProfilePhotoI* = ref object of TLObject

    UserStatusI* = ref object of TLObject

    RestrictionReasonI* = ref object of TLObject

    FileLocationI* = ref object of TLObject

    ChatI* = ref object of TLObject

    ChatPhotoI* = ref object of TLObject

    InputChannelI* = ref object of TLObject

    ChatAdminRightsI* = ref object of TLObject

    ChatBannedRightsI* = ref object of TLObject

    ChatFullI* = ref object of TLObject

    ChatParticipantsI* = ref object of TLObject

    PhotoI* = ref object of TLObject

    PeerNotifySettingsI* = ref object of TLObject

    ExportedChatInviteI* = ref object of TLObject

    BotInfoI* = ref object of TLObject

    StickerSetI* = ref object of TLObject

    ChannelLocationI* = ref object of TLObject

    ChatParticipantI* = ref object of TLObject

    MessageI* = ref object of TLObject

    MessageFwdHeaderI* = ref object of TLObject

    MessageReplyHeaderI* = ref object of TLObject

    MessageMediaI* = ref object of TLObject

    ReplyMarkupI* = ref object of TLObject

    MessageRepliesI* = ref object of TLObject

    MessageActionI* = ref object of TLObject

    GeoPointI* = ref object of TLObject

    DocumentI* = ref object of TLObject

    WebPageI* = ref object of TLObject

    GameI* = ref object of TLObject

    WebDocumentI* = ref object of TLObject

    PollResultsI* = ref object of TLObject

    PaymentRequestedInfoI* = ref object of TLObject

    PaymentChargeI* = ref object of TLObject

    PhoneCallDiscardReasonI* = ref object of TLObject

    SecureValueI* = ref object of TLObject

    SecureCredentialsEncryptedI* = ref object of TLObject

    SecureValueTypeI* = ref object of TLObject

    DialogI* = ref object of TLObject

    DraftMessageI* = ref object of TLObject

    FolderI* = ref object of TLObject

    PhotoSizeI* = ref object of TLObject

    VideoSizeI* = ref object of TLObject

    auth_SentCodeI* = ref object of TLObject

    auth_SentCodeTypeI* = ref object of TLObject

    auth_CodeTypeI* = ref object of TLObject

    auth_AuthorizationI* = ref object of TLObject

    help_TermsOfServiceI* = ref object of TLObject

    auth_ExportedAuthorizationI* = ref object of TLObject

    InputNotifyPeerI* = ref object of TLObject

    InputPeerNotifySettingsI* = ref object of TLObject

    PeerSettingsI* = ref object of TLObject

    WallPaperI* = ref object of TLObject

    WallPaperSettingsI* = ref object of TLObject

    ReportReasonI* = ref object of TLObject

    UserFullI* = ref object of TLObject

    ContactI* = ref object of TLObject

    ImportedContactI* = ref object of TLObject

    ContactStatusI* = ref object of TLObject

    contacts_ContactsI* = ref object of TLObject

    contacts_ImportedContactsI* = ref object of TLObject

    PopularContactI* = ref object of TLObject

    contacts_BlockedI* = ref object of TLObject

    PeerBlockedI* = ref object of TLObject

    messages_DialogsI* = ref object of TLObject

    messages_MessagesI* = ref object of TLObject

    messages_ChatsI* = ref object of TLObject

    messages_ChatFullI* = ref object of TLObject

    messages_AffectedHistoryI* = ref object of TLObject

    MessagesFilterI* = ref object of TLObject

    UpdateI* = ref object of TLObject

    SendMessageActionI* = ref object of TLObject

    EncryptedMessageI* = ref object of TLObject

    EncryptedChatI* = ref object of TLObject

    DcOptionI* = ref object of TLObject

    NotifyPeerI* = ref object of TLObject

    PrivacyKeyI* = ref object of TLObject

    PrivacyRuleI* = ref object of TLObject

    messages_StickerSetI* = ref object of TLObject

    InputBotInlineMessageIDI* = ref object of TLObject

    DialogPeerI* = ref object of TLObject

    PostAddressI* = ref object of TLObject

    PhoneCallI* = ref object of TLObject

    LangPackDifferenceI* = ref object of TLObject

    FolderPeerI* = ref object of TLObject

    PeerLocatedI* = ref object of TLObject

    ThemeI* = ref object of TLObject

    DialogFilterI* = ref object of TLObject

    ChannelParticipantI* = ref object of TLObject

    updates_StateI* = ref object of TLObject

    updates_DifferenceI* = ref object of TLObject

    UpdatesI* = ref object of TLObject

    photos_PhotosI* = ref object of TLObject

    photos_PhotoI* = ref object of TLObject

    upload_FileI* = ref object of TLObject

    FileHashI* = ref object of TLObject

    ConfigI* = ref object of TLObject

    NearestDcI* = ref object of TLObject

    help_AppUpdateI* = ref object of TLObject

    help_InviteTextI* = ref object of TLObject

    InputEncryptedChatI* = ref object of TLObject

    EncryptedFileI* = ref object of TLObject

    InputEncryptedFileI* = ref object of TLObject

    messages_DhConfigI* = ref object of TLObject

    messages_SentEncryptedMessageI* = ref object of TLObject

    help_SupportI* = ref object of TLObject

    contacts_FoundI* = ref object of TLObject

    InputPrivacyKeyI* = ref object of TLObject

    InputPrivacyRuleI* = ref object of TLObject

    account_PrivacyRulesI* = ref object of TLObject

    AccountDaysTTLI* = ref object of TLObject

    MaskCoordsI* = ref object of TLObject

    messages_StickersI* = ref object of TLObject

    StickerPackI* = ref object of TLObject

    messages_AllStickersI* = ref object of TLObject

    messages_AffectedMessagesI* = ref object of TLObject

    PageI* = ref object of TLObject

    WebPageAttributeI* = ref object of TLObject

    AuthorizationI* = ref object of TLObject

    account_AuthorizationsI* = ref object of TLObject

    account_PasswordI* = ref object of TLObject

    PasswordKdfAlgoI* = ref object of TLObject

    SecurePasswordKdfAlgoI* = ref object of TLObject

    account_PasswordSettingsI* = ref object of TLObject

    SecureSecretSettingsI* = ref object of TLObject

    account_PasswordInputSettingsI* = ref object of TLObject

    auth_PasswordRecoveryI* = ref object of TLObject

    ReceivedNotifyMessageI* = ref object of TLObject

    ChatInviteI* = ref object of TLObject

    BotCommandI* = ref object of TLObject

    KeyboardButtonI* = ref object of TLObject

    KeyboardButtonRowI* = ref object of TLObject

    contacts_ResolvedPeerI* = ref object of TLObject

    MessageRangeI* = ref object of TLObject

    updates_ChannelDifferenceI* = ref object of TLObject

    ChannelMessagesFilterI* = ref object of TLObject

    ChannelParticipantsFilterI* = ref object of TLObject

    channels_ChannelParticipantsI* = ref object of TLObject

    channels_ChannelParticipantI* = ref object of TLObject

    messages_SavedGifsI* = ref object of TLObject

    InputBotInlineMessageI* = ref object of TLObject

    InputBotInlineResultI* = ref object of TLObject

    BotInlineMessageI* = ref object of TLObject

    BotInlineResultI* = ref object of TLObject

    messages_BotResultsI* = ref object of TLObject

    InlineBotSwitchPMI* = ref object of TLObject

    ExportedMessageLinkI* = ref object of TLObject

    messages_BotCallbackAnswerI* = ref object of TLObject

    messages_MessageEditDataI* = ref object of TLObject

    messages_PeerDialogsI* = ref object of TLObject

    TopPeerI* = ref object of TLObject

    TopPeerCategoryI* = ref object of TLObject

    TopPeerCategoryPeersI* = ref object of TLObject

    contacts_TopPeersI* = ref object of TLObject

    messages_FeaturedStickersI* = ref object of TLObject

    StickerSetCoveredI* = ref object of TLObject

    messages_RecentStickersI* = ref object of TLObject

    messages_ArchivedStickersI* = ref object of TLObject

    messages_StickerSetInstallResultI* = ref object of TLObject

    InputStickeredMediaI* = ref object of TLObject

    HighScoreI* = ref object of TLObject

    messages_HighScoresI* = ref object of TLObject

    RichTextI* = ref object of TLObject

    PageBlockI* = ref object of TLObject

    PageListItemI* = ref object of TLObject

    PageCaptionI* = ref object of TLObject

    PageTableRowI* = ref object of TLObject

    PageListOrderedItemI* = ref object of TLObject

    PageRelatedArticleI* = ref object of TLObject

    LabeledPriceI* = ref object of TLObject

    PaymentSavedCredentialsI* = ref object of TLObject

    InputWebFileLocationI* = ref object of TLObject

    upload_WebFileI* = ref object of TLObject

    payments_PaymentFormI* = ref object of TLObject

    payments_ValidatedRequestedInfoI* = ref object of TLObject

    ShippingOptionI* = ref object of TLObject

    payments_PaymentResultI* = ref object of TLObject

    payments_PaymentReceiptI* = ref object of TLObject

    payments_SavedInfoI* = ref object of TLObject

    InputPaymentCredentialsI* = ref object of TLObject

    account_TmpPasswordI* = ref object of TLObject

    InputStickerSetItemI* = ref object of TLObject

    InputPhoneCallI* = ref object of TLObject

    PhoneCallProtocolI* = ref object of TLObject

    PhoneConnectionI* = ref object of TLObject

    phone_PhoneCallI* = ref object of TLObject

    upload_CdnFileI* = ref object of TLObject

    CdnPublicKeyI* = ref object of TLObject

    CdnConfigI* = ref object of TLObject

    LangPackStringI* = ref object of TLObject

    LangPackLanguageI* = ref object of TLObject

    ChannelAdminLogEventActionI* = ref object of TLObject

    ChannelAdminLogEventI* = ref object of TLObject

    channels_AdminLogResultsI* = ref object of TLObject

    ChannelAdminLogEventsFilterI* = ref object of TLObject

    messages_FavedStickersI* = ref object of TLObject

    RecentMeUrlI* = ref object of TLObject

    help_RecentMeUrlsI* = ref object of TLObject

    InputSingleMediaI* = ref object of TLObject

    WebAuthorizationI* = ref object of TLObject

    account_WebAuthorizationsI* = ref object of TLObject

    InputMessageI* = ref object of TLObject

    InputDialogPeerI* = ref object of TLObject

    messages_FoundStickerSetsI* = ref object of TLObject

    InputClientProxyI* = ref object of TLObject

    help_TermsOfServiceUpdateI* = ref object of TLObject

    InputSecureFileI* = ref object of TLObject

    SecureFileI* = ref object of TLObject

    SecureDataI* = ref object of TLObject

    SecurePlainDataI* = ref object of TLObject

    InputSecureValueI* = ref object of TLObject

    SecureValueHashI* = ref object of TLObject

    SecureValueErrorI* = ref object of TLObject

    account_AuthorizationFormI* = ref object of TLObject

    SecureRequiredTypeI* = ref object of TLObject

    account_SentEmailCodeI* = ref object of TLObject

    help_DeepLinkInfoI* = ref object of TLObject

    SavedContactI* = ref object of TLObject

    account_TakeoutI* = ref object of TLObject

    InputCheckPasswordSRPI* = ref object of TLObject

    help_PassportConfigI* = ref object of TLObject

    InputAppEventI* = ref object of TLObject

    JSONValueI* = ref object of TLObject

    JSONObjectValueI* = ref object of TLObject

    PageTableCellI* = ref object of TLObject

    help_SupportNameI* = ref object of TLObject

    help_UserInfoI* = ref object of TLObject

    PollAnswerI* = ref object of TLObject

    PollAnswerVotersI* = ref object of TLObject

    ChatOnlinesI* = ref object of TLObject

    StatsURLI* = ref object of TLObject

    InputWallPaperI* = ref object of TLObject

    account_WallPapersI* = ref object of TLObject

    CodeSettingsI* = ref object of TLObject

    AutoDownloadSettingsI* = ref object of TLObject

    account_AutoDownloadSettingsI* = ref object of TLObject

    EmojiKeywordI* = ref object of TLObject

    EmojiKeywordsDifferenceI* = ref object of TLObject

    EmojiURLI* = ref object of TLObject

    EmojiLanguageI* = ref object of TLObject

    InputFolderPeerI* = ref object of TLObject

    messages_SearchCounterI* = ref object of TLObject

    UrlAuthResultI* = ref object of TLObject

    InputThemeI* = ref object of TLObject

    ThemeSettingsI* = ref object of TLObject

    account_ThemesI* = ref object of TLObject

    auth_LoginTokenI* = ref object of TLObject

    account_ContentSettingsI* = ref object of TLObject

    messages_InactiveChatsI* = ref object of TLObject

    BaseThemeI* = ref object of TLObject

    InputThemeSettingsI* = ref object of TLObject

    MessageUserVoteI* = ref object of TLObject

    messages_VotesListI* = ref object of TLObject

    BankCardOpenUrlI* = ref object of TLObject

    payments_BankCardDataI* = ref object of TLObject

    DialogFilterSuggestedI* = ref object of TLObject

    StatsDateRangeDaysI* = ref object of TLObject

    StatsAbsValueAndPrevI* = ref object of TLObject

    StatsPercentValueI* = ref object of TLObject

    StatsGraphI* = ref object of TLObject

    MessageInteractionCountersI* = ref object of TLObject

    stats_BroadcastStatsI* = ref object of TLObject

    help_PromoDataI* = ref object of TLObject

    StatsGroupTopPosterI* = ref object of TLObject

    StatsGroupTopAdminI* = ref object of TLObject

    StatsGroupTopInviterI* = ref object of TLObject

    stats_MegagroupStatsI* = ref object of TLObject

    GlobalPrivacySettingsI* = ref object of TLObject

    help_CountryCodeI* = ref object of TLObject

    help_CountryI* = ref object of TLObject

    help_CountriesListI* = ref object of TLObject

    MessageViewsI* = ref object of TLObject

    messages_MessageViewsI* = ref object of TLObject

    messages_DiscussionMessageI* = ref object of TLObject

    stats_MessageStatsI* = ref object of TLObject

    inputPeerEmpty* = ref object of InputPeerI

    inputPeerSelf* = ref object of InputPeerI

    inputPeerChat* = ref object of InputPeerI
        chat_id*: int32

    inputPeerUser* = ref object of InputPeerI
        user_id*: int32
        access_hash*: int64

    inputPeerChannel* = ref object of InputPeerI
        channel_id*: int32
        access_hash*: int64

    inputPeerUserFromMessage* = ref object of InputPeerI
        peer*: InputPeerI
        msg_id*: int32
        user_id*: int32

    inputPeerChannelFromMessage* = ref object of InputPeerI
        peer*: InputPeerI
        msg_id*: int32
        channel_id*: int32

    inputUserEmpty* = ref object of InputUserI

    inputUserSelf* = ref object of InputUserI

    inputUser* = ref object of InputUserI
        user_id*: int32
        access_hash*: int64

    inputUserFromMessage* = ref object of InputUserI
        peer*: InputPeerI
        msg_id*: int32
        user_id*: int32

    inputPhoneContact* = ref object of InputContactI
        client_id*: int64
        phone*: string
        first_name*: string
        last_name*: string

    inputFile* = ref object of InputFileI
        id*: int64
        parts*: int32
        name*: string
        md5_checksum*: string

    inputFileBig* = ref object of InputFileI
        id*: int64
        parts*: int32
        name*: string

    inputMediaEmpty* = ref object of InputMediaI

    inputMediaUploadedPhoto* = ref object of InputMediaI
        flags*: int32
        file*: InputFileI
        stickers*: Option[seq[InputDocumentI]]
        ttl_seconds*: Option[int32]

    inputMediaPhoto* = ref object of InputMediaI
        flags*: int32
        id*: InputPhotoI
        ttl_seconds*: Option[int32]

    inputMediaGeoPoint* = ref object of InputMediaI
        geo_point*: InputGeoPointI

    inputMediaContact* = ref object of InputMediaI
        phone_number*: string
        first_name*: string
        last_name*: string
        vcard*: string

    inputMediaUploadedDocument* = ref object of InputMediaI
        flags*: int32
        nosound_video*: bool
        force_file*: bool
        file*: InputFileI
        thumb*: Option[InputFileI]
        mime_type*: string
        attributes*: seq[DocumentAttributeI]
        stickers*: Option[seq[InputDocumentI]]
        ttl_seconds*: Option[int32]

    inputMediaDocument* = ref object of InputMediaI
        flags*: int32
        id*: InputDocumentI
        ttl_seconds*: Option[int32]

    inputMediaVenue* = ref object of InputMediaI
        geo_point*: InputGeoPointI
        title*: string
        address*: string
        provider*: string
        venue_id*: string
        venue_type*: string

    inputMediaPhotoExternal* = ref object of InputMediaI
        flags*: int32
        url*: string
        ttl_seconds*: Option[int32]

    inputMediaDocumentExternal* = ref object of InputMediaI
        flags*: int32
        url*: string
        ttl_seconds*: Option[int32]

    inputMediaGame* = ref object of InputMediaI
        id*: InputGameI

    inputMediaInvoice* = ref object of InputMediaI
        flags*: int32
        title*: string
        description*: string
        photo*: Option[InputWebDocumentI]
        invoice*: InvoiceI
        payload*: seq[uint8]
        provider*: string
        provider_data*: DataJSONI
        start_param*: string

    inputMediaGeoLive* = ref object of InputMediaI
        flags*: int32
        stopped*: bool
        geo_point*: InputGeoPointI
        heading*: Option[int32]
        period*: Option[int32]
        proximity_notification_radius*: Option[int32]

    inputMediaPoll* = ref object of InputMediaI
        flags*: int32
        poll*: PollI
        correct_answers*: Option[seq[seq[uint8]]]
        solution*: Option[string]
        solution_entities*: Option[seq[MessageEntityI]]

    inputMediaDice* = ref object of InputMediaI
        emoticon*: string

    inputChatPhotoEmpty* = ref object of InputChatPhotoI

    inputChatUploadedPhoto* = ref object of InputChatPhotoI
        flags*: int32
        file*: Option[InputFileI]
        video*: Option[InputFileI]
        video_start_ts*: Option[float64]

    inputChatPhoto* = ref object of InputChatPhotoI
        id*: InputPhotoI

    inputGeoPointEmpty* = ref object of InputGeoPointI

    inputGeoPoint* = ref object of InputGeoPointI
        flags*: int32
        lat*: float64
        long*: float64
        accuracy_radius*: Option[int32]

    inputPhotoEmpty* = ref object of InputPhotoI

    inputPhoto* = ref object of InputPhotoI
        id*: int64
        access_hash*: int64
        file_reference*: seq[uint8]

    inputFileLocation* = ref object of InputFileLocationI
        volume_id*: int64
        local_id*: int32
        secret*: int64
        file_reference*: seq[uint8]

    inputEncryptedFileLocation* = ref object of InputFileLocationI
        id*: int64
        access_hash*: int64

    inputDocumentFileLocation* = ref object of InputFileLocationI
        id*: int64
        access_hash*: int64
        file_reference*: seq[uint8]
        thumb_size*: string

    inputSecureFileLocation* = ref object of InputFileLocationI
        id*: int64
        access_hash*: int64

    inputTakeoutFileLocation* = ref object of InputFileLocationI

    inputPhotoFileLocation* = ref object of InputFileLocationI
        id*: int64
        access_hash*: int64
        file_reference*: seq[uint8]
        thumb_size*: string

    inputPhotoLegacyFileLocation* = ref object of InputFileLocationI
        id*: int64
        access_hash*: int64
        file_reference*: seq[uint8]
        volume_id*: int64
        local_id*: int32
        secret*: int64

    inputPeerPhotoFileLocation* = ref object of InputFileLocationI
        flags*: int32
        big*: bool
        peer*: InputPeerI
        volume_id*: int64
        local_id*: int32

    inputStickerSetThumb* = ref object of InputFileLocationI
        stickerset*: InputStickerSetI
        volume_id*: int64
        local_id*: int32

    peerUser* = ref object of PeerI
        user_id*: int32

    peerChat* = ref object of PeerI
        chat_id*: int32

    peerChannel* = ref object of PeerI
        channel_id*: int32

    storage_fileUnknown* = ref object of storage_FileTypeI

    storage_filePartial* = ref object of storage_FileTypeI

    storage_fileJpeg* = ref object of storage_FileTypeI

    storage_fileGif* = ref object of storage_FileTypeI

    storage_filePng* = ref object of storage_FileTypeI

    storage_filePdf* = ref object of storage_FileTypeI

    storage_fileMp3* = ref object of storage_FileTypeI

    storage_fileMov* = ref object of storage_FileTypeI

    storage_fileMp4* = ref object of storage_FileTypeI

    storage_fileWebp* = ref object of storage_FileTypeI

    userEmpty* = ref object of UserI
        id*: int32

    user* = ref object of UserI
        flags*: int32
        self*: bool
        contact*: bool
        mutual_contact*: bool
        deleted*: bool
        bot*: bool
        bot_chat_history*: bool
        bot_nochats*: bool
        verified*: bool
        restricted*: bool
        min*: bool
        bot_inline_geo*: bool
        support*: bool
        scam*: bool
        apply_min_photo*: bool
        id*: int32
        access_hash*: Option[int64]
        first_name*: Option[string]
        last_name*: Option[string]
        username*: Option[string]
        phone*: Option[string]
        photo*: Option[UserProfilePhotoI]
        status*: Option[UserStatusI]
        bot_info_version*: Option[int32]
        restriction_reason*: Option[seq[RestrictionReasonI]]
        bot_inline_placeholder*: Option[string]
        lang_code*: Option[string]

    userProfilePhotoEmpty* = ref object of UserProfilePhotoI

    userProfilePhoto* = ref object of UserProfilePhotoI
        flags*: int32
        has_video*: bool
        photo_id*: int64
        photo_small*: FileLocationI
        photo_big*: FileLocationI
        dc_id*: int32

    userStatusEmpty* = ref object of UserStatusI

    userStatusOnline* = ref object of UserStatusI
        expires*: int32

    userStatusOffline* = ref object of UserStatusI
        was_online*: int32

    userStatusRecently* = ref object of UserStatusI

    userStatusLastWeek* = ref object of UserStatusI

    userStatusLastMonth* = ref object of UserStatusI

    chatEmpty* = ref object of ChatI
        id*: int32

    chat* = ref object of ChatI
        flags*: int32
        creator*: bool
        kicked*: bool
        left*: bool
        deactivated*: bool
        id*: int32
        title*: string
        photo*: ChatPhotoI
        participants_count*: int32
        date*: int32
        version*: int32
        migrated_to*: Option[InputChannelI]
        admin_rights*: Option[ChatAdminRightsI]
        default_banned_rights*: Option[ChatBannedRightsI]

    chatForbidden* = ref object of ChatI
        id*: int32
        title*: string

    channel* = ref object of ChatI
        flags*: int32
        creator*: bool
        left*: bool
        broadcast*: bool
        verified*: bool
        megagroup*: bool
        restricted*: bool
        signatures*: bool
        min*: bool
        scam*: bool
        has_link*: bool
        has_geo*: bool
        slowmode_enabled*: bool
        id*: int32
        access_hash*: Option[int64]
        title*: string
        username*: Option[string]
        photo*: ChatPhotoI
        date*: int32
        version*: int32
        restriction_reason*: Option[seq[RestrictionReasonI]]
        admin_rights*: Option[ChatAdminRightsI]
        banned_rights*: Option[ChatBannedRightsI]
        default_banned_rights*: Option[ChatBannedRightsI]
        participants_count*: Option[int32]

    channelForbidden* = ref object of ChatI
        flags*: int32
        broadcast*: bool
        megagroup*: bool
        id*: int32
        access_hash*: int64
        title*: string
        until_date*: Option[int32]

    chatFull* = ref object of ChatFullI
        flags*: int32
        can_set_username*: bool
        has_scheduled*: bool
        id*: int32
        about*: string
        participants*: ChatParticipantsI
        chat_photo*: Option[PhotoI]
        notify_settings*: PeerNotifySettingsI
        exported_invite*: ExportedChatInviteI
        bot_info*: Option[seq[BotInfoI]]
        pinned_msg_id*: Option[int32]
        folder_id*: Option[int32]

    channelFull* = ref object of ChatFullI
        flags*: int32
        can_view_participants*: bool
        can_set_username*: bool
        can_set_stickers*: bool
        hidden_prehistory*: bool
        can_set_location*: bool
        has_scheduled*: bool
        can_view_stats*: bool
        blocked*: bool
        id*: int32
        about*: string
        participants_count*: Option[int32]
        admins_count*: Option[int32]
        kicked_count*: Option[int32]
        banned_count*: Option[int32]
        online_count*: Option[int32]
        read_inbox_max_id*: int32
        read_outbox_max_id*: int32
        unread_count*: int32
        chat_photo*: PhotoI
        notify_settings*: PeerNotifySettingsI
        exported_invite*: ExportedChatInviteI
        bot_info*: seq[BotInfoI]
        migrated_from_chat_id*: Option[int32]
        migrated_from_max_id*: Option[int32]
        pinned_msg_id*: Option[int32]
        stickerset*: Option[StickerSetI]
        available_min_id*: Option[int32]
        folder_id*: Option[int32]
        linked_chat_id*: Option[int32]
        location*: Option[ChannelLocationI]
        slowmode_seconds*: Option[int32]
        slowmode_next_send_date*: Option[int32]
        stats_dc*: Option[int32]
        pts*: int32

    chatParticipant* = ref object of ChatParticipantI
        user_id*: int32
        inviter_id*: int32
        date*: int32

    chatParticipantCreator* = ref object of ChatParticipantI
        user_id*: int32

    chatParticipantAdmin* = ref object of ChatParticipantI
        user_id*: int32
        inviter_id*: int32
        date*: int32

    chatParticipantsForbidden* = ref object of ChatParticipantsI
        flags*: int32
        chat_id*: int32
        self_participant*: Option[ChatParticipantI]

    chatParticipants* = ref object of ChatParticipantsI
        chat_id*: int32
        participants*: seq[ChatParticipantI]
        version*: int32

    chatPhotoEmpty* = ref object of ChatPhotoI

    chatPhoto* = ref object of ChatPhotoI
        flags*: int32
        has_video*: bool
        photo_small*: FileLocationI
        photo_big*: FileLocationI
        dc_id*: int32

    messageEmpty* = ref object of MessageI
        id*: int32

    message* = ref object of MessageI
        flags*: int32
        isout*: bool
        mentioned*: bool
        media_unread*: bool
        silent*: bool
        post*: bool
        from_scheduled*: bool
        legacy*: bool
        edit_hide*: bool
        pinned*: bool
        id*: int32
        from_id*: Option[PeerI]
        peer_id*: PeerI
        fwd_from*: Option[MessageFwdHeaderI]
        via_bot_id*: Option[int32]
        reply_to*: Option[MessageReplyHeaderI]
        date*: int32
        message*: string
        media*: Option[MessageMediaI]
        reply_markup*: Option[ReplyMarkupI]
        entities*: Option[seq[MessageEntityI]]
        views*: Option[int32]
        forwards*: Option[int32]
        replies*: Option[MessageRepliesI]
        edit_date*: Option[int32]
        post_author*: Option[string]
        grouped_id*: Option[int64]
        restriction_reason*: Option[seq[RestrictionReasonI]]

    messageService* = ref object of MessageI
        flags*: int32
        isout*: bool
        mentioned*: bool
        media_unread*: bool
        silent*: bool
        post*: bool
        legacy*: bool
        id*: int32
        from_id*: Option[PeerI]
        peer_id*: PeerI
        reply_to*: Option[MessageReplyHeaderI]
        date*: int32
        action*: MessageActionI

    messageMediaEmpty* = ref object of MessageMediaI

    messageMediaPhoto* = ref object of MessageMediaI
        flags*: int32
        photo*: Option[PhotoI]
        ttl_seconds*: Option[int32]

    messageMediaGeo* = ref object of MessageMediaI
        geo*: GeoPointI

    messageMediaContact* = ref object of MessageMediaI
        phone_number*: string
        first_name*: string
        last_name*: string
        vcard*: string
        user_id*: int32

    messageMediaUnsupported* = ref object of MessageMediaI

    messageMediaDocument* = ref object of MessageMediaI
        flags*: int32
        document*: Option[DocumentI]
        ttl_seconds*: Option[int32]

    messageMediaWebPage* = ref object of MessageMediaI
        webpage*: WebPageI

    messageMediaVenue* = ref object of MessageMediaI
        geo*: GeoPointI
        title*: string
        address*: string
        provider*: string
        venue_id*: string
        venue_type*: string

    messageMediaGame* = ref object of MessageMediaI
        game*: GameI

    messageMediaInvoice* = ref object of MessageMediaI
        flags*: int32
        shipping_address_requested*: bool
        test*: bool
        title*: string
        description*: string
        photo*: Option[WebDocumentI]
        receipt_msg_id*: Option[int32]
        currency*: string
        total_amount*: int64
        start_param*: string

    messageMediaGeoLive* = ref object of MessageMediaI
        flags*: int32
        geo*: GeoPointI
        heading*: Option[int32]
        period*: int32
        proximity_notification_radius*: Option[int32]

    messageMediaPoll* = ref object of MessageMediaI
        poll*: PollI
        results*: PollResultsI

    messageMediaDice* = ref object of MessageMediaI
        value*: int32
        emoticon*: string

    messageActionEmpty* = ref object of MessageActionI

    messageActionChatCreate* = ref object of MessageActionI
        title*: string
        users*: seq[int32]

    messageActionChatEditTitle* = ref object of MessageActionI
        title*: string

    messageActionChatEditPhoto* = ref object of MessageActionI
        photo*: PhotoI

    messageActionChatDeletePhoto* = ref object of MessageActionI

    messageActionChatAddUser* = ref object of MessageActionI
        users*: seq[int32]

    messageActionChatDeleteUser* = ref object of MessageActionI
        user_id*: int32

    messageActionChatJoinedByLink* = ref object of MessageActionI
        inviter_id*: int32

    messageActionChannelCreate* = ref object of MessageActionI
        title*: string

    messageActionChatMigrateTo* = ref object of MessageActionI
        channel_id*: int32

    messageActionChannelMigrateFrom* = ref object of MessageActionI
        title*: string
        chat_id*: int32

    messageActionPinMessage* = ref object of MessageActionI

    messageActionHistoryClear* = ref object of MessageActionI

    messageActionGameScore* = ref object of MessageActionI
        game_id*: int64
        score*: int32

    messageActionPaymentSentMe* = ref object of MessageActionI
        flags*: int32
        currency*: string
        total_amount*: int64
        payload*: seq[uint8]
        info*: Option[PaymentRequestedInfoI]
        shipping_option_id*: Option[string]
        charge*: PaymentChargeI

    messageActionPaymentSent* = ref object of MessageActionI
        currency*: string
        total_amount*: int64

    messageActionPhoneCall* = ref object of MessageActionI
        flags*: int32
        video*: bool
        call_id*: int64
        reason*: Option[PhoneCallDiscardReasonI]
        duration*: Option[int32]

    messageActionScreenshotTaken* = ref object of MessageActionI

    messageActionCustomAction* = ref object of MessageActionI
        message*: string

    messageActionBotAllowed* = ref object of MessageActionI
        domain*: string

    messageActionSecureValuesSentMe* = ref object of MessageActionI
        values*: seq[SecureValueI]
        credentials*: SecureCredentialsEncryptedI

    messageActionSecureValuesSent* = ref object of MessageActionI
        types*: seq[SecureValueTypeI]

    messageActionContactSignUp* = ref object of MessageActionI

    messageActionGeoProximityReached* = ref object of MessageActionI
        from_id*: PeerI
        to_id*: PeerI
        distance*: int32

    dialog* = ref object of DialogI
        flags*: int32
        pinned*: bool
        unread_mark*: bool
        peer*: PeerI
        top_message*: int32
        read_inbox_max_id*: int32
        read_outbox_max_id*: int32
        unread_count*: int32
        unread_mentions_count*: int32
        notify_settings*: PeerNotifySettingsI
        pts*: Option[int32]
        draft*: Option[DraftMessageI]
        folder_id*: Option[int32]

    dialogFolder* = ref object of DialogI
        flags*: int32
        pinned*: bool
        folder*: FolderI
        peer*: PeerI
        top_message*: int32
        unread_muted_peers_count*: int32
        unread_unmuted_peers_count*: int32
        unread_muted_messages_count*: int32
        unread_unmuted_messages_count*: int32

    photoEmpty* = ref object of PhotoI
        id*: int64

    photo* = ref object of PhotoI
        flags*: int32
        has_stickers*: bool
        id*: int64
        access_hash*: int64
        file_reference*: seq[uint8]
        date*: int32
        sizes*: seq[PhotoSizeI]
        video_sizes*: Option[seq[VideoSizeI]]
        dc_id*: int32

    photoSizeEmpty* = ref object of PhotoSizeI
        typeof*: string

    photoSize* = ref object of PhotoSizeI
        typeof*: string
        location*: FileLocationI
        w*: int32
        h*: int32
        size*: int32

    photoCachedSize* = ref object of PhotoSizeI
        typeof*: string
        location*: FileLocationI
        w*: int32
        h*: int32
        bytes*: seq[uint8]

    photoStrippedSize* = ref object of PhotoSizeI
        typeof*: string
        bytes*: seq[uint8]

    photoSizeProgressive* = ref object of PhotoSizeI
        typeof*: string
        location*: FileLocationI
        w*: int32
        h*: int32
        sizes*: seq[int32]

    geoPointEmpty* = ref object of GeoPointI

    geoPoint* = ref object of GeoPointI
        flags*: int32
        long*: float64
        lat*: float64
        access_hash*: int64
        accuracy_radius*: Option[int32]

    auth_sentCode* = ref object of auth_SentCodeI
        flags*: int32
        typeof*: auth_SentCodeTypeI
        phone_code_hash*: string
        next_type*: Option[auth_CodeTypeI]
        timeout*: Option[int32]

    auth_authorization* = ref object of auth_AuthorizationI
        flags*: int32
        tmp_sessions*: Option[int32]
        user*: UserI

    auth_authorizationSignUpRequired* = ref object of auth_AuthorizationI
        flags*: int32
        terms_of_service*: Option[help_TermsOfServiceI]

    auth_exportedAuthorization* = ref object of auth_ExportedAuthorizationI
        id*: int32
        bytes*: seq[uint8]

    inputNotifyPeer* = ref object of InputNotifyPeerI
        peer*: InputPeerI

    inputNotifyUsers* = ref object of InputNotifyPeerI

    inputNotifyChats* = ref object of InputNotifyPeerI

    inputNotifyBroadcasts* = ref object of InputNotifyPeerI

    inputPeerNotifySettings* = ref object of InputPeerNotifySettingsI
        flags*: int32
        show_previews*: Option[bool]
        silent*: Option[bool]
        mute_until*: Option[int32]
        sound*: Option[string]

    peerNotifySettings* = ref object of PeerNotifySettingsI
        flags*: int32
        show_previews*: Option[bool]
        silent*: Option[bool]
        mute_until*: Option[int32]
        sound*: Option[string]

    peerSettings* = ref object of PeerSettingsI
        flags*: int32
        report_spam*: bool
        add_contact*: bool
        block_contact*: bool
        share_contact*: bool
        need_contacts_exception*: bool
        report_geo*: bool
        autoarchived*: bool
        geo_distance*: Option[int32]

    wallPaper* = ref object of WallPaperI
        id*: int64
        flags*: int32
        creator*: bool
        default*: bool
        pattern*: bool
        dark*: bool
        access_hash*: int64
        slug*: string
        document*: DocumentI
        settings*: Option[WallPaperSettingsI]

    wallPaperNoFile* = ref object of WallPaperI
        flags*: int32
        default*: bool
        dark*: bool
        settings*: Option[WallPaperSettingsI]

    inputReportReasonSpam* = ref object of ReportReasonI

    inputReportReasonViolence* = ref object of ReportReasonI

    inputReportReasonPornography* = ref object of ReportReasonI

    inputReportReasonChildAbuse* = ref object of ReportReasonI

    inputReportReasonOther* = ref object of ReportReasonI
        text*: string

    inputReportReasonCopyright* = ref object of ReportReasonI

    inputReportReasonGeoIrrelevant* = ref object of ReportReasonI

    userFull* = ref object of UserFullI
        flags*: int32
        blocked*: bool
        phone_calls_available*: bool
        phone_calls_private*: bool
        can_pin_message*: bool
        has_scheduled*: bool
        video_calls_available*: bool
        user*: UserI
        about*: Option[string]
        settings*: PeerSettingsI
        profile_photo*: Option[PhotoI]
        notify_settings*: PeerNotifySettingsI
        bot_info*: Option[BotInfoI]
        pinned_msg_id*: Option[int32]
        common_chats_count*: int32
        folder_id*: Option[int32]

    contact* = ref object of ContactI
        user_id*: int32
        mutual*: bool

    importedContact* = ref object of ImportedContactI
        user_id*: int32
        client_id*: int64

    contactStatus* = ref object of ContactStatusI
        user_id*: int32
        status*: UserStatusI

    contacts_contactsNotModified* = ref object of contacts_ContactsI

    contacts_contacts* = ref object of contacts_ContactsI
        contacts*: seq[ContactI]
        saved_count*: int32
        users*: seq[UserI]

    contacts_importedContacts* = ref object of contacts_ImportedContactsI
        imported*: seq[ImportedContactI]
        popular_invites*: seq[PopularContactI]
        retry_contacts*: seq[int64]
        users*: seq[UserI]

    contacts_blocked* = ref object of contacts_BlockedI
        blocked*: seq[PeerBlockedI]
        chats*: seq[ChatI]
        users*: seq[UserI]

    contacts_blockedSlice* = ref object of contacts_BlockedI
        count*: int32
        blocked*: seq[PeerBlockedI]
        chats*: seq[ChatI]
        users*: seq[UserI]

    messages_dialogs* = ref object of messages_DialogsI
        dialogs*: seq[DialogI]
        messages*: seq[MessageI]
        chats*: seq[ChatI]
        users*: seq[UserI]

    messages_dialogsSlice* = ref object of messages_DialogsI
        count*: int32
        dialogs*: seq[DialogI]
        messages*: seq[MessageI]
        chats*: seq[ChatI]
        users*: seq[UserI]

    messages_dialogsNotModified* = ref object of messages_DialogsI
        count*: int32

    messages_messages* = ref object of messages_MessagesI
        messages*: seq[MessageI]
        chats*: seq[ChatI]
        users*: seq[UserI]

    messages_messagesSlice* = ref object of messages_MessagesI
        flags*: int32
        inexact*: bool
        count*: int32
        next_rate*: Option[int32]
        offset_id_offset*: Option[int32]
        messages*: seq[MessageI]
        chats*: seq[ChatI]
        users*: seq[UserI]

    messages_channelMessages* = ref object of messages_MessagesI
        flags*: int32
        inexact*: bool
        pts*: int32
        count*: int32
        offset_id_offset*: Option[int32]
        messages*: seq[MessageI]
        chats*: seq[ChatI]
        users*: seq[UserI]

    messages_messagesNotModified* = ref object of messages_MessagesI
        count*: int32

    messages_chats* = ref object of messages_ChatsI
        chats*: seq[ChatI]

    messages_chatsSlice* = ref object of messages_ChatsI
        count*: int32
        chats*: seq[ChatI]

    messages_chatFull* = ref object of messages_ChatFullI
        full_chat*: ChatFullI
        chats*: seq[ChatI]
        users*: seq[UserI]

    messages_affectedHistory* = ref object of messages_AffectedHistoryI
        pts*: int32
        pts_count*: int32
        offset*: int32

    inputMessagesFilterEmpty* = ref object of MessagesFilterI

    inputMessagesFilterPhotos* = ref object of MessagesFilterI

    inputMessagesFilterVideo* = ref object of MessagesFilterI

    inputMessagesFilterPhotoVideo* = ref object of MessagesFilterI

    inputMessagesFilterDocument* = ref object of MessagesFilterI

    inputMessagesFilterUrl* = ref object of MessagesFilterI

    inputMessagesFilterGif* = ref object of MessagesFilterI

    inputMessagesFilterVoice* = ref object of MessagesFilterI

    inputMessagesFilterMusic* = ref object of MessagesFilterI

    inputMessagesFilterChatPhotos* = ref object of MessagesFilterI

    inputMessagesFilterPhoneCalls* = ref object of MessagesFilterI
        flags*: int32
        missed*: bool

    inputMessagesFilterRoundVoice* = ref object of MessagesFilterI

    inputMessagesFilterRoundVideo* = ref object of MessagesFilterI

    inputMessagesFilterMyMentions* = ref object of MessagesFilterI

    inputMessagesFilterGeo* = ref object of MessagesFilterI

    inputMessagesFilterContacts* = ref object of MessagesFilterI

    inputMessagesFilterPinned* = ref object of MessagesFilterI

    updateNewMessage* = ref object of UpdateI
        message*: MessageI
        pts*: int32
        pts_count*: int32

    updateMessageID* = ref object of UpdateI
        id*: int32
        random_id*: int64

    updateDeleteMessages* = ref object of UpdateI
        messages*: seq[int32]
        pts*: int32
        pts_count*: int32

    updateUserTyping* = ref object of UpdateI
        user_id*: int32
        action*: SendMessageActionI

    updateChatUserTyping* = ref object of UpdateI
        chat_id*: int32
        user_id*: int32
        action*: SendMessageActionI

    updateChatParticipants* = ref object of UpdateI
        participants*: ChatParticipantsI

    updateUserStatus* = ref object of UpdateI
        user_id*: int32
        status*: UserStatusI

    updateUserName* = ref object of UpdateI
        user_id*: int32
        first_name*: string
        last_name*: string
        username*: string

    updateUserPhoto* = ref object of UpdateI
        user_id*: int32
        date*: int32
        photo*: UserProfilePhotoI
        previous*: bool

    updateNewEncryptedMessage* = ref object of UpdateI
        message*: EncryptedMessageI
        qts*: int32

    updateEncryptedChatTyping* = ref object of UpdateI
        chat_id*: int32

    updateEncryption* = ref object of UpdateI
        chat*: EncryptedChatI
        date*: int32

    updateEncryptedMessagesRead* = ref object of UpdateI
        chat_id*: int32
        max_date*: int32
        date*: int32

    updateChatParticipantAdd* = ref object of UpdateI
        chat_id*: int32
        user_id*: int32
        inviter_id*: int32
        date*: int32
        version*: int32

    updateChatParticipantDelete* = ref object of UpdateI
        chat_id*: int32
        user_id*: int32
        version*: int32

    updateDcOptions* = ref object of UpdateI
        dc_options*: seq[DcOptionI]

    updateNotifySettings* = ref object of UpdateI
        peer*: NotifyPeerI
        notify_settings*: PeerNotifySettingsI

    updateServiceNotification* = ref object of UpdateI
        flags*: int32
        popup*: bool
        inbox_date*: Option[int32]
        typeof*: string
        message*: string
        media*: MessageMediaI
        entities*: seq[MessageEntityI]

    updatePrivacy* = ref object of UpdateI
        key*: PrivacyKeyI
        rules*: seq[PrivacyRuleI]

    updateUserPhone* = ref object of UpdateI
        user_id*: int32
        phone*: string

    updateReadHistoryInbox* = ref object of UpdateI
        flags*: int32
        folder_id*: Option[int32]
        peer*: PeerI
        max_id*: int32
        still_unread_count*: int32
        pts*: int32
        pts_count*: int32

    updateReadHistoryOutbox* = ref object of UpdateI
        peer*: PeerI
        max_id*: int32
        pts*: int32
        pts_count*: int32

    updateWebPage* = ref object of UpdateI
        webpage*: WebPageI
        pts*: int32
        pts_count*: int32

    updateReadMessagesContents* = ref object of UpdateI
        messages*: seq[int32]
        pts*: int32
        pts_count*: int32

    updateChannelTooLong* = ref object of UpdateI
        flags*: int32
        channel_id*: int32
        pts*: Option[int32]

    updateChannel* = ref object of UpdateI
        channel_id*: int32

    updateNewChannelMessage* = ref object of UpdateI
        message*: MessageI
        pts*: int32
        pts_count*: int32

    updateReadChannelInbox* = ref object of UpdateI
        flags*: int32
        folder_id*: Option[int32]
        channel_id*: int32
        max_id*: int32
        still_unread_count*: int32
        pts*: int32

    updateDeleteChannelMessages* = ref object of UpdateI
        channel_id*: int32
        messages*: seq[int32]
        pts*: int32
        pts_count*: int32

    updateChannelMessageViews* = ref object of UpdateI
        channel_id*: int32
        id*: int32
        views*: int32

    updateChatParticipantAdmin* = ref object of UpdateI
        chat_id*: int32
        user_id*: int32
        is_admin*: bool
        version*: int32

    updateNewStickerSet* = ref object of UpdateI
        stickerset*: messages_StickerSetI

    updateStickerSetsOrder* = ref object of UpdateI
        flags*: int32
        masks*: bool
        order*: seq[int64]

    updateStickerSets* = ref object of UpdateI

    updateSavedGifs* = ref object of UpdateI

    updateBotInlineQuery* = ref object of UpdateI
        flags*: int32
        query_id*: int64
        user_id*: int32
        query*: string
        geo*: Option[GeoPointI]
        offset*: string

    updateBotInlineSend* = ref object of UpdateI
        flags*: int32
        user_id*: int32
        query*: string
        geo*: Option[GeoPointI]
        id*: string
        msg_id*: Option[InputBotInlineMessageIDI]

    updateEditChannelMessage* = ref object of UpdateI
        message*: MessageI
        pts*: int32
        pts_count*: int32

    updateBotCallbackQuery* = ref object of UpdateI
        flags*: int32
        query_id*: int64
        user_id*: int32
        peer*: PeerI
        msg_id*: int32
        chat_instance*: int64
        data*: Option[seq[uint8]]
        game_short_name*: Option[string]

    updateEditMessage* = ref object of UpdateI
        message*: MessageI
        pts*: int32
        pts_count*: int32

    updateInlineBotCallbackQuery* = ref object of UpdateI
        flags*: int32
        query_id*: int64
        user_id*: int32
        msg_id*: InputBotInlineMessageIDI
        chat_instance*: int64
        data*: Option[seq[uint8]]
        game_short_name*: Option[string]

    updateReadChannelOutbox* = ref object of UpdateI
        channel_id*: int32
        max_id*: int32

    updateDraftMessage* = ref object of UpdateI
        peer*: PeerI
        draft*: DraftMessageI

    updateReadFeaturedStickers* = ref object of UpdateI

    updateRecentStickers* = ref object of UpdateI

    updateConfig* = ref object of UpdateI

    updatePtsChanged* = ref object of UpdateI

    updateChannelWebPage* = ref object of UpdateI
        channel_id*: int32
        webpage*: WebPageI
        pts*: int32
        pts_count*: int32

    updateDialogPinned* = ref object of UpdateI
        flags*: int32
        pinned*: bool
        folder_id*: Option[int32]
        peer*: DialogPeerI

    updatePinnedDialogs* = ref object of UpdateI
        flags*: int32
        folder_id*: Option[int32]
        order*: Option[seq[DialogPeerI]]

    updateBotWebhookJSON* = ref object of UpdateI
        data*: DataJSONI

    updateBotWebhookJSONQuery* = ref object of UpdateI
        query_id*: int64
        data*: DataJSONI
        timeout*: int32

    updateBotShippingQuery* = ref object of UpdateI
        query_id*: int64
        user_id*: int32
        payload*: seq[uint8]
        shipping_address*: PostAddressI

    updateBotPrecheckoutQuery* = ref object of UpdateI
        flags*: int32
        query_id*: int64
        user_id*: int32
        payload*: seq[uint8]
        info*: Option[PaymentRequestedInfoI]
        shipping_option_id*: Option[string]
        currency*: string
        total_amount*: int64

    updatePhoneCall* = ref object of UpdateI
        phone_call*: PhoneCallI

    updateLangPackTooLong* = ref object of UpdateI
        lang_code*: string

    updateLangPack* = ref object of UpdateI
        difference*: LangPackDifferenceI

    updateFavedStickers* = ref object of UpdateI

    updateChannelReadMessagesContents* = ref object of UpdateI
        channel_id*: int32
        messages*: seq[int32]

    updateContactsReset* = ref object of UpdateI

    updateChannelAvailableMessages* = ref object of UpdateI
        channel_id*: int32
        available_min_id*: int32

    updateDialogUnreadMark* = ref object of UpdateI
        flags*: int32
        unread*: bool
        peer*: DialogPeerI

    updateMessagePoll* = ref object of UpdateI
        flags*: int32
        poll_id*: int64
        poll*: Option[PollI]
        results*: PollResultsI

    updateChatDefaultBannedRights* = ref object of UpdateI
        peer*: PeerI
        default_banned_rights*: ChatBannedRightsI
        version*: int32

    updateFolderPeers* = ref object of UpdateI
        folder_peers*: seq[FolderPeerI]
        pts*: int32
        pts_count*: int32

    updatePeerSettings* = ref object of UpdateI
        peer*: PeerI
        settings*: PeerSettingsI

    updatePeerLocated* = ref object of UpdateI
        peers*: seq[PeerLocatedI]

    updateNewScheduledMessage* = ref object of UpdateI
        message*: MessageI

    updateDeleteScheduledMessages* = ref object of UpdateI
        peer*: PeerI
        messages*: seq[int32]

    updateTheme* = ref object of UpdateI
        theme*: ThemeI

    updateGeoLiveViewed* = ref object of UpdateI
        peer*: PeerI
        msg_id*: int32

    updateLoginToken* = ref object of UpdateI

    updateMessagePollVote* = ref object of UpdateI
        poll_id*: int64
        user_id*: int32
        options*: seq[seq[uint8]]

    updateDialogFilter* = ref object of UpdateI
        flags*: int32
        id*: int32
        filter*: Option[DialogFilterI]

    updateDialogFilterOrder* = ref object of UpdateI
        order*: seq[int32]

    updateDialogFilters* = ref object of UpdateI

    updatePhoneCallSignalingData* = ref object of UpdateI
        phone_call_id*: int64
        data*: seq[uint8]

    updateChannelParticipant* = ref object of UpdateI
        flags*: int32
        channel_id*: int32
        date*: int32
        user_id*: int32
        prev_participant*: Option[ChannelParticipantI]
        new_participant*: Option[ChannelParticipantI]
        qts*: int32

    updateChannelMessageForwards* = ref object of UpdateI
        channel_id*: int32
        id*: int32
        forwards*: int32

    updateReadChannelDiscussionInbox* = ref object of UpdateI
        flags*: int32
        channel_id*: int32
        top_msg_id*: int32
        read_max_id*: int32
        broadcast_id*: Option[int32]
        broadcast_post*: Option[int32]

    updateReadChannelDiscussionOutbox* = ref object of UpdateI
        channel_id*: int32
        top_msg_id*: int32
        read_max_id*: int32

    updatePeerBlocked* = ref object of UpdateI
        peer_id*: PeerI
        blocked*: bool

    updateChannelUserTyping* = ref object of UpdateI
        flags*: int32
        channel_id*: int32
        top_msg_id*: Option[int32]
        user_id*: int32
        action*: SendMessageActionI

    updatePinnedMessages* = ref object of UpdateI
        flags*: int32
        pinned*: bool
        peer*: PeerI
        messages*: seq[int32]
        pts*: int32
        pts_count*: int32

    updatePinnedChannelMessages* = ref object of UpdateI
        flags*: int32
        pinned*: bool
        channel_id*: int32
        messages*: seq[int32]
        pts*: int32
        pts_count*: int32

    updates_state* = ref object of updates_StateI
        pts*: int32
        qts*: int32
        date*: int32
        seq*: int32
        unread_count*: int32

    updates_differenceEmpty* = ref object of updates_DifferenceI
        date*: int32
        seq*: int32

    updates_difference* = ref object of updates_DifferenceI
        new_messages*: seq[MessageI]
        new_encrypted_messages*: seq[EncryptedMessageI]
        other_updates*: seq[UpdateI]
        chats*: seq[ChatI]
        users*: seq[UserI]
        state*: updates_StateI

    updates_differenceSlice* = ref object of updates_DifferenceI
        new_messages*: seq[MessageI]
        new_encrypted_messages*: seq[EncryptedMessageI]
        other_updates*: seq[UpdateI]
        chats*: seq[ChatI]
        users*: seq[UserI]
        intermediate_state*: updates_StateI

    updates_differenceTooLong* = ref object of updates_DifferenceI
        pts*: int32

    updatesTooLong* = ref object of UpdatesI

    updateShortMessage* = ref object of UpdatesI
        flags*: int32
        isout*: bool
        mentioned*: bool
        media_unread*: bool
        silent*: bool
        id*: int32
        user_id*: int32
        message*: string
        pts*: int32
        pts_count*: int32
        date*: int32
        fwd_from*: Option[MessageFwdHeaderI]
        via_bot_id*: Option[int32]
        reply_to*: Option[MessageReplyHeaderI]
        entities*: Option[seq[MessageEntityI]]

    updateShortChatMessage* = ref object of UpdatesI
        flags*: int32
        isout*: bool
        mentioned*: bool
        media_unread*: bool
        silent*: bool
        id*: int32
        from_id*: int32
        chat_id*: int32
        message*: string
        pts*: int32
        pts_count*: int32
        date*: int32
        fwd_from*: Option[MessageFwdHeaderI]
        via_bot_id*: Option[int32]
        reply_to*: Option[MessageReplyHeaderI]
        entities*: Option[seq[MessageEntityI]]

    updateShort* = ref object of UpdatesI
        update*: UpdateI
        date*: int32

    updatesCombined* = ref object of UpdatesI
        updates*: seq[UpdateI]
        users*: seq[UserI]
        chats*: seq[ChatI]
        date*: int32
        seq_start*: int32
        seq*: int32

    updates* = ref object of UpdatesI
        updates*: seq[UpdateI]
        users*: seq[UserI]
        chats*: seq[ChatI]
        date*: int32
        seq*: int32

    updateShortSentMessage* = ref object of UpdatesI
        flags*: int32
        isout*: bool
        id*: int32
        pts*: int32
        pts_count*: int32
        date*: int32
        media*: Option[MessageMediaI]
        entities*: Option[seq[MessageEntityI]]

    photos_photos* = ref object of photos_PhotosI
        photos*: seq[PhotoI]
        users*: seq[UserI]

    photos_photosSlice* = ref object of photos_PhotosI
        count*: int32
        photos*: seq[PhotoI]
        users*: seq[UserI]

    photos_photo* = ref object of photos_PhotoI
        photo*: PhotoI
        users*: seq[UserI]

    upload_file* = ref object of upload_FileI
        typeof*: storage_FileTypeI
        mtime*: int32
        bytes*: seq[uint8]

    upload_fileCdnRedirect* = ref object of upload_FileI
        dc_id*: int32
        file_token*: seq[uint8]
        encryption_key*: seq[uint8]
        encryption_iv*: seq[uint8]
        file_hashes*: seq[FileHashI]

    dcOption* = ref object of DcOptionI
        flags*: int32
        ipv6*: bool
        media_only*: bool
        tcpo_only*: bool
        cdn*: bool
        isstatic*: bool
        id*: int32
        ip_address*: string
        port*: int32
        secret*: Option[seq[uint8]]

    config* = ref object of ConfigI
        flags*: int32
        phonecalls_enabled*: bool
        default_p2p_contacts*: bool
        preload_featured_stickers*: bool
        ignore_phone_entities*: bool
        revoke_pm_inbox*: bool
        blocked_mode*: bool
        pfs_enabled*: bool
        date*: int32
        expires*: int32
        test_mode*: bool
        this_dc*: int32
        dc_options*: seq[DcOptionI]
        dc_txt_domain_name*: string
        chat_size_max*: int32
        megagroup_size_max*: int32
        forwarded_count_max*: int32
        online_update_period_ms*: int32
        offline_blur_timeout_ms*: int32
        offline_idle_timeout_ms*: int32
        online_cloud_timeout_ms*: int32
        notify_cloud_delay_ms*: int32
        notify_default_delay_ms*: int32
        push_chat_period_ms*: int32
        push_chat_limit*: int32
        saved_gifs_limit*: int32
        edit_time_limit*: int32
        revoke_time_limit*: int32
        revoke_pm_time_limit*: int32
        rating_e_decay*: int32
        stickers_recent_limit*: int32
        stickers_faved_limit*: int32
        channels_read_media_period*: int32
        tmp_sessions*: Option[int32]
        pinned_dialogs_count_max*: int32
        pinned_infolder_count_max*: int32
        call_receive_timeout_ms*: int32
        call_ring_timeout_ms*: int32
        call_connect_timeout_ms*: int32
        call_packet_timeout_ms*: int32
        me_url_prefix*: string
        autoupdate_url_prefix*: Option[string]
        gif_search_username*: Option[string]
        venue_search_username*: Option[string]
        img_search_username*: Option[string]
        static_maps_provider*: Option[string]
        caption_length_max*: int32
        message_length_max*: int32
        webfile_dc_id*: int32
        suggested_lang_code*: Option[string]
        lang_pack_version*: Option[int32]
        base_lang_pack_version*: Option[int32]

    nearestDc* = ref object of NearestDcI
        country*: string
        this_dc*: int32
        nearest_dc*: int32

    help_appUpdate* = ref object of help_AppUpdateI
        flags*: int32
        can_not_skip*: bool
        id*: int32
        version*: string
        text*: string
        entities*: seq[MessageEntityI]
        document*: Option[DocumentI]
        url*: Option[string]

    help_noAppUpdate* = ref object of help_AppUpdateI

    help_inviteText* = ref object of help_InviteTextI
        message*: string

    encryptedChatEmpty* = ref object of EncryptedChatI
        id*: int32

    encryptedChatWaiting* = ref object of EncryptedChatI
        id*: int32
        access_hash*: int64
        date*: int32
        admin_id*: int32
        participant_id*: int32

    encryptedChatRequested* = ref object of EncryptedChatI
        flags*: int32
        folder_id*: Option[int32]
        id*: int32
        access_hash*: int64
        date*: int32
        admin_id*: int32
        participant_id*: int32
        g_a*: seq[uint8]

    encryptedChat* = ref object of EncryptedChatI
        id*: int32
        access_hash*: int64
        date*: int32
        admin_id*: int32
        participant_id*: int32
        g_a_or_b*: seq[uint8]
        key_fingerprint*: int64

    encryptedChatDiscarded* = ref object of EncryptedChatI
        id*: int32

    inputEncryptedChat* = ref object of InputEncryptedChatI
        chat_id*: int32
        access_hash*: int64

    encryptedFileEmpty* = ref object of EncryptedFileI

    encryptedFile* = ref object of EncryptedFileI
        id*: int64
        access_hash*: int64
        size*: int32
        dc_id*: int32
        key_fingerprint*: int32

    inputEncryptedFileEmpty* = ref object of InputEncryptedFileI

    inputEncryptedFileUploaded* = ref object of InputEncryptedFileI
        id*: int64
        parts*: int32
        md5_checksum*: string
        key_fingerprint*: int32

    inputEncryptedFile* = ref object of InputEncryptedFileI
        id*: int64
        access_hash*: int64

    inputEncryptedFileBigUploaded* = ref object of InputEncryptedFileI
        id*: int64
        parts*: int32
        key_fingerprint*: int32

    encryptedMessage* = ref object of EncryptedMessageI
        random_id*: int64
        chat_id*: int32
        date*: int32
        bytes*: seq[uint8]
        file*: EncryptedFileI

    encryptedMessageService* = ref object of EncryptedMessageI
        random_id*: int64
        chat_id*: int32
        date*: int32
        bytes*: seq[uint8]

    messages_dhConfigNotModified* = ref object of messages_DhConfigI
        random*: seq[uint8]

    messages_dhConfig* = ref object of messages_DhConfigI
        g*: int32
        p*: seq[uint8]
        version*: int32
        random*: seq[uint8]

    messages_sentEncryptedMessage* = ref object of messages_SentEncryptedMessageI
        date*: int32

    messages_sentEncryptedFile* = ref object of messages_SentEncryptedMessageI
        date*: int32
        file*: EncryptedFileI

    inputDocumentEmpty* = ref object of InputDocumentI

    inputDocument* = ref object of InputDocumentI
        id*: int64
        access_hash*: int64
        file_reference*: seq[uint8]

    documentEmpty* = ref object of DocumentI
        id*: int64

    document* = ref object of DocumentI
        flags*: int32
        id*: int64
        access_hash*: int64
        file_reference*: seq[uint8]
        date*: int32
        mime_type*: string
        size*: int32
        thumbs*: Option[seq[PhotoSizeI]]
        video_thumbs*: Option[seq[VideoSizeI]]
        dc_id*: int32
        attributes*: seq[DocumentAttributeI]

    help_support* = ref object of help_SupportI
        phone_number*: string
        user*: UserI

    notifyPeer* = ref object of NotifyPeerI
        peer*: PeerI

    notifyUsers* = ref object of NotifyPeerI

    notifyChats* = ref object of NotifyPeerI

    notifyBroadcasts* = ref object of NotifyPeerI

    sendMessageTypingAction* = ref object of SendMessageActionI

    sendMessageCancelAction* = ref object of SendMessageActionI

    sendMessageRecordVideoAction* = ref object of SendMessageActionI

    sendMessageUploadVideoAction* = ref object of SendMessageActionI
        progress*: int32

    sendMessageRecordAudioAction* = ref object of SendMessageActionI

    sendMessageUploadAudioAction* = ref object of SendMessageActionI
        progress*: int32

    sendMessageUploadPhotoAction* = ref object of SendMessageActionI
        progress*: int32

    sendMessageUploadDocumentAction* = ref object of SendMessageActionI
        progress*: int32

    sendMessageGeoLocationAction* = ref object of SendMessageActionI

    sendMessageChooseContactAction* = ref object of SendMessageActionI

    sendMessageGamePlayAction* = ref object of SendMessageActionI

    sendMessageRecordRoundAction* = ref object of SendMessageActionI

    sendMessageUploadRoundAction* = ref object of SendMessageActionI
        progress*: int32

    contacts_found* = ref object of contacts_FoundI
        my_results*: seq[PeerI]
        results*: seq[PeerI]
        chats*: seq[ChatI]
        users*: seq[UserI]

    inputPrivacyKeyStatusTimestamp* = ref object of InputPrivacyKeyI

    inputPrivacyKeyChatInvite* = ref object of InputPrivacyKeyI

    inputPrivacyKeyPhoneCall* = ref object of InputPrivacyKeyI

    inputPrivacyKeyPhoneP2P* = ref object of InputPrivacyKeyI

    inputPrivacyKeyForwards* = ref object of InputPrivacyKeyI

    inputPrivacyKeyProfilePhoto* = ref object of InputPrivacyKeyI

    inputPrivacyKeyPhoneNumber* = ref object of InputPrivacyKeyI

    inputPrivacyKeyAddedByPhone* = ref object of InputPrivacyKeyI

    privacyKeyStatusTimestamp* = ref object of PrivacyKeyI

    privacyKeyChatInvite* = ref object of PrivacyKeyI

    privacyKeyPhoneCall* = ref object of PrivacyKeyI

    privacyKeyPhoneP2P* = ref object of PrivacyKeyI

    privacyKeyForwards* = ref object of PrivacyKeyI

    privacyKeyProfilePhoto* = ref object of PrivacyKeyI

    privacyKeyPhoneNumber* = ref object of PrivacyKeyI

    privacyKeyAddedByPhone* = ref object of PrivacyKeyI

    inputPrivacyValueAllowContacts* = ref object of InputPrivacyRuleI

    inputPrivacyValueAllowAll* = ref object of InputPrivacyRuleI

    inputPrivacyValueAllowUsers* = ref object of InputPrivacyRuleI
        users*: seq[InputUserI]

    inputPrivacyValueDisallowContacts* = ref object of InputPrivacyRuleI

    inputPrivacyValueDisallowAll* = ref object of InputPrivacyRuleI

    inputPrivacyValueDisallowUsers* = ref object of InputPrivacyRuleI
        users*: seq[InputUserI]

    inputPrivacyValueAllowChatParticipants* = ref object of InputPrivacyRuleI
        chats*: seq[int32]

    inputPrivacyValueDisallowChatParticipants* = ref object of InputPrivacyRuleI
        chats*: seq[int32]

    privacyValueAllowContacts* = ref object of PrivacyRuleI

    privacyValueAllowAll* = ref object of PrivacyRuleI

    privacyValueAllowUsers* = ref object of PrivacyRuleI
        users*: seq[int32]

    privacyValueDisallowContacts* = ref object of PrivacyRuleI

    privacyValueDisallowAll* = ref object of PrivacyRuleI

    privacyValueDisallowUsers* = ref object of PrivacyRuleI
        users*: seq[int32]

    privacyValueAllowChatParticipants* = ref object of PrivacyRuleI
        chats*: seq[int32]

    privacyValueDisallowChatParticipants* = ref object of PrivacyRuleI
        chats*: seq[int32]

    account_privacyRules* = ref object of account_PrivacyRulesI
        rules*: seq[PrivacyRuleI]
        chats*: seq[ChatI]
        users*: seq[UserI]

    accountDaysTTL* = ref object of AccountDaysTTLI
        days*: int32

    documentAttributeImageSize* = ref object of DocumentAttributeI
        w*: int32
        h*: int32

    documentAttributeAnimated* = ref object of DocumentAttributeI

    documentAttributeSticker* = ref object of DocumentAttributeI
        flags*: int32
        mask*: bool
        alt*: string
        stickerset*: InputStickerSetI
        mask_coords*: Option[MaskCoordsI]

    documentAttributeVideo* = ref object of DocumentAttributeI
        flags*: int32
        round_message*: bool
        supports_streaming*: bool
        duration*: int32
        w*: int32
        h*: int32

    documentAttributeAudio* = ref object of DocumentAttributeI
        flags*: int32
        voice*: bool
        duration*: int32
        title*: Option[string]
        performer*: Option[string]
        waveform*: Option[seq[uint8]]

    documentAttributeFilename* = ref object of DocumentAttributeI
        file_name*: string

    documentAttributeHasStickers* = ref object of DocumentAttributeI

    messages_stickersNotModified* = ref object of messages_StickersI

    messages_stickers* = ref object of messages_StickersI
        hash*: int32
        stickers*: seq[DocumentI]

    stickerPack* = ref object of StickerPackI
        emoticon*: string
        documents*: seq[int64]

    messages_allStickersNotModified* = ref object of messages_AllStickersI

    messages_allStickers* = ref object of messages_AllStickersI
        hash*: int32
        sets*: seq[StickerSetI]

    messages_affectedMessages* = ref object of messages_AffectedMessagesI
        pts*: int32
        pts_count*: int32

    webPageEmpty* = ref object of WebPageI
        id*: int64

    webPagePending* = ref object of WebPageI
        id*: int64
        date*: int32

    webPage* = ref object of WebPageI
        flags*: int32
        id*: int64
        url*: string
        display_url*: string
        hash*: int32
        typeof*: Option[string]
        site_name*: Option[string]
        title*: Option[string]
        description*: Option[string]
        photo*: Option[PhotoI]
        embed_url*: Option[string]
        embed_type*: Option[string]
        embed_width*: Option[int32]
        embed_height*: Option[int32]
        duration*: Option[int32]
        author*: Option[string]
        document*: Option[DocumentI]
        cached_page*: Option[PageI]
        attributes*: Option[seq[WebPageAttributeI]]

    webPageNotModified* = ref object of WebPageI
        flags*: int32
        cached_page_views*: Option[int32]

    authorization* = ref object of AuthorizationI
        flags*: int32
        current*: bool
        official_app*: bool
        password_pending*: bool
        hash*: int64
        device_model*: string
        platform*: string
        system_version*: string
        api_id*: int32
        app_name*: string
        app_version*: string
        date_created*: int32
        date_active*: int32
        ip*: string
        country*: string
        region*: string

    account_authorizations* = ref object of account_AuthorizationsI
        authorizations*: seq[AuthorizationI]

    account_password* = ref object of account_PasswordI
        flags*: int32
        has_recovery*: bool
        has_secure_values*: bool
        has_password*: bool
        current_algo*: Option[PasswordKdfAlgoI]
        srp_B*: Option[seq[uint8]]
        srp_id*: Option[int64]
        hint*: Option[string]
        email_unconfirmed_pattern*: Option[string]
        new_algo*: PasswordKdfAlgoI
        new_secure_algo*: SecurePasswordKdfAlgoI
        secure_random*: seq[uint8]

    account_passwordSettings* = ref object of account_PasswordSettingsI
        flags*: int32
        email*: Option[string]
        secure_settings*: Option[SecureSecretSettingsI]

    account_passwordInputSettings* = ref object of account_PasswordInputSettingsI
        flags*: int32
        new_algo*: Option[PasswordKdfAlgoI]
        new_password_hash*: Option[seq[uint8]]
        hint*: Option[string]
        email*: Option[string]
        new_secure_settings*: Option[SecureSecretSettingsI]

    auth_passwordRecovery* = ref object of auth_PasswordRecoveryI
        email_pattern*: string

    receivedNotifyMessage* = ref object of ReceivedNotifyMessageI
        id*: int32
        flags*: int32

    chatInviteEmpty* = ref object of ExportedChatInviteI

    chatInviteExported* = ref object of ExportedChatInviteI
        link*: string

    chatInviteAlready* = ref object of ChatInviteI
        chat*: ChatI

    chatInvite* = ref object of ChatInviteI
        flags*: int32
        channel*: bool
        broadcast*: bool
        public*: bool
        megagroup*: bool
        title*: string
        photo*: PhotoI
        participants_count*: int32
        participants*: Option[seq[UserI]]

    chatInvitePeek* = ref object of ChatInviteI
        chat*: ChatI
        expires*: int32

    inputStickerSetEmpty* = ref object of InputStickerSetI

    inputStickerSetID* = ref object of InputStickerSetI
        id*: int64
        access_hash*: int64

    inputStickerSetShortName* = ref object of InputStickerSetI
        short_name*: string

    inputStickerSetAnimatedEmoji* = ref object of InputStickerSetI

    inputStickerSetDice* = ref object of InputStickerSetI
        emoticon*: string

    stickerSet* = ref object of StickerSetI
        flags*: int32
        archived*: bool
        official*: bool
        masks*: bool
        animated*: bool
        installed_date*: Option[int32]
        id*: int64
        access_hash*: int64
        title*: string
        short_name*: string
        thumb*: Option[PhotoSizeI]
        thumb_dc_id*: Option[int32]
        count*: int32
        hash*: int32

    messages_stickerSet* = ref object of messages_StickerSetI
        set*: StickerSetI
        packs*: seq[StickerPackI]
        documents*: seq[DocumentI]

    botCommand* = ref object of BotCommandI
        command*: string
        description*: string

    botInfo* = ref object of BotInfoI
        user_id*: int32
        description*: string
        commands*: seq[BotCommandI]

    keyboardButton* = ref object of KeyboardButtonI
        text*: string

    keyboardButtonUrl* = ref object of KeyboardButtonI
        text*: string
        url*: string

    keyboardButtonCallback* = ref object of KeyboardButtonI
        flags*: int32
        requires_password*: bool
        text*: string
        data*: seq[uint8]

    keyboardButtonRequestPhone* = ref object of KeyboardButtonI
        text*: string

    keyboardButtonRequestGeoLocation* = ref object of KeyboardButtonI
        text*: string

    keyboardButtonSwitchInline* = ref object of KeyboardButtonI
        flags*: int32
        same_peer*: bool
        text*: string
        query*: string

    keyboardButtonGame* = ref object of KeyboardButtonI
        text*: string

    keyboardButtonBuy* = ref object of KeyboardButtonI
        text*: string

    keyboardButtonUrlAuth* = ref object of KeyboardButtonI
        flags*: int32
        text*: string
        fwd_text*: Option[string]
        url*: string
        button_id*: int32

    inputKeyboardButtonUrlAuth* = ref object of KeyboardButtonI
        flags*: int32
        request_write_access*: bool
        text*: string
        fwd_text*: Option[string]
        url*: string
        bot*: InputUserI

    keyboardButtonRequestPoll* = ref object of KeyboardButtonI
        flags*: int32
        quiz*: Option[bool]
        text*: string

    keyboardButtonRow* = ref object of KeyboardButtonRowI
        buttons*: seq[KeyboardButtonI]

    replyKeyboardHide* = ref object of ReplyMarkupI
        flags*: int32
        selective*: bool

    replyKeyboardForceReply* = ref object of ReplyMarkupI
        flags*: int32
        single_use*: bool
        selective*: bool

    replyKeyboardMarkup* = ref object of ReplyMarkupI
        flags*: int32
        resize*: bool
        single_use*: bool
        selective*: bool
        rows*: seq[KeyboardButtonRowI]

    replyInlineMarkup* = ref object of ReplyMarkupI
        rows*: seq[KeyboardButtonRowI]

    messageEntityUnknown* = ref object of MessageEntityI
        offset*: int32
        length*: int32

    messageEntityMention* = ref object of MessageEntityI
        offset*: int32
        length*: int32

    messageEntityHashtag* = ref object of MessageEntityI
        offset*: int32
        length*: int32

    messageEntityBotCommand* = ref object of MessageEntityI
        offset*: int32
        length*: int32

    messageEntityUrl* = ref object of MessageEntityI
        offset*: int32
        length*: int32

    messageEntityEmail* = ref object of MessageEntityI
        offset*: int32
        length*: int32

    messageEntityBold* = ref object of MessageEntityI
        offset*: int32
        length*: int32

    messageEntityItalic* = ref object of MessageEntityI
        offset*: int32
        length*: int32

    messageEntityCode* = ref object of MessageEntityI
        offset*: int32
        length*: int32

    messageEntityPre* = ref object of MessageEntityI
        offset*: int32
        length*: int32
        language*: string

    messageEntityTextUrl* = ref object of MessageEntityI
        offset*: int32
        length*: int32
        url*: string

    messageEntityMentionName* = ref object of MessageEntityI
        offset*: int32
        length*: int32
        user_id*: int32

    inputMessageEntityMentionName* = ref object of MessageEntityI
        offset*: int32
        length*: int32
        user_id*: InputUserI

    messageEntityPhone* = ref object of MessageEntityI
        offset*: int32
        length*: int32

    messageEntityCashtag* = ref object of MessageEntityI
        offset*: int32
        length*: int32

    messageEntityUnderline* = ref object of MessageEntityI
        offset*: int32
        length*: int32

    messageEntityStrike* = ref object of MessageEntityI
        offset*: int32
        length*: int32

    messageEntityBlockquote* = ref object of MessageEntityI
        offset*: int32
        length*: int32

    messageEntityBankCard* = ref object of MessageEntityI
        offset*: int32
        length*: int32

    inputChannelEmpty* = ref object of InputChannelI

    inputChannel* = ref object of InputChannelI
        channel_id*: int32
        access_hash*: int64

    inputChannelFromMessage* = ref object of InputChannelI
        peer*: InputPeerI
        msg_id*: int32
        channel_id*: int32

    contacts_resolvedPeer* = ref object of contacts_ResolvedPeerI
        peer*: PeerI
        chats*: seq[ChatI]
        users*: seq[UserI]

    messageRange* = ref object of MessageRangeI
        min_id*: int32
        max_id*: int32

    updates_channelDifferenceEmpty* = ref object of updates_ChannelDifferenceI
        flags*: int32
        final*: bool
        pts*: int32
        timeout*: Option[int32]

    updates_channelDifferenceTooLong* = ref object of updates_ChannelDifferenceI
        flags*: int32
        final*: bool
        timeout*: Option[int32]
        dialog*: DialogI
        messages*: seq[MessageI]
        chats*: seq[ChatI]
        users*: seq[UserI]

    updates_channelDifference* = ref object of updates_ChannelDifferenceI
        flags*: int32
        final*: bool
        pts*: int32
        timeout*: Option[int32]
        new_messages*: seq[MessageI]
        other_updates*: seq[UpdateI]
        chats*: seq[ChatI]
        users*: seq[UserI]

    channelMessagesFilterEmpty* = ref object of ChannelMessagesFilterI

    channelMessagesFilter* = ref object of ChannelMessagesFilterI
        flags*: int32
        exclude_new_messages*: bool
        ranges*: seq[MessageRangeI]

    channelParticipant* = ref object of ChannelParticipantI
        user_id*: int32
        date*: int32

    channelParticipantSelf* = ref object of ChannelParticipantI
        user_id*: int32
        inviter_id*: int32
        date*: int32

    channelParticipantCreator* = ref object of ChannelParticipantI
        flags*: int32
        user_id*: int32
        admin_rights*: ChatAdminRightsI
        rank*: Option[string]

    channelParticipantAdmin* = ref object of ChannelParticipantI
        flags*: int32
        can_edit*: bool
        self*: bool
        user_id*: int32
        inviter_id*: Option[int32]
        promoted_by*: int32
        date*: int32
        admin_rights*: ChatAdminRightsI
        rank*: Option[string]

    channelParticipantBanned* = ref object of ChannelParticipantI
        flags*: int32
        left*: bool
        user_id*: int32
        kicked_by*: int32
        date*: int32
        banned_rights*: ChatBannedRightsI

    channelParticipantLeft* = ref object of ChannelParticipantI
        user_id*: int32

    channelParticipantsRecent* = ref object of ChannelParticipantsFilterI

    channelParticipantsAdmins* = ref object of ChannelParticipantsFilterI

    channelParticipantsKicked* = ref object of ChannelParticipantsFilterI
        q*: string

    channelParticipantsBots* = ref object of ChannelParticipantsFilterI

    channelParticipantsBanned* = ref object of ChannelParticipantsFilterI
        q*: string

    channelParticipantsSearch* = ref object of ChannelParticipantsFilterI
        q*: string

    channelParticipantsContacts* = ref object of ChannelParticipantsFilterI
        q*: string

    channelParticipantsMentions* = ref object of ChannelParticipantsFilterI
        flags*: int32
        q*: Option[string]
        top_msg_id*: Option[int32]

    channels_channelParticipants* = ref object of channels_ChannelParticipantsI
        count*: int32
        participants*: seq[ChannelParticipantI]
        users*: seq[UserI]

    channels_channelParticipantsNotModified* = ref object of channels_ChannelParticipantsI

    channels_channelParticipant* = ref object of channels_ChannelParticipantI
        participant*: ChannelParticipantI
        users*: seq[UserI]

    help_termsOfService* = ref object of help_TermsOfServiceI
        flags*: int32
        popup*: bool
        id*: DataJSONI
        text*: string
        entities*: seq[MessageEntityI]
        min_age_confirm*: Option[int32]

    messages_savedGifsNotModified* = ref object of messages_SavedGifsI

    messages_savedGifs* = ref object of messages_SavedGifsI
        hash*: int32
        gifs*: seq[DocumentI]

    inputBotInlineMessageMediaAuto* = ref object of InputBotInlineMessageI
        flags*: int32
        message*: string
        entities*: Option[seq[MessageEntityI]]
        reply_markup*: Option[ReplyMarkupI]

    inputBotInlineMessageText* = ref object of InputBotInlineMessageI
        flags*: int32
        no_webpage*: bool
        message*: string
        entities*: Option[seq[MessageEntityI]]
        reply_markup*: Option[ReplyMarkupI]

    inputBotInlineMessageMediaGeo* = ref object of InputBotInlineMessageI
        flags*: int32
        geo_point*: InputGeoPointI
        heading*: Option[int32]
        period*: Option[int32]
        proximity_notification_radius*: Option[int32]
        reply_markup*: Option[ReplyMarkupI]

    inputBotInlineMessageMediaVenue* = ref object of InputBotInlineMessageI
        flags*: int32
        geo_point*: InputGeoPointI
        title*: string
        address*: string
        provider*: string
        venue_id*: string
        venue_type*: string
        reply_markup*: Option[ReplyMarkupI]

    inputBotInlineMessageMediaContact* = ref object of InputBotInlineMessageI
        flags*: int32
        phone_number*: string
        first_name*: string
        last_name*: string
        vcard*: string
        reply_markup*: Option[ReplyMarkupI]

    inputBotInlineMessageGame* = ref object of InputBotInlineMessageI
        flags*: int32
        reply_markup*: Option[ReplyMarkupI]

    inputBotInlineResult* = ref object of InputBotInlineResultI
        flags*: int32
        id*: string
        typeof*: string
        title*: Option[string]
        description*: Option[string]
        url*: Option[string]
        thumb*: Option[InputWebDocumentI]
        content*: Option[InputWebDocumentI]
        send_message*: InputBotInlineMessageI

    inputBotInlineResultPhoto* = ref object of InputBotInlineResultI
        id*: string
        typeof*: string
        photo*: InputPhotoI
        send_message*: InputBotInlineMessageI

    inputBotInlineResultDocument* = ref object of InputBotInlineResultI
        flags*: int32
        id*: string
        typeof*: string
        title*: Option[string]
        description*: Option[string]
        document*: InputDocumentI
        send_message*: InputBotInlineMessageI

    inputBotInlineResultGame* = ref object of InputBotInlineResultI
        id*: string
        short_name*: string
        send_message*: InputBotInlineMessageI

    botInlineMessageMediaAuto* = ref object of BotInlineMessageI
        flags*: int32
        message*: string
        entities*: Option[seq[MessageEntityI]]
        reply_markup*: Option[ReplyMarkupI]

    botInlineMessageText* = ref object of BotInlineMessageI
        flags*: int32
        no_webpage*: bool
        message*: string
        entities*: Option[seq[MessageEntityI]]
        reply_markup*: Option[ReplyMarkupI]

    botInlineMessageMediaGeo* = ref object of BotInlineMessageI
        flags*: int32
        geo*: GeoPointI
        heading*: Option[int32]
        period*: Option[int32]
        proximity_notification_radius*: Option[int32]
        reply_markup*: Option[ReplyMarkupI]

    botInlineMessageMediaVenue* = ref object of BotInlineMessageI
        flags*: int32
        geo*: GeoPointI
        title*: string
        address*: string
        provider*: string
        venue_id*: string
        venue_type*: string
        reply_markup*: Option[ReplyMarkupI]

    botInlineMessageMediaContact* = ref object of BotInlineMessageI
        flags*: int32
        phone_number*: string
        first_name*: string
        last_name*: string
        vcard*: string
        reply_markup*: Option[ReplyMarkupI]

    botInlineResult* = ref object of BotInlineResultI
        flags*: int32
        id*: string
        typeof*: string
        title*: Option[string]
        description*: Option[string]
        url*: Option[string]
        thumb*: Option[WebDocumentI]
        content*: Option[WebDocumentI]
        send_message*: BotInlineMessageI

    botInlineMediaResult* = ref object of BotInlineResultI
        flags*: int32
        id*: string
        typeof*: string
        photo*: Option[PhotoI]
        document*: Option[DocumentI]
        title*: Option[string]
        description*: Option[string]
        send_message*: BotInlineMessageI

    messages_botResults* = ref object of messages_BotResultsI
        flags*: int32
        gallery*: bool
        query_id*: int64
        next_offset*: Option[string]
        switch_pm*: Option[InlineBotSwitchPMI]
        results*: seq[BotInlineResultI]
        cache_time*: int32
        users*: seq[UserI]

    exportedMessageLink* = ref object of ExportedMessageLinkI
        link*: string
        html*: string

    messageFwdHeader* = ref object of MessageFwdHeaderI
        flags*: int32
        from_id*: Option[PeerI]
        from_name*: Option[string]
        date*: int32
        channel_post*: Option[int32]
        post_author*: Option[string]
        saved_from_peer*: Option[PeerI]
        saved_from_msg_id*: Option[int32]
        psa_type*: Option[string]

    auth_codeTypeSms* = ref object of auth_CodeTypeI

    auth_codeTypeCall* = ref object of auth_CodeTypeI

    auth_codeTypeFlashCall* = ref object of auth_CodeTypeI

    auth_sentCodeTypeApp* = ref object of auth_SentCodeTypeI
        length*: int32

    auth_sentCodeTypeSms* = ref object of auth_SentCodeTypeI
        length*: int32

    auth_sentCodeTypeCall* = ref object of auth_SentCodeTypeI
        length*: int32

    auth_sentCodeTypeFlashCall* = ref object of auth_SentCodeTypeI
        pattern*: string

    messages_botCallbackAnswer* = ref object of messages_BotCallbackAnswerI
        flags*: int32
        alert*: bool
        has_url*: bool
        native_ui*: bool
        message*: Option[string]
        url*: Option[string]
        cache_time*: int32

    messages_messageEditData* = ref object of messages_MessageEditDataI
        flags*: int32
        caption*: bool

    inputBotInlineMessageID* = ref object of InputBotInlineMessageIDI
        dc_id*: int32
        id*: int64
        access_hash*: int64

    inlineBotSwitchPM* = ref object of InlineBotSwitchPMI
        text*: string
        start_param*: string

    messages_peerDialogs* = ref object of messages_PeerDialogsI
        dialogs*: seq[DialogI]
        messages*: seq[MessageI]
        chats*: seq[ChatI]
        users*: seq[UserI]
        state*: updates_StateI

    topPeer* = ref object of TopPeerI
        peer*: PeerI
        rating*: float64

    topPeerCategoryBotsPM* = ref object of TopPeerCategoryI

    topPeerCategoryBotsInline* = ref object of TopPeerCategoryI

    topPeerCategoryCorrespondents* = ref object of TopPeerCategoryI

    topPeerCategoryGroups* = ref object of TopPeerCategoryI

    topPeerCategoryChannels* = ref object of TopPeerCategoryI

    topPeerCategoryPhoneCalls* = ref object of TopPeerCategoryI

    topPeerCategoryForwardUsers* = ref object of TopPeerCategoryI

    topPeerCategoryForwardChats* = ref object of TopPeerCategoryI

    topPeerCategoryPeers* = ref object of TopPeerCategoryPeersI
        category*: TopPeerCategoryI
        count*: int32
        peers*: seq[TopPeerI]

    contacts_topPeersNotModified* = ref object of contacts_TopPeersI

    contacts_topPeers* = ref object of contacts_TopPeersI
        categories*: seq[TopPeerCategoryPeersI]
        chats*: seq[ChatI]
        users*: seq[UserI]

    contacts_topPeersDisabled* = ref object of contacts_TopPeersI

    draftMessageEmpty* = ref object of DraftMessageI
        flags*: int32
        date*: Option[int32]

    draftMessage* = ref object of DraftMessageI
        flags*: int32
        no_webpage*: bool
        reply_to_msg_id*: Option[int32]
        message*: string
        entities*: Option[seq[MessageEntityI]]
        date*: int32

    messages_featuredStickersNotModified* = ref object of messages_FeaturedStickersI
        count*: int32

    messages_featuredStickers* = ref object of messages_FeaturedStickersI
        hash*: int32
        count*: int32
        sets*: seq[StickerSetCoveredI]
        unread*: seq[int64]

    messages_recentStickersNotModified* = ref object of messages_RecentStickersI

    messages_recentStickers* = ref object of messages_RecentStickersI
        hash*: int32
        packs*: seq[StickerPackI]
        stickers*: seq[DocumentI]
        dates*: seq[int32]

    messages_archivedStickers* = ref object of messages_ArchivedStickersI
        count*: int32
        sets*: seq[StickerSetCoveredI]

    messages_stickerSetInstallResultSuccess* = ref object of messages_StickerSetInstallResultI

    messages_stickerSetInstallResultArchive* = ref object of messages_StickerSetInstallResultI
        sets*: seq[StickerSetCoveredI]

    stickerSetCovered* = ref object of StickerSetCoveredI
        set*: StickerSetI
        cover*: DocumentI

    stickerSetMultiCovered* = ref object of StickerSetCoveredI
        set*: StickerSetI
        covers*: seq[DocumentI]

    maskCoords* = ref object of MaskCoordsI
        n*: int32
        x*: float64
        y*: float64
        zoom*: float64

    inputStickeredMediaPhoto* = ref object of InputStickeredMediaI
        id*: InputPhotoI

    inputStickeredMediaDocument* = ref object of InputStickeredMediaI
        id*: InputDocumentI

    game* = ref object of GameI
        flags*: int32
        id*: int64
        access_hash*: int64
        short_name*: string
        title*: string
        description*: string
        photo*: PhotoI
        document*: Option[DocumentI]

    inputGameID* = ref object of InputGameI
        id*: int64
        access_hash*: int64

    inputGameShortName* = ref object of InputGameI
        bot_id*: InputUserI
        short_name*: string

    highScore* = ref object of HighScoreI
        pos*: int32
        user_id*: int32
        score*: int32

    messages_highScores* = ref object of messages_HighScoresI
        scores*: seq[HighScoreI]
        users*: seq[UserI]

    textEmpty* = ref object of RichTextI

    textPlain* = ref object of RichTextI
        text*: string

    textBold* = ref object of RichTextI
        text*: RichTextI

    textItalic* = ref object of RichTextI
        text*: RichTextI

    textUnderline* = ref object of RichTextI
        text*: RichTextI

    textStrike* = ref object of RichTextI
        text*: RichTextI

    textFixed* = ref object of RichTextI
        text*: RichTextI

    textUrl* = ref object of RichTextI
        text*: RichTextI
        url*: string
        webpage_id*: int64

    textEmail* = ref object of RichTextI
        text*: RichTextI
        email*: string

    textConcat* = ref object of RichTextI
        texts*: seq[RichTextI]

    textSubscript* = ref object of RichTextI
        text*: RichTextI

    textSuperscript* = ref object of RichTextI
        text*: RichTextI

    textMarked* = ref object of RichTextI
        text*: RichTextI

    textPhone* = ref object of RichTextI
        text*: RichTextI
        phone*: string

    textImage* = ref object of RichTextI
        document_id*: int64
        w*: int32
        h*: int32

    textAnchor* = ref object of RichTextI
        text*: RichTextI
        name*: string

    pageBlockUnsupported* = ref object of PageBlockI

    pageBlockTitle* = ref object of PageBlockI
        text*: RichTextI

    pageBlockSubtitle* = ref object of PageBlockI
        text*: RichTextI

    pageBlockAuthorDate* = ref object of PageBlockI
        author*: RichTextI
        published_date*: int32

    pageBlockHeader* = ref object of PageBlockI
        text*: RichTextI

    pageBlockSubheader* = ref object of PageBlockI
        text*: RichTextI

    pageBlockParagraph* = ref object of PageBlockI
        text*: RichTextI

    pageBlockPreformatted* = ref object of PageBlockI
        text*: RichTextI
        language*: string

    pageBlockFooter* = ref object of PageBlockI
        text*: RichTextI

    pageBlockDivider* = ref object of PageBlockI

    pageBlockAnchor* = ref object of PageBlockI
        name*: string

    pageBlockList* = ref object of PageBlockI
        items*: seq[PageListItemI]

    pageBlockBlockquote* = ref object of PageBlockI
        text*: RichTextI
        caption*: RichTextI

    pageBlockPullquote* = ref object of PageBlockI
        text*: RichTextI
        caption*: RichTextI

    pageBlockPhoto* = ref object of PageBlockI
        flags*: int32
        photo_id*: int64
        caption*: PageCaptionI
        url*: Option[string]
        webpage_id*: Option[int64]

    pageBlockVideo* = ref object of PageBlockI
        flags*: int32
        autoplay*: bool
        loop*: bool
        video_id*: int64
        caption*: PageCaptionI

    pageBlockCover* = ref object of PageBlockI
        cover*: PageBlockI

    pageBlockEmbed* = ref object of PageBlockI
        flags*: int32
        full_width*: bool
        allow_scrolling*: bool
        url*: Option[string]
        html*: Option[string]
        poster_photo_id*: Option[int64]
        w*: Option[int32]
        h*: Option[int32]
        caption*: PageCaptionI

    pageBlockEmbedPost* = ref object of PageBlockI
        url*: string
        webpage_id*: int64
        author_photo_id*: int64
        author*: string
        date*: int32
        blocks*: seq[PageBlockI]
        caption*: PageCaptionI

    pageBlockCollage* = ref object of PageBlockI
        items*: seq[PageBlockI]
        caption*: PageCaptionI

    pageBlockSlideshow* = ref object of PageBlockI
        items*: seq[PageBlockI]
        caption*: PageCaptionI

    pageBlockChannel* = ref object of PageBlockI
        channel*: ChatI

    pageBlockAudio* = ref object of PageBlockI
        audio_id*: int64
        caption*: PageCaptionI

    pageBlockKicker* = ref object of PageBlockI
        text*: RichTextI

    pageBlockTable* = ref object of PageBlockI
        flags*: int32
        bordered*: bool
        striped*: bool
        title*: RichTextI
        rows*: seq[PageTableRowI]

    pageBlockOrderedList* = ref object of PageBlockI
        items*: seq[PageListOrderedItemI]

    pageBlockDetails* = ref object of PageBlockI
        flags*: int32
        open*: bool
        blocks*: seq[PageBlockI]
        title*: RichTextI

    pageBlockRelatedArticles* = ref object of PageBlockI
        title*: RichTextI
        articles*: seq[PageRelatedArticleI]

    pageBlockMap* = ref object of PageBlockI
        geo*: GeoPointI
        zoom*: int32
        w*: int32
        h*: int32
        caption*: PageCaptionI

    phoneCallDiscardReasonMissed* = ref object of PhoneCallDiscardReasonI

    phoneCallDiscardReasonDisconnect* = ref object of PhoneCallDiscardReasonI

    phoneCallDiscardReasonHangup* = ref object of PhoneCallDiscardReasonI

    phoneCallDiscardReasonBusy* = ref object of PhoneCallDiscardReasonI

    dataJSON* = ref object of DataJSONI
        data*: string

    labeledPrice* = ref object of LabeledPriceI
        label*: string
        amount*: int64

    invoice* = ref object of InvoiceI
        flags*: int32
        test*: bool
        name_requested*: bool
        phone_requested*: bool
        email_requested*: bool
        shipping_address_requested*: bool
        flexible*: bool
        phone_to_provider*: bool
        email_to_provider*: bool
        currency*: string
        prices*: seq[LabeledPriceI]

    paymentCharge* = ref object of PaymentChargeI
        id*: string
        provider_charge_id*: string

    postAddress* = ref object of PostAddressI
        street_line1*: string
        street_line2*: string
        city*: string
        state*: string
        country_iso2*: string
        post_code*: string

    paymentRequestedInfo* = ref object of PaymentRequestedInfoI
        flags*: int32
        name*: Option[string]
        phone*: Option[string]
        email*: Option[string]
        shipping_address*: Option[PostAddressI]

    paymentSavedCredentialsCard* = ref object of PaymentSavedCredentialsI
        id*: string
        title*: string

    webDocument* = ref object of WebDocumentI
        url*: string
        access_hash*: int64
        size*: int32
        mime_type*: string
        attributes*: seq[DocumentAttributeI]

    webDocumentNoProxy* = ref object of WebDocumentI
        url*: string
        size*: int32
        mime_type*: string
        attributes*: seq[DocumentAttributeI]

    inputWebDocument* = ref object of InputWebDocumentI
        url*: string
        size*: int32
        mime_type*: string
        attributes*: seq[DocumentAttributeI]

    inputWebFileLocation* = ref object of InputWebFileLocationI
        url*: string
        access_hash*: int64

    inputWebFileGeoPointLocation* = ref object of InputWebFileLocationI
        geo_point*: InputGeoPointI
        access_hash*: int64
        w*: int32
        h*: int32
        zoom*: int32
        scale*: int32

    upload_webFile* = ref object of upload_WebFileI
        size*: int32
        mime_type*: string
        file_type*: storage_FileTypeI
        mtime*: int32
        bytes*: seq[uint8]

    payments_paymentForm* = ref object of payments_PaymentFormI
        flags*: int32
        can_save_credentials*: bool
        password_missing*: bool
        bot_id*: int32
        invoice*: InvoiceI
        provider_id*: int32
        url*: string
        native_provider*: Option[string]
        native_params*: Option[DataJSONI]
        saved_info*: Option[PaymentRequestedInfoI]
        saved_credentials*: Option[PaymentSavedCredentialsI]
        users*: seq[UserI]

    payments_validatedRequestedInfo* = ref object of payments_ValidatedRequestedInfoI
        flags*: int32
        id*: Option[string]
        shipping_options*: Option[seq[ShippingOptionI]]

    payments_paymentResult* = ref object of payments_PaymentResultI
        updates*: UpdatesI

    payments_paymentVerificationNeeded* = ref object of payments_PaymentResultI
        url*: string

    payments_paymentReceipt* = ref object of payments_PaymentReceiptI
        flags*: int32
        date*: int32
        bot_id*: int32
        invoice*: InvoiceI
        provider_id*: int32
        info*: Option[PaymentRequestedInfoI]
        shipping*: Option[ShippingOptionI]
        currency*: string
        total_amount*: int64
        credentials_title*: string
        users*: seq[UserI]

    payments_savedInfo* = ref object of payments_SavedInfoI
        flags*: int32
        has_saved_credentials*: bool
        saved_info*: Option[PaymentRequestedInfoI]

    inputPaymentCredentialsSaved* = ref object of InputPaymentCredentialsI
        id*: string
        tmp_password*: seq[uint8]

    inputPaymentCredentials* = ref object of InputPaymentCredentialsI
        flags*: int32
        save*: bool
        data*: DataJSONI

    inputPaymentCredentialsApplePay* = ref object of InputPaymentCredentialsI
        payment_data*: DataJSONI

    inputPaymentCredentialsAndroidPay* = ref object of InputPaymentCredentialsI
        payment_token*: DataJSONI
        google_transaction_id*: string

    account_tmpPassword* = ref object of account_TmpPasswordI
        tmp_password*: seq[uint8]
        valid_until*: int32

    shippingOption* = ref object of ShippingOptionI
        id*: string
        title*: string
        prices*: seq[LabeledPriceI]

    inputStickerSetItem* = ref object of InputStickerSetItemI
        flags*: int32
        document*: InputDocumentI
        emoji*: string
        mask_coords*: Option[MaskCoordsI]

    inputPhoneCall* = ref object of InputPhoneCallI
        id*: int64
        access_hash*: int64

    phoneCallEmpty* = ref object of PhoneCallI
        id*: int64

    phoneCallWaiting* = ref object of PhoneCallI
        flags*: int32
        video*: bool
        id*: int64
        access_hash*: int64
        date*: int32
        admin_id*: int32
        participant_id*: int32
        protocol*: PhoneCallProtocolI
        receive_date*: Option[int32]

    phoneCallRequested* = ref object of PhoneCallI
        flags*: int32
        video*: bool
        id*: int64
        access_hash*: int64
        date*: int32
        admin_id*: int32
        participant_id*: int32
        g_a_hash*: seq[uint8]
        protocol*: PhoneCallProtocolI

    phoneCallAccepted* = ref object of PhoneCallI
        flags*: int32
        video*: bool
        id*: int64
        access_hash*: int64
        date*: int32
        admin_id*: int32
        participant_id*: int32
        g_b*: seq[uint8]
        protocol*: PhoneCallProtocolI

    phoneCall* = ref object of PhoneCallI
        flags*: int32
        p2p_allowed*: bool
        video*: bool
        id*: int64
        access_hash*: int64
        date*: int32
        admin_id*: int32
        participant_id*: int32
        g_a_or_b*: seq[uint8]
        key_fingerprint*: int64
        protocol*: PhoneCallProtocolI
        connections*: seq[PhoneConnectionI]
        start_date*: int32

    phoneCallDiscarded* = ref object of PhoneCallI
        flags*: int32
        need_rating*: bool
        need_debug*: bool
        video*: bool
        id*: int64
        reason*: Option[PhoneCallDiscardReasonI]
        duration*: Option[int32]

    phoneConnection* = ref object of PhoneConnectionI
        id*: int64
        ip*: string
        ipv6*: string
        port*: int32
        peer_tag*: seq[uint8]

    phoneConnectionWebrtc* = ref object of PhoneConnectionI
        flags*: int32
        turn*: bool
        stun*: bool
        id*: int64
        ip*: string
        ipv6*: string
        port*: int32
        username*: string
        password*: string

    phoneCallProtocol* = ref object of PhoneCallProtocolI
        flags*: int32
        udp_p2p*: bool
        udp_reflector*: bool
        min_layer*: int32
        max_layer*: int32
        library_versions*: seq[string]

    phone_phoneCall* = ref object of phone_PhoneCallI
        phone_call*: PhoneCallI
        users*: seq[UserI]

    upload_cdnFileReuploadNeeded* = ref object of upload_CdnFileI
        request_token*: seq[uint8]

    upload_cdnFile* = ref object of upload_CdnFileI
        bytes*: seq[uint8]

    cdnPublicKey* = ref object of CdnPublicKeyI
        dc_id*: int32
        public_key*: string

    cdnConfig* = ref object of CdnConfigI
        public_keys*: seq[CdnPublicKeyI]

    langPackString* = ref object of LangPackStringI
        key*: string
        value*: string

    langPackStringPluralized* = ref object of LangPackStringI
        flags*: int32
        key*: string
        zero_value*: Option[string]
        one_value*: Option[string]
        two_value*: Option[string]
        few_value*: Option[string]
        many_value*: Option[string]
        other_value*: string

    langPackStringDeleted* = ref object of LangPackStringI
        key*: string

    langPackDifference* = ref object of LangPackDifferenceI
        lang_code*: string
        from_version*: int32
        version*: int32
        strings*: seq[LangPackStringI]

    langPackLanguage* = ref object of LangPackLanguageI
        flags*: int32
        official*: bool
        rtl*: bool
        beta*: bool
        name*: string
        native_name*: string
        lang_code*: string
        base_lang_code*: Option[string]
        plural_code*: string
        strings_count*: int32
        translated_count*: int32
        translations_url*: string

    channelAdminLogEventActionChangeTitle* = ref object of ChannelAdminLogEventActionI
        prev_value*: string
        new_value*: string

    channelAdminLogEventActionChangeAbout* = ref object of ChannelAdminLogEventActionI
        prev_value*: string
        new_value*: string

    channelAdminLogEventActionChangeUsername* = ref object of ChannelAdminLogEventActionI
        prev_value*: string
        new_value*: string

    channelAdminLogEventActionChangePhoto* = ref object of ChannelAdminLogEventActionI
        prev_photo*: PhotoI
        new_photo*: PhotoI

    channelAdminLogEventActionToggleInvites* = ref object of ChannelAdminLogEventActionI
        new_value*: bool

    channelAdminLogEventActionToggleSignatures* = ref object of ChannelAdminLogEventActionI
        new_value*: bool

    channelAdminLogEventActionUpdatePinned* = ref object of ChannelAdminLogEventActionI
        message*: MessageI

    channelAdminLogEventActionEditMessage* = ref object of ChannelAdminLogEventActionI
        prev_message*: MessageI
        new_message*: MessageI

    channelAdminLogEventActionDeleteMessage* = ref object of ChannelAdminLogEventActionI
        message*: MessageI

    channelAdminLogEventActionParticipantJoin* = ref object of ChannelAdminLogEventActionI

    channelAdminLogEventActionParticipantLeave* = ref object of ChannelAdminLogEventActionI

    channelAdminLogEventActionParticipantInvite* = ref object of ChannelAdminLogEventActionI
        participant*: ChannelParticipantI

    channelAdminLogEventActionParticipantToggleBan* = ref object of ChannelAdminLogEventActionI
        prev_participant*: ChannelParticipantI
        new_participant*: ChannelParticipantI

    channelAdminLogEventActionParticipantToggleAdmin* = ref object of ChannelAdminLogEventActionI
        prev_participant*: ChannelParticipantI
        new_participant*: ChannelParticipantI

    channelAdminLogEventActionChangeStickerSet* = ref object of ChannelAdminLogEventActionI
        prev_stickerset*: InputStickerSetI
        new_stickerset*: InputStickerSetI

    channelAdminLogEventActionTogglePreHistoryHidden* = ref object of ChannelAdminLogEventActionI
        new_value*: bool

    channelAdminLogEventActionDefaultBannedRights* = ref object of ChannelAdminLogEventActionI
        prev_banned_rights*: ChatBannedRightsI
        new_banned_rights*: ChatBannedRightsI

    channelAdminLogEventActionStopPoll* = ref object of ChannelAdminLogEventActionI
        message*: MessageI

    channelAdminLogEventActionChangeLinkedChat* = ref object of ChannelAdminLogEventActionI
        prev_value*: int32
        new_value*: int32

    channelAdminLogEventActionChangeLocation* = ref object of ChannelAdminLogEventActionI
        prev_value*: ChannelLocationI
        new_value*: ChannelLocationI

    channelAdminLogEventActionToggleSlowMode* = ref object of ChannelAdminLogEventActionI
        prev_value*: int32
        new_value*: int32

    channelAdminLogEvent* = ref object of ChannelAdminLogEventI
        id*: int64
        date*: int32
        user_id*: int32
        action*: ChannelAdminLogEventActionI

    channels_adminLogResults* = ref object of channels_AdminLogResultsI
        events*: seq[ChannelAdminLogEventI]
        chats*: seq[ChatI]
        users*: seq[UserI]

    channelAdminLogEventsFilter* = ref object of ChannelAdminLogEventsFilterI
        flags*: int32
        join*: bool
        leave*: bool
        invite*: bool
        ban*: bool
        unban*: bool
        kick*: bool
        unkick*: bool
        promote*: bool
        demote*: bool
        info*: bool
        settings*: bool
        pinned*: bool
        edit*: bool
        delete*: bool

    popularContact* = ref object of PopularContactI
        client_id*: int64
        importers*: int32

    messages_favedStickersNotModified* = ref object of messages_FavedStickersI

    messages_favedStickers* = ref object of messages_FavedStickersI
        hash*: int32
        packs*: seq[StickerPackI]
        stickers*: seq[DocumentI]

    recentMeUrlUnknown* = ref object of RecentMeUrlI
        url*: string

    recentMeUrlUser* = ref object of RecentMeUrlI
        url*: string
        user_id*: int32

    recentMeUrlChat* = ref object of RecentMeUrlI
        url*: string
        chat_id*: int32

    recentMeUrlChatInvite* = ref object of RecentMeUrlI
        url*: string
        chat_invite*: ChatInviteI

    recentMeUrlStickerSet* = ref object of RecentMeUrlI
        url*: string
        set*: StickerSetCoveredI

    help_recentMeUrls* = ref object of help_RecentMeUrlsI
        urls*: seq[RecentMeUrlI]
        chats*: seq[ChatI]
        users*: seq[UserI]

    inputSingleMedia* = ref object of InputSingleMediaI
        flags*: int32
        media*: InputMediaI
        random_id*: int64
        message*: string
        entities*: Option[seq[MessageEntityI]]

    webAuthorization* = ref object of WebAuthorizationI
        hash*: int64
        bot_id*: int32
        domain*: string
        browser*: string
        platform*: string
        date_created*: int32
        date_active*: int32
        ip*: string
        region*: string

    account_webAuthorizations* = ref object of account_WebAuthorizationsI
        authorizations*: seq[WebAuthorizationI]
        users*: seq[UserI]

    inputMessageID* = ref object of InputMessageI
        id*: int32

    inputMessageReplyTo* = ref object of InputMessageI
        id*: int32

    inputMessagePinned* = ref object of InputMessageI

    inputDialogPeer* = ref object of InputDialogPeerI
        peer*: InputPeerI

    inputDialogPeerFolder* = ref object of InputDialogPeerI
        folder_id*: int32

    dialogPeer* = ref object of DialogPeerI
        peer*: PeerI

    dialogPeerFolder* = ref object of DialogPeerI
        folder_id*: int32

    messages_foundStickerSetsNotModified* = ref object of messages_FoundStickerSetsI

    messages_foundStickerSets* = ref object of messages_FoundStickerSetsI
        hash*: int32
        sets*: seq[StickerSetCoveredI]

    fileHash* = ref object of FileHashI
        offset*: int32
        limit*: int32
        hash*: seq[uint8]

    inputClientProxy* = ref object of InputClientProxyI
        address*: string
        port*: int32

    help_termsOfServiceUpdateEmpty* = ref object of help_TermsOfServiceUpdateI
        expires*: int32

    help_termsOfServiceUpdate* = ref object of help_TermsOfServiceUpdateI
        expires*: int32
        terms_of_service*: help_TermsOfServiceI

    inputSecureFileUploaded* = ref object of InputSecureFileI
        id*: int64
        parts*: int32
        md5_checksum*: string
        file_hash*: seq[uint8]
        secret*: seq[uint8]

    inputSecureFile* = ref object of InputSecureFileI
        id*: int64
        access_hash*: int64

    secureFileEmpty* = ref object of SecureFileI

    secureFile* = ref object of SecureFileI
        id*: int64
        access_hash*: int64
        size*: int32
        dc_id*: int32
        date*: int32
        file_hash*: seq[uint8]
        secret*: seq[uint8]

    secureData* = ref object of SecureDataI
        data*: seq[uint8]
        data_hash*: seq[uint8]
        secret*: seq[uint8]

    securePlainPhone* = ref object of SecurePlainDataI
        phone*: string

    securePlainEmail* = ref object of SecurePlainDataI
        email*: string

    secureValueTypePersonalDetails* = ref object of SecureValueTypeI

    secureValueTypePassport* = ref object of SecureValueTypeI

    secureValueTypeDriverLicense* = ref object of SecureValueTypeI

    secureValueTypeIdentityCard* = ref object of SecureValueTypeI

    secureValueTypeInternalPassport* = ref object of SecureValueTypeI

    secureValueTypeAddress* = ref object of SecureValueTypeI

    secureValueTypeUtilityBill* = ref object of SecureValueTypeI

    secureValueTypeBankStatement* = ref object of SecureValueTypeI

    secureValueTypeRentalAgreement* = ref object of SecureValueTypeI

    secureValueTypePassportRegistration* = ref object of SecureValueTypeI

    secureValueTypeTemporaryRegistration* = ref object of SecureValueTypeI

    secureValueTypePhone* = ref object of SecureValueTypeI

    secureValueTypeEmail* = ref object of SecureValueTypeI

    secureValue* = ref object of SecureValueI
        flags*: int32
        typeof*: SecureValueTypeI
        data*: Option[SecureDataI]
        front_side*: Option[SecureFileI]
        reverse_side*: Option[SecureFileI]
        selfie*: Option[SecureFileI]
        translation*: Option[seq[SecureFileI]]
        files*: Option[seq[SecureFileI]]
        plain_data*: Option[SecurePlainDataI]
        hash*: seq[uint8]

    inputSecureValue* = ref object of InputSecureValueI
        flags*: int32
        typeof*: SecureValueTypeI
        data*: Option[SecureDataI]
        front_side*: Option[InputSecureFileI]
        reverse_side*: Option[InputSecureFileI]
        selfie*: Option[InputSecureFileI]
        translation*: Option[seq[InputSecureFileI]]
        files*: Option[seq[InputSecureFileI]]
        plain_data*: Option[SecurePlainDataI]

    secureValueHash* = ref object of SecureValueHashI
        typeof*: SecureValueTypeI
        hash*: seq[uint8]

    secureValueErrorData* = ref object of SecureValueErrorI
        typeof*: SecureValueTypeI
        data_hash*: seq[uint8]
        field*: string
        text*: string

    secureValueErrorFrontSide* = ref object of SecureValueErrorI
        typeof*: SecureValueTypeI
        file_hash*: seq[uint8]
        text*: string

    secureValueErrorReverseSide* = ref object of SecureValueErrorI
        typeof*: SecureValueTypeI
        file_hash*: seq[uint8]
        text*: string

    secureValueErrorSelfie* = ref object of SecureValueErrorI
        typeof*: SecureValueTypeI
        file_hash*: seq[uint8]
        text*: string

    secureValueErrorFile* = ref object of SecureValueErrorI
        typeof*: SecureValueTypeI
        file_hash*: seq[uint8]
        text*: string

    secureValueErrorFiles* = ref object of SecureValueErrorI
        typeof*: SecureValueTypeI
        file_hash*: seq[seq[uint8]]
        text*: string

    secureValueError* = ref object of SecureValueErrorI
        typeof*: SecureValueTypeI
        hash*: seq[uint8]
        text*: string

    secureValueErrorTranslationFile* = ref object of SecureValueErrorI
        typeof*: SecureValueTypeI
        file_hash*: seq[uint8]
        text*: string

    secureValueErrorTranslationFiles* = ref object of SecureValueErrorI
        typeof*: SecureValueTypeI
        file_hash*: seq[seq[uint8]]
        text*: string

    secureCredentialsEncrypted* = ref object of SecureCredentialsEncryptedI
        data*: seq[uint8]
        hash*: seq[uint8]
        secret*: seq[uint8]

    account_authorizationForm* = ref object of account_AuthorizationFormI
        flags*: int32
        required_types*: seq[SecureRequiredTypeI]
        values*: seq[SecureValueI]
        errors*: seq[SecureValueErrorI]
        users*: seq[UserI]
        privacy_policy_url*: Option[string]

    account_sentEmailCode* = ref object of account_SentEmailCodeI
        email_pattern*: string
        length*: int32

    help_deepLinkInfoEmpty* = ref object of help_DeepLinkInfoI

    help_deepLinkInfo* = ref object of help_DeepLinkInfoI
        flags*: int32
        update_app*: bool
        message*: string
        entities*: Option[seq[MessageEntityI]]

    savedPhoneContact* = ref object of SavedContactI
        phone*: string
        first_name*: string
        last_name*: string
        date*: int32

    account_takeout* = ref object of account_TakeoutI
        id*: int64

    passwordKdfAlgoUnknown* = ref object of PasswordKdfAlgoI

    passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow* = ref object of PasswordKdfAlgoI
        salt1*: seq[uint8]
        salt2*: seq[uint8]
        g*: int32
        p*: seq[uint8]

    securePasswordKdfAlgoUnknown* = ref object of SecurePasswordKdfAlgoI

    securePasswordKdfAlgoPBKDF2HMACSHA512iter100000* = ref object of SecurePasswordKdfAlgoI
        salt*: seq[uint8]

    securePasswordKdfAlgoSHA512* = ref object of SecurePasswordKdfAlgoI
        salt*: seq[uint8]

    secureSecretSettings* = ref object of SecureSecretSettingsI
        secure_algo*: SecurePasswordKdfAlgoI
        secure_secret*: seq[uint8]
        secure_secret_id*: int64

    inputCheckPasswordEmpty* = ref object of InputCheckPasswordSRPI

    inputCheckPasswordSRP* = ref object of InputCheckPasswordSRPI
        srp_id*: int64
        A*: seq[uint8]
        M1*: seq[uint8]

    secureRequiredType* = ref object of SecureRequiredTypeI
        flags*: int32
        native_names*: bool
        selfie_required*: bool
        translation_required*: bool
        typeof*: SecureValueTypeI

    secureRequiredTypeOneOf* = ref object of SecureRequiredTypeI
        types*: seq[SecureRequiredTypeI]

    help_passportConfigNotModified* = ref object of help_PassportConfigI

    help_passportConfig* = ref object of help_PassportConfigI
        hash*: int32
        countries_langs*: DataJSONI

    inputAppEvent* = ref object of InputAppEventI
        time*: float64
        typeof*: string
        peer*: int64
        data*: JSONValueI

    jsonObjectValue* = ref object of JSONObjectValueI
        key*: string
        value*: JSONValueI

    jsonNull* = ref object of JSONValueI

    jsonBool* = ref object of JSONValueI
        value*: bool

    jsonNumber* = ref object of JSONValueI
        value*: float64

    jsonString* = ref object of JSONValueI
        value*: string

    jsonArray* = ref object of JSONValueI
        value*: seq[JSONValueI]

    jsonObject* = ref object of JSONValueI
        value*: seq[JSONObjectValueI]

    pageTableCell* = ref object of PageTableCellI
        flags*: int32
        header*: bool
        align_center*: bool
        align_right*: bool
        valign_middle*: bool
        valign_bottom*: bool
        text*: Option[RichTextI]
        colspan*: Option[int32]
        rowspan*: Option[int32]

    pageTableRow* = ref object of PageTableRowI
        cells*: seq[PageTableCellI]

    pageCaption* = ref object of PageCaptionI
        text*: RichTextI
        credit*: RichTextI

    pageListItemText* = ref object of PageListItemI
        text*: RichTextI

    pageListItemBlocks* = ref object of PageListItemI
        blocks*: seq[PageBlockI]

    pageListOrderedItemText* = ref object of PageListOrderedItemI
        num*: string
        text*: RichTextI

    pageListOrderedItemBlocks* = ref object of PageListOrderedItemI
        num*: string
        blocks*: seq[PageBlockI]

    pageRelatedArticle* = ref object of PageRelatedArticleI
        flags*: int32
        url*: string
        webpage_id*: int64
        title*: Option[string]
        description*: Option[string]
        photo_id*: Option[int64]
        author*: Option[string]
        published_date*: Option[int32]

    page* = ref object of PageI
        flags*: int32
        part*: bool
        rtl*: bool
        v2*: bool
        url*: string
        blocks*: seq[PageBlockI]
        photos*: seq[PhotoI]
        documents*: seq[DocumentI]
        views*: Option[int32]

    help_supportName* = ref object of help_SupportNameI
        name*: string

    help_userInfoEmpty* = ref object of help_UserInfoI

    help_userInfo* = ref object of help_UserInfoI
        message*: string
        entities*: seq[MessageEntityI]
        author*: string
        date*: int32

    pollAnswer* = ref object of PollAnswerI
        text*: string
        option*: seq[uint8]

    poll* = ref object of PollI
        id*: int64
        flags*: int32
        closed*: bool
        public_voters*: bool
        multiple_choice*: bool
        quiz*: bool
        question*: string
        answers*: seq[PollAnswerI]
        close_period*: Option[int32]
        close_date*: Option[int32]

    pollAnswerVoters* = ref object of PollAnswerVotersI
        flags*: int32
        chosen*: bool
        correct*: bool
        option*: seq[uint8]
        voters*: int32

    pollResults* = ref object of PollResultsI
        flags*: int32
        min*: bool
        results*: Option[seq[PollAnswerVotersI]]
        total_voters*: Option[int32]
        recent_voters*: Option[seq[int32]]
        solution*: Option[string]
        solution_entities*: Option[seq[MessageEntityI]]

    chatOnlines* = ref object of ChatOnlinesI
        onlines*: int32

    statsURL* = ref object of StatsURLI
        url*: string

    chatAdminRights* = ref object of ChatAdminRightsI
        flags*: int32
        change_info*: bool
        post_messages*: bool
        edit_messages*: bool
        delete_messages*: bool
        ban_users*: bool
        invite_users*: bool
        pin_messages*: bool
        add_admins*: bool
        anonymous*: bool

    chatBannedRights* = ref object of ChatBannedRightsI
        flags*: int32
        view_messages*: bool
        send_messages*: bool
        send_media*: bool
        send_stickers*: bool
        send_gifs*: bool
        send_games*: bool
        send_inline*: bool
        embed_links*: bool
        send_polls*: bool
        change_info*: bool
        invite_users*: bool
        pin_messages*: bool
        until_date*: int32

    inputWallPaper* = ref object of InputWallPaperI
        id*: int64
        access_hash*: int64

    inputWallPaperSlug* = ref object of InputWallPaperI
        slug*: string

    inputWallPaperNoFile* = ref object of InputWallPaperI

    account_wallPapersNotModified* = ref object of account_WallPapersI

    account_wallPapers* = ref object of account_WallPapersI
        hash*: int32
        wallpapers*: seq[WallPaperI]

    codeSettings* = ref object of CodeSettingsI
        flags*: int32
        allow_flashcall*: bool
        current_number*: bool
        allow_app_hash*: bool

    wallPaperSettings* = ref object of WallPaperSettingsI
        flags*: int32
        blur*: bool
        motion*: bool
        background_color*: Option[int32]
        second_background_color*: Option[int32]
        intensity*: Option[int32]
        rotation*: Option[int32]

    autoDownloadSettings* = ref object of AutoDownloadSettingsI
        flags*: int32
        disabled*: bool
        video_preload_large*: bool
        audio_preload_next*: bool
        phonecalls_less_data*: bool
        photo_size_max*: int32
        video_size_max*: int32
        file_size_max*: int32
        video_upload_maxbitrate*: int32

    account_autoDownloadSettings* = ref object of account_AutoDownloadSettingsI
        low*: AutoDownloadSettingsI
        medium*: AutoDownloadSettingsI
        high*: AutoDownloadSettingsI

    emojiKeyword* = ref object of EmojiKeywordI
        keyword*: string
        emoticons*: seq[string]

    emojiKeywordDeleted* = ref object of EmojiKeywordI
        keyword*: string
        emoticons*: seq[string]

    emojiKeywordsDifference* = ref object of EmojiKeywordsDifferenceI
        lang_code*: string
        from_version*: int32
        version*: int32
        keywords*: seq[EmojiKeywordI]

    emojiURL* = ref object of EmojiURLI
        url*: string

    emojiLanguage* = ref object of EmojiLanguageI
        lang_code*: string

    fileLocationToBeDeprecated* = ref object of FileLocationI
        volume_id*: int64
        local_id*: int32

    folder* = ref object of FolderI
        flags*: int32
        autofill_new_broadcasts*: bool
        autofill_public_groups*: bool
        autofill_new_correspondents*: bool
        id*: int32
        title*: string
        photo*: Option[ChatPhotoI]

    inputFolderPeer* = ref object of InputFolderPeerI
        peer*: InputPeerI
        folder_id*: int32

    folderPeer* = ref object of FolderPeerI
        peer*: PeerI
        folder_id*: int32

    messages_searchCounter* = ref object of messages_SearchCounterI
        flags*: int32
        inexact*: bool
        filter*: MessagesFilterI
        count*: int32

    urlAuthResultRequest* = ref object of UrlAuthResultI
        flags*: int32
        request_write_access*: bool
        bot*: UserI
        domain*: string

    urlAuthResultAccepted* = ref object of UrlAuthResultI
        url*: string

    urlAuthResultDefault* = ref object of UrlAuthResultI

    channelLocationEmpty* = ref object of ChannelLocationI

    channelLocation* = ref object of ChannelLocationI
        geo_point*: GeoPointI
        address*: string

    peerLocated* = ref object of PeerLocatedI
        peer*: PeerI
        expires*: int32
        distance*: int32

    peerSelfLocated* = ref object of PeerLocatedI
        expires*: int32

    restrictionReason* = ref object of RestrictionReasonI
        platform*: string
        reason*: string
        text*: string

    inputTheme* = ref object of InputThemeI
        id*: int64
        access_hash*: int64

    inputThemeSlug* = ref object of InputThemeI
        slug*: string

    theme* = ref object of ThemeI
        flags*: int32
        creator*: bool
        default*: bool
        id*: int64
        access_hash*: int64
        slug*: string
        title*: string
        document*: Option[DocumentI]
        settings*: Option[ThemeSettingsI]
        installs_count*: int32

    account_themesNotModified* = ref object of account_ThemesI

    account_themes* = ref object of account_ThemesI
        hash*: int32
        themes*: seq[ThemeI]

    auth_loginToken* = ref object of auth_LoginTokenI
        expires*: int32
        token*: seq[uint8]

    auth_loginTokenMigrateTo* = ref object of auth_LoginTokenI
        dc_id*: int32
        token*: seq[uint8]

    auth_loginTokenSuccess* = ref object of auth_LoginTokenI
        authorization*: auth_AuthorizationI

    account_contentSettings* = ref object of account_ContentSettingsI
        flags*: int32
        sensitive_enabled*: bool
        sensitive_can_change*: bool

    messages_inactiveChats* = ref object of messages_InactiveChatsI
        dates*: seq[int32]
        chats*: seq[ChatI]
        users*: seq[UserI]

    baseThemeClassic* = ref object of BaseThemeI

    baseThemeDay* = ref object of BaseThemeI

    baseThemeNight* = ref object of BaseThemeI

    baseThemeTinted* = ref object of BaseThemeI

    baseThemeArctic* = ref object of BaseThemeI

    inputThemeSettings* = ref object of InputThemeSettingsI
        flags*: int32
        base_theme*: BaseThemeI
        accent_color*: int32
        message_top_color*: Option[int32]
        message_bottom_color*: Option[int32]
        wallpaper*: Option[InputWallPaperI]
        wallpaper_settings*: Option[WallPaperSettingsI]

    themeSettings* = ref object of ThemeSettingsI
        flags*: int32
        base_theme*: BaseThemeI
        accent_color*: int32
        message_top_color*: Option[int32]
        message_bottom_color*: Option[int32]
        wallpaper*: Option[WallPaperI]

    webPageAttributeTheme* = ref object of WebPageAttributeI
        flags*: int32
        documents*: Option[seq[DocumentI]]
        settings*: Option[ThemeSettingsI]

    messageUserVote* = ref object of MessageUserVoteI
        user_id*: int32
        option*: seq[uint8]
        date*: int32

    messageUserVoteInputOption* = ref object of MessageUserVoteI
        user_id*: int32
        date*: int32

    messageUserVoteMultiple* = ref object of MessageUserVoteI
        user_id*: int32
        options*: seq[seq[uint8]]
        date*: int32

    messages_votesList* = ref object of messages_VotesListI
        flags*: int32
        count*: int32
        votes*: seq[MessageUserVoteI]
        users*: seq[UserI]
        next_offset*: Option[string]

    bankCardOpenUrl* = ref object of BankCardOpenUrlI
        url*: string
        name*: string

    payments_bankCardData* = ref object of payments_BankCardDataI
        title*: string
        open_urls*: seq[BankCardOpenUrlI]

    dialogFilter* = ref object of DialogFilterI
        flags*: int32
        contacts*: bool
        non_contacts*: bool
        groups*: bool
        broadcasts*: bool
        bots*: bool
        exclude_muted*: bool
        exclude_read*: bool
        exclude_archived*: bool
        id*: int32
        title*: string
        emoticon*: Option[string]
        pinned_peers*: seq[InputPeerI]
        include_peers*: seq[InputPeerI]
        exclude_peers*: seq[InputPeerI]

    dialogFilterSuggested* = ref object of DialogFilterSuggestedI
        filter*: DialogFilterI
        description*: string

    statsDateRangeDays* = ref object of StatsDateRangeDaysI
        min_date*: int32
        max_date*: int32

    statsAbsValueAndPrev* = ref object of StatsAbsValueAndPrevI
        current*: float64
        previous*: float64

    statsPercentValue* = ref object of StatsPercentValueI
        part*: float64
        total*: float64

    statsGraphAsync* = ref object of StatsGraphI
        token*: string

    statsGraphError* = ref object of StatsGraphI
        error*: string

    statsGraph* = ref object of StatsGraphI
        flags*: int32
        json*: DataJSONI
        zoom_token*: Option[string]

    messageInteractionCounters* = ref object of MessageInteractionCountersI
        msg_id*: int32
        views*: int32
        forwards*: int32

    stats_broadcastStats* = ref object of stats_BroadcastStatsI
        period*: StatsDateRangeDaysI
        followers*: StatsAbsValueAndPrevI
        views_per_post*: StatsAbsValueAndPrevI
        shares_per_post*: StatsAbsValueAndPrevI
        enabled_notifications*: StatsPercentValueI
        growth_graph*: StatsGraphI
        followers_graph*: StatsGraphI
        mute_graph*: StatsGraphI
        top_hours_graph*: StatsGraphI
        interactions_graph*: StatsGraphI
        iv_interactions_graph*: StatsGraphI
        views_by_source_graph*: StatsGraphI
        new_followers_by_source_graph*: StatsGraphI
        languages_graph*: StatsGraphI
        recent_message_interactions*: seq[MessageInteractionCountersI]

    help_promoDataEmpty* = ref object of help_PromoDataI
        expires*: int32

    help_promoData* = ref object of help_PromoDataI
        flags*: int32
        proxy*: bool
        expires*: int32
        peer*: PeerI
        chats*: seq[ChatI]
        users*: seq[UserI]
        psa_type*: Option[string]
        psa_message*: Option[string]

    videoSize* = ref object of VideoSizeI
        flags*: int32
        typeof*: string
        location*: FileLocationI
        w*: int32
        h*: int32
        size*: int32
        video_start_ts*: Option[float64]

    statsGroupTopPoster* = ref object of StatsGroupTopPosterI
        user_id*: int32
        messages*: int32
        avg_chars*: int32

    statsGroupTopAdmin* = ref object of StatsGroupTopAdminI
        user_id*: int32
        deleted*: int32
        kicked*: int32
        banned*: int32

    statsGroupTopInviter* = ref object of StatsGroupTopInviterI
        user_id*: int32
        invitations*: int32

    stats_megagroupStats* = ref object of stats_MegagroupStatsI
        period*: StatsDateRangeDaysI
        members*: StatsAbsValueAndPrevI
        messages*: StatsAbsValueAndPrevI
        viewers*: StatsAbsValueAndPrevI
        posters*: StatsAbsValueAndPrevI
        growth_graph*: StatsGraphI
        members_graph*: StatsGraphI
        new_members_by_source_graph*: StatsGraphI
        languages_graph*: StatsGraphI
        messages_graph*: StatsGraphI
        actions_graph*: StatsGraphI
        top_hours_graph*: StatsGraphI
        weekdays_graph*: StatsGraphI
        top_posters*: seq[StatsGroupTopPosterI]
        top_admins*: seq[StatsGroupTopAdminI]
        top_inviters*: seq[StatsGroupTopInviterI]
        users*: seq[UserI]

    globalPrivacySettings* = ref object of GlobalPrivacySettingsI
        flags*: int32
        archive_and_mute_new_noncontact_peers*: Option[bool]

    help_countryCode* = ref object of help_CountryCodeI
        flags*: int32
        country_code*: string
        prefixes*: Option[seq[string]]
        patterns*: Option[seq[string]]

    help_country* = ref object of help_CountryI
        flags*: int32
        hidden*: bool
        iso2*: string
        default_name*: string
        name*: Option[string]
        country_codes*: seq[help_CountryCodeI]

    help_countriesListNotModified* = ref object of help_CountriesListI

    help_countriesList* = ref object of help_CountriesListI
        countries*: seq[help_CountryI]
        hash*: int32

    messageViews* = ref object of MessageViewsI
        flags*: int32
        views*: Option[int32]
        forwards*: Option[int32]
        replies*: Option[MessageRepliesI]

    messages_messageViews* = ref object of messages_MessageViewsI
        views*: seq[MessageViewsI]
        chats*: seq[ChatI]
        users*: seq[UserI]

    messages_discussionMessage* = ref object of messages_DiscussionMessageI
        flags*: int32
        messages*: seq[MessageI]
        max_id*: Option[int32]
        read_inbox_max_id*: Option[int32]
        read_outbox_max_id*: Option[int32]
        chats*: seq[ChatI]
        users*: seq[UserI]

    messageReplyHeader* = ref object of MessageReplyHeaderI
        flags*: int32
        reply_to_msg_id*: int32
        reply_to_peer_id*: Option[PeerI]
        reply_to_top_id*: Option[int32]

    messageReplies* = ref object of MessageRepliesI
        flags*: int32
        comments*: bool
        replies*: int32
        replies_pts*: int32
        recent_repliers*: Option[seq[PeerI]]
        channel_id*: Option[int32]
        max_id*: Option[int32]
        read_max_id*: Option[int32]

    peerBlocked* = ref object of PeerBlockedI
        peer_id*: PeerI
        date*: int32

    stats_messageStats* = ref object of stats_MessageStatsI
        views_graph*: StatsGraphI




proc TLDecode*(self: var ScalingSeq[uint8], obj: help_promoDataEmpty)

proc TLEncodeType*(obj: help_promoDataEmpty): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: help_promoData)

proc TLEncodeType*(obj: help_promoData): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: stats_megagroupStats)

proc TLEncodeType*(obj: stats_megagroupStats): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: privacyKeyStatusTimestamp)

proc TLEncodeType*(obj: privacyKeyStatusTimestamp): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: privacyKeyChatInvite)

proc TLEncodeType*(obj: privacyKeyChatInvite): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: privacyKeyPhoneCall)

proc TLEncodeType*(obj: privacyKeyPhoneCall): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: privacyKeyPhoneP2P)

proc TLEncodeType*(obj: privacyKeyPhoneP2P): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: privacyKeyForwards)

proc TLEncodeType*(obj: privacyKeyForwards): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: privacyKeyProfilePhoto)

proc TLEncodeType*(obj: privacyKeyProfilePhoto): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: privacyKeyPhoneNumber)

proc TLEncodeType*(obj: privacyKeyPhoneNumber): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: privacyKeyAddedByPhone)

proc TLEncodeType*(obj: privacyKeyAddedByPhone): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: help_countryCode)

proc TLEncodeType*(obj: help_countryCode): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: webAuthorization)

proc TLEncodeType*(obj: webAuthorization): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: poll)

proc TLEncodeType*(obj: poll): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: dialogPeer)

proc TLEncodeType*(obj: dialogPeer): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: dialogPeerFolder)

proc TLEncodeType*(obj: dialogPeerFolder): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: topPeerCategoryBotsPM)

proc TLEncodeType*(obj: topPeerCategoryBotsPM): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: topPeerCategoryBotsInline)

proc TLEncodeType*(obj: topPeerCategoryBotsInline): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: topPeerCategoryCorrespondents)

proc TLEncodeType*(obj: topPeerCategoryCorrespondents): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: topPeerCategoryGroups)

proc TLEncodeType*(obj: topPeerCategoryGroups): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: topPeerCategoryChannels)

proc TLEncodeType*(obj: topPeerCategoryChannels): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: topPeerCategoryPhoneCalls)

proc TLEncodeType*(obj: topPeerCategoryPhoneCalls): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: topPeerCategoryForwardUsers)

proc TLEncodeType*(obj: topPeerCategoryForwardUsers): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: topPeerCategoryForwardChats)

proc TLEncodeType*(obj: topPeerCategoryForwardChats): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: help_supportName)

proc TLEncodeType*(obj: help_supportName): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: photoSizeEmpty)

proc TLEncodeType*(obj: photoSizeEmpty): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: photoSize)

proc TLEncodeType*(obj: photoSize): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: photoCachedSize)

proc TLEncodeType*(obj: photoCachedSize): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: photoStrippedSize)

proc TLEncodeType*(obj: photoStrippedSize): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: photoSizeProgressive)

proc TLEncodeType*(obj: photoSizeProgressive): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: jsonNull)

proc TLEncodeType*(obj: jsonNull): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: jsonBool)

proc TLEncodeType*(obj: jsonBool): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: jsonNumber)

proc TLEncodeType*(obj: jsonNumber): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: jsonString)

proc TLEncodeType*(obj: jsonString): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: jsonArray)

proc TLEncodeType*(obj: jsonArray): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: jsonObject)

proc TLEncodeType*(obj: jsonObject): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_archivedStickers)

proc TLEncodeType*(obj: messages_archivedStickers): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: baseThemeClassic)

proc TLEncodeType*(obj: baseThemeClassic): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: baseThemeDay)

proc TLEncodeType*(obj: baseThemeDay): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: baseThemeNight)

proc TLEncodeType*(obj: baseThemeNight): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: baseThemeTinted)

proc TLEncodeType*(obj: baseThemeTinted): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: baseThemeArctic)

proc TLEncodeType*(obj: baseThemeArctic): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: dialogFilter)

proc TLEncodeType*(obj: dialogFilter): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageEntityUnknown)

proc TLEncodeType*(obj: messageEntityUnknown): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageEntityMention)

proc TLEncodeType*(obj: messageEntityMention): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageEntityHashtag)

proc TLEncodeType*(obj: messageEntityHashtag): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageEntityBotCommand)

proc TLEncodeType*(obj: messageEntityBotCommand): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageEntityUrl)

proc TLEncodeType*(obj: messageEntityUrl): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageEntityEmail)

proc TLEncodeType*(obj: messageEntityEmail): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageEntityBold)

proc TLEncodeType*(obj: messageEntityBold): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageEntityItalic)

proc TLEncodeType*(obj: messageEntityItalic): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageEntityCode)

proc TLEncodeType*(obj: messageEntityCode): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageEntityPre)

proc TLEncodeType*(obj: messageEntityPre): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageEntityTextUrl)

proc TLEncodeType*(obj: messageEntityTextUrl): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageEntityMentionName)

proc TLEncodeType*(obj: messageEntityMentionName): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMessageEntityMentionName)

proc TLEncodeType*(obj: inputMessageEntityMentionName): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageEntityPhone)

proc TLEncodeType*(obj: messageEntityPhone): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageEntityCashtag)

proc TLEncodeType*(obj: messageEntityCashtag): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageEntityUnderline)

proc TLEncodeType*(obj: messageEntityUnderline): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageEntityStrike)

proc TLEncodeType*(obj: messageEntityStrike): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageEntityBlockquote)

proc TLEncodeType*(obj: messageEntityBlockquote): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageEntityBankCard)

proc TLEncodeType*(obj: messageEntityBankCard): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: theme)

proc TLEncodeType*(obj: theme): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: dialogFilterSuggested)

proc TLEncodeType*(obj: dialogFilterSuggested): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: stats_messageStats)

proc TLEncodeType*(obj: stats_messageStats): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: payments_paymentResult)

proc TLEncodeType*(obj: payments_paymentResult): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: payments_paymentVerificationNeeded)

proc TLEncodeType*(obj: payments_paymentVerificationNeeded): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: stickerPack)

proc TLEncodeType*(obj: stickerPack): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: account_passwordSettings)

proc TLEncodeType*(obj: account_passwordSettings): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: cdnConfig)

proc TLEncodeType*(obj: cdnConfig): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputCheckPasswordEmpty)

proc TLEncodeType*(obj: inputCheckPasswordEmpty): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputCheckPasswordSRP)

proc TLEncodeType*(obj: inputCheckPasswordSRP): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: pollAnswerVoters)

proc TLEncodeType*(obj: pollAnswerVoters): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: secureData)

proc TLEncodeType*(obj: secureData): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageTableRow)

proc TLEncodeType*(obj: pageTableRow): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: phone_phoneCall)

proc TLEncodeType*(obj: phone_phoneCall): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: chatOnlines)

proc TLEncodeType*(obj: chatOnlines): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: securePlainPhone)

proc TLEncodeType*(obj: securePlainPhone): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: securePlainEmail)

proc TLEncodeType*(obj: securePlainEmail): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputChatPhotoEmpty)

proc TLEncodeType*(obj: inputChatPhotoEmpty): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputChatUploadedPhoto)

proc TLEncodeType*(obj: inputChatUploadedPhoto): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputChatPhoto)

proc TLEncodeType*(obj: inputChatPhoto): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: secureSecretSettings)

proc TLEncodeType*(obj: secureSecretSettings): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: emojiKeywordsDifference)

proc TLEncodeType*(obj: emojiKeywordsDifference): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: photos_photos)

proc TLEncodeType*(obj: photos_photos): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: photos_photosSlice)

proc TLEncodeType*(obj: photos_photosSlice): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelParticipantsRecent)

proc TLEncodeType*(obj: channelParticipantsRecent): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelParticipantsAdmins)

proc TLEncodeType*(obj: channelParticipantsAdmins): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelParticipantsKicked)

proc TLEncodeType*(obj: channelParticipantsKicked): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelParticipantsBots)

proc TLEncodeType*(obj: channelParticipantsBots): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelParticipantsBanned)

proc TLEncodeType*(obj: channelParticipantsBanned): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelParticipantsSearch)

proc TLEncodeType*(obj: channelParticipantsSearch): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelParticipantsContacts)

proc TLEncodeType*(obj: channelParticipantsContacts): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelParticipantsMentions)

proc TLEncodeType*(obj: channelParticipantsMentions): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: statsGroupTopAdmin)

proc TLEncodeType*(obj: statsGroupTopAdmin): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputBotInlineMessageID)

proc TLEncodeType*(obj: inputBotInlineMessageID): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPhotoEmpty)

proc TLEncodeType*(obj: inputPhotoEmpty): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPhoto)

proc TLEncodeType*(obj: inputPhoto): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: channels_channelParticipant)

proc TLEncodeType*(obj: channels_channelParticipant): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: photos_photo)

proc TLEncodeType*(obj: photos_photo): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: encryptedMessage)

proc TLEncodeType*(obj: encryptedMessage): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: encryptedMessageService)

proc TLEncodeType*(obj: encryptedMessageService): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: documentAttributeImageSize)

proc TLEncodeType*(obj: documentAttributeImageSize): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: documentAttributeAnimated)

proc TLEncodeType*(obj: documentAttributeAnimated): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: documentAttributeSticker)

proc TLEncodeType*(obj: documentAttributeSticker): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: documentAttributeVideo)

proc TLEncodeType*(obj: documentAttributeVideo): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: documentAttributeAudio)

proc TLEncodeType*(obj: documentAttributeAudio): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: documentAttributeFilename)

proc TLEncodeType*(obj: documentAttributeFilename): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: documentAttributeHasStickers)

proc TLEncodeType*(obj: documentAttributeHasStickers): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputEncryptedChat)

proc TLEncodeType*(obj: inputEncryptedChat): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_featuredStickersNotModified)

proc TLEncodeType*(obj: messages_featuredStickersNotModified): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_featuredStickers)

proc TLEncodeType*(obj: messages_featuredStickers): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: payments_savedInfo)

proc TLEncodeType*(obj: payments_savedInfo): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: phoneCallProtocol)

proc TLEncodeType*(obj: phoneCallProtocol): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelAdminLogEvent)

proc TLEncodeType*(obj: channelAdminLogEvent): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: keyboardButton)

proc TLEncodeType*(obj: keyboardButton): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: keyboardButtonUrl)

proc TLEncodeType*(obj: keyboardButtonUrl): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: keyboardButtonCallback)

proc TLEncodeType*(obj: keyboardButtonCallback): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: keyboardButtonRequestPhone)

proc TLEncodeType*(obj: keyboardButtonRequestPhone): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: keyboardButtonRequestGeoLocation)

proc TLEncodeType*(obj: keyboardButtonRequestGeoLocation): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: keyboardButtonSwitchInline)

proc TLEncodeType*(obj: keyboardButtonSwitchInline): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: keyboardButtonGame)

proc TLEncodeType*(obj: keyboardButtonGame): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: keyboardButtonBuy)

proc TLEncodeType*(obj: keyboardButtonBuy): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: keyboardButtonUrlAuth)

proc TLEncodeType*(obj: keyboardButtonUrlAuth): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputKeyboardButtonUrlAuth)

proc TLEncodeType*(obj: inputKeyboardButtonUrlAuth): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: keyboardButtonRequestPoll)

proc TLEncodeType*(obj: keyboardButtonRequestPoll): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: textEmpty)

proc TLEncodeType*(obj: textEmpty): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: textPlain)

proc TLEncodeType*(obj: textPlain): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: textBold)

proc TLEncodeType*(obj: textBold): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: textItalic)

proc TLEncodeType*(obj: textItalic): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: textUnderline)

proc TLEncodeType*(obj: textUnderline): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: textStrike)

proc TLEncodeType*(obj: textStrike): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: textFixed)

proc TLEncodeType*(obj: textFixed): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: textUrl)

proc TLEncodeType*(obj: textUrl): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: textEmail)

proc TLEncodeType*(obj: textEmail): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: textConcat)

proc TLEncodeType*(obj: textConcat): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: textSubscript)

proc TLEncodeType*(obj: textSubscript): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: textSuperscript)

proc TLEncodeType*(obj: textSuperscript): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: textMarked)

proc TLEncodeType*(obj: textMarked): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: textPhone)

proc TLEncodeType*(obj: textPhone): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: textImage)

proc TLEncodeType*(obj: textImage): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: textAnchor)

proc TLEncodeType*(obj: textAnchor): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMessageID)

proc TLEncodeType*(obj: inputMessageID): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMessageReplyTo)

proc TLEncodeType*(obj: inputMessageReplyTo): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMessagePinned)

proc TLEncodeType*(obj: inputMessagePinned): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputWebFileLocation)

proc TLEncodeType*(obj: inputWebFileLocation): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputWebFileGeoPointLocation)

proc TLEncodeType*(obj: inputWebFileGeoPointLocation): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_allStickersNotModified)

proc TLEncodeType*(obj: messages_allStickersNotModified): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_allStickers)

proc TLEncodeType*(obj: messages_allStickers): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: fileHash)

proc TLEncodeType*(obj: fileHash): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: chatInviteAlready)

proc TLEncodeType*(obj: chatInviteAlready): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: chatInvite)

proc TLEncodeType*(obj: chatInvite): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: chatInvitePeek)

proc TLEncodeType*(obj: chatInvitePeek): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_botResults)

proc TLEncodeType*(obj: messages_botResults): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputWebDocument)

proc TLEncodeType*(obj: inputWebDocument): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageListItemText)

proc TLEncodeType*(obj: pageListItemText): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageListItemBlocks)

proc TLEncodeType*(obj: pageListItemBlocks): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageRelatedArticle)

proc TLEncodeType*(obj: pageRelatedArticle): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: help_inviteText)

proc TLEncodeType*(obj: help_inviteText): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_savedGifsNotModified)

proc TLEncodeType*(obj: messages_savedGifsNotModified): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_savedGifs)

proc TLEncodeType*(obj: messages_savedGifs): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: userStatusEmpty)

proc TLEncodeType*(obj: userStatusEmpty): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: userStatusOnline)

proc TLEncodeType*(obj: userStatusOnline): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: userStatusOffline)

proc TLEncodeType*(obj: userStatusOffline): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: userStatusRecently)

proc TLEncodeType*(obj: userStatusRecently): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: userStatusLastWeek)

proc TLEncodeType*(obj: userStatusLastWeek): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: userStatusLastMonth)

proc TLEncodeType*(obj: userStatusLastMonth): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: contact)

proc TLEncodeType*(obj: contact): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputSecureFileUploaded)

proc TLEncodeType*(obj: inputSecureFileUploaded): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputSecureFile)

proc TLEncodeType*(obj: inputSecureFile): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: auth_passwordRecovery)

proc TLEncodeType*(obj: auth_passwordRecovery): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: account_wallPapersNotModified)

proc TLEncodeType*(obj: account_wallPapersNotModified): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: account_wallPapers)

proc TLEncodeType*(obj: account_wallPapers): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: statsDateRangeDays)

proc TLEncodeType*(obj: statsDateRangeDays): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_messages)

proc TLEncodeType*(obj: messages_messages): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_messagesSlice)

proc TLEncodeType*(obj: messages_messagesSlice): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_channelMessages)

proc TLEncodeType*(obj: messages_channelMessages): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_messagesNotModified)

proc TLEncodeType*(obj: messages_messagesNotModified): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: videoSize)

proc TLEncodeType*(obj: videoSize): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_botCallbackAnswer)

proc TLEncodeType*(obj: messages_botCallbackAnswer): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: auth_codeTypeSms)

proc TLEncodeType*(obj: auth_codeTypeSms): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: auth_codeTypeCall)

proc TLEncodeType*(obj: auth_codeTypeCall): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: auth_codeTypeFlashCall)

proc TLEncodeType*(obj: auth_codeTypeFlashCall): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputSecureValue)

proc TLEncodeType*(obj: inputSecureValue): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: config)

proc TLEncodeType*(obj: config): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputWallPaper)

proc TLEncodeType*(obj: inputWallPaper): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputWallPaperSlug)

proc TLEncodeType*(obj: inputWallPaperSlug): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputWallPaperNoFile)

proc TLEncodeType*(obj: inputWallPaperNoFile): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: upload_file)

proc TLEncodeType*(obj: upload_file): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: upload_fileCdnRedirect)

proc TLEncodeType*(obj: upload_fileCdnRedirect): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: securePasswordKdfAlgoUnknown)

proc TLEncodeType*(obj: securePasswordKdfAlgoUnknown): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: securePasswordKdfAlgoPBKDF2HMACSHA512iter100000)

proc TLEncodeType*(obj: securePasswordKdfAlgoPBKDF2HMACSHA512iter100000): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: securePasswordKdfAlgoSHA512)

proc TLEncodeType*(obj: securePasswordKdfAlgoSHA512): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageUserVote)

proc TLEncodeType*(obj: messageUserVote): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageUserVoteInputOption)

proc TLEncodeType*(obj: messageUserVoteInputOption): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageUserVoteMultiple)

proc TLEncodeType*(obj: messageUserVoteMultiple): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_favedStickersNotModified)

proc TLEncodeType*(obj: messages_favedStickersNotModified): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_favedStickers)

proc TLEncodeType*(obj: messages_favedStickers): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: secureRequiredType)

proc TLEncodeType*(obj: secureRequiredType): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: secureRequiredTypeOneOf)

proc TLEncodeType*(obj: secureRequiredTypeOneOf): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: statsGroupTopPoster)

proc TLEncodeType*(obj: statsGroupTopPoster): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: botCommand)

proc TLEncodeType*(obj: botCommand): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_foundStickerSetsNotModified)

proc TLEncodeType*(obj: messages_foundStickerSetsNotModified): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_foundStickerSets)

proc TLEncodeType*(obj: messages_foundStickerSets): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: secureCredentialsEncrypted)

proc TLEncodeType*(obj: secureCredentialsEncrypted): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: channels_channelParticipants)

proc TLEncodeType*(obj: channels_channelParticipants): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: channels_channelParticipantsNotModified)

proc TLEncodeType*(obj: channels_channelParticipantsNotModified): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: photoEmpty)

proc TLEncodeType*(obj: photoEmpty): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: photo)

proc TLEncodeType*(obj: photo): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: chatParticipant)

proc TLEncodeType*(obj: chatParticipant): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: chatParticipantCreator)

proc TLEncodeType*(obj: chatParticipantCreator): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: chatParticipantAdmin)

proc TLEncodeType*(obj: chatParticipantAdmin): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: jsonObjectValue)

proc TLEncodeType*(obj: jsonObjectValue): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_stickerSet)

proc TLEncodeType*(obj: messages_stickerSet): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: secureValueErrorData)

proc TLEncodeType*(obj: secureValueErrorData): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: secureValueErrorFrontSide)

proc TLEncodeType*(obj: secureValueErrorFrontSide): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: secureValueErrorReverseSide)

proc TLEncodeType*(obj: secureValueErrorReverseSide): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: secureValueErrorSelfie)

proc TLEncodeType*(obj: secureValueErrorSelfie): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: secureValueErrorFile)

proc TLEncodeType*(obj: secureValueErrorFile): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: secureValueErrorFiles)

proc TLEncodeType*(obj: secureValueErrorFiles): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: secureValueError)

proc TLEncodeType*(obj: secureValueError): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: secureValueErrorTranslationFile)

proc TLEncodeType*(obj: secureValueErrorTranslationFile): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: secureValueErrorTranslationFiles)

proc TLEncodeType*(obj: secureValueErrorTranslationFiles): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: help_userInfoEmpty)

proc TLEncodeType*(obj: help_userInfoEmpty): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: help_userInfo)

proc TLEncodeType*(obj: help_userInfo): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: bankCardOpenUrl)

proc TLEncodeType*(obj: bankCardOpenUrl): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: help_passportConfigNotModified)

proc TLEncodeType*(obj: help_passportConfigNotModified): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: help_passportConfig)

proc TLEncodeType*(obj: help_passportConfig): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: chatAdminRights)

proc TLEncodeType*(obj: chatAdminRights): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: auth_authorization)

proc TLEncodeType*(obj: auth_authorization): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: auth_authorizationSignUpRequired)

proc TLEncodeType*(obj: auth_authorizationSignUpRequired): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_stickerSetInstallResultSuccess)

proc TLEncodeType*(obj: messages_stickerSetInstallResultSuccess): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_stickerSetInstallResultArchive)

proc TLEncodeType*(obj: messages_stickerSetInstallResultArchive): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageViews)

proc TLEncodeType*(obj: messageViews): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputFile)

proc TLEncodeType*(obj: inputFile): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputFileBig)

proc TLEncodeType*(obj: inputFileBig): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updates_state)

proc TLEncodeType*(obj: updates_state): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: encryptedFileEmpty)

proc TLEncodeType*(obj: encryptedFileEmpty): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: encryptedFile)

proc TLEncodeType*(obj: encryptedFile): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updates_channelDifferenceEmpty)

proc TLEncodeType*(obj: updates_channelDifferenceEmpty): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updates_channelDifferenceTooLong)

proc TLEncodeType*(obj: updates_channelDifferenceTooLong): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updates_channelDifference)

proc TLEncodeType*(obj: updates_channelDifference): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: folderPeer)

proc TLEncodeType*(obj: folderPeer): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: account_password)

proc TLEncodeType*(obj: account_password): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: game)

proc TLEncodeType*(obj: game): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: chatParticipantsForbidden)

proc TLEncodeType*(obj: chatParticipantsForbidden): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: chatParticipants)

proc TLEncodeType*(obj: chatParticipants): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: auth_exportedAuthorization)

proc TLEncodeType*(obj: auth_exportedAuthorization): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPhoneCall)

proc TLEncodeType*(obj: inputPhoneCall): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: webPageEmpty)

proc TLEncodeType*(obj: webPageEmpty): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: webPagePending)

proc TLEncodeType*(obj: webPagePending): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: webPage)

proc TLEncodeType*(obj: webPage): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: webPageNotModified)

proc TLEncodeType*(obj: webPageNotModified): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_recentStickersNotModified)

proc TLEncodeType*(obj: messages_recentStickersNotModified): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_recentStickers)

proc TLEncodeType*(obj: messages_recentStickers): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: folder)

proc TLEncodeType*(obj: folder): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputUserEmpty)

proc TLEncodeType*(obj: inputUserEmpty): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputUserSelf)

proc TLEncodeType*(obj: inputUserSelf): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputUser)

proc TLEncodeType*(obj: inputUser): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputUserFromMessage)

proc TLEncodeType*(obj: inputUserFromMessage): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: peerUser)

proc TLEncodeType*(obj: peerUser): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: peerChat)

proc TLEncodeType*(obj: peerChat): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: peerChannel)

proc TLEncodeType*(obj: peerChannel): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageActionEmpty)

proc TLEncodeType*(obj: messageActionEmpty): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageActionChatCreate)

proc TLEncodeType*(obj: messageActionChatCreate): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageActionChatEditTitle)

proc TLEncodeType*(obj: messageActionChatEditTitle): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageActionChatEditPhoto)

proc TLEncodeType*(obj: messageActionChatEditPhoto): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageActionChatDeletePhoto)

proc TLEncodeType*(obj: messageActionChatDeletePhoto): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageActionChatAddUser)

proc TLEncodeType*(obj: messageActionChatAddUser): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageActionChatDeleteUser)

proc TLEncodeType*(obj: messageActionChatDeleteUser): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageActionChatJoinedByLink)

proc TLEncodeType*(obj: messageActionChatJoinedByLink): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageActionChannelCreate)

proc TLEncodeType*(obj: messageActionChannelCreate): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageActionChatMigrateTo)

proc TLEncodeType*(obj: messageActionChatMigrateTo): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageActionChannelMigrateFrom)

proc TLEncodeType*(obj: messageActionChannelMigrateFrom): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageActionPinMessage)

proc TLEncodeType*(obj: messageActionPinMessage): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageActionHistoryClear)

proc TLEncodeType*(obj: messageActionHistoryClear): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageActionGameScore)

proc TLEncodeType*(obj: messageActionGameScore): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageActionPaymentSentMe)

proc TLEncodeType*(obj: messageActionPaymentSentMe): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageActionPaymentSent)

proc TLEncodeType*(obj: messageActionPaymentSent): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageActionPhoneCall)

proc TLEncodeType*(obj: messageActionPhoneCall): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageActionScreenshotTaken)

proc TLEncodeType*(obj: messageActionScreenshotTaken): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageActionCustomAction)

proc TLEncodeType*(obj: messageActionCustomAction): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageActionBotAllowed)

proc TLEncodeType*(obj: messageActionBotAllowed): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageActionSecureValuesSentMe)

proc TLEncodeType*(obj: messageActionSecureValuesSentMe): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageActionSecureValuesSent)

proc TLEncodeType*(obj: messageActionSecureValuesSent): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageActionContactSignUp)

proc TLEncodeType*(obj: messageActionContactSignUp): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageActionGeoProximityReached)

proc TLEncodeType*(obj: messageActionGeoProximityReached): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updates_differenceEmpty)

proc TLEncodeType*(obj: updates_differenceEmpty): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updates_difference)

proc TLEncodeType*(obj: updates_difference): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updates_differenceSlice)

proc TLEncodeType*(obj: updates_differenceSlice): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updates_differenceTooLong)

proc TLEncodeType*(obj: updates_differenceTooLong): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: passwordKdfAlgoUnknown)

proc TLEncodeType*(obj: passwordKdfAlgoUnknown): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow)

proc TLEncodeType*(obj: passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: autoDownloadSettings)

proc TLEncodeType*(obj: autoDownloadSettings): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: urlAuthResultRequest)

proc TLEncodeType*(obj: urlAuthResultRequest): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: urlAuthResultAccepted)

proc TLEncodeType*(obj: urlAuthResultAccepted): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: urlAuthResultDefault)

proc TLEncodeType*(obj: urlAuthResultDefault): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: page)

proc TLEncodeType*(obj: page): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: highScore)

proc TLEncodeType*(obj: highScore): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputClientProxy)

proc TLEncodeType*(obj: inputClientProxy): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: receivedNotifyMessage)

proc TLEncodeType*(obj: receivedNotifyMessage): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputGameID)

proc TLEncodeType*(obj: inputGameID): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputGameShortName)

proc TLEncodeType*(obj: inputGameShortName): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: payments_paymentReceipt)

proc TLEncodeType*(obj: payments_paymentReceipt): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: topPeer)

proc TLEncodeType*(obj: topPeer): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelAdminLogEventActionChangeTitle)

proc TLEncodeType*(obj: channelAdminLogEventActionChangeTitle): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelAdminLogEventActionChangeAbout)

proc TLEncodeType*(obj: channelAdminLogEventActionChangeAbout): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelAdminLogEventActionChangeUsername)

proc TLEncodeType*(obj: channelAdminLogEventActionChangeUsername): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelAdminLogEventActionChangePhoto)

proc TLEncodeType*(obj: channelAdminLogEventActionChangePhoto): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelAdminLogEventActionToggleInvites)

proc TLEncodeType*(obj: channelAdminLogEventActionToggleInvites): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelAdminLogEventActionToggleSignatures)

proc TLEncodeType*(obj: channelAdminLogEventActionToggleSignatures): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelAdminLogEventActionUpdatePinned)

proc TLEncodeType*(obj: channelAdminLogEventActionUpdatePinned): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelAdminLogEventActionEditMessage)

proc TLEncodeType*(obj: channelAdminLogEventActionEditMessage): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelAdminLogEventActionDeleteMessage)

proc TLEncodeType*(obj: channelAdminLogEventActionDeleteMessage): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelAdminLogEventActionParticipantJoin)

proc TLEncodeType*(obj: channelAdminLogEventActionParticipantJoin): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelAdminLogEventActionParticipantLeave)

proc TLEncodeType*(obj: channelAdminLogEventActionParticipantLeave): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelAdminLogEventActionParticipantInvite)

proc TLEncodeType*(obj: channelAdminLogEventActionParticipantInvite): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelAdminLogEventActionParticipantToggleBan)

proc TLEncodeType*(obj: channelAdminLogEventActionParticipantToggleBan): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelAdminLogEventActionParticipantToggleAdmin)

proc TLEncodeType*(obj: channelAdminLogEventActionParticipantToggleAdmin): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelAdminLogEventActionChangeStickerSet)

proc TLEncodeType*(obj: channelAdminLogEventActionChangeStickerSet): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelAdminLogEventActionTogglePreHistoryHidden)

proc TLEncodeType*(obj: channelAdminLogEventActionTogglePreHistoryHidden): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelAdminLogEventActionDefaultBannedRights)

proc TLEncodeType*(obj: channelAdminLogEventActionDefaultBannedRights): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelAdminLogEventActionStopPoll)

proc TLEncodeType*(obj: channelAdminLogEventActionStopPoll): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelAdminLogEventActionChangeLinkedChat)

proc TLEncodeType*(obj: channelAdminLogEventActionChangeLinkedChat): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelAdminLogEventActionChangeLocation)

proc TLEncodeType*(obj: channelAdminLogEventActionChangeLocation): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelAdminLogEventActionToggleSlowMode)

proc TLEncodeType*(obj: channelAdminLogEventActionToggleSlowMode): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: userFull)

proc TLEncodeType*(obj: userFull): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: webDocument)

proc TLEncodeType*(obj: webDocument): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: webDocumentNoProxy)

proc TLEncodeType*(obj: webDocumentNoProxy): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: statsAbsValueAndPrev)

proc TLEncodeType*(obj: statsAbsValueAndPrev): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: contacts_importedContacts)

proc TLEncodeType*(obj: contacts_importedContacts): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: emojiLanguage)

proc TLEncodeType*(obj: emojiLanguage): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputReportReasonSpam)

proc TLEncodeType*(obj: inputReportReasonSpam): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputReportReasonViolence)

proc TLEncodeType*(obj: inputReportReasonViolence): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputReportReasonPornography)

proc TLEncodeType*(obj: inputReportReasonPornography): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputReportReasonChildAbuse)

proc TLEncodeType*(obj: inputReportReasonChildAbuse): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputReportReasonOther)

proc TLEncodeType*(obj: inputReportReasonOther): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputReportReasonCopyright)

proc TLEncodeType*(obj: inputReportReasonCopyright): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputReportReasonGeoIrrelevant)

proc TLEncodeType*(obj: inputReportReasonGeoIrrelevant): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: account_passwordInputSettings)

proc TLEncodeType*(obj: account_passwordInputSettings): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelParticipant)

proc TLEncodeType*(obj: channelParticipant): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelParticipantSelf)

proc TLEncodeType*(obj: channelParticipantSelf): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelParticipantCreator)

proc TLEncodeType*(obj: channelParticipantCreator): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelParticipantAdmin)

proc TLEncodeType*(obj: channelParticipantAdmin): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelParticipantBanned)

proc TLEncodeType*(obj: channelParticipantBanned): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelParticipantLeft)

proc TLEncodeType*(obj: channelParticipantLeft): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputStickeredMediaPhoto)

proc TLEncodeType*(obj: inputStickeredMediaPhoto): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputStickeredMediaDocument)

proc TLEncodeType*(obj: inputStickeredMediaDocument): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputChannelEmpty)

proc TLEncodeType*(obj: inputChannelEmpty): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputChannel)

proc TLEncodeType*(obj: inputChannel): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputChannelFromMessage)

proc TLEncodeType*(obj: inputChannelFromMessage): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_searchCounter)

proc TLEncodeType*(obj: messages_searchCounter): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputDocumentEmpty)

proc TLEncodeType*(obj: inputDocumentEmpty): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputDocument)

proc TLEncodeType*(obj: inputDocument): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputEncryptedFileEmpty)

proc TLEncodeType*(obj: inputEncryptedFileEmpty): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputEncryptedFileUploaded)

proc TLEncodeType*(obj: inputEncryptedFileUploaded): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputEncryptedFile)

proc TLEncodeType*(obj: inputEncryptedFile): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputEncryptedFileBigUploaded)

proc TLEncodeType*(obj: inputEncryptedFileBigUploaded): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: account_privacyRules)

proc TLEncodeType*(obj: account_privacyRules): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputThemeSettings)

proc TLEncodeType*(obj: inputThemeSettings): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: payments_validatedRequestedInfo)

proc TLEncodeType*(obj: payments_validatedRequestedInfo): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: account_authorizations)

proc TLEncodeType*(obj: account_authorizations): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPrivacyValueAllowContacts)

proc TLEncodeType*(obj: inputPrivacyValueAllowContacts): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPrivacyValueAllowAll)

proc TLEncodeType*(obj: inputPrivacyValueAllowAll): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPrivacyValueAllowUsers)

proc TLEncodeType*(obj: inputPrivacyValueAllowUsers): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPrivacyValueDisallowContacts)

proc TLEncodeType*(obj: inputPrivacyValueDisallowContacts): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPrivacyValueDisallowAll)

proc TLEncodeType*(obj: inputPrivacyValueDisallowAll): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPrivacyValueDisallowUsers)

proc TLEncodeType*(obj: inputPrivacyValueDisallowUsers): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPrivacyValueAllowChatParticipants)

proc TLEncodeType*(obj: inputPrivacyValueAllowChatParticipants): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPrivacyValueDisallowChatParticipants)

proc TLEncodeType*(obj: inputPrivacyValueDisallowChatParticipants): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: stickerSet)

proc TLEncodeType*(obj: stickerSet): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: pollResults)

proc TLEncodeType*(obj: pollResults): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: secureValue)

proc TLEncodeType*(obj: secureValue): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelAdminLogEventsFilter)

proc TLEncodeType*(obj: channelAdminLogEventsFilter): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: restrictionReason)

proc TLEncodeType*(obj: restrictionReason): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputBotInlineResult)

proc TLEncodeType*(obj: inputBotInlineResult): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputBotInlineResultPhoto)

proc TLEncodeType*(obj: inputBotInlineResultPhoto): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputBotInlineResultDocument)

proc TLEncodeType*(obj: inputBotInlineResultDocument): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputBotInlineResultGame)

proc TLEncodeType*(obj: inputBotInlineResultGame): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: wallPaper)

proc TLEncodeType*(obj: wallPaper): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: wallPaperNoFile)

proc TLEncodeType*(obj: wallPaperNoFile): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: importedContact)

proc TLEncodeType*(obj: importedContact): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: help_termsOfService)

proc TLEncodeType*(obj: help_termsOfService): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: dataJSON)

proc TLEncodeType*(obj: dataJSON): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: shippingOption)

proc TLEncodeType*(obj: shippingOption): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMediaEmpty)

proc TLEncodeType*(obj: inputMediaEmpty): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMediaUploadedPhoto)

proc TLEncodeType*(obj: inputMediaUploadedPhoto): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMediaPhoto)

proc TLEncodeType*(obj: inputMediaPhoto): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMediaGeoPoint)

proc TLEncodeType*(obj: inputMediaGeoPoint): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMediaContact)

proc TLEncodeType*(obj: inputMediaContact): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMediaUploadedDocument)

proc TLEncodeType*(obj: inputMediaUploadedDocument): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMediaDocument)

proc TLEncodeType*(obj: inputMediaDocument): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMediaVenue)

proc TLEncodeType*(obj: inputMediaVenue): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMediaPhotoExternal)

proc TLEncodeType*(obj: inputMediaPhotoExternal): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMediaDocumentExternal)

proc TLEncodeType*(obj: inputMediaDocumentExternal): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMediaGame)

proc TLEncodeType*(obj: inputMediaGame): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMediaInvoice)

proc TLEncodeType*(obj: inputMediaInvoice): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMediaGeoLive)

proc TLEncodeType*(obj: inputMediaGeoLive): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMediaPoll)

proc TLEncodeType*(obj: inputMediaPoll): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMediaDice)

proc TLEncodeType*(obj: inputMediaDice): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: exportedMessageLink)

proc TLEncodeType*(obj: exportedMessageLink): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: paymentCharge)

proc TLEncodeType*(obj: paymentCharge): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputNotifyPeer)

proc TLEncodeType*(obj: inputNotifyPeer): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputNotifyUsers)

proc TLEncodeType*(obj: inputNotifyUsers): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputNotifyChats)

proc TLEncodeType*(obj: inputNotifyChats): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputNotifyBroadcasts)

proc TLEncodeType*(obj: inputNotifyBroadcasts): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputStickerSetEmpty)

proc TLEncodeType*(obj: inputStickerSetEmpty): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputStickerSetID)

proc TLEncodeType*(obj: inputStickerSetID): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputStickerSetShortName)

proc TLEncodeType*(obj: inputStickerSetShortName): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputStickerSetAnimatedEmoji)

proc TLEncodeType*(obj: inputStickerSetAnimatedEmoji): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputStickerSetDice)

proc TLEncodeType*(obj: inputStickerSetDice): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: payments_paymentForm)

proc TLEncodeType*(obj: payments_paymentForm): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: langPackDifference)

proc TLEncodeType*(obj: langPackDifference): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_dialogs)

proc TLEncodeType*(obj: messages_dialogs): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_dialogsSlice)

proc TLEncodeType*(obj: messages_dialogsSlice): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_dialogsNotModified)

proc TLEncodeType*(obj: messages_dialogsNotModified): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageInteractionCounters)

proc TLEncodeType*(obj: messageInteractionCounters): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: auth_sentCodeTypeApp)

proc TLEncodeType*(obj: auth_sentCodeTypeApp): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: auth_sentCodeTypeSms)

proc TLEncodeType*(obj: auth_sentCodeTypeSms): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: auth_sentCodeTypeCall)

proc TLEncodeType*(obj: auth_sentCodeTypeCall): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: auth_sentCodeTypeFlashCall)

proc TLEncodeType*(obj: auth_sentCodeTypeFlashCall): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: peerNotifySettings)

proc TLEncodeType*(obj: peerNotifySettings): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: stickerSetCovered)

proc TLEncodeType*(obj: stickerSetCovered): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: stickerSetMultiCovered)

proc TLEncodeType*(obj: stickerSetMultiCovered): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_discussionMessage)

proc TLEncodeType*(obj: messages_discussionMessage): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateNewMessage)

proc TLEncodeType*(obj: updateNewMessage): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateMessageID)

proc TLEncodeType*(obj: updateMessageID): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateDeleteMessages)

proc TLEncodeType*(obj: updateDeleteMessages): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateUserTyping)

proc TLEncodeType*(obj: updateUserTyping): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateChatUserTyping)

proc TLEncodeType*(obj: updateChatUserTyping): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateChatParticipants)

proc TLEncodeType*(obj: updateChatParticipants): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateUserStatus)

proc TLEncodeType*(obj: updateUserStatus): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateUserName)

proc TLEncodeType*(obj: updateUserName): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateUserPhoto)

proc TLEncodeType*(obj: updateUserPhoto): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateNewEncryptedMessage)

proc TLEncodeType*(obj: updateNewEncryptedMessage): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateEncryptedChatTyping)

proc TLEncodeType*(obj: updateEncryptedChatTyping): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateEncryption)

proc TLEncodeType*(obj: updateEncryption): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateEncryptedMessagesRead)

proc TLEncodeType*(obj: updateEncryptedMessagesRead): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateChatParticipantAdd)

proc TLEncodeType*(obj: updateChatParticipantAdd): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateChatParticipantDelete)

proc TLEncodeType*(obj: updateChatParticipantDelete): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateDcOptions)

proc TLEncodeType*(obj: updateDcOptions): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateNotifySettings)

proc TLEncodeType*(obj: updateNotifySettings): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateServiceNotification)

proc TLEncodeType*(obj: updateServiceNotification): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updatePrivacy)

proc TLEncodeType*(obj: updatePrivacy): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateUserPhone)

proc TLEncodeType*(obj: updateUserPhone): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateReadHistoryInbox)

proc TLEncodeType*(obj: updateReadHistoryInbox): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateReadHistoryOutbox)

proc TLEncodeType*(obj: updateReadHistoryOutbox): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateWebPage)

proc TLEncodeType*(obj: updateWebPage): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateReadMessagesContents)

proc TLEncodeType*(obj: updateReadMessagesContents): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateChannelTooLong)

proc TLEncodeType*(obj: updateChannelTooLong): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateChannel)

proc TLEncodeType*(obj: updateChannel): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateNewChannelMessage)

proc TLEncodeType*(obj: updateNewChannelMessage): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateReadChannelInbox)

proc TLEncodeType*(obj: updateReadChannelInbox): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateDeleteChannelMessages)

proc TLEncodeType*(obj: updateDeleteChannelMessages): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateChannelMessageViews)

proc TLEncodeType*(obj: updateChannelMessageViews): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateChatParticipantAdmin)

proc TLEncodeType*(obj: updateChatParticipantAdmin): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateNewStickerSet)

proc TLEncodeType*(obj: updateNewStickerSet): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateStickerSetsOrder)

proc TLEncodeType*(obj: updateStickerSetsOrder): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateStickerSets)

proc TLEncodeType*(obj: updateStickerSets): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateSavedGifs)

proc TLEncodeType*(obj: updateSavedGifs): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateBotInlineQuery)

proc TLEncodeType*(obj: updateBotInlineQuery): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateBotInlineSend)

proc TLEncodeType*(obj: updateBotInlineSend): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateEditChannelMessage)

proc TLEncodeType*(obj: updateEditChannelMessage): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateBotCallbackQuery)

proc TLEncodeType*(obj: updateBotCallbackQuery): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateEditMessage)

proc TLEncodeType*(obj: updateEditMessage): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateInlineBotCallbackQuery)

proc TLEncodeType*(obj: updateInlineBotCallbackQuery): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateReadChannelOutbox)

proc TLEncodeType*(obj: updateReadChannelOutbox): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateDraftMessage)

proc TLEncodeType*(obj: updateDraftMessage): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateReadFeaturedStickers)

proc TLEncodeType*(obj: updateReadFeaturedStickers): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateRecentStickers)

proc TLEncodeType*(obj: updateRecentStickers): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateConfig)

proc TLEncodeType*(obj: updateConfig): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updatePtsChanged)

proc TLEncodeType*(obj: updatePtsChanged): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateChannelWebPage)

proc TLEncodeType*(obj: updateChannelWebPage): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateDialogPinned)

proc TLEncodeType*(obj: updateDialogPinned): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updatePinnedDialogs)

proc TLEncodeType*(obj: updatePinnedDialogs): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateBotWebhookJSON)

proc TLEncodeType*(obj: updateBotWebhookJSON): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateBotWebhookJSONQuery)

proc TLEncodeType*(obj: updateBotWebhookJSONQuery): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateBotShippingQuery)

proc TLEncodeType*(obj: updateBotShippingQuery): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateBotPrecheckoutQuery)

proc TLEncodeType*(obj: updateBotPrecheckoutQuery): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updatePhoneCall)

proc TLEncodeType*(obj: updatePhoneCall): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateLangPackTooLong)

proc TLEncodeType*(obj: updateLangPackTooLong): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateLangPack)

proc TLEncodeType*(obj: updateLangPack): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateFavedStickers)

proc TLEncodeType*(obj: updateFavedStickers): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateChannelReadMessagesContents)

proc TLEncodeType*(obj: updateChannelReadMessagesContents): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateContactsReset)

proc TLEncodeType*(obj: updateContactsReset): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateChannelAvailableMessages)

proc TLEncodeType*(obj: updateChannelAvailableMessages): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateDialogUnreadMark)

proc TLEncodeType*(obj: updateDialogUnreadMark): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateMessagePoll)

proc TLEncodeType*(obj: updateMessagePoll): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateChatDefaultBannedRights)

proc TLEncodeType*(obj: updateChatDefaultBannedRights): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateFolderPeers)

proc TLEncodeType*(obj: updateFolderPeers): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updatePeerSettings)

proc TLEncodeType*(obj: updatePeerSettings): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updatePeerLocated)

proc TLEncodeType*(obj: updatePeerLocated): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateNewScheduledMessage)

proc TLEncodeType*(obj: updateNewScheduledMessage): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateDeleteScheduledMessages)

proc TLEncodeType*(obj: updateDeleteScheduledMessages): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateTheme)

proc TLEncodeType*(obj: updateTheme): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateGeoLiveViewed)

proc TLEncodeType*(obj: updateGeoLiveViewed): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateLoginToken)

proc TLEncodeType*(obj: updateLoginToken): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateMessagePollVote)

proc TLEncodeType*(obj: updateMessagePollVote): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateDialogFilter)

proc TLEncodeType*(obj: updateDialogFilter): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateDialogFilterOrder)

proc TLEncodeType*(obj: updateDialogFilterOrder): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateDialogFilters)

proc TLEncodeType*(obj: updateDialogFilters): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updatePhoneCallSignalingData)

proc TLEncodeType*(obj: updatePhoneCallSignalingData): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateChannelParticipant)

proc TLEncodeType*(obj: updateChannelParticipant): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateChannelMessageForwards)

proc TLEncodeType*(obj: updateChannelMessageForwards): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateReadChannelDiscussionInbox)

proc TLEncodeType*(obj: updateReadChannelDiscussionInbox): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateReadChannelDiscussionOutbox)

proc TLEncodeType*(obj: updateReadChannelDiscussionOutbox): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updatePeerBlocked)

proc TLEncodeType*(obj: updatePeerBlocked): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateChannelUserTyping)

proc TLEncodeType*(obj: updateChannelUserTyping): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updatePinnedMessages)

proc TLEncodeType*(obj: updatePinnedMessages): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updatePinnedChannelMessages)

proc TLEncodeType*(obj: updatePinnedChannelMessages): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: topPeerCategoryPeers)

proc TLEncodeType*(obj: topPeerCategoryPeers): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: auth_sentCode)

proc TLEncodeType*(obj: auth_sentCode): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: chatInviteEmpty)

proc TLEncodeType*(obj: chatInviteEmpty): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: chatInviteExported)

proc TLEncodeType*(obj: chatInviteExported): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: account_themesNotModified)

proc TLEncodeType*(obj: account_themesNotModified): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: account_themes)

proc TLEncodeType*(obj: account_themes): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: help_country)

proc TLEncodeType*(obj: help_country): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_inactiveChats)

proc TLEncodeType*(obj: messages_inactiveChats): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: phoneCallDiscardReasonMissed)

proc TLEncodeType*(obj: phoneCallDiscardReasonMissed): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: phoneCallDiscardReasonDisconnect)

proc TLEncodeType*(obj: phoneCallDiscardReasonDisconnect): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: phoneCallDiscardReasonHangup)

proc TLEncodeType*(obj: phoneCallDiscardReasonHangup): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: phoneCallDiscardReasonBusy)

proc TLEncodeType*(obj: phoneCallDiscardReasonBusy): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: stats_broadcastStats)

proc TLEncodeType*(obj: stats_broadcastStats): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: account_tmpPassword)

proc TLEncodeType*(obj: account_tmpPassword): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPaymentCredentialsSaved)

proc TLEncodeType*(obj: inputPaymentCredentialsSaved): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPaymentCredentials)

proc TLEncodeType*(obj: inputPaymentCredentials): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPaymentCredentialsApplePay)

proc TLEncodeType*(obj: inputPaymentCredentialsApplePay): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPaymentCredentialsAndroidPay)

proc TLEncodeType*(obj: inputPaymentCredentialsAndroidPay): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: themeSettings)

proc TLEncodeType*(obj: themeSettings): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: botInfo)

proc TLEncodeType*(obj: botInfo): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: pollAnswer)

proc TLEncodeType*(obj: pollAnswer): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: dialog)

proc TLEncodeType*(obj: dialog): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: dialogFolder)

proc TLEncodeType*(obj: dialogFolder): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageListOrderedItemText)

proc TLEncodeType*(obj: pageListOrderedItemText): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageListOrderedItemBlocks)

proc TLEncodeType*(obj: pageListOrderedItemBlocks): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: paymentSavedCredentialsCard)

proc TLEncodeType*(obj: paymentSavedCredentialsCard): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: keyboardButtonRow)

proc TLEncodeType*(obj: keyboardButtonRow): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inlineBotSwitchPM)

proc TLEncodeType*(obj: inlineBotSwitchPM): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_highScores)

proc TLEncodeType*(obj: messages_highScores): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_affectedHistory)

proc TLEncodeType*(obj: messages_affectedHistory): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: fileLocationToBeDeprecated)

proc TLEncodeType*(obj: fileLocationToBeDeprecated): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: nearestDc)

proc TLEncodeType*(obj: nearestDc): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputSingleMedia)

proc TLEncodeType*(obj: inputSingleMedia): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: userEmpty)

proc TLEncodeType*(obj: userEmpty): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: user)

proc TLEncodeType*(obj: user): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: langPackLanguage)

proc TLEncodeType*(obj: langPackLanguage): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: langPackString)

proc TLEncodeType*(obj: langPackString): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: langPackStringPluralized)

proc TLEncodeType*(obj: langPackStringPluralized): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: langPackStringDeleted)

proc TLEncodeType*(obj: langPackStringDeleted): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: webPageAttributeTheme)

proc TLEncodeType*(obj: webPageAttributeTheme): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: notifyPeer)

proc TLEncodeType*(obj: notifyPeer): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: notifyUsers)

proc TLEncodeType*(obj: notifyUsers): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: notifyChats)

proc TLEncodeType*(obj: notifyChats): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: notifyBroadcasts)

proc TLEncodeType*(obj: notifyBroadcasts): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputDialogPeer)

proc TLEncodeType*(obj: inputDialogPeer): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputDialogPeerFolder)

proc TLEncodeType*(obj: inputDialogPeerFolder): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: payments_bankCardData)

proc TLEncodeType*(obj: payments_bankCardData): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: statsPercentValue)

proc TLEncodeType*(obj: statsPercentValue): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: contacts_topPeersNotModified)

proc TLEncodeType*(obj: contacts_topPeersNotModified): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: contacts_topPeers)

proc TLEncodeType*(obj: contacts_topPeers): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: contacts_topPeersDisabled)

proc TLEncodeType*(obj: contacts_topPeersDisabled): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: contacts_blocked)

proc TLEncodeType*(obj: contacts_blocked): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: contacts_blockedSlice)

proc TLEncodeType*(obj: contacts_blockedSlice): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: dcOption)

proc TLEncodeType*(obj: dcOption): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: savedPhoneContact)

proc TLEncodeType*(obj: savedPhoneContact): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageCaption)

proc TLEncodeType*(obj: pageCaption): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: upload_webFile)

proc TLEncodeType*(obj: upload_webFile): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: account_autoDownloadSettings)

proc TLEncodeType*(obj: account_autoDownloadSettings): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_votesList)

proc TLEncodeType*(obj: messages_votesList): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_stickersNotModified)

proc TLEncodeType*(obj: messages_stickersNotModified): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_stickers)

proc TLEncodeType*(obj: messages_stickers): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelMessagesFilterEmpty)

proc TLEncodeType*(obj: channelMessagesFilterEmpty): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelMessagesFilter)

proc TLEncodeType*(obj: channelMessagesFilter): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPeerNotifySettings)

proc TLEncodeType*(obj: inputPeerNotifySettings): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: invoice)

proc TLEncodeType*(obj: invoice): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: phoneConnection)

proc TLEncodeType*(obj: phoneConnection): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: phoneConnectionWebrtc)

proc TLEncodeType*(obj: phoneConnectionWebrtc): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPhoneContact)

proc TLEncodeType*(obj: inputPhoneContact): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_sentEncryptedMessage)

proc TLEncodeType*(obj: messages_sentEncryptedMessage): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_sentEncryptedFile)

proc TLEncodeType*(obj: messages_sentEncryptedFile): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: channels_adminLogResults)

proc TLEncodeType*(obj: channels_adminLogResults): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: wallPaperSettings)

proc TLEncodeType*(obj: wallPaperSettings): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: storage_fileUnknown)

proc TLEncodeType*(obj: storage_fileUnknown): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: storage_filePartial)

proc TLEncodeType*(obj: storage_filePartial): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: storage_fileJpeg)

proc TLEncodeType*(obj: storage_fileJpeg): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: storage_fileGif)

proc TLEncodeType*(obj: storage_fileGif): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: storage_filePng)

proc TLEncodeType*(obj: storage_filePng): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: storage_filePdf)

proc TLEncodeType*(obj: storage_filePdf): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: storage_fileMp3)

proc TLEncodeType*(obj: storage_fileMp3): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: storage_fileMov)

proc TLEncodeType*(obj: storage_fileMov): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: storage_fileMp4)

proc TLEncodeType*(obj: storage_fileMp4): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: storage_fileWebp)

proc TLEncodeType*(obj: storage_fileWebp): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputTheme)

proc TLEncodeType*(obj: inputTheme): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputThemeSlug)

proc TLEncodeType*(obj: inputThemeSlug): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageReplyHeader)

proc TLEncodeType*(obj: messageReplyHeader): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_affectedMessages)

proc TLEncodeType*(obj: messages_affectedMessages): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: labeledPrice)

proc TLEncodeType*(obj: labeledPrice): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: contacts_resolvedPeer)

proc TLEncodeType*(obj: contacts_resolvedPeer): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_peerDialogs)

proc TLEncodeType*(obj: messages_peerDialogs): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageRange)

proc TLEncodeType*(obj: messageRange): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: postAddress)

proc TLEncodeType*(obj: postAddress): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: geoPointEmpty)

proc TLEncodeType*(obj: geoPointEmpty): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: geoPoint)

proc TLEncodeType*(obj: geoPoint): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: upload_cdnFileReuploadNeeded)

proc TLEncodeType*(obj: upload_cdnFileReuploadNeeded): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: upload_cdnFile)

proc TLEncodeType*(obj: upload_cdnFile): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: help_support)

proc TLEncodeType*(obj: help_support): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: peerBlocked)

proc TLEncodeType*(obj: peerBlocked): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputFolderPeer)

proc TLEncodeType*(obj: inputFolderPeer): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: cdnPublicKey)

proc TLEncodeType*(obj: cdnPublicKey): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageMediaEmpty)

proc TLEncodeType*(obj: messageMediaEmpty): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageMediaPhoto)

proc TLEncodeType*(obj: messageMediaPhoto): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageMediaGeo)

proc TLEncodeType*(obj: messageMediaGeo): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageMediaContact)

proc TLEncodeType*(obj: messageMediaContact): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageMediaUnsupported)

proc TLEncodeType*(obj: messageMediaUnsupported): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageMediaDocument)

proc TLEncodeType*(obj: messageMediaDocument): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageMediaWebPage)

proc TLEncodeType*(obj: messageMediaWebPage): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageMediaVenue)

proc TLEncodeType*(obj: messageMediaVenue): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageMediaGame)

proc TLEncodeType*(obj: messageMediaGame): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageMediaInvoice)

proc TLEncodeType*(obj: messageMediaInvoice): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageMediaGeoLive)

proc TLEncodeType*(obj: messageMediaGeoLive): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageMediaPoll)

proc TLEncodeType*(obj: messageMediaPoll): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageMediaDice)

proc TLEncodeType*(obj: messageMediaDice): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: chatEmpty)

proc TLEncodeType*(obj: chatEmpty): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: chat)

proc TLEncodeType*(obj: chat): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: chatForbidden)

proc TLEncodeType*(obj: chatForbidden): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: channel)

proc TLEncodeType*(obj: channel): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelForbidden)

proc TLEncodeType*(obj: channelForbidden): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: help_recentMeUrls)

proc TLEncodeType*(obj: help_recentMeUrls): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: userProfilePhotoEmpty)

proc TLEncodeType*(obj: userProfilePhotoEmpty): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: userProfilePhoto)

proc TLEncodeType*(obj: userProfilePhoto): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputGeoPointEmpty)

proc TLEncodeType*(obj: inputGeoPointEmpty): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputGeoPoint)

proc TLEncodeType*(obj: inputGeoPoint): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: contactStatus)

proc TLEncodeType*(obj: contactStatus): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: contacts_found)

proc TLEncodeType*(obj: contacts_found): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: globalPrivacySettings)

proc TLEncodeType*(obj: globalPrivacySettings): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPeerEmpty)

proc TLEncodeType*(obj: inputPeerEmpty): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPeerSelf)

proc TLEncodeType*(obj: inputPeerSelf): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPeerChat)

proc TLEncodeType*(obj: inputPeerChat): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPeerUser)

proc TLEncodeType*(obj: inputPeerUser): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPeerChannel)

proc TLEncodeType*(obj: inputPeerChannel): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPeerUserFromMessage)

proc TLEncodeType*(obj: inputPeerUserFromMessage): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPeerChannelFromMessage)

proc TLEncodeType*(obj: inputPeerChannelFromMessage): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: draftMessageEmpty)

proc TLEncodeType*(obj: draftMessageEmpty): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: draftMessage)

proc TLEncodeType*(obj: draftMessage): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: account_sentEmailCode)

proc TLEncodeType*(obj: account_sentEmailCode): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputBotInlineMessageMediaAuto)

proc TLEncodeType*(obj: inputBotInlineMessageMediaAuto): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputBotInlineMessageText)

proc TLEncodeType*(obj: inputBotInlineMessageText): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputBotInlineMessageMediaGeo)

proc TLEncodeType*(obj: inputBotInlineMessageMediaGeo): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputBotInlineMessageMediaVenue)

proc TLEncodeType*(obj: inputBotInlineMessageMediaVenue): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputBotInlineMessageMediaContact)

proc TLEncodeType*(obj: inputBotInlineMessageMediaContact): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputBotInlineMessageGame)

proc TLEncodeType*(obj: inputBotInlineMessageGame): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: chatFull)

proc TLEncodeType*(obj: chatFull): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelFull)

proc TLEncodeType*(obj: channelFull): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: accountDaysTTL)

proc TLEncodeType*(obj: accountDaysTTL): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_chats)

proc TLEncodeType*(obj: messages_chats): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_chatsSlice)

proc TLEncodeType*(obj: messages_chatsSlice): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: recentMeUrlUnknown)

proc TLEncodeType*(obj: recentMeUrlUnknown): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: recentMeUrlUser)

proc TLEncodeType*(obj: recentMeUrlUser): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: recentMeUrlChat)

proc TLEncodeType*(obj: recentMeUrlChat): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: recentMeUrlChatInvite)

proc TLEncodeType*(obj: recentMeUrlChatInvite): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: recentMeUrlStickerSet)

proc TLEncodeType*(obj: recentMeUrlStickerSet): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: auth_loginToken)

proc TLEncodeType*(obj: auth_loginToken): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: auth_loginTokenMigrateTo)

proc TLEncodeType*(obj: auth_loginTokenMigrateTo): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: auth_loginTokenSuccess)

proc TLEncodeType*(obj: auth_loginTokenSuccess): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_messageViews)

proc TLEncodeType*(obj: messages_messageViews): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputFileLocation)

proc TLEncodeType*(obj: inputFileLocation): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputEncryptedFileLocation)

proc TLEncodeType*(obj: inputEncryptedFileLocation): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputDocumentFileLocation)

proc TLEncodeType*(obj: inputDocumentFileLocation): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputSecureFileLocation)

proc TLEncodeType*(obj: inputSecureFileLocation): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputTakeoutFileLocation)

proc TLEncodeType*(obj: inputTakeoutFileLocation): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPhotoFileLocation)

proc TLEncodeType*(obj: inputPhotoFileLocation): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPhotoLegacyFileLocation)

proc TLEncodeType*(obj: inputPhotoLegacyFileLocation): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPeerPhotoFileLocation)

proc TLEncodeType*(obj: inputPeerPhotoFileLocation): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputStickerSetThumb)

proc TLEncodeType*(obj: inputStickerSetThumb): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: help_appUpdate)

proc TLEncodeType*(obj: help_appUpdate): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: help_noAppUpdate)

proc TLEncodeType*(obj: help_noAppUpdate): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: popularContact)

proc TLEncodeType*(obj: popularContact): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: emojiURL)

proc TLEncodeType*(obj: emojiURL): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMessagesFilterEmpty)

proc TLEncodeType*(obj: inputMessagesFilterEmpty): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMessagesFilterPhotos)

proc TLEncodeType*(obj: inputMessagesFilterPhotos): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMessagesFilterVideo)

proc TLEncodeType*(obj: inputMessagesFilterVideo): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMessagesFilterPhotoVideo)

proc TLEncodeType*(obj: inputMessagesFilterPhotoVideo): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMessagesFilterDocument)

proc TLEncodeType*(obj: inputMessagesFilterDocument): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMessagesFilterUrl)

proc TLEncodeType*(obj: inputMessagesFilterUrl): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMessagesFilterGif)

proc TLEncodeType*(obj: inputMessagesFilterGif): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMessagesFilterVoice)

proc TLEncodeType*(obj: inputMessagesFilterVoice): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMessagesFilterMusic)

proc TLEncodeType*(obj: inputMessagesFilterMusic): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMessagesFilterChatPhotos)

proc TLEncodeType*(obj: inputMessagesFilterChatPhotos): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMessagesFilterPhoneCalls)

proc TLEncodeType*(obj: inputMessagesFilterPhoneCalls): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMessagesFilterRoundVoice)

proc TLEncodeType*(obj: inputMessagesFilterRoundVoice): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMessagesFilterRoundVideo)

proc TLEncodeType*(obj: inputMessagesFilterRoundVideo): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMessagesFilterMyMentions)

proc TLEncodeType*(obj: inputMessagesFilterMyMentions): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMessagesFilterGeo)

proc TLEncodeType*(obj: inputMessagesFilterGeo): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMessagesFilterContacts)

proc TLEncodeType*(obj: inputMessagesFilterContacts): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMessagesFilterPinned)

proc TLEncodeType*(obj: inputMessagesFilterPinned): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: codeSettings)

proc TLEncodeType*(obj: codeSettings): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_messageEditData)

proc TLEncodeType*(obj: messages_messageEditData): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: help_countriesListNotModified)

proc TLEncodeType*(obj: help_countriesListNotModified): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: help_countriesList)

proc TLEncodeType*(obj: help_countriesList): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageReplies)

proc TLEncodeType*(obj: messageReplies): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: account_authorizationForm)

proc TLEncodeType*(obj: account_authorizationForm): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_dhConfigNotModified)

proc TLEncodeType*(obj: messages_dhConfigNotModified): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_dhConfig)

proc TLEncodeType*(obj: messages_dhConfig): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: account_takeout)

proc TLEncodeType*(obj: account_takeout): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updatesTooLong)

proc TLEncodeType*(obj: updatesTooLong): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateShortMessage)

proc TLEncodeType*(obj: updateShortMessage): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateShortChatMessage)

proc TLEncodeType*(obj: updateShortChatMessage): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateShort)

proc TLEncodeType*(obj: updateShort): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updatesCombined)

proc TLEncodeType*(obj: updatesCombined): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updates)

proc TLEncodeType*(obj: updates): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateShortSentMessage)

proc TLEncodeType*(obj: updateShortSentMessage): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageFwdHeader)

proc TLEncodeType*(obj: messageFwdHeader): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: authorization)

proc TLEncodeType*(obj: authorization): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: help_termsOfServiceUpdateEmpty)

proc TLEncodeType*(obj: help_termsOfServiceUpdateEmpty): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: help_termsOfServiceUpdate)

proc TLEncodeType*(obj: help_termsOfServiceUpdate): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageTableCell)

proc TLEncodeType*(obj: pageTableCell): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: account_contentSettings)

proc TLEncodeType*(obj: account_contentSettings): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: account_webAuthorizations)

proc TLEncodeType*(obj: account_webAuthorizations): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: secureValueHash)

proc TLEncodeType*(obj: secureValueHash): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: paymentRequestedInfo)

proc TLEncodeType*(obj: paymentRequestedInfo): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: phoneCallEmpty)

proc TLEncodeType*(obj: phoneCallEmpty): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: phoneCallWaiting)

proc TLEncodeType*(obj: phoneCallWaiting): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: phoneCallRequested)

proc TLEncodeType*(obj: phoneCallRequested): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: phoneCallAccepted)

proc TLEncodeType*(obj: phoneCallAccepted): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: phoneCall)

proc TLEncodeType*(obj: phoneCall): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: phoneCallDiscarded)

proc TLEncodeType*(obj: phoneCallDiscarded): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPrivacyKeyStatusTimestamp)

proc TLEncodeType*(obj: inputPrivacyKeyStatusTimestamp): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPrivacyKeyChatInvite)

proc TLEncodeType*(obj: inputPrivacyKeyChatInvite): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPrivacyKeyPhoneCall)

proc TLEncodeType*(obj: inputPrivacyKeyPhoneCall): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPrivacyKeyPhoneP2P)

proc TLEncodeType*(obj: inputPrivacyKeyPhoneP2P): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPrivacyKeyForwards)

proc TLEncodeType*(obj: inputPrivacyKeyForwards): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPrivacyKeyProfilePhoto)

proc TLEncodeType*(obj: inputPrivacyKeyProfilePhoto): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPrivacyKeyPhoneNumber)

proc TLEncodeType*(obj: inputPrivacyKeyPhoneNumber): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPrivacyKeyAddedByPhone)

proc TLEncodeType*(obj: inputPrivacyKeyAddedByPhone): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: maskCoords)

proc TLEncodeType*(obj: maskCoords): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: privacyValueAllowContacts)

proc TLEncodeType*(obj: privacyValueAllowContacts): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: privacyValueAllowAll)

proc TLEncodeType*(obj: privacyValueAllowAll): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: privacyValueAllowUsers)

proc TLEncodeType*(obj: privacyValueAllowUsers): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: privacyValueDisallowContacts)

proc TLEncodeType*(obj: privacyValueDisallowContacts): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: privacyValueDisallowAll)

proc TLEncodeType*(obj: privacyValueDisallowAll): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: privacyValueDisallowUsers)

proc TLEncodeType*(obj: privacyValueDisallowUsers): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: privacyValueAllowChatParticipants)

proc TLEncodeType*(obj: privacyValueAllowChatParticipants): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: privacyValueDisallowChatParticipants)

proc TLEncodeType*(obj: privacyValueDisallowChatParticipants): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageBlockUnsupported)

proc TLEncodeType*(obj: pageBlockUnsupported): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageBlockTitle)

proc TLEncodeType*(obj: pageBlockTitle): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageBlockSubtitle)

proc TLEncodeType*(obj: pageBlockSubtitle): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageBlockAuthorDate)

proc TLEncodeType*(obj: pageBlockAuthorDate): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageBlockHeader)

proc TLEncodeType*(obj: pageBlockHeader): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageBlockSubheader)

proc TLEncodeType*(obj: pageBlockSubheader): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageBlockParagraph)

proc TLEncodeType*(obj: pageBlockParagraph): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageBlockPreformatted)

proc TLEncodeType*(obj: pageBlockPreformatted): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageBlockFooter)

proc TLEncodeType*(obj: pageBlockFooter): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageBlockDivider)

proc TLEncodeType*(obj: pageBlockDivider): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageBlockAnchor)

proc TLEncodeType*(obj: pageBlockAnchor): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageBlockList)

proc TLEncodeType*(obj: pageBlockList): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageBlockBlockquote)

proc TLEncodeType*(obj: pageBlockBlockquote): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageBlockPullquote)

proc TLEncodeType*(obj: pageBlockPullquote): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageBlockPhoto)

proc TLEncodeType*(obj: pageBlockPhoto): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageBlockVideo)

proc TLEncodeType*(obj: pageBlockVideo): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageBlockCover)

proc TLEncodeType*(obj: pageBlockCover): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageBlockEmbed)

proc TLEncodeType*(obj: pageBlockEmbed): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageBlockEmbedPost)

proc TLEncodeType*(obj: pageBlockEmbedPost): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageBlockCollage)

proc TLEncodeType*(obj: pageBlockCollage): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageBlockSlideshow)

proc TLEncodeType*(obj: pageBlockSlideshow): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageBlockChannel)

proc TLEncodeType*(obj: pageBlockChannel): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageBlockAudio)

proc TLEncodeType*(obj: pageBlockAudio): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageBlockKicker)

proc TLEncodeType*(obj: pageBlockKicker): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageBlockTable)

proc TLEncodeType*(obj: pageBlockTable): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageBlockOrderedList)

proc TLEncodeType*(obj: pageBlockOrderedList): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageBlockDetails)

proc TLEncodeType*(obj: pageBlockDetails): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageBlockRelatedArticles)

proc TLEncodeType*(obj: pageBlockRelatedArticles): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageBlockMap)

proc TLEncodeType*(obj: pageBlockMap): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: chatPhotoEmpty)

proc TLEncodeType*(obj: chatPhotoEmpty): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: chatPhoto)

proc TLEncodeType*(obj: chatPhoto): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: contacts_contactsNotModified)

proc TLEncodeType*(obj: contacts_contactsNotModified): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: contacts_contacts)

proc TLEncodeType*(obj: contacts_contacts): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: encryptedChatEmpty)

proc TLEncodeType*(obj: encryptedChatEmpty): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: encryptedChatWaiting)

proc TLEncodeType*(obj: encryptedChatWaiting): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: encryptedChatRequested)

proc TLEncodeType*(obj: encryptedChatRequested): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: encryptedChat)

proc TLEncodeType*(obj: encryptedChat): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: encryptedChatDiscarded)

proc TLEncodeType*(obj: encryptedChatDiscarded): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_chatFull)

proc TLEncodeType*(obj: messages_chatFull): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: replyKeyboardHide)

proc TLEncodeType*(obj: replyKeyboardHide): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: replyKeyboardForceReply)

proc TLEncodeType*(obj: replyKeyboardForceReply): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: replyKeyboardMarkup)

proc TLEncodeType*(obj: replyKeyboardMarkup): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: replyInlineMarkup)

proc TLEncodeType*(obj: replyInlineMarkup): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: statsURL)

proc TLEncodeType*(obj: statsURL): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: statsGraphAsync)

proc TLEncodeType*(obj: statsGraphAsync): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: statsGraphError)

proc TLEncodeType*(obj: statsGraphError): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: statsGraph)

proc TLEncodeType*(obj: statsGraph): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageEmpty)

proc TLEncodeType*(obj: messageEmpty): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: message)

proc TLEncodeType*(obj: message): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageService)

proc TLEncodeType*(obj: messageService): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: documentEmpty)

proc TLEncodeType*(obj: documentEmpty): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: document)

proc TLEncodeType*(obj: document): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: statsGroupTopInviter)

proc TLEncodeType*(obj: statsGroupTopInviter): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputAppEvent)

proc TLEncodeType*(obj: inputAppEvent): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: secureValueTypePersonalDetails)

proc TLEncodeType*(obj: secureValueTypePersonalDetails): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: secureValueTypePassport)

proc TLEncodeType*(obj: secureValueTypePassport): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: secureValueTypeDriverLicense)

proc TLEncodeType*(obj: secureValueTypeDriverLicense): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: secureValueTypeIdentityCard)

proc TLEncodeType*(obj: secureValueTypeIdentityCard): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: secureValueTypeInternalPassport)

proc TLEncodeType*(obj: secureValueTypeInternalPassport): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: secureValueTypeAddress)

proc TLEncodeType*(obj: secureValueTypeAddress): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: secureValueTypeUtilityBill)

proc TLEncodeType*(obj: secureValueTypeUtilityBill): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: secureValueTypeBankStatement)

proc TLEncodeType*(obj: secureValueTypeBankStatement): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: secureValueTypeRentalAgreement)

proc TLEncodeType*(obj: secureValueTypeRentalAgreement): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: secureValueTypePassportRegistration)

proc TLEncodeType*(obj: secureValueTypePassportRegistration): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: secureValueTypeTemporaryRegistration)

proc TLEncodeType*(obj: secureValueTypeTemporaryRegistration): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: secureValueTypePhone)

proc TLEncodeType*(obj: secureValueTypePhone): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: secureValueTypeEmail)

proc TLEncodeType*(obj: secureValueTypeEmail): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: botInlineResult)

proc TLEncodeType*(obj: botInlineResult): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: botInlineMediaResult)

proc TLEncodeType*(obj: botInlineMediaResult): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: sendMessageTypingAction)

proc TLEncodeType*(obj: sendMessageTypingAction): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: sendMessageCancelAction)

proc TLEncodeType*(obj: sendMessageCancelAction): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: sendMessageRecordVideoAction)

proc TLEncodeType*(obj: sendMessageRecordVideoAction): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: sendMessageUploadVideoAction)

proc TLEncodeType*(obj: sendMessageUploadVideoAction): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: sendMessageRecordAudioAction)

proc TLEncodeType*(obj: sendMessageRecordAudioAction): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: sendMessageUploadAudioAction)

proc TLEncodeType*(obj: sendMessageUploadAudioAction): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: sendMessageUploadPhotoAction)

proc TLEncodeType*(obj: sendMessageUploadPhotoAction): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: sendMessageUploadDocumentAction)

proc TLEncodeType*(obj: sendMessageUploadDocumentAction): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: sendMessageGeoLocationAction)

proc TLEncodeType*(obj: sendMessageGeoLocationAction): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: sendMessageChooseContactAction)

proc TLEncodeType*(obj: sendMessageChooseContactAction): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: sendMessageGamePlayAction)

proc TLEncodeType*(obj: sendMessageGamePlayAction): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: sendMessageRecordRoundAction)

proc TLEncodeType*(obj: sendMessageRecordRoundAction): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: sendMessageUploadRoundAction)

proc TLEncodeType*(obj: sendMessageUploadRoundAction): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: help_deepLinkInfoEmpty)

proc TLEncodeType*(obj: help_deepLinkInfoEmpty): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: help_deepLinkInfo)

proc TLEncodeType*(obj: help_deepLinkInfo): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: secureFileEmpty)

proc TLEncodeType*(obj: secureFileEmpty): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: secureFile)

proc TLEncodeType*(obj: secureFile): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputStickerSetItem)

proc TLEncodeType*(obj: inputStickerSetItem): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: emojiKeyword)

proc TLEncodeType*(obj: emojiKeyword): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: emojiKeywordDeleted)

proc TLEncodeType*(obj: emojiKeywordDeleted): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: peerSettings)

proc TLEncodeType*(obj: peerSettings): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: chatBannedRights)

proc TLEncodeType*(obj: chatBannedRights): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: botInlineMessageMediaAuto)

proc TLEncodeType*(obj: botInlineMessageMediaAuto): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: botInlineMessageText)

proc TLEncodeType*(obj: botInlineMessageText): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: botInlineMessageMediaGeo)

proc TLEncodeType*(obj: botInlineMessageMediaGeo): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: botInlineMessageMediaVenue)

proc TLEncodeType*(obj: botInlineMessageMediaVenue): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: botInlineMessageMediaContact)

proc TLEncodeType*(obj: botInlineMessageMediaContact): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: peerLocated)

proc TLEncodeType*(obj: peerLocated): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: peerSelfLocated)

proc TLEncodeType*(obj: peerSelfLocated): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelLocationEmpty)

proc TLEncodeType*(obj: channelLocationEmpty): seq[uint8]

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelLocation)

proc TLEncodeType*(obj: channelLocation): seq[uint8]



proc TLEncode*(obj: help_PromoDataI): seq[uint8] = 
    if obj of help_promoDataEmpty:
        return cast[help_promoDataEmpty](obj).TLEncodeType()
    if obj of help_promoData:
        return cast[help_promoData](obj).TLEncodeType()

proc TLEncode*(obj: stats_MegagroupStatsI): seq[uint8] = 
    if obj of stats_megagroupStats:
        return cast[stats_megagroupStats](obj).TLEncodeType()

proc TLEncode*(obj: PrivacyKeyI): seq[uint8] = 
    if obj of privacyKeyStatusTimestamp:
        return cast[privacyKeyStatusTimestamp](obj).TLEncodeType()
    if obj of privacyKeyChatInvite:
        return cast[privacyKeyChatInvite](obj).TLEncodeType()
    if obj of privacyKeyPhoneCall:
        return cast[privacyKeyPhoneCall](obj).TLEncodeType()
    if obj of privacyKeyPhoneP2P:
        return cast[privacyKeyPhoneP2P](obj).TLEncodeType()
    if obj of privacyKeyForwards:
        return cast[privacyKeyForwards](obj).TLEncodeType()
    if obj of privacyKeyProfilePhoto:
        return cast[privacyKeyProfilePhoto](obj).TLEncodeType()
    if obj of privacyKeyPhoneNumber:
        return cast[privacyKeyPhoneNumber](obj).TLEncodeType()
    if obj of privacyKeyAddedByPhone:
        return cast[privacyKeyAddedByPhone](obj).TLEncodeType()

proc TLEncode*(obj: help_CountryCodeI): seq[uint8] = 
    if obj of help_countryCode:
        return cast[help_countryCode](obj).TLEncodeType()

proc TLEncode*(obj: WebAuthorizationI): seq[uint8] = 
    if obj of webAuthorization:
        return cast[webAuthorization](obj).TLEncodeType()

proc TLEncode*(obj: PollI): seq[uint8] = 
    if obj of poll:
        return cast[poll](obj).TLEncodeType()

proc TLEncode*(obj: DialogPeerI): seq[uint8] = 
    if obj of dialogPeer:
        return cast[dialogPeer](obj).TLEncodeType()
    if obj of dialogPeerFolder:
        return cast[dialogPeerFolder](obj).TLEncodeType()

proc TLEncode*(obj: TopPeerCategoryI): seq[uint8] = 
    if obj of topPeerCategoryBotsPM:
        return cast[topPeerCategoryBotsPM](obj).TLEncodeType()
    if obj of topPeerCategoryBotsInline:
        return cast[topPeerCategoryBotsInline](obj).TLEncodeType()
    if obj of topPeerCategoryCorrespondents:
        return cast[topPeerCategoryCorrespondents](obj).TLEncodeType()
    if obj of topPeerCategoryGroups:
        return cast[topPeerCategoryGroups](obj).TLEncodeType()
    if obj of topPeerCategoryChannels:
        return cast[topPeerCategoryChannels](obj).TLEncodeType()
    if obj of topPeerCategoryPhoneCalls:
        return cast[topPeerCategoryPhoneCalls](obj).TLEncodeType()
    if obj of topPeerCategoryForwardUsers:
        return cast[topPeerCategoryForwardUsers](obj).TLEncodeType()
    if obj of topPeerCategoryForwardChats:
        return cast[topPeerCategoryForwardChats](obj).TLEncodeType()

proc TLEncode*(obj: help_SupportNameI): seq[uint8] = 
    if obj of help_supportName:
        return cast[help_supportName](obj).TLEncodeType()

proc TLEncode*(obj: PhotoSizeI): seq[uint8] = 
    if obj of photoSizeEmpty:
        return cast[photoSizeEmpty](obj).TLEncodeType()
    if obj of photoSize:
        return cast[photoSize](obj).TLEncodeType()
    if obj of photoCachedSize:
        return cast[photoCachedSize](obj).TLEncodeType()
    if obj of photoStrippedSize:
        return cast[photoStrippedSize](obj).TLEncodeType()
    if obj of photoSizeProgressive:
        return cast[photoSizeProgressive](obj).TLEncodeType()

proc TLEncode*(obj: JSONValueI): seq[uint8] = 
    if obj of jsonNull:
        return cast[jsonNull](obj).TLEncodeType()
    if obj of jsonBool:
        return cast[jsonBool](obj).TLEncodeType()
    if obj of jsonNumber:
        return cast[jsonNumber](obj).TLEncodeType()
    if obj of jsonString:
        return cast[jsonString](obj).TLEncodeType()
    if obj of jsonArray:
        return cast[jsonArray](obj).TLEncodeType()
    if obj of jsonObject:
        return cast[jsonObject](obj).TLEncodeType()

proc TLEncode*(obj: messages_ArchivedStickersI): seq[uint8] = 
    if obj of messages_archivedStickers:
        return cast[messages_archivedStickers](obj).TLEncodeType()

proc TLEncode*(obj: BaseThemeI): seq[uint8] = 
    if obj of baseThemeClassic:
        return cast[baseThemeClassic](obj).TLEncodeType()
    if obj of baseThemeDay:
        return cast[baseThemeDay](obj).TLEncodeType()
    if obj of baseThemeNight:
        return cast[baseThemeNight](obj).TLEncodeType()
    if obj of baseThemeTinted:
        return cast[baseThemeTinted](obj).TLEncodeType()
    if obj of baseThemeArctic:
        return cast[baseThemeArctic](obj).TLEncodeType()

proc TLEncode*(obj: DialogFilterI): seq[uint8] = 
    if obj of dialogFilter:
        return cast[dialogFilter](obj).TLEncodeType()

proc TLEncode*(obj: MessageEntityI): seq[uint8] = 
    if obj of messageEntityUnknown:
        return cast[messageEntityUnknown](obj).TLEncodeType()
    if obj of messageEntityMention:
        return cast[messageEntityMention](obj).TLEncodeType()
    if obj of messageEntityHashtag:
        return cast[messageEntityHashtag](obj).TLEncodeType()
    if obj of messageEntityBotCommand:
        return cast[messageEntityBotCommand](obj).TLEncodeType()
    if obj of messageEntityUrl:
        return cast[messageEntityUrl](obj).TLEncodeType()
    if obj of messageEntityEmail:
        return cast[messageEntityEmail](obj).TLEncodeType()
    if obj of messageEntityBold:
        return cast[messageEntityBold](obj).TLEncodeType()
    if obj of messageEntityItalic:
        return cast[messageEntityItalic](obj).TLEncodeType()
    if obj of messageEntityCode:
        return cast[messageEntityCode](obj).TLEncodeType()
    if obj of messageEntityPre:
        return cast[messageEntityPre](obj).TLEncodeType()
    if obj of messageEntityTextUrl:
        return cast[messageEntityTextUrl](obj).TLEncodeType()
    if obj of messageEntityMentionName:
        return cast[messageEntityMentionName](obj).TLEncodeType()
    if obj of inputMessageEntityMentionName:
        return cast[inputMessageEntityMentionName](obj).TLEncodeType()
    if obj of messageEntityPhone:
        return cast[messageEntityPhone](obj).TLEncodeType()
    if obj of messageEntityCashtag:
        return cast[messageEntityCashtag](obj).TLEncodeType()
    if obj of messageEntityUnderline:
        return cast[messageEntityUnderline](obj).TLEncodeType()
    if obj of messageEntityStrike:
        return cast[messageEntityStrike](obj).TLEncodeType()
    if obj of messageEntityBlockquote:
        return cast[messageEntityBlockquote](obj).TLEncodeType()
    if obj of messageEntityBankCard:
        return cast[messageEntityBankCard](obj).TLEncodeType()

proc TLEncode*(obj: ThemeI): seq[uint8] = 
    if obj of theme:
        return cast[theme](obj).TLEncodeType()

proc TLEncode*(obj: DialogFilterSuggestedI): seq[uint8] = 
    if obj of dialogFilterSuggested:
        return cast[dialogFilterSuggested](obj).TLEncodeType()

proc TLEncode*(obj: stats_MessageStatsI): seq[uint8] = 
    if obj of stats_messageStats:
        return cast[stats_messageStats](obj).TLEncodeType()

proc TLEncode*(obj: payments_PaymentResultI): seq[uint8] = 
    if obj of payments_paymentResult:
        return cast[payments_paymentResult](obj).TLEncodeType()
    if obj of payments_paymentVerificationNeeded:
        return cast[payments_paymentVerificationNeeded](obj).TLEncodeType()

proc TLEncode*(obj: StickerPackI): seq[uint8] = 
    if obj of stickerPack:
        return cast[stickerPack](obj).TLEncodeType()

proc TLEncode*(obj: account_PasswordSettingsI): seq[uint8] = 
    if obj of account_passwordSettings:
        return cast[account_passwordSettings](obj).TLEncodeType()

proc TLEncode*(obj: CdnConfigI): seq[uint8] = 
    if obj of cdnConfig:
        return cast[cdnConfig](obj).TLEncodeType()

proc TLEncode*(obj: InputCheckPasswordSRPI): seq[uint8] = 
    if obj of inputCheckPasswordEmpty:
        return cast[inputCheckPasswordEmpty](obj).TLEncodeType()
    if obj of inputCheckPasswordSRP:
        return cast[inputCheckPasswordSRP](obj).TLEncodeType()

proc TLEncode*(obj: PollAnswerVotersI): seq[uint8] = 
    if obj of pollAnswerVoters:
        return cast[pollAnswerVoters](obj).TLEncodeType()

proc TLEncode*(obj: SecureDataI): seq[uint8] = 
    if obj of secureData:
        return cast[secureData](obj).TLEncodeType()

proc TLEncode*(obj: PageTableRowI): seq[uint8] = 
    if obj of pageTableRow:
        return cast[pageTableRow](obj).TLEncodeType()

proc TLEncode*(obj: phone_PhoneCallI): seq[uint8] = 
    if obj of phone_phoneCall:
        return cast[phone_phoneCall](obj).TLEncodeType()

proc TLEncode*(obj: ChatOnlinesI): seq[uint8] = 
    if obj of chatOnlines:
        return cast[chatOnlines](obj).TLEncodeType()

proc TLEncode*(obj: SecurePlainDataI): seq[uint8] = 
    if obj of securePlainPhone:
        return cast[securePlainPhone](obj).TLEncodeType()
    if obj of securePlainEmail:
        return cast[securePlainEmail](obj).TLEncodeType()

proc TLEncode*(obj: InputChatPhotoI): seq[uint8] = 
    if obj of inputChatPhotoEmpty:
        return cast[inputChatPhotoEmpty](obj).TLEncodeType()
    if obj of inputChatUploadedPhoto:
        return cast[inputChatUploadedPhoto](obj).TLEncodeType()
    if obj of inputChatPhoto:
        return cast[inputChatPhoto](obj).TLEncodeType()

proc TLEncode*(obj: SecureSecretSettingsI): seq[uint8] = 
    if obj of secureSecretSettings:
        return cast[secureSecretSettings](obj).TLEncodeType()

proc TLEncode*(obj: EmojiKeywordsDifferenceI): seq[uint8] = 
    if obj of emojiKeywordsDifference:
        return cast[emojiKeywordsDifference](obj).TLEncodeType()

proc TLEncode*(obj: photos_PhotosI): seq[uint8] = 
    if obj of photos_photos:
        return cast[photos_photos](obj).TLEncodeType()
    if obj of photos_photosSlice:
        return cast[photos_photosSlice](obj).TLEncodeType()

proc TLEncode*(obj: ChannelParticipantsFilterI): seq[uint8] = 
    if obj of channelParticipantsRecent:
        return cast[channelParticipantsRecent](obj).TLEncodeType()
    if obj of channelParticipantsAdmins:
        return cast[channelParticipantsAdmins](obj).TLEncodeType()
    if obj of channelParticipantsKicked:
        return cast[channelParticipantsKicked](obj).TLEncodeType()
    if obj of channelParticipantsBots:
        return cast[channelParticipantsBots](obj).TLEncodeType()
    if obj of channelParticipantsBanned:
        return cast[channelParticipantsBanned](obj).TLEncodeType()
    if obj of channelParticipantsSearch:
        return cast[channelParticipantsSearch](obj).TLEncodeType()
    if obj of channelParticipantsContacts:
        return cast[channelParticipantsContacts](obj).TLEncodeType()
    if obj of channelParticipantsMentions:
        return cast[channelParticipantsMentions](obj).TLEncodeType()

proc TLEncode*(obj: StatsGroupTopAdminI): seq[uint8] = 
    if obj of statsGroupTopAdmin:
        return cast[statsGroupTopAdmin](obj).TLEncodeType()

proc TLEncode*(obj: InputBotInlineMessageIDI): seq[uint8] = 
    if obj of inputBotInlineMessageID:
        return cast[inputBotInlineMessageID](obj).TLEncodeType()

proc TLEncode*(obj: InputPhotoI): seq[uint8] = 
    if obj of inputPhotoEmpty:
        return cast[inputPhotoEmpty](obj).TLEncodeType()
    if obj of inputPhoto:
        return cast[inputPhoto](obj).TLEncodeType()

proc TLEncode*(obj: channels_ChannelParticipantI): seq[uint8] = 
    if obj of channels_channelParticipant:
        return cast[channels_channelParticipant](obj).TLEncodeType()

proc TLEncode*(obj: photos_PhotoI): seq[uint8] = 
    if obj of photos_photo:
        return cast[photos_photo](obj).TLEncodeType()

proc TLEncode*(obj: EncryptedMessageI): seq[uint8] = 
    if obj of encryptedMessage:
        return cast[encryptedMessage](obj).TLEncodeType()
    if obj of encryptedMessageService:
        return cast[encryptedMessageService](obj).TLEncodeType()

proc TLEncode*(obj: DocumentAttributeI): seq[uint8] = 
    if obj of documentAttributeImageSize:
        return cast[documentAttributeImageSize](obj).TLEncodeType()
    if obj of documentAttributeAnimated:
        return cast[documentAttributeAnimated](obj).TLEncodeType()
    if obj of documentAttributeSticker:
        return cast[documentAttributeSticker](obj).TLEncodeType()
    if obj of documentAttributeVideo:
        return cast[documentAttributeVideo](obj).TLEncodeType()
    if obj of documentAttributeAudio:
        return cast[documentAttributeAudio](obj).TLEncodeType()
    if obj of documentAttributeFilename:
        return cast[documentAttributeFilename](obj).TLEncodeType()
    if obj of documentAttributeHasStickers:
        return cast[documentAttributeHasStickers](obj).TLEncodeType()

proc TLEncode*(obj: InputEncryptedChatI): seq[uint8] = 
    if obj of inputEncryptedChat:
        return cast[inputEncryptedChat](obj).TLEncodeType()

proc TLEncode*(obj: messages_FeaturedStickersI): seq[uint8] = 
    if obj of messages_featuredStickersNotModified:
        return cast[messages_featuredStickersNotModified](obj).TLEncodeType()
    if obj of messages_featuredStickers:
        return cast[messages_featuredStickers](obj).TLEncodeType()

proc TLEncode*(obj: payments_SavedInfoI): seq[uint8] = 
    if obj of payments_savedInfo:
        return cast[payments_savedInfo](obj).TLEncodeType()

proc TLEncode*(obj: PhoneCallProtocolI): seq[uint8] = 
    if obj of phoneCallProtocol:
        return cast[phoneCallProtocol](obj).TLEncodeType()

proc TLEncode*(obj: ChannelAdminLogEventI): seq[uint8] = 
    if obj of channelAdminLogEvent:
        return cast[channelAdminLogEvent](obj).TLEncodeType()

proc TLEncode*(obj: KeyboardButtonI): seq[uint8] = 
    if obj of keyboardButton:
        return cast[keyboardButton](obj).TLEncodeType()
    if obj of keyboardButtonUrl:
        return cast[keyboardButtonUrl](obj).TLEncodeType()
    if obj of keyboardButtonCallback:
        return cast[keyboardButtonCallback](obj).TLEncodeType()
    if obj of keyboardButtonRequestPhone:
        return cast[keyboardButtonRequestPhone](obj).TLEncodeType()
    if obj of keyboardButtonRequestGeoLocation:
        return cast[keyboardButtonRequestGeoLocation](obj).TLEncodeType()
    if obj of keyboardButtonSwitchInline:
        return cast[keyboardButtonSwitchInline](obj).TLEncodeType()
    if obj of keyboardButtonGame:
        return cast[keyboardButtonGame](obj).TLEncodeType()
    if obj of keyboardButtonBuy:
        return cast[keyboardButtonBuy](obj).TLEncodeType()
    if obj of keyboardButtonUrlAuth:
        return cast[keyboardButtonUrlAuth](obj).TLEncodeType()
    if obj of inputKeyboardButtonUrlAuth:
        return cast[inputKeyboardButtonUrlAuth](obj).TLEncodeType()
    if obj of keyboardButtonRequestPoll:
        return cast[keyboardButtonRequestPoll](obj).TLEncodeType()

proc TLEncode*(obj: RichTextI): seq[uint8] = 
    if obj of textEmpty:
        return cast[textEmpty](obj).TLEncodeType()
    if obj of textPlain:
        return cast[textPlain](obj).TLEncodeType()
    if obj of textBold:
        return cast[textBold](obj).TLEncodeType()
    if obj of textItalic:
        return cast[textItalic](obj).TLEncodeType()
    if obj of textUnderline:
        return cast[textUnderline](obj).TLEncodeType()
    if obj of textStrike:
        return cast[textStrike](obj).TLEncodeType()
    if obj of textFixed:
        return cast[textFixed](obj).TLEncodeType()
    if obj of textUrl:
        return cast[textUrl](obj).TLEncodeType()
    if obj of textEmail:
        return cast[textEmail](obj).TLEncodeType()
    if obj of textConcat:
        return cast[textConcat](obj).TLEncodeType()
    if obj of textSubscript:
        return cast[textSubscript](obj).TLEncodeType()
    if obj of textSuperscript:
        return cast[textSuperscript](obj).TLEncodeType()
    if obj of textMarked:
        return cast[textMarked](obj).TLEncodeType()
    if obj of textPhone:
        return cast[textPhone](obj).TLEncodeType()
    if obj of textImage:
        return cast[textImage](obj).TLEncodeType()
    if obj of textAnchor:
        return cast[textAnchor](obj).TLEncodeType()

proc TLEncode*(obj: InputMessageI): seq[uint8] = 
    if obj of inputMessageID:
        return cast[inputMessageID](obj).TLEncodeType()
    if obj of inputMessageReplyTo:
        return cast[inputMessageReplyTo](obj).TLEncodeType()
    if obj of inputMessagePinned:
        return cast[inputMessagePinned](obj).TLEncodeType()

proc TLEncode*(obj: InputWebFileLocationI): seq[uint8] = 
    if obj of inputWebFileLocation:
        return cast[inputWebFileLocation](obj).TLEncodeType()
    if obj of inputWebFileGeoPointLocation:
        return cast[inputWebFileGeoPointLocation](obj).TLEncodeType()

proc TLEncode*(obj: messages_AllStickersI): seq[uint8] = 
    if obj of messages_allStickersNotModified:
        return cast[messages_allStickersNotModified](obj).TLEncodeType()
    if obj of messages_allStickers:
        return cast[messages_allStickers](obj).TLEncodeType()

proc TLEncode*(obj: FileHashI): seq[uint8] = 
    if obj of fileHash:
        return cast[fileHash](obj).TLEncodeType()

proc TLEncode*(obj: ChatInviteI): seq[uint8] = 
    if obj of chatInviteAlready:
        return cast[chatInviteAlready](obj).TLEncodeType()
    if obj of chatInvite:
        return cast[chatInvite](obj).TLEncodeType()
    if obj of chatInvitePeek:
        return cast[chatInvitePeek](obj).TLEncodeType()

proc TLEncode*(obj: messages_BotResultsI): seq[uint8] = 
    if obj of messages_botResults:
        return cast[messages_botResults](obj).TLEncodeType()

proc TLEncode*(obj: InputWebDocumentI): seq[uint8] = 
    if obj of inputWebDocument:
        return cast[inputWebDocument](obj).TLEncodeType()

proc TLEncode*(obj: PageListItemI): seq[uint8] = 
    if obj of pageListItemText:
        return cast[pageListItemText](obj).TLEncodeType()
    if obj of pageListItemBlocks:
        return cast[pageListItemBlocks](obj).TLEncodeType()

proc TLEncode*(obj: PageRelatedArticleI): seq[uint8] = 
    if obj of pageRelatedArticle:
        return cast[pageRelatedArticle](obj).TLEncodeType()

proc TLEncode*(obj: help_InviteTextI): seq[uint8] = 
    if obj of help_inviteText:
        return cast[help_inviteText](obj).TLEncodeType()

proc TLEncode*(obj: messages_SavedGifsI): seq[uint8] = 
    if obj of messages_savedGifsNotModified:
        return cast[messages_savedGifsNotModified](obj).TLEncodeType()
    if obj of messages_savedGifs:
        return cast[messages_savedGifs](obj).TLEncodeType()

proc TLEncode*(obj: UserStatusI): seq[uint8] = 
    if obj of userStatusEmpty:
        return cast[userStatusEmpty](obj).TLEncodeType()
    if obj of userStatusOnline:
        return cast[userStatusOnline](obj).TLEncodeType()
    if obj of userStatusOffline:
        return cast[userStatusOffline](obj).TLEncodeType()
    if obj of userStatusRecently:
        return cast[userStatusRecently](obj).TLEncodeType()
    if obj of userStatusLastWeek:
        return cast[userStatusLastWeek](obj).TLEncodeType()
    if obj of userStatusLastMonth:
        return cast[userStatusLastMonth](obj).TLEncodeType()

proc TLEncode*(obj: ContactI): seq[uint8] = 
    if obj of contact:
        return cast[contact](obj).TLEncodeType()

proc TLEncode*(obj: InputSecureFileI): seq[uint8] = 
    if obj of inputSecureFileUploaded:
        return cast[inputSecureFileUploaded](obj).TLEncodeType()
    if obj of inputSecureFile:
        return cast[inputSecureFile](obj).TLEncodeType()

proc TLEncode*(obj: auth_PasswordRecoveryI): seq[uint8] = 
    if obj of auth_passwordRecovery:
        return cast[auth_passwordRecovery](obj).TLEncodeType()

proc TLEncode*(obj: account_WallPapersI): seq[uint8] = 
    if obj of account_wallPapersNotModified:
        return cast[account_wallPapersNotModified](obj).TLEncodeType()
    if obj of account_wallPapers:
        return cast[account_wallPapers](obj).TLEncodeType()

proc TLEncode*(obj: StatsDateRangeDaysI): seq[uint8] = 
    if obj of statsDateRangeDays:
        return cast[statsDateRangeDays](obj).TLEncodeType()

proc TLEncode*(obj: messages_MessagesI): seq[uint8] = 
    if obj of messages_messages:
        return cast[messages_messages](obj).TLEncodeType()
    if obj of messages_messagesSlice:
        return cast[messages_messagesSlice](obj).TLEncodeType()
    if obj of messages_channelMessages:
        return cast[messages_channelMessages](obj).TLEncodeType()
    if obj of messages_messagesNotModified:
        return cast[messages_messagesNotModified](obj).TLEncodeType()

proc TLEncode*(obj: VideoSizeI): seq[uint8] = 
    if obj of videoSize:
        return cast[videoSize](obj).TLEncodeType()

proc TLEncode*(obj: messages_BotCallbackAnswerI): seq[uint8] = 
    if obj of messages_botCallbackAnswer:
        return cast[messages_botCallbackAnswer](obj).TLEncodeType()

proc TLEncode*(obj: auth_CodeTypeI): seq[uint8] = 
    if obj of auth_codeTypeSms:
        return cast[auth_codeTypeSms](obj).TLEncodeType()
    if obj of auth_codeTypeCall:
        return cast[auth_codeTypeCall](obj).TLEncodeType()
    if obj of auth_codeTypeFlashCall:
        return cast[auth_codeTypeFlashCall](obj).TLEncodeType()

proc TLEncode*(obj: InputSecureValueI): seq[uint8] = 
    if obj of inputSecureValue:
        return cast[inputSecureValue](obj).TLEncodeType()

proc TLEncode*(obj: ConfigI): seq[uint8] = 
    if obj of config:
        return cast[config](obj).TLEncodeType()

proc TLEncode*(obj: InputWallPaperI): seq[uint8] = 
    if obj of inputWallPaper:
        return cast[inputWallPaper](obj).TLEncodeType()
    if obj of inputWallPaperSlug:
        return cast[inputWallPaperSlug](obj).TLEncodeType()
    if obj of inputWallPaperNoFile:
        return cast[inputWallPaperNoFile](obj).TLEncodeType()

proc TLEncode*(obj: upload_FileI): seq[uint8] = 
    if obj of upload_file:
        return cast[upload_file](obj).TLEncodeType()
    if obj of upload_fileCdnRedirect:
        return cast[upload_fileCdnRedirect](obj).TLEncodeType()

proc TLEncode*(obj: SecurePasswordKdfAlgoI): seq[uint8] = 
    if obj of securePasswordKdfAlgoUnknown:
        return cast[securePasswordKdfAlgoUnknown](obj).TLEncodeType()
    if obj of securePasswordKdfAlgoPBKDF2HMACSHA512iter100000:
        return cast[securePasswordKdfAlgoPBKDF2HMACSHA512iter100000](obj).TLEncodeType()
    if obj of securePasswordKdfAlgoSHA512:
        return cast[securePasswordKdfAlgoSHA512](obj).TLEncodeType()

proc TLEncode*(obj: MessageUserVoteI): seq[uint8] = 
    if obj of messageUserVote:
        return cast[messageUserVote](obj).TLEncodeType()
    if obj of messageUserVoteInputOption:
        return cast[messageUserVoteInputOption](obj).TLEncodeType()
    if obj of messageUserVoteMultiple:
        return cast[messageUserVoteMultiple](obj).TLEncodeType()

proc TLEncode*(obj: messages_FavedStickersI): seq[uint8] = 
    if obj of messages_favedStickersNotModified:
        return cast[messages_favedStickersNotModified](obj).TLEncodeType()
    if obj of messages_favedStickers:
        return cast[messages_favedStickers](obj).TLEncodeType()

proc TLEncode*(obj: SecureRequiredTypeI): seq[uint8] = 
    if obj of secureRequiredType:
        return cast[secureRequiredType](obj).TLEncodeType()
    if obj of secureRequiredTypeOneOf:
        return cast[secureRequiredTypeOneOf](obj).TLEncodeType()

proc TLEncode*(obj: StatsGroupTopPosterI): seq[uint8] = 
    if obj of statsGroupTopPoster:
        return cast[statsGroupTopPoster](obj).TLEncodeType()

proc TLEncode*(obj: BotCommandI): seq[uint8] = 
    if obj of botCommand:
        return cast[botCommand](obj).TLEncodeType()

proc TLEncode*(obj: messages_FoundStickerSetsI): seq[uint8] = 
    if obj of messages_foundStickerSetsNotModified:
        return cast[messages_foundStickerSetsNotModified](obj).TLEncodeType()
    if obj of messages_foundStickerSets:
        return cast[messages_foundStickerSets](obj).TLEncodeType()

proc TLEncode*(obj: SecureCredentialsEncryptedI): seq[uint8] = 
    if obj of secureCredentialsEncrypted:
        return cast[secureCredentialsEncrypted](obj).TLEncodeType()

proc TLEncode*(obj: channels_ChannelParticipantsI): seq[uint8] = 
    if obj of channels_channelParticipants:
        return cast[channels_channelParticipants](obj).TLEncodeType()
    if obj of channels_channelParticipantsNotModified:
        return cast[channels_channelParticipantsNotModified](obj).TLEncodeType()

proc TLEncode*(obj: PhotoI): seq[uint8] = 
    if obj of photoEmpty:
        return cast[photoEmpty](obj).TLEncodeType()
    if obj of photo:
        return cast[photo](obj).TLEncodeType()

proc TLEncode*(obj: ChatParticipantI): seq[uint8] = 
    if obj of chatParticipant:
        return cast[chatParticipant](obj).TLEncodeType()
    if obj of chatParticipantCreator:
        return cast[chatParticipantCreator](obj).TLEncodeType()
    if obj of chatParticipantAdmin:
        return cast[chatParticipantAdmin](obj).TLEncodeType()

proc TLEncode*(obj: JSONObjectValueI): seq[uint8] = 
    if obj of jsonObjectValue:
        return cast[jsonObjectValue](obj).TLEncodeType()

proc TLEncode*(obj: messages_StickerSetI): seq[uint8] = 
    if obj of messages_stickerSet:
        return cast[messages_stickerSet](obj).TLEncodeType()

proc TLEncode*(obj: SecureValueErrorI): seq[uint8] = 
    if obj of secureValueErrorData:
        return cast[secureValueErrorData](obj).TLEncodeType()
    if obj of secureValueErrorFrontSide:
        return cast[secureValueErrorFrontSide](obj).TLEncodeType()
    if obj of secureValueErrorReverseSide:
        return cast[secureValueErrorReverseSide](obj).TLEncodeType()
    if obj of secureValueErrorSelfie:
        return cast[secureValueErrorSelfie](obj).TLEncodeType()
    if obj of secureValueErrorFile:
        return cast[secureValueErrorFile](obj).TLEncodeType()
    if obj of secureValueErrorFiles:
        return cast[secureValueErrorFiles](obj).TLEncodeType()
    if obj of secureValueError:
        return cast[secureValueError](obj).TLEncodeType()
    if obj of secureValueErrorTranslationFile:
        return cast[secureValueErrorTranslationFile](obj).TLEncodeType()
    if obj of secureValueErrorTranslationFiles:
        return cast[secureValueErrorTranslationFiles](obj).TLEncodeType()

proc TLEncode*(obj: help_UserInfoI): seq[uint8] = 
    if obj of help_userInfoEmpty:
        return cast[help_userInfoEmpty](obj).TLEncodeType()
    if obj of help_userInfo:
        return cast[help_userInfo](obj).TLEncodeType()

proc TLEncode*(obj: BankCardOpenUrlI): seq[uint8] = 
    if obj of bankCardOpenUrl:
        return cast[bankCardOpenUrl](obj).TLEncodeType()

proc TLEncode*(obj: help_PassportConfigI): seq[uint8] = 
    if obj of help_passportConfigNotModified:
        return cast[help_passportConfigNotModified](obj).TLEncodeType()
    if obj of help_passportConfig:
        return cast[help_passportConfig](obj).TLEncodeType()

proc TLEncode*(obj: ChatAdminRightsI): seq[uint8] = 
    if obj of chatAdminRights:
        return cast[chatAdminRights](obj).TLEncodeType()

proc TLEncode*(obj: auth_AuthorizationI): seq[uint8] = 
    if obj of auth_authorization:
        return cast[auth_authorization](obj).TLEncodeType()
    if obj of auth_authorizationSignUpRequired:
        return cast[auth_authorizationSignUpRequired](obj).TLEncodeType()

proc TLEncode*(obj: messages_StickerSetInstallResultI): seq[uint8] = 
    if obj of messages_stickerSetInstallResultSuccess:
        return cast[messages_stickerSetInstallResultSuccess](obj).TLEncodeType()
    if obj of messages_stickerSetInstallResultArchive:
        return cast[messages_stickerSetInstallResultArchive](obj).TLEncodeType()

proc TLEncode*(obj: MessageViewsI): seq[uint8] = 
    if obj of messageViews:
        return cast[messageViews](obj).TLEncodeType()

proc TLEncode*(obj: InputFileI): seq[uint8] = 
    if obj of inputFile:
        return cast[inputFile](obj).TLEncodeType()
    if obj of inputFileBig:
        return cast[inputFileBig](obj).TLEncodeType()

proc TLEncode*(obj: updates_StateI): seq[uint8] = 
    if obj of updates_state:
        return cast[updates_state](obj).TLEncodeType()

proc TLEncode*(obj: EncryptedFileI): seq[uint8] = 
    if obj of encryptedFileEmpty:
        return cast[encryptedFileEmpty](obj).TLEncodeType()
    if obj of encryptedFile:
        return cast[encryptedFile](obj).TLEncodeType()

proc TLEncode*(obj: updates_ChannelDifferenceI): seq[uint8] = 
    if obj of updates_channelDifferenceEmpty:
        return cast[updates_channelDifferenceEmpty](obj).TLEncodeType()
    if obj of updates_channelDifferenceTooLong:
        return cast[updates_channelDifferenceTooLong](obj).TLEncodeType()
    if obj of updates_channelDifference:
        return cast[updates_channelDifference](obj).TLEncodeType()

proc TLEncode*(obj: FolderPeerI): seq[uint8] = 
    if obj of folderPeer:
        return cast[folderPeer](obj).TLEncodeType()

proc TLEncode*(obj: account_PasswordI): seq[uint8] = 
    if obj of account_password:
        return cast[account_password](obj).TLEncodeType()

proc TLEncode*(obj: GameI): seq[uint8] = 
    if obj of game:
        return cast[game](obj).TLEncodeType()

proc TLEncode*(obj: ChatParticipantsI): seq[uint8] = 
    if obj of chatParticipantsForbidden:
        return cast[chatParticipantsForbidden](obj).TLEncodeType()
    if obj of chatParticipants:
        return cast[chatParticipants](obj).TLEncodeType()

proc TLEncode*(obj: auth_ExportedAuthorizationI): seq[uint8] = 
    if obj of auth_exportedAuthorization:
        return cast[auth_exportedAuthorization](obj).TLEncodeType()

proc TLEncode*(obj: InputPhoneCallI): seq[uint8] = 
    if obj of inputPhoneCall:
        return cast[inputPhoneCall](obj).TLEncodeType()

proc TLEncode*(obj: WebPageI): seq[uint8] = 
    if obj of webPageEmpty:
        return cast[webPageEmpty](obj).TLEncodeType()
    if obj of webPagePending:
        return cast[webPagePending](obj).TLEncodeType()
    if obj of webPage:
        return cast[webPage](obj).TLEncodeType()
    if obj of webPageNotModified:
        return cast[webPageNotModified](obj).TLEncodeType()

proc TLEncode*(obj: messages_RecentStickersI): seq[uint8] = 
    if obj of messages_recentStickersNotModified:
        return cast[messages_recentStickersNotModified](obj).TLEncodeType()
    if obj of messages_recentStickers:
        return cast[messages_recentStickers](obj).TLEncodeType()

proc TLEncode*(obj: FolderI): seq[uint8] = 
    if obj of folder:
        return cast[folder](obj).TLEncodeType()

proc TLEncode*(obj: InputUserI): seq[uint8] = 
    if obj of inputUserEmpty:
        return cast[inputUserEmpty](obj).TLEncodeType()
    if obj of inputUserSelf:
        return cast[inputUserSelf](obj).TLEncodeType()
    if obj of inputUser:
        return cast[inputUser](obj).TLEncodeType()
    if obj of inputUserFromMessage:
        return cast[inputUserFromMessage](obj).TLEncodeType()

proc TLEncode*(obj: PeerI): seq[uint8] = 
    if obj of peerUser:
        return cast[peerUser](obj).TLEncodeType()
    if obj of peerChat:
        return cast[peerChat](obj).TLEncodeType()
    if obj of peerChannel:
        return cast[peerChannel](obj).TLEncodeType()

proc TLEncode*(obj: MessageActionI): seq[uint8] = 
    if obj of messageActionEmpty:
        return cast[messageActionEmpty](obj).TLEncodeType()
    if obj of messageActionChatCreate:
        return cast[messageActionChatCreate](obj).TLEncodeType()
    if obj of messageActionChatEditTitle:
        return cast[messageActionChatEditTitle](obj).TLEncodeType()
    if obj of messageActionChatEditPhoto:
        return cast[messageActionChatEditPhoto](obj).TLEncodeType()
    if obj of messageActionChatDeletePhoto:
        return cast[messageActionChatDeletePhoto](obj).TLEncodeType()
    if obj of messageActionChatAddUser:
        return cast[messageActionChatAddUser](obj).TLEncodeType()
    if obj of messageActionChatDeleteUser:
        return cast[messageActionChatDeleteUser](obj).TLEncodeType()
    if obj of messageActionChatJoinedByLink:
        return cast[messageActionChatJoinedByLink](obj).TLEncodeType()
    if obj of messageActionChannelCreate:
        return cast[messageActionChannelCreate](obj).TLEncodeType()
    if obj of messageActionChatMigrateTo:
        return cast[messageActionChatMigrateTo](obj).TLEncodeType()
    if obj of messageActionChannelMigrateFrom:
        return cast[messageActionChannelMigrateFrom](obj).TLEncodeType()
    if obj of messageActionPinMessage:
        return cast[messageActionPinMessage](obj).TLEncodeType()
    if obj of messageActionHistoryClear:
        return cast[messageActionHistoryClear](obj).TLEncodeType()
    if obj of messageActionGameScore:
        return cast[messageActionGameScore](obj).TLEncodeType()
    if obj of messageActionPaymentSentMe:
        return cast[messageActionPaymentSentMe](obj).TLEncodeType()
    if obj of messageActionPaymentSent:
        return cast[messageActionPaymentSent](obj).TLEncodeType()
    if obj of messageActionPhoneCall:
        return cast[messageActionPhoneCall](obj).TLEncodeType()
    if obj of messageActionScreenshotTaken:
        return cast[messageActionScreenshotTaken](obj).TLEncodeType()
    if obj of messageActionCustomAction:
        return cast[messageActionCustomAction](obj).TLEncodeType()
    if obj of messageActionBotAllowed:
        return cast[messageActionBotAllowed](obj).TLEncodeType()
    if obj of messageActionSecureValuesSentMe:
        return cast[messageActionSecureValuesSentMe](obj).TLEncodeType()
    if obj of messageActionSecureValuesSent:
        return cast[messageActionSecureValuesSent](obj).TLEncodeType()
    if obj of messageActionContactSignUp:
        return cast[messageActionContactSignUp](obj).TLEncodeType()
    if obj of messageActionGeoProximityReached:
        return cast[messageActionGeoProximityReached](obj).TLEncodeType()

proc TLEncode*(obj: updates_DifferenceI): seq[uint8] = 
    if obj of updates_differenceEmpty:
        return cast[updates_differenceEmpty](obj).TLEncodeType()
    if obj of updates_difference:
        return cast[updates_difference](obj).TLEncodeType()
    if obj of updates_differenceSlice:
        return cast[updates_differenceSlice](obj).TLEncodeType()
    if obj of updates_differenceTooLong:
        return cast[updates_differenceTooLong](obj).TLEncodeType()

proc TLEncode*(obj: PasswordKdfAlgoI): seq[uint8] = 
    if obj of passwordKdfAlgoUnknown:
        return cast[passwordKdfAlgoUnknown](obj).TLEncodeType()
    if obj of passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow:
        return cast[passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow](obj).TLEncodeType()

proc TLEncode*(obj: AutoDownloadSettingsI): seq[uint8] = 
    if obj of autoDownloadSettings:
        return cast[autoDownloadSettings](obj).TLEncodeType()

proc TLEncode*(obj: UrlAuthResultI): seq[uint8] = 
    if obj of urlAuthResultRequest:
        return cast[urlAuthResultRequest](obj).TLEncodeType()
    if obj of urlAuthResultAccepted:
        return cast[urlAuthResultAccepted](obj).TLEncodeType()
    if obj of urlAuthResultDefault:
        return cast[urlAuthResultDefault](obj).TLEncodeType()

proc TLEncode*(obj: PageI): seq[uint8] = 
    if obj of page:
        return cast[page](obj).TLEncodeType()

proc TLEncode*(obj: HighScoreI): seq[uint8] = 
    if obj of highScore:
        return cast[highScore](obj).TLEncodeType()

proc TLEncode*(obj: InputClientProxyI): seq[uint8] = 
    if obj of inputClientProxy:
        return cast[inputClientProxy](obj).TLEncodeType()

proc TLEncode*(obj: ReceivedNotifyMessageI): seq[uint8] = 
    if obj of receivedNotifyMessage:
        return cast[receivedNotifyMessage](obj).TLEncodeType()

proc TLEncode*(obj: InputGameI): seq[uint8] = 
    if obj of inputGameID:
        return cast[inputGameID](obj).TLEncodeType()
    if obj of inputGameShortName:
        return cast[inputGameShortName](obj).TLEncodeType()

proc TLEncode*(obj: payments_PaymentReceiptI): seq[uint8] = 
    if obj of payments_paymentReceipt:
        return cast[payments_paymentReceipt](obj).TLEncodeType()

proc TLEncode*(obj: TopPeerI): seq[uint8] = 
    if obj of topPeer:
        return cast[topPeer](obj).TLEncodeType()

proc TLEncode*(obj: ChannelAdminLogEventActionI): seq[uint8] = 
    if obj of channelAdminLogEventActionChangeTitle:
        return cast[channelAdminLogEventActionChangeTitle](obj).TLEncodeType()
    if obj of channelAdminLogEventActionChangeAbout:
        return cast[channelAdminLogEventActionChangeAbout](obj).TLEncodeType()
    if obj of channelAdminLogEventActionChangeUsername:
        return cast[channelAdminLogEventActionChangeUsername](obj).TLEncodeType()
    if obj of channelAdminLogEventActionChangePhoto:
        return cast[channelAdminLogEventActionChangePhoto](obj).TLEncodeType()
    if obj of channelAdminLogEventActionToggleInvites:
        return cast[channelAdminLogEventActionToggleInvites](obj).TLEncodeType()
    if obj of channelAdminLogEventActionToggleSignatures:
        return cast[channelAdminLogEventActionToggleSignatures](obj).TLEncodeType()
    if obj of channelAdminLogEventActionUpdatePinned:
        return cast[channelAdminLogEventActionUpdatePinned](obj).TLEncodeType()
    if obj of channelAdminLogEventActionEditMessage:
        return cast[channelAdminLogEventActionEditMessage](obj).TLEncodeType()
    if obj of channelAdminLogEventActionDeleteMessage:
        return cast[channelAdminLogEventActionDeleteMessage](obj).TLEncodeType()
    if obj of channelAdminLogEventActionParticipantJoin:
        return cast[channelAdminLogEventActionParticipantJoin](obj).TLEncodeType()
    if obj of channelAdminLogEventActionParticipantLeave:
        return cast[channelAdminLogEventActionParticipantLeave](obj).TLEncodeType()
    if obj of channelAdminLogEventActionParticipantInvite:
        return cast[channelAdminLogEventActionParticipantInvite](obj).TLEncodeType()
    if obj of channelAdminLogEventActionParticipantToggleBan:
        return cast[channelAdminLogEventActionParticipantToggleBan](obj).TLEncodeType()
    if obj of channelAdminLogEventActionParticipantToggleAdmin:
        return cast[channelAdminLogEventActionParticipantToggleAdmin](obj).TLEncodeType()
    if obj of channelAdminLogEventActionChangeStickerSet:
        return cast[channelAdminLogEventActionChangeStickerSet](obj).TLEncodeType()
    if obj of channelAdminLogEventActionTogglePreHistoryHidden:
        return cast[channelAdminLogEventActionTogglePreHistoryHidden](obj).TLEncodeType()
    if obj of channelAdminLogEventActionDefaultBannedRights:
        return cast[channelAdminLogEventActionDefaultBannedRights](obj).TLEncodeType()
    if obj of channelAdminLogEventActionStopPoll:
        return cast[channelAdminLogEventActionStopPoll](obj).TLEncodeType()
    if obj of channelAdminLogEventActionChangeLinkedChat:
        return cast[channelAdminLogEventActionChangeLinkedChat](obj).TLEncodeType()
    if obj of channelAdminLogEventActionChangeLocation:
        return cast[channelAdminLogEventActionChangeLocation](obj).TLEncodeType()
    if obj of channelAdminLogEventActionToggleSlowMode:
        return cast[channelAdminLogEventActionToggleSlowMode](obj).TLEncodeType()

proc TLEncode*(obj: UserFullI): seq[uint8] = 
    if obj of userFull:
        return cast[userFull](obj).TLEncodeType()

proc TLEncode*(obj: WebDocumentI): seq[uint8] = 
    if obj of webDocument:
        return cast[webDocument](obj).TLEncodeType()
    if obj of webDocumentNoProxy:
        return cast[webDocumentNoProxy](obj).TLEncodeType()

proc TLEncode*(obj: StatsAbsValueAndPrevI): seq[uint8] = 
    if obj of statsAbsValueAndPrev:
        return cast[statsAbsValueAndPrev](obj).TLEncodeType()

proc TLEncode*(obj: contacts_ImportedContactsI): seq[uint8] = 
    if obj of contacts_importedContacts:
        return cast[contacts_importedContacts](obj).TLEncodeType()

proc TLEncode*(obj: EmojiLanguageI): seq[uint8] = 
    if obj of emojiLanguage:
        return cast[emojiLanguage](obj).TLEncodeType()

proc TLEncode*(obj: ReportReasonI): seq[uint8] = 
    if obj of inputReportReasonSpam:
        return cast[inputReportReasonSpam](obj).TLEncodeType()
    if obj of inputReportReasonViolence:
        return cast[inputReportReasonViolence](obj).TLEncodeType()
    if obj of inputReportReasonPornography:
        return cast[inputReportReasonPornography](obj).TLEncodeType()
    if obj of inputReportReasonChildAbuse:
        return cast[inputReportReasonChildAbuse](obj).TLEncodeType()
    if obj of inputReportReasonOther:
        return cast[inputReportReasonOther](obj).TLEncodeType()
    if obj of inputReportReasonCopyright:
        return cast[inputReportReasonCopyright](obj).TLEncodeType()
    if obj of inputReportReasonGeoIrrelevant:
        return cast[inputReportReasonGeoIrrelevant](obj).TLEncodeType()

proc TLEncode*(obj: account_PasswordInputSettingsI): seq[uint8] = 
    if obj of account_passwordInputSettings:
        return cast[account_passwordInputSettings](obj).TLEncodeType()

proc TLEncode*(obj: ChannelParticipantI): seq[uint8] = 
    if obj of channelParticipant:
        return cast[channelParticipant](obj).TLEncodeType()
    if obj of channelParticipantSelf:
        return cast[channelParticipantSelf](obj).TLEncodeType()
    if obj of channelParticipantCreator:
        return cast[channelParticipantCreator](obj).TLEncodeType()
    if obj of channelParticipantAdmin:
        return cast[channelParticipantAdmin](obj).TLEncodeType()
    if obj of channelParticipantBanned:
        return cast[channelParticipantBanned](obj).TLEncodeType()
    if obj of channelParticipantLeft:
        return cast[channelParticipantLeft](obj).TLEncodeType()

proc TLEncode*(obj: InputStickeredMediaI): seq[uint8] = 
    if obj of inputStickeredMediaPhoto:
        return cast[inputStickeredMediaPhoto](obj).TLEncodeType()
    if obj of inputStickeredMediaDocument:
        return cast[inputStickeredMediaDocument](obj).TLEncodeType()

proc TLEncode*(obj: InputChannelI): seq[uint8] = 
    if obj of inputChannelEmpty:
        return cast[inputChannelEmpty](obj).TLEncodeType()
    if obj of inputChannel:
        return cast[inputChannel](obj).TLEncodeType()
    if obj of inputChannelFromMessage:
        return cast[inputChannelFromMessage](obj).TLEncodeType()

proc TLEncode*(obj: messages_SearchCounterI): seq[uint8] = 
    if obj of messages_searchCounter:
        return cast[messages_searchCounter](obj).TLEncodeType()

proc TLEncode*(obj: InputDocumentI): seq[uint8] = 
    if obj of inputDocumentEmpty:
        return cast[inputDocumentEmpty](obj).TLEncodeType()
    if obj of inputDocument:
        return cast[inputDocument](obj).TLEncodeType()

proc TLEncode*(obj: InputEncryptedFileI): seq[uint8] = 
    if obj of inputEncryptedFileEmpty:
        return cast[inputEncryptedFileEmpty](obj).TLEncodeType()
    if obj of inputEncryptedFileUploaded:
        return cast[inputEncryptedFileUploaded](obj).TLEncodeType()
    if obj of inputEncryptedFile:
        return cast[inputEncryptedFile](obj).TLEncodeType()
    if obj of inputEncryptedFileBigUploaded:
        return cast[inputEncryptedFileBigUploaded](obj).TLEncodeType()

proc TLEncode*(obj: account_PrivacyRulesI): seq[uint8] = 
    if obj of account_privacyRules:
        return cast[account_privacyRules](obj).TLEncodeType()

proc TLEncode*(obj: InputThemeSettingsI): seq[uint8] = 
    if obj of inputThemeSettings:
        return cast[inputThemeSettings](obj).TLEncodeType()

proc TLEncode*(obj: payments_ValidatedRequestedInfoI): seq[uint8] = 
    if obj of payments_validatedRequestedInfo:
        return cast[payments_validatedRequestedInfo](obj).TLEncodeType()

proc TLEncode*(obj: account_AuthorizationsI): seq[uint8] = 
    if obj of account_authorizations:
        return cast[account_authorizations](obj).TLEncodeType()

proc TLEncode*(obj: InputPrivacyRuleI): seq[uint8] = 
    if obj of inputPrivacyValueAllowContacts:
        return cast[inputPrivacyValueAllowContacts](obj).TLEncodeType()
    if obj of inputPrivacyValueAllowAll:
        return cast[inputPrivacyValueAllowAll](obj).TLEncodeType()
    if obj of inputPrivacyValueAllowUsers:
        return cast[inputPrivacyValueAllowUsers](obj).TLEncodeType()
    if obj of inputPrivacyValueDisallowContacts:
        return cast[inputPrivacyValueDisallowContacts](obj).TLEncodeType()
    if obj of inputPrivacyValueDisallowAll:
        return cast[inputPrivacyValueDisallowAll](obj).TLEncodeType()
    if obj of inputPrivacyValueDisallowUsers:
        return cast[inputPrivacyValueDisallowUsers](obj).TLEncodeType()
    if obj of inputPrivacyValueAllowChatParticipants:
        return cast[inputPrivacyValueAllowChatParticipants](obj).TLEncodeType()
    if obj of inputPrivacyValueDisallowChatParticipants:
        return cast[inputPrivacyValueDisallowChatParticipants](obj).TLEncodeType()

proc TLEncode*(obj: StickerSetI): seq[uint8] = 
    if obj of stickerSet:
        return cast[stickerSet](obj).TLEncodeType()

proc TLEncode*(obj: PollResultsI): seq[uint8] = 
    if obj of pollResults:
        return cast[pollResults](obj).TLEncodeType()

proc TLEncode*(obj: SecureValueI): seq[uint8] = 
    if obj of secureValue:
        return cast[secureValue](obj).TLEncodeType()

proc TLEncode*(obj: ChannelAdminLogEventsFilterI): seq[uint8] = 
    if obj of channelAdminLogEventsFilter:
        return cast[channelAdminLogEventsFilter](obj).TLEncodeType()

proc TLEncode*(obj: RestrictionReasonI): seq[uint8] = 
    if obj of restrictionReason:
        return cast[restrictionReason](obj).TLEncodeType()

proc TLEncode*(obj: InputBotInlineResultI): seq[uint8] = 
    if obj of inputBotInlineResult:
        return cast[inputBotInlineResult](obj).TLEncodeType()
    if obj of inputBotInlineResultPhoto:
        return cast[inputBotInlineResultPhoto](obj).TLEncodeType()
    if obj of inputBotInlineResultDocument:
        return cast[inputBotInlineResultDocument](obj).TLEncodeType()
    if obj of inputBotInlineResultGame:
        return cast[inputBotInlineResultGame](obj).TLEncodeType()

proc TLEncode*(obj: WallPaperI): seq[uint8] = 
    if obj of wallPaper:
        return cast[wallPaper](obj).TLEncodeType()
    if obj of wallPaperNoFile:
        return cast[wallPaperNoFile](obj).TLEncodeType()

proc TLEncode*(obj: ImportedContactI): seq[uint8] = 
    if obj of importedContact:
        return cast[importedContact](obj).TLEncodeType()

proc TLEncode*(obj: help_TermsOfServiceI): seq[uint8] = 
    if obj of help_termsOfService:
        return cast[help_termsOfService](obj).TLEncodeType()

proc TLEncode*(obj: DataJSONI): seq[uint8] = 
    if obj of dataJSON:
        return cast[dataJSON](obj).TLEncodeType()

proc TLEncode*(obj: ShippingOptionI): seq[uint8] = 
    if obj of shippingOption:
        return cast[shippingOption](obj).TLEncodeType()

proc TLEncode*(obj: InputMediaI): seq[uint8] = 
    if obj of inputMediaEmpty:
        return cast[inputMediaEmpty](obj).TLEncodeType()
    if obj of inputMediaUploadedPhoto:
        return cast[inputMediaUploadedPhoto](obj).TLEncodeType()
    if obj of inputMediaPhoto:
        return cast[inputMediaPhoto](obj).TLEncodeType()
    if obj of inputMediaGeoPoint:
        return cast[inputMediaGeoPoint](obj).TLEncodeType()
    if obj of inputMediaContact:
        return cast[inputMediaContact](obj).TLEncodeType()
    if obj of inputMediaUploadedDocument:
        return cast[inputMediaUploadedDocument](obj).TLEncodeType()
    if obj of inputMediaDocument:
        return cast[inputMediaDocument](obj).TLEncodeType()
    if obj of inputMediaVenue:
        return cast[inputMediaVenue](obj).TLEncodeType()
    if obj of inputMediaPhotoExternal:
        return cast[inputMediaPhotoExternal](obj).TLEncodeType()
    if obj of inputMediaDocumentExternal:
        return cast[inputMediaDocumentExternal](obj).TLEncodeType()
    if obj of inputMediaGame:
        return cast[inputMediaGame](obj).TLEncodeType()
    if obj of inputMediaInvoice:
        return cast[inputMediaInvoice](obj).TLEncodeType()
    if obj of inputMediaGeoLive:
        return cast[inputMediaGeoLive](obj).TLEncodeType()
    if obj of inputMediaPoll:
        return cast[inputMediaPoll](obj).TLEncodeType()
    if obj of inputMediaDice:
        return cast[inputMediaDice](obj).TLEncodeType()

proc TLEncode*(obj: ExportedMessageLinkI): seq[uint8] = 
    if obj of exportedMessageLink:
        return cast[exportedMessageLink](obj).TLEncodeType()

proc TLEncode*(obj: PaymentChargeI): seq[uint8] = 
    if obj of paymentCharge:
        return cast[paymentCharge](obj).TLEncodeType()

proc TLEncode*(obj: InputNotifyPeerI): seq[uint8] = 
    if obj of inputNotifyPeer:
        return cast[inputNotifyPeer](obj).TLEncodeType()
    if obj of inputNotifyUsers:
        return cast[inputNotifyUsers](obj).TLEncodeType()
    if obj of inputNotifyChats:
        return cast[inputNotifyChats](obj).TLEncodeType()
    if obj of inputNotifyBroadcasts:
        return cast[inputNotifyBroadcasts](obj).TLEncodeType()

proc TLEncode*(obj: InputStickerSetI): seq[uint8] = 
    if obj of inputStickerSetEmpty:
        return cast[inputStickerSetEmpty](obj).TLEncodeType()
    if obj of inputStickerSetID:
        return cast[inputStickerSetID](obj).TLEncodeType()
    if obj of inputStickerSetShortName:
        return cast[inputStickerSetShortName](obj).TLEncodeType()
    if obj of inputStickerSetAnimatedEmoji:
        return cast[inputStickerSetAnimatedEmoji](obj).TLEncodeType()
    if obj of inputStickerSetDice:
        return cast[inputStickerSetDice](obj).TLEncodeType()

proc TLEncode*(obj: payments_PaymentFormI): seq[uint8] = 
    if obj of payments_paymentForm:
        return cast[payments_paymentForm](obj).TLEncodeType()

proc TLEncode*(obj: LangPackDifferenceI): seq[uint8] = 
    if obj of langPackDifference:
        return cast[langPackDifference](obj).TLEncodeType()

proc TLEncode*(obj: messages_DialogsI): seq[uint8] = 
    if obj of messages_dialogs:
        return cast[messages_dialogs](obj).TLEncodeType()
    if obj of messages_dialogsSlice:
        return cast[messages_dialogsSlice](obj).TLEncodeType()
    if obj of messages_dialogsNotModified:
        return cast[messages_dialogsNotModified](obj).TLEncodeType()

proc TLEncode*(obj: MessageInteractionCountersI): seq[uint8] = 
    if obj of messageInteractionCounters:
        return cast[messageInteractionCounters](obj).TLEncodeType()

proc TLEncode*(obj: auth_SentCodeTypeI): seq[uint8] = 
    if obj of auth_sentCodeTypeApp:
        return cast[auth_sentCodeTypeApp](obj).TLEncodeType()
    if obj of auth_sentCodeTypeSms:
        return cast[auth_sentCodeTypeSms](obj).TLEncodeType()
    if obj of auth_sentCodeTypeCall:
        return cast[auth_sentCodeTypeCall](obj).TLEncodeType()
    if obj of auth_sentCodeTypeFlashCall:
        return cast[auth_sentCodeTypeFlashCall](obj).TLEncodeType()

proc TLEncode*(obj: PeerNotifySettingsI): seq[uint8] = 
    if obj of peerNotifySettings:
        return cast[peerNotifySettings](obj).TLEncodeType()

proc TLEncode*(obj: StickerSetCoveredI): seq[uint8] = 
    if obj of stickerSetCovered:
        return cast[stickerSetCovered](obj).TLEncodeType()
    if obj of stickerSetMultiCovered:
        return cast[stickerSetMultiCovered](obj).TLEncodeType()

proc TLEncode*(obj: messages_DiscussionMessageI): seq[uint8] = 
    if obj of messages_discussionMessage:
        return cast[messages_discussionMessage](obj).TLEncodeType()

proc TLEncode*(obj: UpdateI): seq[uint8] = 
    if obj of updateNewMessage:
        return cast[updateNewMessage](obj).TLEncodeType()
    if obj of updateMessageID:
        return cast[updateMessageID](obj).TLEncodeType()
    if obj of updateDeleteMessages:
        return cast[updateDeleteMessages](obj).TLEncodeType()
    if obj of updateUserTyping:
        return cast[updateUserTyping](obj).TLEncodeType()
    if obj of updateChatUserTyping:
        return cast[updateChatUserTyping](obj).TLEncodeType()
    if obj of updateChatParticipants:
        return cast[updateChatParticipants](obj).TLEncodeType()
    if obj of updateUserStatus:
        return cast[updateUserStatus](obj).TLEncodeType()
    if obj of updateUserName:
        return cast[updateUserName](obj).TLEncodeType()
    if obj of updateUserPhoto:
        return cast[updateUserPhoto](obj).TLEncodeType()
    if obj of updateNewEncryptedMessage:
        return cast[updateNewEncryptedMessage](obj).TLEncodeType()
    if obj of updateEncryptedChatTyping:
        return cast[updateEncryptedChatTyping](obj).TLEncodeType()
    if obj of updateEncryption:
        return cast[updateEncryption](obj).TLEncodeType()
    if obj of updateEncryptedMessagesRead:
        return cast[updateEncryptedMessagesRead](obj).TLEncodeType()
    if obj of updateChatParticipantAdd:
        return cast[updateChatParticipantAdd](obj).TLEncodeType()
    if obj of updateChatParticipantDelete:
        return cast[updateChatParticipantDelete](obj).TLEncodeType()
    if obj of updateDcOptions:
        return cast[updateDcOptions](obj).TLEncodeType()
    if obj of updateNotifySettings:
        return cast[updateNotifySettings](obj).TLEncodeType()
    if obj of updateServiceNotification:
        return cast[updateServiceNotification](obj).TLEncodeType()
    if obj of updatePrivacy:
        return cast[updatePrivacy](obj).TLEncodeType()
    if obj of updateUserPhone:
        return cast[updateUserPhone](obj).TLEncodeType()
    if obj of updateReadHistoryInbox:
        return cast[updateReadHistoryInbox](obj).TLEncodeType()
    if obj of updateReadHistoryOutbox:
        return cast[updateReadHistoryOutbox](obj).TLEncodeType()
    if obj of updateWebPage:
        return cast[updateWebPage](obj).TLEncodeType()
    if obj of updateReadMessagesContents:
        return cast[updateReadMessagesContents](obj).TLEncodeType()
    if obj of updateChannelTooLong:
        return cast[updateChannelTooLong](obj).TLEncodeType()
    if obj of updateChannel:
        return cast[updateChannel](obj).TLEncodeType()
    if obj of updateNewChannelMessage:
        return cast[updateNewChannelMessage](obj).TLEncodeType()
    if obj of updateReadChannelInbox:
        return cast[updateReadChannelInbox](obj).TLEncodeType()
    if obj of updateDeleteChannelMessages:
        return cast[updateDeleteChannelMessages](obj).TLEncodeType()
    if obj of updateChannelMessageViews:
        return cast[updateChannelMessageViews](obj).TLEncodeType()
    if obj of updateChatParticipantAdmin:
        return cast[updateChatParticipantAdmin](obj).TLEncodeType()
    if obj of updateNewStickerSet:
        return cast[updateNewStickerSet](obj).TLEncodeType()
    if obj of updateStickerSetsOrder:
        return cast[updateStickerSetsOrder](obj).TLEncodeType()
    if obj of updateStickerSets:
        return cast[updateStickerSets](obj).TLEncodeType()
    if obj of updateSavedGifs:
        return cast[updateSavedGifs](obj).TLEncodeType()
    if obj of updateBotInlineQuery:
        return cast[updateBotInlineQuery](obj).TLEncodeType()
    if obj of updateBotInlineSend:
        return cast[updateBotInlineSend](obj).TLEncodeType()
    if obj of updateEditChannelMessage:
        return cast[updateEditChannelMessage](obj).TLEncodeType()
    if obj of updateBotCallbackQuery:
        return cast[updateBotCallbackQuery](obj).TLEncodeType()
    if obj of updateEditMessage:
        return cast[updateEditMessage](obj).TLEncodeType()
    if obj of updateInlineBotCallbackQuery:
        return cast[updateInlineBotCallbackQuery](obj).TLEncodeType()
    if obj of updateReadChannelOutbox:
        return cast[updateReadChannelOutbox](obj).TLEncodeType()
    if obj of updateDraftMessage:
        return cast[updateDraftMessage](obj).TLEncodeType()
    if obj of updateReadFeaturedStickers:
        return cast[updateReadFeaturedStickers](obj).TLEncodeType()
    if obj of updateRecentStickers:
        return cast[updateRecentStickers](obj).TLEncodeType()
    if obj of updateConfig:
        return cast[updateConfig](obj).TLEncodeType()
    if obj of updatePtsChanged:
        return cast[updatePtsChanged](obj).TLEncodeType()
    if obj of updateChannelWebPage:
        return cast[updateChannelWebPage](obj).TLEncodeType()
    if obj of updateDialogPinned:
        return cast[updateDialogPinned](obj).TLEncodeType()
    if obj of updatePinnedDialogs:
        return cast[updatePinnedDialogs](obj).TLEncodeType()
    if obj of updateBotWebhookJSON:
        return cast[updateBotWebhookJSON](obj).TLEncodeType()
    if obj of updateBotWebhookJSONQuery:
        return cast[updateBotWebhookJSONQuery](obj).TLEncodeType()
    if obj of updateBotShippingQuery:
        return cast[updateBotShippingQuery](obj).TLEncodeType()
    if obj of updateBotPrecheckoutQuery:
        return cast[updateBotPrecheckoutQuery](obj).TLEncodeType()
    if obj of updatePhoneCall:
        return cast[updatePhoneCall](obj).TLEncodeType()
    if obj of updateLangPackTooLong:
        return cast[updateLangPackTooLong](obj).TLEncodeType()
    if obj of updateLangPack:
        return cast[updateLangPack](obj).TLEncodeType()
    if obj of updateFavedStickers:
        return cast[updateFavedStickers](obj).TLEncodeType()
    if obj of updateChannelReadMessagesContents:
        return cast[updateChannelReadMessagesContents](obj).TLEncodeType()
    if obj of updateContactsReset:
        return cast[updateContactsReset](obj).TLEncodeType()
    if obj of updateChannelAvailableMessages:
        return cast[updateChannelAvailableMessages](obj).TLEncodeType()
    if obj of updateDialogUnreadMark:
        return cast[updateDialogUnreadMark](obj).TLEncodeType()
    if obj of updateMessagePoll:
        return cast[updateMessagePoll](obj).TLEncodeType()
    if obj of updateChatDefaultBannedRights:
        return cast[updateChatDefaultBannedRights](obj).TLEncodeType()
    if obj of updateFolderPeers:
        return cast[updateFolderPeers](obj).TLEncodeType()
    if obj of updatePeerSettings:
        return cast[updatePeerSettings](obj).TLEncodeType()
    if obj of updatePeerLocated:
        return cast[updatePeerLocated](obj).TLEncodeType()
    if obj of updateNewScheduledMessage:
        return cast[updateNewScheduledMessage](obj).TLEncodeType()
    if obj of updateDeleteScheduledMessages:
        return cast[updateDeleteScheduledMessages](obj).TLEncodeType()
    if obj of updateTheme:
        return cast[updateTheme](obj).TLEncodeType()
    if obj of updateGeoLiveViewed:
        return cast[updateGeoLiveViewed](obj).TLEncodeType()
    if obj of updateLoginToken:
        return cast[updateLoginToken](obj).TLEncodeType()
    if obj of updateMessagePollVote:
        return cast[updateMessagePollVote](obj).TLEncodeType()
    if obj of updateDialogFilter:
        return cast[updateDialogFilter](obj).TLEncodeType()
    if obj of updateDialogFilterOrder:
        return cast[updateDialogFilterOrder](obj).TLEncodeType()
    if obj of updateDialogFilters:
        return cast[updateDialogFilters](obj).TLEncodeType()
    if obj of updatePhoneCallSignalingData:
        return cast[updatePhoneCallSignalingData](obj).TLEncodeType()
    if obj of updateChannelParticipant:
        return cast[updateChannelParticipant](obj).TLEncodeType()
    if obj of updateChannelMessageForwards:
        return cast[updateChannelMessageForwards](obj).TLEncodeType()
    if obj of updateReadChannelDiscussionInbox:
        return cast[updateReadChannelDiscussionInbox](obj).TLEncodeType()
    if obj of updateReadChannelDiscussionOutbox:
        return cast[updateReadChannelDiscussionOutbox](obj).TLEncodeType()
    if obj of updatePeerBlocked:
        return cast[updatePeerBlocked](obj).TLEncodeType()
    if obj of updateChannelUserTyping:
        return cast[updateChannelUserTyping](obj).TLEncodeType()
    if obj of updatePinnedMessages:
        return cast[updatePinnedMessages](obj).TLEncodeType()
    if obj of updatePinnedChannelMessages:
        return cast[updatePinnedChannelMessages](obj).TLEncodeType()

proc TLEncode*(obj: TopPeerCategoryPeersI): seq[uint8] = 
    if obj of topPeerCategoryPeers:
        return cast[topPeerCategoryPeers](obj).TLEncodeType()

proc TLEncode*(obj: auth_SentCodeI): seq[uint8] = 
    if obj of auth_sentCode:
        return cast[auth_sentCode](obj).TLEncodeType()

proc TLEncode*(obj: ExportedChatInviteI): seq[uint8] = 
    if obj of chatInviteEmpty:
        return cast[chatInviteEmpty](obj).TLEncodeType()
    if obj of chatInviteExported:
        return cast[chatInviteExported](obj).TLEncodeType()

proc TLEncode*(obj: account_ThemesI): seq[uint8] = 
    if obj of account_themesNotModified:
        return cast[account_themesNotModified](obj).TLEncodeType()
    if obj of account_themes:
        return cast[account_themes](obj).TLEncodeType()

proc TLEncode*(obj: help_CountryI): seq[uint8] = 
    if obj of help_country:
        return cast[help_country](obj).TLEncodeType()

proc TLEncode*(obj: messages_InactiveChatsI): seq[uint8] = 
    if obj of messages_inactiveChats:
        return cast[messages_inactiveChats](obj).TLEncodeType()

proc TLEncode*(obj: PhoneCallDiscardReasonI): seq[uint8] = 
    if obj of phoneCallDiscardReasonMissed:
        return cast[phoneCallDiscardReasonMissed](obj).TLEncodeType()
    if obj of phoneCallDiscardReasonDisconnect:
        return cast[phoneCallDiscardReasonDisconnect](obj).TLEncodeType()
    if obj of phoneCallDiscardReasonHangup:
        return cast[phoneCallDiscardReasonHangup](obj).TLEncodeType()
    if obj of phoneCallDiscardReasonBusy:
        return cast[phoneCallDiscardReasonBusy](obj).TLEncodeType()

proc TLEncode*(obj: stats_BroadcastStatsI): seq[uint8] = 
    if obj of stats_broadcastStats:
        return cast[stats_broadcastStats](obj).TLEncodeType()

proc TLEncode*(obj: account_TmpPasswordI): seq[uint8] = 
    if obj of account_tmpPassword:
        return cast[account_tmpPassword](obj).TLEncodeType()

proc TLEncode*(obj: InputPaymentCredentialsI): seq[uint8] = 
    if obj of inputPaymentCredentialsSaved:
        return cast[inputPaymentCredentialsSaved](obj).TLEncodeType()
    if obj of inputPaymentCredentials:
        return cast[inputPaymentCredentials](obj).TLEncodeType()
    if obj of inputPaymentCredentialsApplePay:
        return cast[inputPaymentCredentialsApplePay](obj).TLEncodeType()
    if obj of inputPaymentCredentialsAndroidPay:
        return cast[inputPaymentCredentialsAndroidPay](obj).TLEncodeType()

proc TLEncode*(obj: ThemeSettingsI): seq[uint8] = 
    if obj of themeSettings:
        return cast[themeSettings](obj).TLEncodeType()

proc TLEncode*(obj: BotInfoI): seq[uint8] = 
    if obj of botInfo:
        return cast[botInfo](obj).TLEncodeType()

proc TLEncode*(obj: PollAnswerI): seq[uint8] = 
    if obj of pollAnswer:
        return cast[pollAnswer](obj).TLEncodeType()

proc TLEncode*(obj: DialogI): seq[uint8] = 
    if obj of dialog:
        return cast[dialog](obj).TLEncodeType()
    if obj of dialogFolder:
        return cast[dialogFolder](obj).TLEncodeType()

proc TLEncode*(obj: PageListOrderedItemI): seq[uint8] = 
    if obj of pageListOrderedItemText:
        return cast[pageListOrderedItemText](obj).TLEncodeType()
    if obj of pageListOrderedItemBlocks:
        return cast[pageListOrderedItemBlocks](obj).TLEncodeType()

proc TLEncode*(obj: PaymentSavedCredentialsI): seq[uint8] = 
    if obj of paymentSavedCredentialsCard:
        return cast[paymentSavedCredentialsCard](obj).TLEncodeType()

proc TLEncode*(obj: KeyboardButtonRowI): seq[uint8] = 
    if obj of keyboardButtonRow:
        return cast[keyboardButtonRow](obj).TLEncodeType()

proc TLEncode*(obj: InlineBotSwitchPMI): seq[uint8] = 
    if obj of inlineBotSwitchPM:
        return cast[inlineBotSwitchPM](obj).TLEncodeType()

proc TLEncode*(obj: messages_HighScoresI): seq[uint8] = 
    if obj of messages_highScores:
        return cast[messages_highScores](obj).TLEncodeType()

proc TLEncode*(obj: messages_AffectedHistoryI): seq[uint8] = 
    if obj of messages_affectedHistory:
        return cast[messages_affectedHistory](obj).TLEncodeType()

proc TLEncode*(obj: FileLocationI): seq[uint8] = 
    if obj of fileLocationToBeDeprecated:
        return cast[fileLocationToBeDeprecated](obj).TLEncodeType()

proc TLEncode*(obj: NearestDcI): seq[uint8] = 
    if obj of nearestDc:
        return cast[nearestDc](obj).TLEncodeType()

proc TLEncode*(obj: InputSingleMediaI): seq[uint8] = 
    if obj of inputSingleMedia:
        return cast[inputSingleMedia](obj).TLEncodeType()

proc TLEncode*(obj: UserI): seq[uint8] = 
    if obj of userEmpty:
        return cast[userEmpty](obj).TLEncodeType()
    if obj of user:
        return cast[user](obj).TLEncodeType()

proc TLEncode*(obj: LangPackLanguageI): seq[uint8] = 
    if obj of langPackLanguage:
        return cast[langPackLanguage](obj).TLEncodeType()

proc TLEncode*(obj: LangPackStringI): seq[uint8] = 
    if obj of langPackString:
        return cast[langPackString](obj).TLEncodeType()
    if obj of langPackStringPluralized:
        return cast[langPackStringPluralized](obj).TLEncodeType()
    if obj of langPackStringDeleted:
        return cast[langPackStringDeleted](obj).TLEncodeType()

proc TLEncode*(obj: WebPageAttributeI): seq[uint8] = 
    if obj of webPageAttributeTheme:
        return cast[webPageAttributeTheme](obj).TLEncodeType()

proc TLEncode*(obj: NotifyPeerI): seq[uint8] = 
    if obj of notifyPeer:
        return cast[notifyPeer](obj).TLEncodeType()
    if obj of notifyUsers:
        return cast[notifyUsers](obj).TLEncodeType()
    if obj of notifyChats:
        return cast[notifyChats](obj).TLEncodeType()
    if obj of notifyBroadcasts:
        return cast[notifyBroadcasts](obj).TLEncodeType()

proc TLEncode*(obj: InputDialogPeerI): seq[uint8] = 
    if obj of inputDialogPeer:
        return cast[inputDialogPeer](obj).TLEncodeType()
    if obj of inputDialogPeerFolder:
        return cast[inputDialogPeerFolder](obj).TLEncodeType()

proc TLEncode*(obj: payments_BankCardDataI): seq[uint8] = 
    if obj of payments_bankCardData:
        return cast[payments_bankCardData](obj).TLEncodeType()

proc TLEncode*(obj: StatsPercentValueI): seq[uint8] = 
    if obj of statsPercentValue:
        return cast[statsPercentValue](obj).TLEncodeType()

proc TLEncode*(obj: contacts_TopPeersI): seq[uint8] = 
    if obj of contacts_topPeersNotModified:
        return cast[contacts_topPeersNotModified](obj).TLEncodeType()
    if obj of contacts_topPeers:
        return cast[contacts_topPeers](obj).TLEncodeType()
    if obj of contacts_topPeersDisabled:
        return cast[contacts_topPeersDisabled](obj).TLEncodeType()

proc TLEncode*(obj: contacts_BlockedI): seq[uint8] = 
    if obj of contacts_blocked:
        return cast[contacts_blocked](obj).TLEncodeType()
    if obj of contacts_blockedSlice:
        return cast[contacts_blockedSlice](obj).TLEncodeType()

proc TLEncode*(obj: DcOptionI): seq[uint8] = 
    if obj of dcOption:
        return cast[dcOption](obj).TLEncodeType()

proc TLEncode*(obj: SavedContactI): seq[uint8] = 
    if obj of savedPhoneContact:
        return cast[savedPhoneContact](obj).TLEncodeType()

proc TLEncode*(obj: PageCaptionI): seq[uint8] = 
    if obj of pageCaption:
        return cast[pageCaption](obj).TLEncodeType()

proc TLEncode*(obj: upload_WebFileI): seq[uint8] = 
    if obj of upload_webFile:
        return cast[upload_webFile](obj).TLEncodeType()

proc TLEncode*(obj: account_AutoDownloadSettingsI): seq[uint8] = 
    if obj of account_autoDownloadSettings:
        return cast[account_autoDownloadSettings](obj).TLEncodeType()

proc TLEncode*(obj: messages_VotesListI): seq[uint8] = 
    if obj of messages_votesList:
        return cast[messages_votesList](obj).TLEncodeType()

proc TLEncode*(obj: messages_StickersI): seq[uint8] = 
    if obj of messages_stickersNotModified:
        return cast[messages_stickersNotModified](obj).TLEncodeType()
    if obj of messages_stickers:
        return cast[messages_stickers](obj).TLEncodeType()

proc TLEncode*(obj: ChannelMessagesFilterI): seq[uint8] = 
    if obj of channelMessagesFilterEmpty:
        return cast[channelMessagesFilterEmpty](obj).TLEncodeType()
    if obj of channelMessagesFilter:
        return cast[channelMessagesFilter](obj).TLEncodeType()

proc TLEncode*(obj: InputPeerNotifySettingsI): seq[uint8] = 
    if obj of inputPeerNotifySettings:
        return cast[inputPeerNotifySettings](obj).TLEncodeType()

proc TLEncode*(obj: InvoiceI): seq[uint8] = 
    if obj of invoice:
        return cast[invoice](obj).TLEncodeType()

proc TLEncode*(obj: PhoneConnectionI): seq[uint8] = 
    if obj of phoneConnection:
        return cast[phoneConnection](obj).TLEncodeType()
    if obj of phoneConnectionWebrtc:
        return cast[phoneConnectionWebrtc](obj).TLEncodeType()

proc TLEncode*(obj: InputContactI): seq[uint8] = 
    if obj of inputPhoneContact:
        return cast[inputPhoneContact](obj).TLEncodeType()

proc TLEncode*(obj: messages_SentEncryptedMessageI): seq[uint8] = 
    if obj of messages_sentEncryptedMessage:
        return cast[messages_sentEncryptedMessage](obj).TLEncodeType()
    if obj of messages_sentEncryptedFile:
        return cast[messages_sentEncryptedFile](obj).TLEncodeType()

proc TLEncode*(obj: channels_AdminLogResultsI): seq[uint8] = 
    if obj of channels_adminLogResults:
        return cast[channels_adminLogResults](obj).TLEncodeType()

proc TLEncode*(obj: WallPaperSettingsI): seq[uint8] = 
    if obj of wallPaperSettings:
        return cast[wallPaperSettings](obj).TLEncodeType()

proc TLEncode*(obj: storage_FileTypeI): seq[uint8] = 
    if obj of storage_fileUnknown:
        return cast[storage_fileUnknown](obj).TLEncodeType()
    if obj of storage_filePartial:
        return cast[storage_filePartial](obj).TLEncodeType()
    if obj of storage_fileJpeg:
        return cast[storage_fileJpeg](obj).TLEncodeType()
    if obj of storage_fileGif:
        return cast[storage_fileGif](obj).TLEncodeType()
    if obj of storage_filePng:
        return cast[storage_filePng](obj).TLEncodeType()
    if obj of storage_filePdf:
        return cast[storage_filePdf](obj).TLEncodeType()
    if obj of storage_fileMp3:
        return cast[storage_fileMp3](obj).TLEncodeType()
    if obj of storage_fileMov:
        return cast[storage_fileMov](obj).TLEncodeType()
    if obj of storage_fileMp4:
        return cast[storage_fileMp4](obj).TLEncodeType()
    if obj of storage_fileWebp:
        return cast[storage_fileWebp](obj).TLEncodeType()

proc TLEncode*(obj: InputThemeI): seq[uint8] = 
    if obj of inputTheme:
        return cast[inputTheme](obj).TLEncodeType()
    if obj of inputThemeSlug:
        return cast[inputThemeSlug](obj).TLEncodeType()

proc TLEncode*(obj: MessageReplyHeaderI): seq[uint8] = 
    if obj of messageReplyHeader:
        return cast[messageReplyHeader](obj).TLEncodeType()

proc TLEncode*(obj: messages_AffectedMessagesI): seq[uint8] = 
    if obj of messages_affectedMessages:
        return cast[messages_affectedMessages](obj).TLEncodeType()

proc TLEncode*(obj: LabeledPriceI): seq[uint8] = 
    if obj of labeledPrice:
        return cast[labeledPrice](obj).TLEncodeType()

proc TLEncode*(obj: contacts_ResolvedPeerI): seq[uint8] = 
    if obj of contacts_resolvedPeer:
        return cast[contacts_resolvedPeer](obj).TLEncodeType()

proc TLEncode*(obj: messages_PeerDialogsI): seq[uint8] = 
    if obj of messages_peerDialogs:
        return cast[messages_peerDialogs](obj).TLEncodeType()

proc TLEncode*(obj: MessageRangeI): seq[uint8] = 
    if obj of messageRange:
        return cast[messageRange](obj).TLEncodeType()

proc TLEncode*(obj: PostAddressI): seq[uint8] = 
    if obj of postAddress:
        return cast[postAddress](obj).TLEncodeType()

proc TLEncode*(obj: GeoPointI): seq[uint8] = 
    if obj of geoPointEmpty:
        return cast[geoPointEmpty](obj).TLEncodeType()
    if obj of geoPoint:
        return cast[geoPoint](obj).TLEncodeType()

proc TLEncode*(obj: upload_CdnFileI): seq[uint8] = 
    if obj of upload_cdnFileReuploadNeeded:
        return cast[upload_cdnFileReuploadNeeded](obj).TLEncodeType()
    if obj of upload_cdnFile:
        return cast[upload_cdnFile](obj).TLEncodeType()

proc TLEncode*(obj: help_SupportI): seq[uint8] = 
    if obj of help_support:
        return cast[help_support](obj).TLEncodeType()

proc TLEncode*(obj: PeerBlockedI): seq[uint8] = 
    if obj of peerBlocked:
        return cast[peerBlocked](obj).TLEncodeType()

proc TLEncode*(obj: InputFolderPeerI): seq[uint8] = 
    if obj of inputFolderPeer:
        return cast[inputFolderPeer](obj).TLEncodeType()

proc TLEncode*(obj: CdnPublicKeyI): seq[uint8] = 
    if obj of cdnPublicKey:
        return cast[cdnPublicKey](obj).TLEncodeType()

proc TLEncode*(obj: MessageMediaI): seq[uint8] = 
    if obj of messageMediaEmpty:
        return cast[messageMediaEmpty](obj).TLEncodeType()
    if obj of messageMediaPhoto:
        return cast[messageMediaPhoto](obj).TLEncodeType()
    if obj of messageMediaGeo:
        return cast[messageMediaGeo](obj).TLEncodeType()
    if obj of messageMediaContact:
        return cast[messageMediaContact](obj).TLEncodeType()
    if obj of messageMediaUnsupported:
        return cast[messageMediaUnsupported](obj).TLEncodeType()
    if obj of messageMediaDocument:
        return cast[messageMediaDocument](obj).TLEncodeType()
    if obj of messageMediaWebPage:
        return cast[messageMediaWebPage](obj).TLEncodeType()
    if obj of messageMediaVenue:
        return cast[messageMediaVenue](obj).TLEncodeType()
    if obj of messageMediaGame:
        return cast[messageMediaGame](obj).TLEncodeType()
    if obj of messageMediaInvoice:
        return cast[messageMediaInvoice](obj).TLEncodeType()
    if obj of messageMediaGeoLive:
        return cast[messageMediaGeoLive](obj).TLEncodeType()
    if obj of messageMediaPoll:
        return cast[messageMediaPoll](obj).TLEncodeType()
    if obj of messageMediaDice:
        return cast[messageMediaDice](obj).TLEncodeType()

proc TLEncode*(obj: ChatI): seq[uint8] = 
    if obj of chatEmpty:
        return cast[chatEmpty](obj).TLEncodeType()
    if obj of chat:
        return cast[chat](obj).TLEncodeType()
    if obj of chatForbidden:
        return cast[chatForbidden](obj).TLEncodeType()
    if obj of channel:
        return cast[channel](obj).TLEncodeType()
    if obj of channelForbidden:
        return cast[channelForbidden](obj).TLEncodeType()

proc TLEncode*(obj: help_RecentMeUrlsI): seq[uint8] = 
    if obj of help_recentMeUrls:
        return cast[help_recentMeUrls](obj).TLEncodeType()

proc TLEncode*(obj: UserProfilePhotoI): seq[uint8] = 
    if obj of userProfilePhotoEmpty:
        return cast[userProfilePhotoEmpty](obj).TLEncodeType()
    if obj of userProfilePhoto:
        return cast[userProfilePhoto](obj).TLEncodeType()

proc TLEncode*(obj: InputGeoPointI): seq[uint8] = 
    if obj of inputGeoPointEmpty:
        return cast[inputGeoPointEmpty](obj).TLEncodeType()
    if obj of inputGeoPoint:
        return cast[inputGeoPoint](obj).TLEncodeType()

proc TLEncode*(obj: ContactStatusI): seq[uint8] = 
    if obj of contactStatus:
        return cast[contactStatus](obj).TLEncodeType()

proc TLEncode*(obj: contacts_FoundI): seq[uint8] = 
    if obj of contacts_found:
        return cast[contacts_found](obj).TLEncodeType()

proc TLEncode*(obj: GlobalPrivacySettingsI): seq[uint8] = 
    if obj of globalPrivacySettings:
        return cast[globalPrivacySettings](obj).TLEncodeType()

proc TLEncode*(obj: InputPeerI): seq[uint8] = 
    if obj of inputPeerEmpty:
        return cast[inputPeerEmpty](obj).TLEncodeType()
    if obj of inputPeerSelf:
        return cast[inputPeerSelf](obj).TLEncodeType()
    if obj of inputPeerChat:
        return cast[inputPeerChat](obj).TLEncodeType()
    if obj of inputPeerUser:
        return cast[inputPeerUser](obj).TLEncodeType()
    if obj of inputPeerChannel:
        return cast[inputPeerChannel](obj).TLEncodeType()
    if obj of inputPeerUserFromMessage:
        return cast[inputPeerUserFromMessage](obj).TLEncodeType()
    if obj of inputPeerChannelFromMessage:
        return cast[inputPeerChannelFromMessage](obj).TLEncodeType()

proc TLEncode*(obj: DraftMessageI): seq[uint8] = 
    if obj of draftMessageEmpty:
        return cast[draftMessageEmpty](obj).TLEncodeType()
    if obj of draftMessage:
        return cast[draftMessage](obj).TLEncodeType()

proc TLEncode*(obj: account_SentEmailCodeI): seq[uint8] = 
    if obj of account_sentEmailCode:
        return cast[account_sentEmailCode](obj).TLEncodeType()

proc TLEncode*(obj: InputBotInlineMessageI): seq[uint8] = 
    if obj of inputBotInlineMessageMediaAuto:
        return cast[inputBotInlineMessageMediaAuto](obj).TLEncodeType()
    if obj of inputBotInlineMessageText:
        return cast[inputBotInlineMessageText](obj).TLEncodeType()
    if obj of inputBotInlineMessageMediaGeo:
        return cast[inputBotInlineMessageMediaGeo](obj).TLEncodeType()
    if obj of inputBotInlineMessageMediaVenue:
        return cast[inputBotInlineMessageMediaVenue](obj).TLEncodeType()
    if obj of inputBotInlineMessageMediaContact:
        return cast[inputBotInlineMessageMediaContact](obj).TLEncodeType()
    if obj of inputBotInlineMessageGame:
        return cast[inputBotInlineMessageGame](obj).TLEncodeType()

proc TLEncode*(obj: ChatFullI): seq[uint8] = 
    if obj of chatFull:
        return cast[chatFull](obj).TLEncodeType()
    if obj of channelFull:
        return cast[channelFull](obj).TLEncodeType()

proc TLEncode*(obj: AccountDaysTTLI): seq[uint8] = 
    if obj of accountDaysTTL:
        return cast[accountDaysTTL](obj).TLEncodeType()

proc TLEncode*(obj: messages_ChatsI): seq[uint8] = 
    if obj of messages_chats:
        return cast[messages_chats](obj).TLEncodeType()
    if obj of messages_chatsSlice:
        return cast[messages_chatsSlice](obj).TLEncodeType()

proc TLEncode*(obj: RecentMeUrlI): seq[uint8] = 
    if obj of recentMeUrlUnknown:
        return cast[recentMeUrlUnknown](obj).TLEncodeType()
    if obj of recentMeUrlUser:
        return cast[recentMeUrlUser](obj).TLEncodeType()
    if obj of recentMeUrlChat:
        return cast[recentMeUrlChat](obj).TLEncodeType()
    if obj of recentMeUrlChatInvite:
        return cast[recentMeUrlChatInvite](obj).TLEncodeType()
    if obj of recentMeUrlStickerSet:
        return cast[recentMeUrlStickerSet](obj).TLEncodeType()

proc TLEncode*(obj: auth_LoginTokenI): seq[uint8] = 
    if obj of auth_loginToken:
        return cast[auth_loginToken](obj).TLEncodeType()
    if obj of auth_loginTokenMigrateTo:
        return cast[auth_loginTokenMigrateTo](obj).TLEncodeType()
    if obj of auth_loginTokenSuccess:
        return cast[auth_loginTokenSuccess](obj).TLEncodeType()

proc TLEncode*(obj: messages_MessageViewsI): seq[uint8] = 
    if obj of messages_messageViews:
        return cast[messages_messageViews](obj).TLEncodeType()

proc TLEncode*(obj: InputFileLocationI): seq[uint8] = 
    if obj of inputFileLocation:
        return cast[inputFileLocation](obj).TLEncodeType()
    if obj of inputEncryptedFileLocation:
        return cast[inputEncryptedFileLocation](obj).TLEncodeType()
    if obj of inputDocumentFileLocation:
        return cast[inputDocumentFileLocation](obj).TLEncodeType()
    if obj of inputSecureFileLocation:
        return cast[inputSecureFileLocation](obj).TLEncodeType()
    if obj of inputTakeoutFileLocation:
        return cast[inputTakeoutFileLocation](obj).TLEncodeType()
    if obj of inputPhotoFileLocation:
        return cast[inputPhotoFileLocation](obj).TLEncodeType()
    if obj of inputPhotoLegacyFileLocation:
        return cast[inputPhotoLegacyFileLocation](obj).TLEncodeType()
    if obj of inputPeerPhotoFileLocation:
        return cast[inputPeerPhotoFileLocation](obj).TLEncodeType()
    if obj of inputStickerSetThumb:
        return cast[inputStickerSetThumb](obj).TLEncodeType()

proc TLEncode*(obj: help_AppUpdateI): seq[uint8] = 
    if obj of help_appUpdate:
        return cast[help_appUpdate](obj).TLEncodeType()
    if obj of help_noAppUpdate:
        return cast[help_noAppUpdate](obj).TLEncodeType()

proc TLEncode*(obj: PopularContactI): seq[uint8] = 
    if obj of popularContact:
        return cast[popularContact](obj).TLEncodeType()

proc TLEncode*(obj: EmojiURLI): seq[uint8] = 
    if obj of emojiURL:
        return cast[emojiURL](obj).TLEncodeType()

proc TLEncode*(obj: MessagesFilterI): seq[uint8] = 
    if obj of inputMessagesFilterEmpty:
        return cast[inputMessagesFilterEmpty](obj).TLEncodeType()
    if obj of inputMessagesFilterPhotos:
        return cast[inputMessagesFilterPhotos](obj).TLEncodeType()
    if obj of inputMessagesFilterVideo:
        return cast[inputMessagesFilterVideo](obj).TLEncodeType()
    if obj of inputMessagesFilterPhotoVideo:
        return cast[inputMessagesFilterPhotoVideo](obj).TLEncodeType()
    if obj of inputMessagesFilterDocument:
        return cast[inputMessagesFilterDocument](obj).TLEncodeType()
    if obj of inputMessagesFilterUrl:
        return cast[inputMessagesFilterUrl](obj).TLEncodeType()
    if obj of inputMessagesFilterGif:
        return cast[inputMessagesFilterGif](obj).TLEncodeType()
    if obj of inputMessagesFilterVoice:
        return cast[inputMessagesFilterVoice](obj).TLEncodeType()
    if obj of inputMessagesFilterMusic:
        return cast[inputMessagesFilterMusic](obj).TLEncodeType()
    if obj of inputMessagesFilterChatPhotos:
        return cast[inputMessagesFilterChatPhotos](obj).TLEncodeType()
    if obj of inputMessagesFilterPhoneCalls:
        return cast[inputMessagesFilterPhoneCalls](obj).TLEncodeType()
    if obj of inputMessagesFilterRoundVoice:
        return cast[inputMessagesFilterRoundVoice](obj).TLEncodeType()
    if obj of inputMessagesFilterRoundVideo:
        return cast[inputMessagesFilterRoundVideo](obj).TLEncodeType()
    if obj of inputMessagesFilterMyMentions:
        return cast[inputMessagesFilterMyMentions](obj).TLEncodeType()
    if obj of inputMessagesFilterGeo:
        return cast[inputMessagesFilterGeo](obj).TLEncodeType()
    if obj of inputMessagesFilterContacts:
        return cast[inputMessagesFilterContacts](obj).TLEncodeType()
    if obj of inputMessagesFilterPinned:
        return cast[inputMessagesFilterPinned](obj).TLEncodeType()

proc TLEncode*(obj: CodeSettingsI): seq[uint8] = 
    if obj of codeSettings:
        return cast[codeSettings](obj).TLEncodeType()

proc TLEncode*(obj: messages_MessageEditDataI): seq[uint8] = 
    if obj of messages_messageEditData:
        return cast[messages_messageEditData](obj).TLEncodeType()

proc TLEncode*(obj: help_CountriesListI): seq[uint8] = 
    if obj of help_countriesListNotModified:
        return cast[help_countriesListNotModified](obj).TLEncodeType()
    if obj of help_countriesList:
        return cast[help_countriesList](obj).TLEncodeType()

proc TLEncode*(obj: MessageRepliesI): seq[uint8] = 
    if obj of messageReplies:
        return cast[messageReplies](obj).TLEncodeType()

proc TLEncode*(obj: account_AuthorizationFormI): seq[uint8] = 
    if obj of account_authorizationForm:
        return cast[account_authorizationForm](obj).TLEncodeType()

proc TLEncode*(obj: messages_DhConfigI): seq[uint8] = 
    if obj of messages_dhConfigNotModified:
        return cast[messages_dhConfigNotModified](obj).TLEncodeType()
    if obj of messages_dhConfig:
        return cast[messages_dhConfig](obj).TLEncodeType()

proc TLEncode*(obj: account_TakeoutI): seq[uint8] = 
    if obj of account_takeout:
        return cast[account_takeout](obj).TLEncodeType()

proc TLEncode*(obj: UpdatesI): seq[uint8] = 
    if obj of updatesTooLong:
        return cast[updatesTooLong](obj).TLEncodeType()
    if obj of updateShortMessage:
        return cast[updateShortMessage](obj).TLEncodeType()
    if obj of updateShortChatMessage:
        return cast[updateShortChatMessage](obj).TLEncodeType()
    if obj of updateShort:
        return cast[updateShort](obj).TLEncodeType()
    if obj of updatesCombined:
        return cast[updatesCombined](obj).TLEncodeType()
    if obj of updates:
        return cast[updates](obj).TLEncodeType()
    if obj of updateShortSentMessage:
        return cast[updateShortSentMessage](obj).TLEncodeType()

proc TLEncode*(obj: MessageFwdHeaderI): seq[uint8] = 
    if obj of messageFwdHeader:
        return cast[messageFwdHeader](obj).TLEncodeType()

proc TLEncode*(obj: AuthorizationI): seq[uint8] = 
    if obj of authorization:
        return cast[authorization](obj).TLEncodeType()

proc TLEncode*(obj: help_TermsOfServiceUpdateI): seq[uint8] = 
    if obj of help_termsOfServiceUpdateEmpty:
        return cast[help_termsOfServiceUpdateEmpty](obj).TLEncodeType()
    if obj of help_termsOfServiceUpdate:
        return cast[help_termsOfServiceUpdate](obj).TLEncodeType()

proc TLEncode*(obj: PageTableCellI): seq[uint8] = 
    if obj of pageTableCell:
        return cast[pageTableCell](obj).TLEncodeType()

proc TLEncode*(obj: account_ContentSettingsI): seq[uint8] = 
    if obj of account_contentSettings:
        return cast[account_contentSettings](obj).TLEncodeType()

proc TLEncode*(obj: account_WebAuthorizationsI): seq[uint8] = 
    if obj of account_webAuthorizations:
        return cast[account_webAuthorizations](obj).TLEncodeType()

proc TLEncode*(obj: SecureValueHashI): seq[uint8] = 
    if obj of secureValueHash:
        return cast[secureValueHash](obj).TLEncodeType()

proc TLEncode*(obj: PaymentRequestedInfoI): seq[uint8] = 
    if obj of paymentRequestedInfo:
        return cast[paymentRequestedInfo](obj).TLEncodeType()

proc TLEncode*(obj: PhoneCallI): seq[uint8] = 
    if obj of phoneCallEmpty:
        return cast[phoneCallEmpty](obj).TLEncodeType()
    if obj of phoneCallWaiting:
        return cast[phoneCallWaiting](obj).TLEncodeType()
    if obj of phoneCallRequested:
        return cast[phoneCallRequested](obj).TLEncodeType()
    if obj of phoneCallAccepted:
        return cast[phoneCallAccepted](obj).TLEncodeType()
    if obj of phoneCall:
        return cast[phoneCall](obj).TLEncodeType()
    if obj of phoneCallDiscarded:
        return cast[phoneCallDiscarded](obj).TLEncodeType()

proc TLEncode*(obj: InputPrivacyKeyI): seq[uint8] = 
    if obj of inputPrivacyKeyStatusTimestamp:
        return cast[inputPrivacyKeyStatusTimestamp](obj).TLEncodeType()
    if obj of inputPrivacyKeyChatInvite:
        return cast[inputPrivacyKeyChatInvite](obj).TLEncodeType()
    if obj of inputPrivacyKeyPhoneCall:
        return cast[inputPrivacyKeyPhoneCall](obj).TLEncodeType()
    if obj of inputPrivacyKeyPhoneP2P:
        return cast[inputPrivacyKeyPhoneP2P](obj).TLEncodeType()
    if obj of inputPrivacyKeyForwards:
        return cast[inputPrivacyKeyForwards](obj).TLEncodeType()
    if obj of inputPrivacyKeyProfilePhoto:
        return cast[inputPrivacyKeyProfilePhoto](obj).TLEncodeType()
    if obj of inputPrivacyKeyPhoneNumber:
        return cast[inputPrivacyKeyPhoneNumber](obj).TLEncodeType()
    if obj of inputPrivacyKeyAddedByPhone:
        return cast[inputPrivacyKeyAddedByPhone](obj).TLEncodeType()

proc TLEncode*(obj: MaskCoordsI): seq[uint8] = 
    if obj of maskCoords:
        return cast[maskCoords](obj).TLEncodeType()

proc TLEncode*(obj: PrivacyRuleI): seq[uint8] = 
    if obj of privacyValueAllowContacts:
        return cast[privacyValueAllowContacts](obj).TLEncodeType()
    if obj of privacyValueAllowAll:
        return cast[privacyValueAllowAll](obj).TLEncodeType()
    if obj of privacyValueAllowUsers:
        return cast[privacyValueAllowUsers](obj).TLEncodeType()
    if obj of privacyValueDisallowContacts:
        return cast[privacyValueDisallowContacts](obj).TLEncodeType()
    if obj of privacyValueDisallowAll:
        return cast[privacyValueDisallowAll](obj).TLEncodeType()
    if obj of privacyValueDisallowUsers:
        return cast[privacyValueDisallowUsers](obj).TLEncodeType()
    if obj of privacyValueAllowChatParticipants:
        return cast[privacyValueAllowChatParticipants](obj).TLEncodeType()
    if obj of privacyValueDisallowChatParticipants:
        return cast[privacyValueDisallowChatParticipants](obj).TLEncodeType()

proc TLEncode*(obj: PageBlockI): seq[uint8] = 
    if obj of pageBlockUnsupported:
        return cast[pageBlockUnsupported](obj).TLEncodeType()
    if obj of pageBlockTitle:
        return cast[pageBlockTitle](obj).TLEncodeType()
    if obj of pageBlockSubtitle:
        return cast[pageBlockSubtitle](obj).TLEncodeType()
    if obj of pageBlockAuthorDate:
        return cast[pageBlockAuthorDate](obj).TLEncodeType()
    if obj of pageBlockHeader:
        return cast[pageBlockHeader](obj).TLEncodeType()
    if obj of pageBlockSubheader:
        return cast[pageBlockSubheader](obj).TLEncodeType()
    if obj of pageBlockParagraph:
        return cast[pageBlockParagraph](obj).TLEncodeType()
    if obj of pageBlockPreformatted:
        return cast[pageBlockPreformatted](obj).TLEncodeType()
    if obj of pageBlockFooter:
        return cast[pageBlockFooter](obj).TLEncodeType()
    if obj of pageBlockDivider:
        return cast[pageBlockDivider](obj).TLEncodeType()
    if obj of pageBlockAnchor:
        return cast[pageBlockAnchor](obj).TLEncodeType()
    if obj of pageBlockList:
        return cast[pageBlockList](obj).TLEncodeType()
    if obj of pageBlockBlockquote:
        return cast[pageBlockBlockquote](obj).TLEncodeType()
    if obj of pageBlockPullquote:
        return cast[pageBlockPullquote](obj).TLEncodeType()
    if obj of pageBlockPhoto:
        return cast[pageBlockPhoto](obj).TLEncodeType()
    if obj of pageBlockVideo:
        return cast[pageBlockVideo](obj).TLEncodeType()
    if obj of pageBlockCover:
        return cast[pageBlockCover](obj).TLEncodeType()
    if obj of pageBlockEmbed:
        return cast[pageBlockEmbed](obj).TLEncodeType()
    if obj of pageBlockEmbedPost:
        return cast[pageBlockEmbedPost](obj).TLEncodeType()
    if obj of pageBlockCollage:
        return cast[pageBlockCollage](obj).TLEncodeType()
    if obj of pageBlockSlideshow:
        return cast[pageBlockSlideshow](obj).TLEncodeType()
    if obj of pageBlockChannel:
        return cast[pageBlockChannel](obj).TLEncodeType()
    if obj of pageBlockAudio:
        return cast[pageBlockAudio](obj).TLEncodeType()
    if obj of pageBlockKicker:
        return cast[pageBlockKicker](obj).TLEncodeType()
    if obj of pageBlockTable:
        return cast[pageBlockTable](obj).TLEncodeType()
    if obj of pageBlockOrderedList:
        return cast[pageBlockOrderedList](obj).TLEncodeType()
    if obj of pageBlockDetails:
        return cast[pageBlockDetails](obj).TLEncodeType()
    if obj of pageBlockRelatedArticles:
        return cast[pageBlockRelatedArticles](obj).TLEncodeType()
    if obj of pageBlockMap:
        return cast[pageBlockMap](obj).TLEncodeType()

proc TLEncode*(obj: ChatPhotoI): seq[uint8] = 
    if obj of chatPhotoEmpty:
        return cast[chatPhotoEmpty](obj).TLEncodeType()
    if obj of chatPhoto:
        return cast[chatPhoto](obj).TLEncodeType()

proc TLEncode*(obj: contacts_ContactsI): seq[uint8] = 
    if obj of contacts_contactsNotModified:
        return cast[contacts_contactsNotModified](obj).TLEncodeType()
    if obj of contacts_contacts:
        return cast[contacts_contacts](obj).TLEncodeType()

proc TLEncode*(obj: EncryptedChatI): seq[uint8] = 
    if obj of encryptedChatEmpty:
        return cast[encryptedChatEmpty](obj).TLEncodeType()
    if obj of encryptedChatWaiting:
        return cast[encryptedChatWaiting](obj).TLEncodeType()
    if obj of encryptedChatRequested:
        return cast[encryptedChatRequested](obj).TLEncodeType()
    if obj of encryptedChat:
        return cast[encryptedChat](obj).TLEncodeType()
    if obj of encryptedChatDiscarded:
        return cast[encryptedChatDiscarded](obj).TLEncodeType()

proc TLEncode*(obj: messages_ChatFullI): seq[uint8] = 
    if obj of messages_chatFull:
        return cast[messages_chatFull](obj).TLEncodeType()

proc TLEncode*(obj: ReplyMarkupI): seq[uint8] = 
    if obj of replyKeyboardHide:
        return cast[replyKeyboardHide](obj).TLEncodeType()
    if obj of replyKeyboardForceReply:
        return cast[replyKeyboardForceReply](obj).TLEncodeType()
    if obj of replyKeyboardMarkup:
        return cast[replyKeyboardMarkup](obj).TLEncodeType()
    if obj of replyInlineMarkup:
        return cast[replyInlineMarkup](obj).TLEncodeType()

proc TLEncode*(obj: StatsURLI): seq[uint8] = 
    if obj of statsURL:
        return cast[statsURL](obj).TLEncodeType()

proc TLEncode*(obj: StatsGraphI): seq[uint8] = 
    if obj of statsGraphAsync:
        return cast[statsGraphAsync](obj).TLEncodeType()
    if obj of statsGraphError:
        return cast[statsGraphError](obj).TLEncodeType()
    if obj of statsGraph:
        return cast[statsGraph](obj).TLEncodeType()

proc TLEncode*(obj: MessageI): seq[uint8] = 
    if obj of messageEmpty:
        return cast[messageEmpty](obj).TLEncodeType()
    if obj of message:
        return cast[message](obj).TLEncodeType()
    if obj of messageService:
        return cast[messageService](obj).TLEncodeType()

proc TLEncode*(obj: DocumentI): seq[uint8] = 
    if obj of documentEmpty:
        return cast[documentEmpty](obj).TLEncodeType()
    if obj of document:
        return cast[document](obj).TLEncodeType()

proc TLEncode*(obj: StatsGroupTopInviterI): seq[uint8] = 
    if obj of statsGroupTopInviter:
        return cast[statsGroupTopInviter](obj).TLEncodeType()

proc TLEncode*(obj: InputAppEventI): seq[uint8] = 
    if obj of inputAppEvent:
        return cast[inputAppEvent](obj).TLEncodeType()

proc TLEncode*(obj: SecureValueTypeI): seq[uint8] = 
    if obj of secureValueTypePersonalDetails:
        return cast[secureValueTypePersonalDetails](obj).TLEncodeType()
    if obj of secureValueTypePassport:
        return cast[secureValueTypePassport](obj).TLEncodeType()
    if obj of secureValueTypeDriverLicense:
        return cast[secureValueTypeDriverLicense](obj).TLEncodeType()
    if obj of secureValueTypeIdentityCard:
        return cast[secureValueTypeIdentityCard](obj).TLEncodeType()
    if obj of secureValueTypeInternalPassport:
        return cast[secureValueTypeInternalPassport](obj).TLEncodeType()
    if obj of secureValueTypeAddress:
        return cast[secureValueTypeAddress](obj).TLEncodeType()
    if obj of secureValueTypeUtilityBill:
        return cast[secureValueTypeUtilityBill](obj).TLEncodeType()
    if obj of secureValueTypeBankStatement:
        return cast[secureValueTypeBankStatement](obj).TLEncodeType()
    if obj of secureValueTypeRentalAgreement:
        return cast[secureValueTypeRentalAgreement](obj).TLEncodeType()
    if obj of secureValueTypePassportRegistration:
        return cast[secureValueTypePassportRegistration](obj).TLEncodeType()
    if obj of secureValueTypeTemporaryRegistration:
        return cast[secureValueTypeTemporaryRegistration](obj).TLEncodeType()
    if obj of secureValueTypePhone:
        return cast[secureValueTypePhone](obj).TLEncodeType()
    if obj of secureValueTypeEmail:
        return cast[secureValueTypeEmail](obj).TLEncodeType()

proc TLEncode*(obj: BotInlineResultI): seq[uint8] = 
    if obj of botInlineResult:
        return cast[botInlineResult](obj).TLEncodeType()
    if obj of botInlineMediaResult:
        return cast[botInlineMediaResult](obj).TLEncodeType()

proc TLEncode*(obj: SendMessageActionI): seq[uint8] = 
    if obj of sendMessageTypingAction:
        return cast[sendMessageTypingAction](obj).TLEncodeType()
    if obj of sendMessageCancelAction:
        return cast[sendMessageCancelAction](obj).TLEncodeType()
    if obj of sendMessageRecordVideoAction:
        return cast[sendMessageRecordVideoAction](obj).TLEncodeType()
    if obj of sendMessageUploadVideoAction:
        return cast[sendMessageUploadVideoAction](obj).TLEncodeType()
    if obj of sendMessageRecordAudioAction:
        return cast[sendMessageRecordAudioAction](obj).TLEncodeType()
    if obj of sendMessageUploadAudioAction:
        return cast[sendMessageUploadAudioAction](obj).TLEncodeType()
    if obj of sendMessageUploadPhotoAction:
        return cast[sendMessageUploadPhotoAction](obj).TLEncodeType()
    if obj of sendMessageUploadDocumentAction:
        return cast[sendMessageUploadDocumentAction](obj).TLEncodeType()
    if obj of sendMessageGeoLocationAction:
        return cast[sendMessageGeoLocationAction](obj).TLEncodeType()
    if obj of sendMessageChooseContactAction:
        return cast[sendMessageChooseContactAction](obj).TLEncodeType()
    if obj of sendMessageGamePlayAction:
        return cast[sendMessageGamePlayAction](obj).TLEncodeType()
    if obj of sendMessageRecordRoundAction:
        return cast[sendMessageRecordRoundAction](obj).TLEncodeType()
    if obj of sendMessageUploadRoundAction:
        return cast[sendMessageUploadRoundAction](obj).TLEncodeType()

proc TLEncode*(obj: help_DeepLinkInfoI): seq[uint8] = 
    if obj of help_deepLinkInfoEmpty:
        return cast[help_deepLinkInfoEmpty](obj).TLEncodeType()
    if obj of help_deepLinkInfo:
        return cast[help_deepLinkInfo](obj).TLEncodeType()

proc TLEncode*(obj: SecureFileI): seq[uint8] = 
    if obj of secureFileEmpty:
        return cast[secureFileEmpty](obj).TLEncodeType()
    if obj of secureFile:
        return cast[secureFile](obj).TLEncodeType()

proc TLEncode*(obj: InputStickerSetItemI): seq[uint8] = 
    if obj of inputStickerSetItem:
        return cast[inputStickerSetItem](obj).TLEncodeType()

proc TLEncode*(obj: EmojiKeywordI): seq[uint8] = 
    if obj of emojiKeyword:
        return cast[emojiKeyword](obj).TLEncodeType()
    if obj of emojiKeywordDeleted:
        return cast[emojiKeywordDeleted](obj).TLEncodeType()

proc TLEncode*(obj: PeerSettingsI): seq[uint8] = 
    if obj of peerSettings:
        return cast[peerSettings](obj).TLEncodeType()

proc TLEncode*(obj: ChatBannedRightsI): seq[uint8] = 
    if obj of chatBannedRights:
        return cast[chatBannedRights](obj).TLEncodeType()

proc TLEncode*(obj: BotInlineMessageI): seq[uint8] = 
    if obj of botInlineMessageMediaAuto:
        return cast[botInlineMessageMediaAuto](obj).TLEncodeType()
    if obj of botInlineMessageText:
        return cast[botInlineMessageText](obj).TLEncodeType()
    if obj of botInlineMessageMediaGeo:
        return cast[botInlineMessageMediaGeo](obj).TLEncodeType()
    if obj of botInlineMessageMediaVenue:
        return cast[botInlineMessageMediaVenue](obj).TLEncodeType()
    if obj of botInlineMessageMediaContact:
        return cast[botInlineMessageMediaContact](obj).TLEncodeType()

proc TLEncode*(obj: PeerLocatedI): seq[uint8] = 
    if obj of peerLocated:
        return cast[peerLocated](obj).TLEncodeType()
    if obj of peerSelfLocated:
        return cast[peerSelfLocated](obj).TLEncodeType()

proc TLEncode*(obj: ChannelLocationI): seq[uint8] = 
    if obj of channelLocationEmpty:
        return cast[channelLocationEmpty](obj).TLEncodeType()
    if obj of channelLocation:
        return cast[channelLocation](obj).TLEncodeType()


proc TLEncode*(obj: seq[help_PromoDataI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of help_promoDataEmpty:
            result = result & cast[help_promoDataEmpty](objs).TLEncode()
        if objs of help_promoData:
            result = result & cast[help_promoData](objs).TLEncode()

proc TLEncode*(obj: seq[stats_MegagroupStatsI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of stats_megagroupStats:
            result = result & cast[stats_megagroupStats](objs).TLEncode()

proc TLEncode*(obj: seq[PrivacyKeyI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of privacyKeyStatusTimestamp:
            result = result & cast[privacyKeyStatusTimestamp](objs).TLEncode()
        if objs of privacyKeyChatInvite:
            result = result & cast[privacyKeyChatInvite](objs).TLEncode()
        if objs of privacyKeyPhoneCall:
            result = result & cast[privacyKeyPhoneCall](objs).TLEncode()
        if objs of privacyKeyPhoneP2P:
            result = result & cast[privacyKeyPhoneP2P](objs).TLEncode()
        if objs of privacyKeyForwards:
            result = result & cast[privacyKeyForwards](objs).TLEncode()
        if objs of privacyKeyProfilePhoto:
            result = result & cast[privacyKeyProfilePhoto](objs).TLEncode()
        if objs of privacyKeyPhoneNumber:
            result = result & cast[privacyKeyPhoneNumber](objs).TLEncode()
        if objs of privacyKeyAddedByPhone:
            result = result & cast[privacyKeyAddedByPhone](objs).TLEncode()

proc TLEncode*(obj: seq[help_CountryCodeI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of help_countryCode:
            result = result & cast[help_countryCode](objs).TLEncode()

proc TLEncode*(obj: seq[WebAuthorizationI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of webAuthorization:
            result = result & cast[webAuthorization](objs).TLEncode()

proc TLEncode*(obj: seq[PollI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of poll:
            result = result & cast[poll](objs).TLEncode()

proc TLEncode*(obj: seq[DialogPeerI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of dialogPeer:
            result = result & cast[dialogPeer](objs).TLEncode()
        if objs of dialogPeerFolder:
            result = result & cast[dialogPeerFolder](objs).TLEncode()

proc TLEncode*(obj: seq[TopPeerCategoryI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of topPeerCategoryBotsPM:
            result = result & cast[topPeerCategoryBotsPM](objs).TLEncode()
        if objs of topPeerCategoryBotsInline:
            result = result & cast[topPeerCategoryBotsInline](objs).TLEncode()
        if objs of topPeerCategoryCorrespondents:
            result = result & cast[topPeerCategoryCorrespondents](objs).TLEncode()
        if objs of topPeerCategoryGroups:
            result = result & cast[topPeerCategoryGroups](objs).TLEncode()
        if objs of topPeerCategoryChannels:
            result = result & cast[topPeerCategoryChannels](objs).TLEncode()
        if objs of topPeerCategoryPhoneCalls:
            result = result & cast[topPeerCategoryPhoneCalls](objs).TLEncode()
        if objs of topPeerCategoryForwardUsers:
            result = result & cast[topPeerCategoryForwardUsers](objs).TLEncode()
        if objs of topPeerCategoryForwardChats:
            result = result & cast[topPeerCategoryForwardChats](objs).TLEncode()

proc TLEncode*(obj: seq[help_SupportNameI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of help_supportName:
            result = result & cast[help_supportName](objs).TLEncode()

proc TLEncode*(obj: seq[PhotoSizeI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of photoSizeEmpty:
            result = result & cast[photoSizeEmpty](objs).TLEncode()
        if objs of photoSize:
            result = result & cast[photoSize](objs).TLEncode()
        if objs of photoCachedSize:
            result = result & cast[photoCachedSize](objs).TLEncode()
        if objs of photoStrippedSize:
            result = result & cast[photoStrippedSize](objs).TLEncode()
        if objs of photoSizeProgressive:
            result = result & cast[photoSizeProgressive](objs).TLEncode()

proc TLEncode*(obj: seq[JSONValueI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of jsonNull:
            result = result & cast[jsonNull](objs).TLEncode()
        if objs of jsonBool:
            result = result & cast[jsonBool](objs).TLEncode()
        if objs of jsonNumber:
            result = result & cast[jsonNumber](objs).TLEncode()
        if objs of jsonString:
            result = result & cast[jsonString](objs).TLEncode()
        if objs of jsonArray:
            result = result & cast[jsonArray](objs).TLEncode()
        if objs of jsonObject:
            result = result & cast[jsonObject](objs).TLEncode()

proc TLEncode*(obj: seq[messages_ArchivedStickersI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of messages_archivedStickers:
            result = result & cast[messages_archivedStickers](objs).TLEncode()

proc TLEncode*(obj: seq[BaseThemeI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of baseThemeClassic:
            result = result & cast[baseThemeClassic](objs).TLEncode()
        if objs of baseThemeDay:
            result = result & cast[baseThemeDay](objs).TLEncode()
        if objs of baseThemeNight:
            result = result & cast[baseThemeNight](objs).TLEncode()
        if objs of baseThemeTinted:
            result = result & cast[baseThemeTinted](objs).TLEncode()
        if objs of baseThemeArctic:
            result = result & cast[baseThemeArctic](objs).TLEncode()

proc TLEncode*(obj: seq[DialogFilterI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of dialogFilter:
            result = result & cast[dialogFilter](objs).TLEncode()

proc TLEncode*(obj: seq[MessageEntityI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of messageEntityUnknown:
            result = result & cast[messageEntityUnknown](objs).TLEncode()
        if objs of messageEntityMention:
            result = result & cast[messageEntityMention](objs).TLEncode()
        if objs of messageEntityHashtag:
            result = result & cast[messageEntityHashtag](objs).TLEncode()
        if objs of messageEntityBotCommand:
            result = result & cast[messageEntityBotCommand](objs).TLEncode()
        if objs of messageEntityUrl:
            result = result & cast[messageEntityUrl](objs).TLEncode()
        if objs of messageEntityEmail:
            result = result & cast[messageEntityEmail](objs).TLEncode()
        if objs of messageEntityBold:
            result = result & cast[messageEntityBold](objs).TLEncode()
        if objs of messageEntityItalic:
            result = result & cast[messageEntityItalic](objs).TLEncode()
        if objs of messageEntityCode:
            result = result & cast[messageEntityCode](objs).TLEncode()
        if objs of messageEntityPre:
            result = result & cast[messageEntityPre](objs).TLEncode()
        if objs of messageEntityTextUrl:
            result = result & cast[messageEntityTextUrl](objs).TLEncode()
        if objs of messageEntityMentionName:
            result = result & cast[messageEntityMentionName](objs).TLEncode()
        if objs of inputMessageEntityMentionName:
            result = result & cast[inputMessageEntityMentionName](objs).TLEncode()
        if objs of messageEntityPhone:
            result = result & cast[messageEntityPhone](objs).TLEncode()
        if objs of messageEntityCashtag:
            result = result & cast[messageEntityCashtag](objs).TLEncode()
        if objs of messageEntityUnderline:
            result = result & cast[messageEntityUnderline](objs).TLEncode()
        if objs of messageEntityStrike:
            result = result & cast[messageEntityStrike](objs).TLEncode()
        if objs of messageEntityBlockquote:
            result = result & cast[messageEntityBlockquote](objs).TLEncode()
        if objs of messageEntityBankCard:
            result = result & cast[messageEntityBankCard](objs).TLEncode()

proc TLEncode*(obj: seq[ThemeI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of theme:
            result = result & cast[theme](objs).TLEncode()

proc TLEncode*(obj: seq[DialogFilterSuggestedI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of dialogFilterSuggested:
            result = result & cast[dialogFilterSuggested](objs).TLEncode()

proc TLEncode*(obj: seq[stats_MessageStatsI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of stats_messageStats:
            result = result & cast[stats_messageStats](objs).TLEncode()

proc TLEncode*(obj: seq[payments_PaymentResultI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of payments_paymentResult:
            result = result & cast[payments_paymentResult](objs).TLEncode()
        if objs of payments_paymentVerificationNeeded:
            result = result & cast[payments_paymentVerificationNeeded](objs).TLEncode()

proc TLEncode*(obj: seq[StickerPackI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of stickerPack:
            result = result & cast[stickerPack](objs).TLEncode()

proc TLEncode*(obj: seq[account_PasswordSettingsI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of account_passwordSettings:
            result = result & cast[account_passwordSettings](objs).TLEncode()

proc TLEncode*(obj: seq[CdnConfigI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of cdnConfig:
            result = result & cast[cdnConfig](objs).TLEncode()

proc TLEncode*(obj: seq[InputCheckPasswordSRPI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of inputCheckPasswordEmpty:
            result = result & cast[inputCheckPasswordEmpty](objs).TLEncode()
        if objs of inputCheckPasswordSRP:
            result = result & cast[inputCheckPasswordSRP](objs).TLEncode()

proc TLEncode*(obj: seq[PollAnswerVotersI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of pollAnswerVoters:
            result = result & cast[pollAnswerVoters](objs).TLEncode()

proc TLEncode*(obj: seq[SecureDataI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of secureData:
            result = result & cast[secureData](objs).TLEncode()

proc TLEncode*(obj: seq[PageTableRowI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of pageTableRow:
            result = result & cast[pageTableRow](objs).TLEncode()

proc TLEncode*(obj: seq[phone_PhoneCallI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of phone_phoneCall:
            result = result & cast[phone_phoneCall](objs).TLEncode()

proc TLEncode*(obj: seq[ChatOnlinesI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of chatOnlines:
            result = result & cast[chatOnlines](objs).TLEncode()

proc TLEncode*(obj: seq[SecurePlainDataI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of securePlainPhone:
            result = result & cast[securePlainPhone](objs).TLEncode()
        if objs of securePlainEmail:
            result = result & cast[securePlainEmail](objs).TLEncode()

proc TLEncode*(obj: seq[InputChatPhotoI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of inputChatPhotoEmpty:
            result = result & cast[inputChatPhotoEmpty](objs).TLEncode()
        if objs of inputChatUploadedPhoto:
            result = result & cast[inputChatUploadedPhoto](objs).TLEncode()
        if objs of inputChatPhoto:
            result = result & cast[inputChatPhoto](objs).TLEncode()

proc TLEncode*(obj: seq[SecureSecretSettingsI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of secureSecretSettings:
            result = result & cast[secureSecretSettings](objs).TLEncode()

proc TLEncode*(obj: seq[EmojiKeywordsDifferenceI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of emojiKeywordsDifference:
            result = result & cast[emojiKeywordsDifference](objs).TLEncode()

proc TLEncode*(obj: seq[photos_PhotosI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of photos_photos:
            result = result & cast[photos_photos](objs).TLEncode()
        if objs of photos_photosSlice:
            result = result & cast[photos_photosSlice](objs).TLEncode()

proc TLEncode*(obj: seq[ChannelParticipantsFilterI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of channelParticipantsRecent:
            result = result & cast[channelParticipantsRecent](objs).TLEncode()
        if objs of channelParticipantsAdmins:
            result = result & cast[channelParticipantsAdmins](objs).TLEncode()
        if objs of channelParticipantsKicked:
            result = result & cast[channelParticipantsKicked](objs).TLEncode()
        if objs of channelParticipantsBots:
            result = result & cast[channelParticipantsBots](objs).TLEncode()
        if objs of channelParticipantsBanned:
            result = result & cast[channelParticipantsBanned](objs).TLEncode()
        if objs of channelParticipantsSearch:
            result = result & cast[channelParticipantsSearch](objs).TLEncode()
        if objs of channelParticipantsContacts:
            result = result & cast[channelParticipantsContacts](objs).TLEncode()
        if objs of channelParticipantsMentions:
            result = result & cast[channelParticipantsMentions](objs).TLEncode()

proc TLEncode*(obj: seq[StatsGroupTopAdminI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of statsGroupTopAdmin:
            result = result & cast[statsGroupTopAdmin](objs).TLEncode()

proc TLEncode*(obj: seq[InputBotInlineMessageIDI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of inputBotInlineMessageID:
            result = result & cast[inputBotInlineMessageID](objs).TLEncode()

proc TLEncode*(obj: seq[InputPhotoI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of inputPhotoEmpty:
            result = result & cast[inputPhotoEmpty](objs).TLEncode()
        if objs of inputPhoto:
            result = result & cast[inputPhoto](objs).TLEncode()

proc TLEncode*(obj: seq[channels_ChannelParticipantI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of channels_channelParticipant:
            result = result & cast[channels_channelParticipant](objs).TLEncode()

proc TLEncode*(obj: seq[photos_PhotoI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of photos_photo:
            result = result & cast[photos_photo](objs).TLEncode()

proc TLEncode*(obj: seq[EncryptedMessageI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of encryptedMessage:
            result = result & cast[encryptedMessage](objs).TLEncode()
        if objs of encryptedMessageService:
            result = result & cast[encryptedMessageService](objs).TLEncode()

proc TLEncode*(obj: seq[DocumentAttributeI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of documentAttributeImageSize:
            result = result & cast[documentAttributeImageSize](objs).TLEncode()
        if objs of documentAttributeAnimated:
            result = result & cast[documentAttributeAnimated](objs).TLEncode()
        if objs of documentAttributeSticker:
            result = result & cast[documentAttributeSticker](objs).TLEncode()
        if objs of documentAttributeVideo:
            result = result & cast[documentAttributeVideo](objs).TLEncode()
        if objs of documentAttributeAudio:
            result = result & cast[documentAttributeAudio](objs).TLEncode()
        if objs of documentAttributeFilename:
            result = result & cast[documentAttributeFilename](objs).TLEncode()
        if objs of documentAttributeHasStickers:
            result = result & cast[documentAttributeHasStickers](objs).TLEncode()

proc TLEncode*(obj: seq[InputEncryptedChatI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of inputEncryptedChat:
            result = result & cast[inputEncryptedChat](objs).TLEncode()

proc TLEncode*(obj: seq[messages_FeaturedStickersI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of messages_featuredStickersNotModified:
            result = result & cast[messages_featuredStickersNotModified](objs).TLEncode()
        if objs of messages_featuredStickers:
            result = result & cast[messages_featuredStickers](objs).TLEncode()

proc TLEncode*(obj: seq[payments_SavedInfoI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of payments_savedInfo:
            result = result & cast[payments_savedInfo](objs).TLEncode()

proc TLEncode*(obj: seq[PhoneCallProtocolI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of phoneCallProtocol:
            result = result & cast[phoneCallProtocol](objs).TLEncode()

proc TLEncode*(obj: seq[ChannelAdminLogEventI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of channelAdminLogEvent:
            result = result & cast[channelAdminLogEvent](objs).TLEncode()

proc TLEncode*(obj: seq[KeyboardButtonI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of keyboardButton:
            result = result & cast[keyboardButton](objs).TLEncode()
        if objs of keyboardButtonUrl:
            result = result & cast[keyboardButtonUrl](objs).TLEncode()
        if objs of keyboardButtonCallback:
            result = result & cast[keyboardButtonCallback](objs).TLEncode()
        if objs of keyboardButtonRequestPhone:
            result = result & cast[keyboardButtonRequestPhone](objs).TLEncode()
        if objs of keyboardButtonRequestGeoLocation:
            result = result & cast[keyboardButtonRequestGeoLocation](objs).TLEncode()
        if objs of keyboardButtonSwitchInline:
            result = result & cast[keyboardButtonSwitchInline](objs).TLEncode()
        if objs of keyboardButtonGame:
            result = result & cast[keyboardButtonGame](objs).TLEncode()
        if objs of keyboardButtonBuy:
            result = result & cast[keyboardButtonBuy](objs).TLEncode()
        if objs of keyboardButtonUrlAuth:
            result = result & cast[keyboardButtonUrlAuth](objs).TLEncode()
        if objs of inputKeyboardButtonUrlAuth:
            result = result & cast[inputKeyboardButtonUrlAuth](objs).TLEncode()
        if objs of keyboardButtonRequestPoll:
            result = result & cast[keyboardButtonRequestPoll](objs).TLEncode()

proc TLEncode*(obj: seq[RichTextI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of textEmpty:
            result = result & cast[textEmpty](objs).TLEncode()
        if objs of textPlain:
            result = result & cast[textPlain](objs).TLEncode()
        if objs of textBold:
            result = result & cast[textBold](objs).TLEncode()
        if objs of textItalic:
            result = result & cast[textItalic](objs).TLEncode()
        if objs of textUnderline:
            result = result & cast[textUnderline](objs).TLEncode()
        if objs of textStrike:
            result = result & cast[textStrike](objs).TLEncode()
        if objs of textFixed:
            result = result & cast[textFixed](objs).TLEncode()
        if objs of textUrl:
            result = result & cast[textUrl](objs).TLEncode()
        if objs of textEmail:
            result = result & cast[textEmail](objs).TLEncode()
        if objs of textConcat:
            result = result & cast[textConcat](objs).TLEncode()
        if objs of textSubscript:
            result = result & cast[textSubscript](objs).TLEncode()
        if objs of textSuperscript:
            result = result & cast[textSuperscript](objs).TLEncode()
        if objs of textMarked:
            result = result & cast[textMarked](objs).TLEncode()
        if objs of textPhone:
            result = result & cast[textPhone](objs).TLEncode()
        if objs of textImage:
            result = result & cast[textImage](objs).TLEncode()
        if objs of textAnchor:
            result = result & cast[textAnchor](objs).TLEncode()

proc TLEncode*(obj: seq[InputMessageI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of inputMessageID:
            result = result & cast[inputMessageID](objs).TLEncode()
        if objs of inputMessageReplyTo:
            result = result & cast[inputMessageReplyTo](objs).TLEncode()
        if objs of inputMessagePinned:
            result = result & cast[inputMessagePinned](objs).TLEncode()

proc TLEncode*(obj: seq[InputWebFileLocationI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of inputWebFileLocation:
            result = result & cast[inputWebFileLocation](objs).TLEncode()
        if objs of inputWebFileGeoPointLocation:
            result = result & cast[inputWebFileGeoPointLocation](objs).TLEncode()

proc TLEncode*(obj: seq[messages_AllStickersI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of messages_allStickersNotModified:
            result = result & cast[messages_allStickersNotModified](objs).TLEncode()
        if objs of messages_allStickers:
            result = result & cast[messages_allStickers](objs).TLEncode()

proc TLEncode*(obj: seq[FileHashI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of fileHash:
            result = result & cast[fileHash](objs).TLEncode()

proc TLEncode*(obj: seq[ChatInviteI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of chatInviteAlready:
            result = result & cast[chatInviteAlready](objs).TLEncode()
        if objs of chatInvite:
            result = result & cast[chatInvite](objs).TLEncode()
        if objs of chatInvitePeek:
            result = result & cast[chatInvitePeek](objs).TLEncode()

proc TLEncode*(obj: seq[messages_BotResultsI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of messages_botResults:
            result = result & cast[messages_botResults](objs).TLEncode()

proc TLEncode*(obj: seq[InputWebDocumentI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of inputWebDocument:
            result = result & cast[inputWebDocument](objs).TLEncode()

proc TLEncode*(obj: seq[PageListItemI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of pageListItemText:
            result = result & cast[pageListItemText](objs).TLEncode()
        if objs of pageListItemBlocks:
            result = result & cast[pageListItemBlocks](objs).TLEncode()

proc TLEncode*(obj: seq[PageRelatedArticleI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of pageRelatedArticle:
            result = result & cast[pageRelatedArticle](objs).TLEncode()

proc TLEncode*(obj: seq[help_InviteTextI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of help_inviteText:
            result = result & cast[help_inviteText](objs).TLEncode()

proc TLEncode*(obj: seq[messages_SavedGifsI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of messages_savedGifsNotModified:
            result = result & cast[messages_savedGifsNotModified](objs).TLEncode()
        if objs of messages_savedGifs:
            result = result & cast[messages_savedGifs](objs).TLEncode()

proc TLEncode*(obj: seq[UserStatusI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of userStatusEmpty:
            result = result & cast[userStatusEmpty](objs).TLEncode()
        if objs of userStatusOnline:
            result = result & cast[userStatusOnline](objs).TLEncode()
        if objs of userStatusOffline:
            result = result & cast[userStatusOffline](objs).TLEncode()
        if objs of userStatusRecently:
            result = result & cast[userStatusRecently](objs).TLEncode()
        if objs of userStatusLastWeek:
            result = result & cast[userStatusLastWeek](objs).TLEncode()
        if objs of userStatusLastMonth:
            result = result & cast[userStatusLastMonth](objs).TLEncode()

proc TLEncode*(obj: seq[ContactI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of contact:
            result = result & cast[contact](objs).TLEncode()

proc TLEncode*(obj: seq[InputSecureFileI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of inputSecureFileUploaded:
            result = result & cast[inputSecureFileUploaded](objs).TLEncode()
        if objs of inputSecureFile:
            result = result & cast[inputSecureFile](objs).TLEncode()

proc TLEncode*(obj: seq[auth_PasswordRecoveryI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of auth_passwordRecovery:
            result = result & cast[auth_passwordRecovery](objs).TLEncode()

proc TLEncode*(obj: seq[account_WallPapersI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of account_wallPapersNotModified:
            result = result & cast[account_wallPapersNotModified](objs).TLEncode()
        if objs of account_wallPapers:
            result = result & cast[account_wallPapers](objs).TLEncode()

proc TLEncode*(obj: seq[StatsDateRangeDaysI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of statsDateRangeDays:
            result = result & cast[statsDateRangeDays](objs).TLEncode()

proc TLEncode*(obj: seq[messages_MessagesI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of messages_messages:
            result = result & cast[messages_messages](objs).TLEncode()
        if objs of messages_messagesSlice:
            result = result & cast[messages_messagesSlice](objs).TLEncode()
        if objs of messages_channelMessages:
            result = result & cast[messages_channelMessages](objs).TLEncode()
        if objs of messages_messagesNotModified:
            result = result & cast[messages_messagesNotModified](objs).TLEncode()

proc TLEncode*(obj: seq[VideoSizeI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of videoSize:
            result = result & cast[videoSize](objs).TLEncode()

proc TLEncode*(obj: seq[messages_BotCallbackAnswerI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of messages_botCallbackAnswer:
            result = result & cast[messages_botCallbackAnswer](objs).TLEncode()

proc TLEncode*(obj: seq[auth_CodeTypeI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of auth_codeTypeSms:
            result = result & cast[auth_codeTypeSms](objs).TLEncode()
        if objs of auth_codeTypeCall:
            result = result & cast[auth_codeTypeCall](objs).TLEncode()
        if objs of auth_codeTypeFlashCall:
            result = result & cast[auth_codeTypeFlashCall](objs).TLEncode()

proc TLEncode*(obj: seq[InputSecureValueI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of inputSecureValue:
            result = result & cast[inputSecureValue](objs).TLEncode()

proc TLEncode*(obj: seq[ConfigI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of config:
            result = result & cast[config](objs).TLEncode()

proc TLEncode*(obj: seq[InputWallPaperI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of inputWallPaper:
            result = result & cast[inputWallPaper](objs).TLEncode()
        if objs of inputWallPaperSlug:
            result = result & cast[inputWallPaperSlug](objs).TLEncode()
        if objs of inputWallPaperNoFile:
            result = result & cast[inputWallPaperNoFile](objs).TLEncode()

proc TLEncode*(obj: seq[upload_FileI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of upload_file:
            result = result & cast[upload_file](objs).TLEncode()
        if objs of upload_fileCdnRedirect:
            result = result & cast[upload_fileCdnRedirect](objs).TLEncode()

proc TLEncode*(obj: seq[SecurePasswordKdfAlgoI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of securePasswordKdfAlgoUnknown:
            result = result & cast[securePasswordKdfAlgoUnknown](objs).TLEncode()
        if objs of securePasswordKdfAlgoPBKDF2HMACSHA512iter100000:
            result = result & cast[securePasswordKdfAlgoPBKDF2HMACSHA512iter100000](objs).TLEncode()
        if objs of securePasswordKdfAlgoSHA512:
            result = result & cast[securePasswordKdfAlgoSHA512](objs).TLEncode()

proc TLEncode*(obj: seq[MessageUserVoteI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of messageUserVote:
            result = result & cast[messageUserVote](objs).TLEncode()
        if objs of messageUserVoteInputOption:
            result = result & cast[messageUserVoteInputOption](objs).TLEncode()
        if objs of messageUserVoteMultiple:
            result = result & cast[messageUserVoteMultiple](objs).TLEncode()

proc TLEncode*(obj: seq[messages_FavedStickersI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of messages_favedStickersNotModified:
            result = result & cast[messages_favedStickersNotModified](objs).TLEncode()
        if objs of messages_favedStickers:
            result = result & cast[messages_favedStickers](objs).TLEncode()

proc TLEncode*(obj: seq[SecureRequiredTypeI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of secureRequiredType:
            result = result & cast[secureRequiredType](objs).TLEncode()
        if objs of secureRequiredTypeOneOf:
            result = result & cast[secureRequiredTypeOneOf](objs).TLEncode()

proc TLEncode*(obj: seq[StatsGroupTopPosterI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of statsGroupTopPoster:
            result = result & cast[statsGroupTopPoster](objs).TLEncode()

proc TLEncode*(obj: seq[BotCommandI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of botCommand:
            result = result & cast[botCommand](objs).TLEncode()

proc TLEncode*(obj: seq[messages_FoundStickerSetsI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of messages_foundStickerSetsNotModified:
            result = result & cast[messages_foundStickerSetsNotModified](objs).TLEncode()
        if objs of messages_foundStickerSets:
            result = result & cast[messages_foundStickerSets](objs).TLEncode()

proc TLEncode*(obj: seq[SecureCredentialsEncryptedI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of secureCredentialsEncrypted:
            result = result & cast[secureCredentialsEncrypted](objs).TLEncode()

proc TLEncode*(obj: seq[channels_ChannelParticipantsI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of channels_channelParticipants:
            result = result & cast[channels_channelParticipants](objs).TLEncode()
        if objs of channels_channelParticipantsNotModified:
            result = result & cast[channels_channelParticipantsNotModified](objs).TLEncode()

proc TLEncode*(obj: seq[PhotoI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of photoEmpty:
            result = result & cast[photoEmpty](objs).TLEncode()
        if objs of photo:
            result = result & cast[photo](objs).TLEncode()

proc TLEncode*(obj: seq[ChatParticipantI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of chatParticipant:
            result = result & cast[chatParticipant](objs).TLEncode()
        if objs of chatParticipantCreator:
            result = result & cast[chatParticipantCreator](objs).TLEncode()
        if objs of chatParticipantAdmin:
            result = result & cast[chatParticipantAdmin](objs).TLEncode()

proc TLEncode*(obj: seq[JSONObjectValueI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of jsonObjectValue:
            result = result & cast[jsonObjectValue](objs).TLEncode()

proc TLEncode*(obj: seq[messages_StickerSetI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of messages_stickerSet:
            result = result & cast[messages_stickerSet](objs).TLEncode()

proc TLEncode*(obj: seq[SecureValueErrorI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of secureValueErrorData:
            result = result & cast[secureValueErrorData](objs).TLEncode()
        if objs of secureValueErrorFrontSide:
            result = result & cast[secureValueErrorFrontSide](objs).TLEncode()
        if objs of secureValueErrorReverseSide:
            result = result & cast[secureValueErrorReverseSide](objs).TLEncode()
        if objs of secureValueErrorSelfie:
            result = result & cast[secureValueErrorSelfie](objs).TLEncode()
        if objs of secureValueErrorFile:
            result = result & cast[secureValueErrorFile](objs).TLEncode()
        if objs of secureValueErrorFiles:
            result = result & cast[secureValueErrorFiles](objs).TLEncode()
        if objs of secureValueError:
            result = result & cast[secureValueError](objs).TLEncode()
        if objs of secureValueErrorTranslationFile:
            result = result & cast[secureValueErrorTranslationFile](objs).TLEncode()
        if objs of secureValueErrorTranslationFiles:
            result = result & cast[secureValueErrorTranslationFiles](objs).TLEncode()

proc TLEncode*(obj: seq[help_UserInfoI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of help_userInfoEmpty:
            result = result & cast[help_userInfoEmpty](objs).TLEncode()
        if objs of help_userInfo:
            result = result & cast[help_userInfo](objs).TLEncode()

proc TLEncode*(obj: seq[BankCardOpenUrlI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of bankCardOpenUrl:
            result = result & cast[bankCardOpenUrl](objs).TLEncode()

proc TLEncode*(obj: seq[help_PassportConfigI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of help_passportConfigNotModified:
            result = result & cast[help_passportConfigNotModified](objs).TLEncode()
        if objs of help_passportConfig:
            result = result & cast[help_passportConfig](objs).TLEncode()

proc TLEncode*(obj: seq[ChatAdminRightsI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of chatAdminRights:
            result = result & cast[chatAdminRights](objs).TLEncode()

proc TLEncode*(obj: seq[auth_AuthorizationI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of auth_authorization:
            result = result & cast[auth_authorization](objs).TLEncode()
        if objs of auth_authorizationSignUpRequired:
            result = result & cast[auth_authorizationSignUpRequired](objs).TLEncode()

proc TLEncode*(obj: seq[messages_StickerSetInstallResultI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of messages_stickerSetInstallResultSuccess:
            result = result & cast[messages_stickerSetInstallResultSuccess](objs).TLEncode()
        if objs of messages_stickerSetInstallResultArchive:
            result = result & cast[messages_stickerSetInstallResultArchive](objs).TLEncode()

proc TLEncode*(obj: seq[MessageViewsI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of messageViews:
            result = result & cast[messageViews](objs).TLEncode()

proc TLEncode*(obj: seq[InputFileI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of inputFile:
            result = result & cast[inputFile](objs).TLEncode()
        if objs of inputFileBig:
            result = result & cast[inputFileBig](objs).TLEncode()

proc TLEncode*(obj: seq[updates_StateI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of updates_state:
            result = result & cast[updates_state](objs).TLEncode()

proc TLEncode*(obj: seq[EncryptedFileI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of encryptedFileEmpty:
            result = result & cast[encryptedFileEmpty](objs).TLEncode()
        if objs of encryptedFile:
            result = result & cast[encryptedFile](objs).TLEncode()

proc TLEncode*(obj: seq[updates_ChannelDifferenceI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of updates_channelDifferenceEmpty:
            result = result & cast[updates_channelDifferenceEmpty](objs).TLEncode()
        if objs of updates_channelDifferenceTooLong:
            result = result & cast[updates_channelDifferenceTooLong](objs).TLEncode()
        if objs of updates_channelDifference:
            result = result & cast[updates_channelDifference](objs).TLEncode()

proc TLEncode*(obj: seq[FolderPeerI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of folderPeer:
            result = result & cast[folderPeer](objs).TLEncode()

proc TLEncode*(obj: seq[account_PasswordI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of account_password:
            result = result & cast[account_password](objs).TLEncode()

proc TLEncode*(obj: seq[GameI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of game:
            result = result & cast[game](objs).TLEncode()

proc TLEncode*(obj: seq[ChatParticipantsI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of chatParticipantsForbidden:
            result = result & cast[chatParticipantsForbidden](objs).TLEncode()
        if objs of chatParticipants:
            result = result & cast[chatParticipants](objs).TLEncode()

proc TLEncode*(obj: seq[auth_ExportedAuthorizationI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of auth_exportedAuthorization:
            result = result & cast[auth_exportedAuthorization](objs).TLEncode()

proc TLEncode*(obj: seq[InputPhoneCallI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of inputPhoneCall:
            result = result & cast[inputPhoneCall](objs).TLEncode()

proc TLEncode*(obj: seq[WebPageI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of webPageEmpty:
            result = result & cast[webPageEmpty](objs).TLEncode()
        if objs of webPagePending:
            result = result & cast[webPagePending](objs).TLEncode()
        if objs of webPage:
            result = result & cast[webPage](objs).TLEncode()
        if objs of webPageNotModified:
            result = result & cast[webPageNotModified](objs).TLEncode()

proc TLEncode*(obj: seq[messages_RecentStickersI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of messages_recentStickersNotModified:
            result = result & cast[messages_recentStickersNotModified](objs).TLEncode()
        if objs of messages_recentStickers:
            result = result & cast[messages_recentStickers](objs).TLEncode()

proc TLEncode*(obj: seq[FolderI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of folder:
            result = result & cast[folder](objs).TLEncode()

proc TLEncode*(obj: seq[InputUserI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of inputUserEmpty:
            result = result & cast[inputUserEmpty](objs).TLEncode()
        if objs of inputUserSelf:
            result = result & cast[inputUserSelf](objs).TLEncode()
        if objs of inputUser:
            result = result & cast[inputUser](objs).TLEncode()
        if objs of inputUserFromMessage:
            result = result & cast[inputUserFromMessage](objs).TLEncode()

proc TLEncode*(obj: seq[PeerI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of peerUser:
            result = result & cast[peerUser](objs).TLEncode()
        if objs of peerChat:
            result = result & cast[peerChat](objs).TLEncode()
        if objs of peerChannel:
            result = result & cast[peerChannel](objs).TLEncode()

proc TLEncode*(obj: seq[MessageActionI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of messageActionEmpty:
            result = result & cast[messageActionEmpty](objs).TLEncode()
        if objs of messageActionChatCreate:
            result = result & cast[messageActionChatCreate](objs).TLEncode()
        if objs of messageActionChatEditTitle:
            result = result & cast[messageActionChatEditTitle](objs).TLEncode()
        if objs of messageActionChatEditPhoto:
            result = result & cast[messageActionChatEditPhoto](objs).TLEncode()
        if objs of messageActionChatDeletePhoto:
            result = result & cast[messageActionChatDeletePhoto](objs).TLEncode()
        if objs of messageActionChatAddUser:
            result = result & cast[messageActionChatAddUser](objs).TLEncode()
        if objs of messageActionChatDeleteUser:
            result = result & cast[messageActionChatDeleteUser](objs).TLEncode()
        if objs of messageActionChatJoinedByLink:
            result = result & cast[messageActionChatJoinedByLink](objs).TLEncode()
        if objs of messageActionChannelCreate:
            result = result & cast[messageActionChannelCreate](objs).TLEncode()
        if objs of messageActionChatMigrateTo:
            result = result & cast[messageActionChatMigrateTo](objs).TLEncode()
        if objs of messageActionChannelMigrateFrom:
            result = result & cast[messageActionChannelMigrateFrom](objs).TLEncode()
        if objs of messageActionPinMessage:
            result = result & cast[messageActionPinMessage](objs).TLEncode()
        if objs of messageActionHistoryClear:
            result = result & cast[messageActionHistoryClear](objs).TLEncode()
        if objs of messageActionGameScore:
            result = result & cast[messageActionGameScore](objs).TLEncode()
        if objs of messageActionPaymentSentMe:
            result = result & cast[messageActionPaymentSentMe](objs).TLEncode()
        if objs of messageActionPaymentSent:
            result = result & cast[messageActionPaymentSent](objs).TLEncode()
        if objs of messageActionPhoneCall:
            result = result & cast[messageActionPhoneCall](objs).TLEncode()
        if objs of messageActionScreenshotTaken:
            result = result & cast[messageActionScreenshotTaken](objs).TLEncode()
        if objs of messageActionCustomAction:
            result = result & cast[messageActionCustomAction](objs).TLEncode()
        if objs of messageActionBotAllowed:
            result = result & cast[messageActionBotAllowed](objs).TLEncode()
        if objs of messageActionSecureValuesSentMe:
            result = result & cast[messageActionSecureValuesSentMe](objs).TLEncode()
        if objs of messageActionSecureValuesSent:
            result = result & cast[messageActionSecureValuesSent](objs).TLEncode()
        if objs of messageActionContactSignUp:
            result = result & cast[messageActionContactSignUp](objs).TLEncode()
        if objs of messageActionGeoProximityReached:
            result = result & cast[messageActionGeoProximityReached](objs).TLEncode()

proc TLEncode*(obj: seq[updates_DifferenceI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of updates_differenceEmpty:
            result = result & cast[updates_differenceEmpty](objs).TLEncode()
        if objs of updates_difference:
            result = result & cast[updates_difference](objs).TLEncode()
        if objs of updates_differenceSlice:
            result = result & cast[updates_differenceSlice](objs).TLEncode()
        if objs of updates_differenceTooLong:
            result = result & cast[updates_differenceTooLong](objs).TLEncode()

proc TLEncode*(obj: seq[PasswordKdfAlgoI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of passwordKdfAlgoUnknown:
            result = result & cast[passwordKdfAlgoUnknown](objs).TLEncode()
        if objs of passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow:
            result = result & cast[passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow](objs).TLEncode()

proc TLEncode*(obj: seq[AutoDownloadSettingsI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of autoDownloadSettings:
            result = result & cast[autoDownloadSettings](objs).TLEncode()

proc TLEncode*(obj: seq[UrlAuthResultI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of urlAuthResultRequest:
            result = result & cast[urlAuthResultRequest](objs).TLEncode()
        if objs of urlAuthResultAccepted:
            result = result & cast[urlAuthResultAccepted](objs).TLEncode()
        if objs of urlAuthResultDefault:
            result = result & cast[urlAuthResultDefault](objs).TLEncode()

proc TLEncode*(obj: seq[PageI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of page:
            result = result & cast[page](objs).TLEncode()

proc TLEncode*(obj: seq[HighScoreI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of highScore:
            result = result & cast[highScore](objs).TLEncode()

proc TLEncode*(obj: seq[InputClientProxyI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of inputClientProxy:
            result = result & cast[inputClientProxy](objs).TLEncode()

proc TLEncode*(obj: seq[ReceivedNotifyMessageI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of receivedNotifyMessage:
            result = result & cast[receivedNotifyMessage](objs).TLEncode()

proc TLEncode*(obj: seq[InputGameI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of inputGameID:
            result = result & cast[inputGameID](objs).TLEncode()
        if objs of inputGameShortName:
            result = result & cast[inputGameShortName](objs).TLEncode()

proc TLEncode*(obj: seq[payments_PaymentReceiptI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of payments_paymentReceipt:
            result = result & cast[payments_paymentReceipt](objs).TLEncode()

proc TLEncode*(obj: seq[TopPeerI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of topPeer:
            result = result & cast[topPeer](objs).TLEncode()

proc TLEncode*(obj: seq[ChannelAdminLogEventActionI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of channelAdminLogEventActionChangeTitle:
            result = result & cast[channelAdminLogEventActionChangeTitle](objs).TLEncode()
        if objs of channelAdminLogEventActionChangeAbout:
            result = result & cast[channelAdminLogEventActionChangeAbout](objs).TLEncode()
        if objs of channelAdminLogEventActionChangeUsername:
            result = result & cast[channelAdminLogEventActionChangeUsername](objs).TLEncode()
        if objs of channelAdminLogEventActionChangePhoto:
            result = result & cast[channelAdminLogEventActionChangePhoto](objs).TLEncode()
        if objs of channelAdminLogEventActionToggleInvites:
            result = result & cast[channelAdminLogEventActionToggleInvites](objs).TLEncode()
        if objs of channelAdminLogEventActionToggleSignatures:
            result = result & cast[channelAdminLogEventActionToggleSignatures](objs).TLEncode()
        if objs of channelAdminLogEventActionUpdatePinned:
            result = result & cast[channelAdminLogEventActionUpdatePinned](objs).TLEncode()
        if objs of channelAdminLogEventActionEditMessage:
            result = result & cast[channelAdminLogEventActionEditMessage](objs).TLEncode()
        if objs of channelAdminLogEventActionDeleteMessage:
            result = result & cast[channelAdminLogEventActionDeleteMessage](objs).TLEncode()
        if objs of channelAdminLogEventActionParticipantJoin:
            result = result & cast[channelAdminLogEventActionParticipantJoin](objs).TLEncode()
        if objs of channelAdminLogEventActionParticipantLeave:
            result = result & cast[channelAdminLogEventActionParticipantLeave](objs).TLEncode()
        if objs of channelAdminLogEventActionParticipantInvite:
            result = result & cast[channelAdminLogEventActionParticipantInvite](objs).TLEncode()
        if objs of channelAdminLogEventActionParticipantToggleBan:
            result = result & cast[channelAdminLogEventActionParticipantToggleBan](objs).TLEncode()
        if objs of channelAdminLogEventActionParticipantToggleAdmin:
            result = result & cast[channelAdminLogEventActionParticipantToggleAdmin](objs).TLEncode()
        if objs of channelAdminLogEventActionChangeStickerSet:
            result = result & cast[channelAdminLogEventActionChangeStickerSet](objs).TLEncode()
        if objs of channelAdminLogEventActionTogglePreHistoryHidden:
            result = result & cast[channelAdminLogEventActionTogglePreHistoryHidden](objs).TLEncode()
        if objs of channelAdminLogEventActionDefaultBannedRights:
            result = result & cast[channelAdminLogEventActionDefaultBannedRights](objs).TLEncode()
        if objs of channelAdminLogEventActionStopPoll:
            result = result & cast[channelAdminLogEventActionStopPoll](objs).TLEncode()
        if objs of channelAdminLogEventActionChangeLinkedChat:
            result = result & cast[channelAdminLogEventActionChangeLinkedChat](objs).TLEncode()
        if objs of channelAdminLogEventActionChangeLocation:
            result = result & cast[channelAdminLogEventActionChangeLocation](objs).TLEncode()
        if objs of channelAdminLogEventActionToggleSlowMode:
            result = result & cast[channelAdminLogEventActionToggleSlowMode](objs).TLEncode()

proc TLEncode*(obj: seq[UserFullI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of userFull:
            result = result & cast[userFull](objs).TLEncode()

proc TLEncode*(obj: seq[WebDocumentI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of webDocument:
            result = result & cast[webDocument](objs).TLEncode()
        if objs of webDocumentNoProxy:
            result = result & cast[webDocumentNoProxy](objs).TLEncode()

proc TLEncode*(obj: seq[StatsAbsValueAndPrevI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of statsAbsValueAndPrev:
            result = result & cast[statsAbsValueAndPrev](objs).TLEncode()

proc TLEncode*(obj: seq[contacts_ImportedContactsI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of contacts_importedContacts:
            result = result & cast[contacts_importedContacts](objs).TLEncode()

proc TLEncode*(obj: seq[EmojiLanguageI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of emojiLanguage:
            result = result & cast[emojiLanguage](objs).TLEncode()

proc TLEncode*(obj: seq[ReportReasonI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of inputReportReasonSpam:
            result = result & cast[inputReportReasonSpam](objs).TLEncode()
        if objs of inputReportReasonViolence:
            result = result & cast[inputReportReasonViolence](objs).TLEncode()
        if objs of inputReportReasonPornography:
            result = result & cast[inputReportReasonPornography](objs).TLEncode()
        if objs of inputReportReasonChildAbuse:
            result = result & cast[inputReportReasonChildAbuse](objs).TLEncode()
        if objs of inputReportReasonOther:
            result = result & cast[inputReportReasonOther](objs).TLEncode()
        if objs of inputReportReasonCopyright:
            result = result & cast[inputReportReasonCopyright](objs).TLEncode()
        if objs of inputReportReasonGeoIrrelevant:
            result = result & cast[inputReportReasonGeoIrrelevant](objs).TLEncode()

proc TLEncode*(obj: seq[account_PasswordInputSettingsI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of account_passwordInputSettings:
            result = result & cast[account_passwordInputSettings](objs).TLEncode()

proc TLEncode*(obj: seq[ChannelParticipantI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of channelParticipant:
            result = result & cast[channelParticipant](objs).TLEncode()
        if objs of channelParticipantSelf:
            result = result & cast[channelParticipantSelf](objs).TLEncode()
        if objs of channelParticipantCreator:
            result = result & cast[channelParticipantCreator](objs).TLEncode()
        if objs of channelParticipantAdmin:
            result = result & cast[channelParticipantAdmin](objs).TLEncode()
        if objs of channelParticipantBanned:
            result = result & cast[channelParticipantBanned](objs).TLEncode()
        if objs of channelParticipantLeft:
            result = result & cast[channelParticipantLeft](objs).TLEncode()

proc TLEncode*(obj: seq[InputStickeredMediaI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of inputStickeredMediaPhoto:
            result = result & cast[inputStickeredMediaPhoto](objs).TLEncode()
        if objs of inputStickeredMediaDocument:
            result = result & cast[inputStickeredMediaDocument](objs).TLEncode()

proc TLEncode*(obj: seq[InputChannelI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of inputChannelEmpty:
            result = result & cast[inputChannelEmpty](objs).TLEncode()
        if objs of inputChannel:
            result = result & cast[inputChannel](objs).TLEncode()
        if objs of inputChannelFromMessage:
            result = result & cast[inputChannelFromMessage](objs).TLEncode()

proc TLEncode*(obj: seq[messages_SearchCounterI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of messages_searchCounter:
            result = result & cast[messages_searchCounter](objs).TLEncode()

proc TLEncode*(obj: seq[InputDocumentI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of inputDocumentEmpty:
            result = result & cast[inputDocumentEmpty](objs).TLEncode()
        if objs of inputDocument:
            result = result & cast[inputDocument](objs).TLEncode()

proc TLEncode*(obj: seq[InputEncryptedFileI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of inputEncryptedFileEmpty:
            result = result & cast[inputEncryptedFileEmpty](objs).TLEncode()
        if objs of inputEncryptedFileUploaded:
            result = result & cast[inputEncryptedFileUploaded](objs).TLEncode()
        if objs of inputEncryptedFile:
            result = result & cast[inputEncryptedFile](objs).TLEncode()
        if objs of inputEncryptedFileBigUploaded:
            result = result & cast[inputEncryptedFileBigUploaded](objs).TLEncode()

proc TLEncode*(obj: seq[account_PrivacyRulesI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of account_privacyRules:
            result = result & cast[account_privacyRules](objs).TLEncode()

proc TLEncode*(obj: seq[InputThemeSettingsI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of inputThemeSettings:
            result = result & cast[inputThemeSettings](objs).TLEncode()

proc TLEncode*(obj: seq[payments_ValidatedRequestedInfoI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of payments_validatedRequestedInfo:
            result = result & cast[payments_validatedRequestedInfo](objs).TLEncode()

proc TLEncode*(obj: seq[account_AuthorizationsI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of account_authorizations:
            result = result & cast[account_authorizations](objs).TLEncode()

proc TLEncode*(obj: seq[InputPrivacyRuleI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of inputPrivacyValueAllowContacts:
            result = result & cast[inputPrivacyValueAllowContacts](objs).TLEncode()
        if objs of inputPrivacyValueAllowAll:
            result = result & cast[inputPrivacyValueAllowAll](objs).TLEncode()
        if objs of inputPrivacyValueAllowUsers:
            result = result & cast[inputPrivacyValueAllowUsers](objs).TLEncode()
        if objs of inputPrivacyValueDisallowContacts:
            result = result & cast[inputPrivacyValueDisallowContacts](objs).TLEncode()
        if objs of inputPrivacyValueDisallowAll:
            result = result & cast[inputPrivacyValueDisallowAll](objs).TLEncode()
        if objs of inputPrivacyValueDisallowUsers:
            result = result & cast[inputPrivacyValueDisallowUsers](objs).TLEncode()
        if objs of inputPrivacyValueAllowChatParticipants:
            result = result & cast[inputPrivacyValueAllowChatParticipants](objs).TLEncode()
        if objs of inputPrivacyValueDisallowChatParticipants:
            result = result & cast[inputPrivacyValueDisallowChatParticipants](objs).TLEncode()

proc TLEncode*(obj: seq[StickerSetI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of stickerSet:
            result = result & cast[stickerSet](objs).TLEncode()

proc TLEncode*(obj: seq[PollResultsI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of pollResults:
            result = result & cast[pollResults](objs).TLEncode()

proc TLEncode*(obj: seq[SecureValueI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of secureValue:
            result = result & cast[secureValue](objs).TLEncode()

proc TLEncode*(obj: seq[ChannelAdminLogEventsFilterI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of channelAdminLogEventsFilter:
            result = result & cast[channelAdminLogEventsFilter](objs).TLEncode()

proc TLEncode*(obj: seq[RestrictionReasonI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of restrictionReason:
            result = result & cast[restrictionReason](objs).TLEncode()

proc TLEncode*(obj: seq[InputBotInlineResultI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of inputBotInlineResult:
            result = result & cast[inputBotInlineResult](objs).TLEncode()
        if objs of inputBotInlineResultPhoto:
            result = result & cast[inputBotInlineResultPhoto](objs).TLEncode()
        if objs of inputBotInlineResultDocument:
            result = result & cast[inputBotInlineResultDocument](objs).TLEncode()
        if objs of inputBotInlineResultGame:
            result = result & cast[inputBotInlineResultGame](objs).TLEncode()

proc TLEncode*(obj: seq[WallPaperI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of wallPaper:
            result = result & cast[wallPaper](objs).TLEncode()
        if objs of wallPaperNoFile:
            result = result & cast[wallPaperNoFile](objs).TLEncode()

proc TLEncode*(obj: seq[ImportedContactI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of importedContact:
            result = result & cast[importedContact](objs).TLEncode()

proc TLEncode*(obj: seq[help_TermsOfServiceI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of help_termsOfService:
            result = result & cast[help_termsOfService](objs).TLEncode()

proc TLEncode*(obj: seq[DataJSONI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of dataJSON:
            result = result & cast[dataJSON](objs).TLEncode()

proc TLEncode*(obj: seq[ShippingOptionI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of shippingOption:
            result = result & cast[shippingOption](objs).TLEncode()

proc TLEncode*(obj: seq[InputMediaI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of inputMediaEmpty:
            result = result & cast[inputMediaEmpty](objs).TLEncode()
        if objs of inputMediaUploadedPhoto:
            result = result & cast[inputMediaUploadedPhoto](objs).TLEncode()
        if objs of inputMediaPhoto:
            result = result & cast[inputMediaPhoto](objs).TLEncode()
        if objs of inputMediaGeoPoint:
            result = result & cast[inputMediaGeoPoint](objs).TLEncode()
        if objs of inputMediaContact:
            result = result & cast[inputMediaContact](objs).TLEncode()
        if objs of inputMediaUploadedDocument:
            result = result & cast[inputMediaUploadedDocument](objs).TLEncode()
        if objs of inputMediaDocument:
            result = result & cast[inputMediaDocument](objs).TLEncode()
        if objs of inputMediaVenue:
            result = result & cast[inputMediaVenue](objs).TLEncode()
        if objs of inputMediaPhotoExternal:
            result = result & cast[inputMediaPhotoExternal](objs).TLEncode()
        if objs of inputMediaDocumentExternal:
            result = result & cast[inputMediaDocumentExternal](objs).TLEncode()
        if objs of inputMediaGame:
            result = result & cast[inputMediaGame](objs).TLEncode()
        if objs of inputMediaInvoice:
            result = result & cast[inputMediaInvoice](objs).TLEncode()
        if objs of inputMediaGeoLive:
            result = result & cast[inputMediaGeoLive](objs).TLEncode()
        if objs of inputMediaPoll:
            result = result & cast[inputMediaPoll](objs).TLEncode()
        if objs of inputMediaDice:
            result = result & cast[inputMediaDice](objs).TLEncode()

proc TLEncode*(obj: seq[ExportedMessageLinkI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of exportedMessageLink:
            result = result & cast[exportedMessageLink](objs).TLEncode()

proc TLEncode*(obj: seq[PaymentChargeI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of paymentCharge:
            result = result & cast[paymentCharge](objs).TLEncode()

proc TLEncode*(obj: seq[InputNotifyPeerI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of inputNotifyPeer:
            result = result & cast[inputNotifyPeer](objs).TLEncode()
        if objs of inputNotifyUsers:
            result = result & cast[inputNotifyUsers](objs).TLEncode()
        if objs of inputNotifyChats:
            result = result & cast[inputNotifyChats](objs).TLEncode()
        if objs of inputNotifyBroadcasts:
            result = result & cast[inputNotifyBroadcasts](objs).TLEncode()

proc TLEncode*(obj: seq[InputStickerSetI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of inputStickerSetEmpty:
            result = result & cast[inputStickerSetEmpty](objs).TLEncode()
        if objs of inputStickerSetID:
            result = result & cast[inputStickerSetID](objs).TLEncode()
        if objs of inputStickerSetShortName:
            result = result & cast[inputStickerSetShortName](objs).TLEncode()
        if objs of inputStickerSetAnimatedEmoji:
            result = result & cast[inputStickerSetAnimatedEmoji](objs).TLEncode()
        if objs of inputStickerSetDice:
            result = result & cast[inputStickerSetDice](objs).TLEncode()

proc TLEncode*(obj: seq[payments_PaymentFormI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of payments_paymentForm:
            result = result & cast[payments_paymentForm](objs).TLEncode()

proc TLEncode*(obj: seq[LangPackDifferenceI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of langPackDifference:
            result = result & cast[langPackDifference](objs).TLEncode()

proc TLEncode*(obj: seq[messages_DialogsI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of messages_dialogs:
            result = result & cast[messages_dialogs](objs).TLEncode()
        if objs of messages_dialogsSlice:
            result = result & cast[messages_dialogsSlice](objs).TLEncode()
        if objs of messages_dialogsNotModified:
            result = result & cast[messages_dialogsNotModified](objs).TLEncode()

proc TLEncode*(obj: seq[MessageInteractionCountersI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of messageInteractionCounters:
            result = result & cast[messageInteractionCounters](objs).TLEncode()

proc TLEncode*(obj: seq[auth_SentCodeTypeI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of auth_sentCodeTypeApp:
            result = result & cast[auth_sentCodeTypeApp](objs).TLEncode()
        if objs of auth_sentCodeTypeSms:
            result = result & cast[auth_sentCodeTypeSms](objs).TLEncode()
        if objs of auth_sentCodeTypeCall:
            result = result & cast[auth_sentCodeTypeCall](objs).TLEncode()
        if objs of auth_sentCodeTypeFlashCall:
            result = result & cast[auth_sentCodeTypeFlashCall](objs).TLEncode()

proc TLEncode*(obj: seq[PeerNotifySettingsI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of peerNotifySettings:
            result = result & cast[peerNotifySettings](objs).TLEncode()

proc TLEncode*(obj: seq[StickerSetCoveredI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of stickerSetCovered:
            result = result & cast[stickerSetCovered](objs).TLEncode()
        if objs of stickerSetMultiCovered:
            result = result & cast[stickerSetMultiCovered](objs).TLEncode()

proc TLEncode*(obj: seq[messages_DiscussionMessageI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of messages_discussionMessage:
            result = result & cast[messages_discussionMessage](objs).TLEncode()

proc TLEncode*(obj: seq[UpdateI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of updateNewMessage:
            result = result & cast[updateNewMessage](objs).TLEncode()
        if objs of updateMessageID:
            result = result & cast[updateMessageID](objs).TLEncode()
        if objs of updateDeleteMessages:
            result = result & cast[updateDeleteMessages](objs).TLEncode()
        if objs of updateUserTyping:
            result = result & cast[updateUserTyping](objs).TLEncode()
        if objs of updateChatUserTyping:
            result = result & cast[updateChatUserTyping](objs).TLEncode()
        if objs of updateChatParticipants:
            result = result & cast[updateChatParticipants](objs).TLEncode()
        if objs of updateUserStatus:
            result = result & cast[updateUserStatus](objs).TLEncode()
        if objs of updateUserName:
            result = result & cast[updateUserName](objs).TLEncode()
        if objs of updateUserPhoto:
            result = result & cast[updateUserPhoto](objs).TLEncode()
        if objs of updateNewEncryptedMessage:
            result = result & cast[updateNewEncryptedMessage](objs).TLEncode()
        if objs of updateEncryptedChatTyping:
            result = result & cast[updateEncryptedChatTyping](objs).TLEncode()
        if objs of updateEncryption:
            result = result & cast[updateEncryption](objs).TLEncode()
        if objs of updateEncryptedMessagesRead:
            result = result & cast[updateEncryptedMessagesRead](objs).TLEncode()
        if objs of updateChatParticipantAdd:
            result = result & cast[updateChatParticipantAdd](objs).TLEncode()
        if objs of updateChatParticipantDelete:
            result = result & cast[updateChatParticipantDelete](objs).TLEncode()
        if objs of updateDcOptions:
            result = result & cast[updateDcOptions](objs).TLEncode()
        if objs of updateNotifySettings:
            result = result & cast[updateNotifySettings](objs).TLEncode()
        if objs of updateServiceNotification:
            result = result & cast[updateServiceNotification](objs).TLEncode()
        if objs of updatePrivacy:
            result = result & cast[updatePrivacy](objs).TLEncode()
        if objs of updateUserPhone:
            result = result & cast[updateUserPhone](objs).TLEncode()
        if objs of updateReadHistoryInbox:
            result = result & cast[updateReadHistoryInbox](objs).TLEncode()
        if objs of updateReadHistoryOutbox:
            result = result & cast[updateReadHistoryOutbox](objs).TLEncode()
        if objs of updateWebPage:
            result = result & cast[updateWebPage](objs).TLEncode()
        if objs of updateReadMessagesContents:
            result = result & cast[updateReadMessagesContents](objs).TLEncode()
        if objs of updateChannelTooLong:
            result = result & cast[updateChannelTooLong](objs).TLEncode()
        if objs of updateChannel:
            result = result & cast[updateChannel](objs).TLEncode()
        if objs of updateNewChannelMessage:
            result = result & cast[updateNewChannelMessage](objs).TLEncode()
        if objs of updateReadChannelInbox:
            result = result & cast[updateReadChannelInbox](objs).TLEncode()
        if objs of updateDeleteChannelMessages:
            result = result & cast[updateDeleteChannelMessages](objs).TLEncode()
        if objs of updateChannelMessageViews:
            result = result & cast[updateChannelMessageViews](objs).TLEncode()
        if objs of updateChatParticipantAdmin:
            result = result & cast[updateChatParticipantAdmin](objs).TLEncode()
        if objs of updateNewStickerSet:
            result = result & cast[updateNewStickerSet](objs).TLEncode()
        if objs of updateStickerSetsOrder:
            result = result & cast[updateStickerSetsOrder](objs).TLEncode()
        if objs of updateStickerSets:
            result = result & cast[updateStickerSets](objs).TLEncode()
        if objs of updateSavedGifs:
            result = result & cast[updateSavedGifs](objs).TLEncode()
        if objs of updateBotInlineQuery:
            result = result & cast[updateBotInlineQuery](objs).TLEncode()
        if objs of updateBotInlineSend:
            result = result & cast[updateBotInlineSend](objs).TLEncode()
        if objs of updateEditChannelMessage:
            result = result & cast[updateEditChannelMessage](objs).TLEncode()
        if objs of updateBotCallbackQuery:
            result = result & cast[updateBotCallbackQuery](objs).TLEncode()
        if objs of updateEditMessage:
            result = result & cast[updateEditMessage](objs).TLEncode()
        if objs of updateInlineBotCallbackQuery:
            result = result & cast[updateInlineBotCallbackQuery](objs).TLEncode()
        if objs of updateReadChannelOutbox:
            result = result & cast[updateReadChannelOutbox](objs).TLEncode()
        if objs of updateDraftMessage:
            result = result & cast[updateDraftMessage](objs).TLEncode()
        if objs of updateReadFeaturedStickers:
            result = result & cast[updateReadFeaturedStickers](objs).TLEncode()
        if objs of updateRecentStickers:
            result = result & cast[updateRecentStickers](objs).TLEncode()
        if objs of updateConfig:
            result = result & cast[updateConfig](objs).TLEncode()
        if objs of updatePtsChanged:
            result = result & cast[updatePtsChanged](objs).TLEncode()
        if objs of updateChannelWebPage:
            result = result & cast[updateChannelWebPage](objs).TLEncode()
        if objs of updateDialogPinned:
            result = result & cast[updateDialogPinned](objs).TLEncode()
        if objs of updatePinnedDialogs:
            result = result & cast[updatePinnedDialogs](objs).TLEncode()
        if objs of updateBotWebhookJSON:
            result = result & cast[updateBotWebhookJSON](objs).TLEncode()
        if objs of updateBotWebhookJSONQuery:
            result = result & cast[updateBotWebhookJSONQuery](objs).TLEncode()
        if objs of updateBotShippingQuery:
            result = result & cast[updateBotShippingQuery](objs).TLEncode()
        if objs of updateBotPrecheckoutQuery:
            result = result & cast[updateBotPrecheckoutQuery](objs).TLEncode()
        if objs of updatePhoneCall:
            result = result & cast[updatePhoneCall](objs).TLEncode()
        if objs of updateLangPackTooLong:
            result = result & cast[updateLangPackTooLong](objs).TLEncode()
        if objs of updateLangPack:
            result = result & cast[updateLangPack](objs).TLEncode()
        if objs of updateFavedStickers:
            result = result & cast[updateFavedStickers](objs).TLEncode()
        if objs of updateChannelReadMessagesContents:
            result = result & cast[updateChannelReadMessagesContents](objs).TLEncode()
        if objs of updateContactsReset:
            result = result & cast[updateContactsReset](objs).TLEncode()
        if objs of updateChannelAvailableMessages:
            result = result & cast[updateChannelAvailableMessages](objs).TLEncode()
        if objs of updateDialogUnreadMark:
            result = result & cast[updateDialogUnreadMark](objs).TLEncode()
        if objs of updateMessagePoll:
            result = result & cast[updateMessagePoll](objs).TLEncode()
        if objs of updateChatDefaultBannedRights:
            result = result & cast[updateChatDefaultBannedRights](objs).TLEncode()
        if objs of updateFolderPeers:
            result = result & cast[updateFolderPeers](objs).TLEncode()
        if objs of updatePeerSettings:
            result = result & cast[updatePeerSettings](objs).TLEncode()
        if objs of updatePeerLocated:
            result = result & cast[updatePeerLocated](objs).TLEncode()
        if objs of updateNewScheduledMessage:
            result = result & cast[updateNewScheduledMessage](objs).TLEncode()
        if objs of updateDeleteScheduledMessages:
            result = result & cast[updateDeleteScheduledMessages](objs).TLEncode()
        if objs of updateTheme:
            result = result & cast[updateTheme](objs).TLEncode()
        if objs of updateGeoLiveViewed:
            result = result & cast[updateGeoLiveViewed](objs).TLEncode()
        if objs of updateLoginToken:
            result = result & cast[updateLoginToken](objs).TLEncode()
        if objs of updateMessagePollVote:
            result = result & cast[updateMessagePollVote](objs).TLEncode()
        if objs of updateDialogFilter:
            result = result & cast[updateDialogFilter](objs).TLEncode()
        if objs of updateDialogFilterOrder:
            result = result & cast[updateDialogFilterOrder](objs).TLEncode()
        if objs of updateDialogFilters:
            result = result & cast[updateDialogFilters](objs).TLEncode()
        if objs of updatePhoneCallSignalingData:
            result = result & cast[updatePhoneCallSignalingData](objs).TLEncode()
        if objs of updateChannelParticipant:
            result = result & cast[updateChannelParticipant](objs).TLEncode()
        if objs of updateChannelMessageForwards:
            result = result & cast[updateChannelMessageForwards](objs).TLEncode()
        if objs of updateReadChannelDiscussionInbox:
            result = result & cast[updateReadChannelDiscussionInbox](objs).TLEncode()
        if objs of updateReadChannelDiscussionOutbox:
            result = result & cast[updateReadChannelDiscussionOutbox](objs).TLEncode()
        if objs of updatePeerBlocked:
            result = result & cast[updatePeerBlocked](objs).TLEncode()
        if objs of updateChannelUserTyping:
            result = result & cast[updateChannelUserTyping](objs).TLEncode()
        if objs of updatePinnedMessages:
            result = result & cast[updatePinnedMessages](objs).TLEncode()
        if objs of updatePinnedChannelMessages:
            result = result & cast[updatePinnedChannelMessages](objs).TLEncode()

proc TLEncode*(obj: seq[TopPeerCategoryPeersI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of topPeerCategoryPeers:
            result = result & cast[topPeerCategoryPeers](objs).TLEncode()

proc TLEncode*(obj: seq[auth_SentCodeI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of auth_sentCode:
            result = result & cast[auth_sentCode](objs).TLEncode()

proc TLEncode*(obj: seq[ExportedChatInviteI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of chatInviteEmpty:
            result = result & cast[chatInviteEmpty](objs).TLEncode()
        if objs of chatInviteExported:
            result = result & cast[chatInviteExported](objs).TLEncode()

proc TLEncode*(obj: seq[account_ThemesI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of account_themesNotModified:
            result = result & cast[account_themesNotModified](objs).TLEncode()
        if objs of account_themes:
            result = result & cast[account_themes](objs).TLEncode()

proc TLEncode*(obj: seq[help_CountryI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of help_country:
            result = result & cast[help_country](objs).TLEncode()

proc TLEncode*(obj: seq[messages_InactiveChatsI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of messages_inactiveChats:
            result = result & cast[messages_inactiveChats](objs).TLEncode()

proc TLEncode*(obj: seq[PhoneCallDiscardReasonI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of phoneCallDiscardReasonMissed:
            result = result & cast[phoneCallDiscardReasonMissed](objs).TLEncode()
        if objs of phoneCallDiscardReasonDisconnect:
            result = result & cast[phoneCallDiscardReasonDisconnect](objs).TLEncode()
        if objs of phoneCallDiscardReasonHangup:
            result = result & cast[phoneCallDiscardReasonHangup](objs).TLEncode()
        if objs of phoneCallDiscardReasonBusy:
            result = result & cast[phoneCallDiscardReasonBusy](objs).TLEncode()

proc TLEncode*(obj: seq[stats_BroadcastStatsI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of stats_broadcastStats:
            result = result & cast[stats_broadcastStats](objs).TLEncode()

proc TLEncode*(obj: seq[account_TmpPasswordI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of account_tmpPassword:
            result = result & cast[account_tmpPassword](objs).TLEncode()

proc TLEncode*(obj: seq[InputPaymentCredentialsI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of inputPaymentCredentialsSaved:
            result = result & cast[inputPaymentCredentialsSaved](objs).TLEncode()
        if objs of inputPaymentCredentials:
            result = result & cast[inputPaymentCredentials](objs).TLEncode()
        if objs of inputPaymentCredentialsApplePay:
            result = result & cast[inputPaymentCredentialsApplePay](objs).TLEncode()
        if objs of inputPaymentCredentialsAndroidPay:
            result = result & cast[inputPaymentCredentialsAndroidPay](objs).TLEncode()

proc TLEncode*(obj: seq[ThemeSettingsI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of themeSettings:
            result = result & cast[themeSettings](objs).TLEncode()

proc TLEncode*(obj: seq[BotInfoI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of botInfo:
            result = result & cast[botInfo](objs).TLEncode()

proc TLEncode*(obj: seq[PollAnswerI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of pollAnswer:
            result = result & cast[pollAnswer](objs).TLEncode()

proc TLEncode*(obj: seq[DialogI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of dialog:
            result = result & cast[dialog](objs).TLEncode()
        if objs of dialogFolder:
            result = result & cast[dialogFolder](objs).TLEncode()

proc TLEncode*(obj: seq[PageListOrderedItemI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of pageListOrderedItemText:
            result = result & cast[pageListOrderedItemText](objs).TLEncode()
        if objs of pageListOrderedItemBlocks:
            result = result & cast[pageListOrderedItemBlocks](objs).TLEncode()

proc TLEncode*(obj: seq[PaymentSavedCredentialsI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of paymentSavedCredentialsCard:
            result = result & cast[paymentSavedCredentialsCard](objs).TLEncode()

proc TLEncode*(obj: seq[KeyboardButtonRowI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of keyboardButtonRow:
            result = result & cast[keyboardButtonRow](objs).TLEncode()

proc TLEncode*(obj: seq[InlineBotSwitchPMI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of inlineBotSwitchPM:
            result = result & cast[inlineBotSwitchPM](objs).TLEncode()

proc TLEncode*(obj: seq[messages_HighScoresI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of messages_highScores:
            result = result & cast[messages_highScores](objs).TLEncode()

proc TLEncode*(obj: seq[messages_AffectedHistoryI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of messages_affectedHistory:
            result = result & cast[messages_affectedHistory](objs).TLEncode()

proc TLEncode*(obj: seq[FileLocationI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of fileLocationToBeDeprecated:
            result = result & cast[fileLocationToBeDeprecated](objs).TLEncode()

proc TLEncode*(obj: seq[NearestDcI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of nearestDc:
            result = result & cast[nearestDc](objs).TLEncode()

proc TLEncode*(obj: seq[InputSingleMediaI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of inputSingleMedia:
            result = result & cast[inputSingleMedia](objs).TLEncode()

proc TLEncode*(obj: seq[UserI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of userEmpty:
            result = result & cast[userEmpty](objs).TLEncode()
        if objs of user:
            result = result & cast[user](objs).TLEncode()

proc TLEncode*(obj: seq[LangPackLanguageI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of langPackLanguage:
            result = result & cast[langPackLanguage](objs).TLEncode()

proc TLEncode*(obj: seq[LangPackStringI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of langPackString:
            result = result & cast[langPackString](objs).TLEncode()
        if objs of langPackStringPluralized:
            result = result & cast[langPackStringPluralized](objs).TLEncode()
        if objs of langPackStringDeleted:
            result = result & cast[langPackStringDeleted](objs).TLEncode()

proc TLEncode*(obj: seq[WebPageAttributeI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of webPageAttributeTheme:
            result = result & cast[webPageAttributeTheme](objs).TLEncode()

proc TLEncode*(obj: seq[NotifyPeerI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of notifyPeer:
            result = result & cast[notifyPeer](objs).TLEncode()
        if objs of notifyUsers:
            result = result & cast[notifyUsers](objs).TLEncode()
        if objs of notifyChats:
            result = result & cast[notifyChats](objs).TLEncode()
        if objs of notifyBroadcasts:
            result = result & cast[notifyBroadcasts](objs).TLEncode()

proc TLEncode*(obj: seq[InputDialogPeerI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of inputDialogPeer:
            result = result & cast[inputDialogPeer](objs).TLEncode()
        if objs of inputDialogPeerFolder:
            result = result & cast[inputDialogPeerFolder](objs).TLEncode()

proc TLEncode*(obj: seq[payments_BankCardDataI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of payments_bankCardData:
            result = result & cast[payments_bankCardData](objs).TLEncode()

proc TLEncode*(obj: seq[StatsPercentValueI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of statsPercentValue:
            result = result & cast[statsPercentValue](objs).TLEncode()

proc TLEncode*(obj: seq[contacts_TopPeersI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of contacts_topPeersNotModified:
            result = result & cast[contacts_topPeersNotModified](objs).TLEncode()
        if objs of contacts_topPeers:
            result = result & cast[contacts_topPeers](objs).TLEncode()
        if objs of contacts_topPeersDisabled:
            result = result & cast[contacts_topPeersDisabled](objs).TLEncode()

proc TLEncode*(obj: seq[contacts_BlockedI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of contacts_blocked:
            result = result & cast[contacts_blocked](objs).TLEncode()
        if objs of contacts_blockedSlice:
            result = result & cast[contacts_blockedSlice](objs).TLEncode()

proc TLEncode*(obj: seq[DcOptionI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of dcOption:
            result = result & cast[dcOption](objs).TLEncode()

proc TLEncode*(obj: seq[SavedContactI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of savedPhoneContact:
            result = result & cast[savedPhoneContact](objs).TLEncode()

proc TLEncode*(obj: seq[PageCaptionI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of pageCaption:
            result = result & cast[pageCaption](objs).TLEncode()

proc TLEncode*(obj: seq[upload_WebFileI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of upload_webFile:
            result = result & cast[upload_webFile](objs).TLEncode()

proc TLEncode*(obj: seq[account_AutoDownloadSettingsI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of account_autoDownloadSettings:
            result = result & cast[account_autoDownloadSettings](objs).TLEncode()

proc TLEncode*(obj: seq[messages_VotesListI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of messages_votesList:
            result = result & cast[messages_votesList](objs).TLEncode()

proc TLEncode*(obj: seq[messages_StickersI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of messages_stickersNotModified:
            result = result & cast[messages_stickersNotModified](objs).TLEncode()
        if objs of messages_stickers:
            result = result & cast[messages_stickers](objs).TLEncode()

proc TLEncode*(obj: seq[ChannelMessagesFilterI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of channelMessagesFilterEmpty:
            result = result & cast[channelMessagesFilterEmpty](objs).TLEncode()
        if objs of channelMessagesFilter:
            result = result & cast[channelMessagesFilter](objs).TLEncode()

proc TLEncode*(obj: seq[InputPeerNotifySettingsI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of inputPeerNotifySettings:
            result = result & cast[inputPeerNotifySettings](objs).TLEncode()

proc TLEncode*(obj: seq[InvoiceI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of invoice:
            result = result & cast[invoice](objs).TLEncode()

proc TLEncode*(obj: seq[PhoneConnectionI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of phoneConnection:
            result = result & cast[phoneConnection](objs).TLEncode()
        if objs of phoneConnectionWebrtc:
            result = result & cast[phoneConnectionWebrtc](objs).TLEncode()

proc TLEncode*(obj: seq[InputContactI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of inputPhoneContact:
            result = result & cast[inputPhoneContact](objs).TLEncode()

proc TLEncode*(obj: seq[messages_SentEncryptedMessageI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of messages_sentEncryptedMessage:
            result = result & cast[messages_sentEncryptedMessage](objs).TLEncode()
        if objs of messages_sentEncryptedFile:
            result = result & cast[messages_sentEncryptedFile](objs).TLEncode()

proc TLEncode*(obj: seq[channels_AdminLogResultsI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of channels_adminLogResults:
            result = result & cast[channels_adminLogResults](objs).TLEncode()

proc TLEncode*(obj: seq[WallPaperSettingsI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of wallPaperSettings:
            result = result & cast[wallPaperSettings](objs).TLEncode()

proc TLEncode*(obj: seq[storage_FileTypeI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of storage_fileUnknown:
            result = result & cast[storage_fileUnknown](objs).TLEncode()
        if objs of storage_filePartial:
            result = result & cast[storage_filePartial](objs).TLEncode()
        if objs of storage_fileJpeg:
            result = result & cast[storage_fileJpeg](objs).TLEncode()
        if objs of storage_fileGif:
            result = result & cast[storage_fileGif](objs).TLEncode()
        if objs of storage_filePng:
            result = result & cast[storage_filePng](objs).TLEncode()
        if objs of storage_filePdf:
            result = result & cast[storage_filePdf](objs).TLEncode()
        if objs of storage_fileMp3:
            result = result & cast[storage_fileMp3](objs).TLEncode()
        if objs of storage_fileMov:
            result = result & cast[storage_fileMov](objs).TLEncode()
        if objs of storage_fileMp4:
            result = result & cast[storage_fileMp4](objs).TLEncode()
        if objs of storage_fileWebp:
            result = result & cast[storage_fileWebp](objs).TLEncode()

proc TLEncode*(obj: seq[InputThemeI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of inputTheme:
            result = result & cast[inputTheme](objs).TLEncode()
        if objs of inputThemeSlug:
            result = result & cast[inputThemeSlug](objs).TLEncode()

proc TLEncode*(obj: seq[MessageReplyHeaderI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of messageReplyHeader:
            result = result & cast[messageReplyHeader](objs).TLEncode()

proc TLEncode*(obj: seq[messages_AffectedMessagesI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of messages_affectedMessages:
            result = result & cast[messages_affectedMessages](objs).TLEncode()

proc TLEncode*(obj: seq[LabeledPriceI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of labeledPrice:
            result = result & cast[labeledPrice](objs).TLEncode()

proc TLEncode*(obj: seq[contacts_ResolvedPeerI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of contacts_resolvedPeer:
            result = result & cast[contacts_resolvedPeer](objs).TLEncode()

proc TLEncode*(obj: seq[messages_PeerDialogsI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of messages_peerDialogs:
            result = result & cast[messages_peerDialogs](objs).TLEncode()

proc TLEncode*(obj: seq[MessageRangeI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of messageRange:
            result = result & cast[messageRange](objs).TLEncode()

proc TLEncode*(obj: seq[PostAddressI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of postAddress:
            result = result & cast[postAddress](objs).TLEncode()

proc TLEncode*(obj: seq[GeoPointI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of geoPointEmpty:
            result = result & cast[geoPointEmpty](objs).TLEncode()
        if objs of geoPoint:
            result = result & cast[geoPoint](objs).TLEncode()

proc TLEncode*(obj: seq[upload_CdnFileI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of upload_cdnFileReuploadNeeded:
            result = result & cast[upload_cdnFileReuploadNeeded](objs).TLEncode()
        if objs of upload_cdnFile:
            result = result & cast[upload_cdnFile](objs).TLEncode()

proc TLEncode*(obj: seq[help_SupportI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of help_support:
            result = result & cast[help_support](objs).TLEncode()

proc TLEncode*(obj: seq[PeerBlockedI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of peerBlocked:
            result = result & cast[peerBlocked](objs).TLEncode()

proc TLEncode*(obj: seq[InputFolderPeerI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of inputFolderPeer:
            result = result & cast[inputFolderPeer](objs).TLEncode()

proc TLEncode*(obj: seq[CdnPublicKeyI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of cdnPublicKey:
            result = result & cast[cdnPublicKey](objs).TLEncode()

proc TLEncode*(obj: seq[MessageMediaI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of messageMediaEmpty:
            result = result & cast[messageMediaEmpty](objs).TLEncode()
        if objs of messageMediaPhoto:
            result = result & cast[messageMediaPhoto](objs).TLEncode()
        if objs of messageMediaGeo:
            result = result & cast[messageMediaGeo](objs).TLEncode()
        if objs of messageMediaContact:
            result = result & cast[messageMediaContact](objs).TLEncode()
        if objs of messageMediaUnsupported:
            result = result & cast[messageMediaUnsupported](objs).TLEncode()
        if objs of messageMediaDocument:
            result = result & cast[messageMediaDocument](objs).TLEncode()
        if objs of messageMediaWebPage:
            result = result & cast[messageMediaWebPage](objs).TLEncode()
        if objs of messageMediaVenue:
            result = result & cast[messageMediaVenue](objs).TLEncode()
        if objs of messageMediaGame:
            result = result & cast[messageMediaGame](objs).TLEncode()
        if objs of messageMediaInvoice:
            result = result & cast[messageMediaInvoice](objs).TLEncode()
        if objs of messageMediaGeoLive:
            result = result & cast[messageMediaGeoLive](objs).TLEncode()
        if objs of messageMediaPoll:
            result = result & cast[messageMediaPoll](objs).TLEncode()
        if objs of messageMediaDice:
            result = result & cast[messageMediaDice](objs).TLEncode()

proc TLEncode*(obj: seq[ChatI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of chatEmpty:
            result = result & cast[chatEmpty](objs).TLEncode()
        if objs of chat:
            result = result & cast[chat](objs).TLEncode()
        if objs of chatForbidden:
            result = result & cast[chatForbidden](objs).TLEncode()
        if objs of channel:
            result = result & cast[channel](objs).TLEncode()
        if objs of channelForbidden:
            result = result & cast[channelForbidden](objs).TLEncode()

proc TLEncode*(obj: seq[help_RecentMeUrlsI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of help_recentMeUrls:
            result = result & cast[help_recentMeUrls](objs).TLEncode()

proc TLEncode*(obj: seq[UserProfilePhotoI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of userProfilePhotoEmpty:
            result = result & cast[userProfilePhotoEmpty](objs).TLEncode()
        if objs of userProfilePhoto:
            result = result & cast[userProfilePhoto](objs).TLEncode()

proc TLEncode*(obj: seq[InputGeoPointI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of inputGeoPointEmpty:
            result = result & cast[inputGeoPointEmpty](objs).TLEncode()
        if objs of inputGeoPoint:
            result = result & cast[inputGeoPoint](objs).TLEncode()

proc TLEncode*(obj: seq[ContactStatusI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of contactStatus:
            result = result & cast[contactStatus](objs).TLEncode()

proc TLEncode*(obj: seq[contacts_FoundI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of contacts_found:
            result = result & cast[contacts_found](objs).TLEncode()

proc TLEncode*(obj: seq[GlobalPrivacySettingsI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of globalPrivacySettings:
            result = result & cast[globalPrivacySettings](objs).TLEncode()

proc TLEncode*(obj: seq[InputPeerI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of inputPeerEmpty:
            result = result & cast[inputPeerEmpty](objs).TLEncode()
        if objs of inputPeerSelf:
            result = result & cast[inputPeerSelf](objs).TLEncode()
        if objs of inputPeerChat:
            result = result & cast[inputPeerChat](objs).TLEncode()
        if objs of inputPeerUser:
            result = result & cast[inputPeerUser](objs).TLEncode()
        if objs of inputPeerChannel:
            result = result & cast[inputPeerChannel](objs).TLEncode()
        if objs of inputPeerUserFromMessage:
            result = result & cast[inputPeerUserFromMessage](objs).TLEncode()
        if objs of inputPeerChannelFromMessage:
            result = result & cast[inputPeerChannelFromMessage](objs).TLEncode()

proc TLEncode*(obj: seq[DraftMessageI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of draftMessageEmpty:
            result = result & cast[draftMessageEmpty](objs).TLEncode()
        if objs of draftMessage:
            result = result & cast[draftMessage](objs).TLEncode()

proc TLEncode*(obj: seq[account_SentEmailCodeI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of account_sentEmailCode:
            result = result & cast[account_sentEmailCode](objs).TLEncode()

proc TLEncode*(obj: seq[InputBotInlineMessageI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of inputBotInlineMessageMediaAuto:
            result = result & cast[inputBotInlineMessageMediaAuto](objs).TLEncode()
        if objs of inputBotInlineMessageText:
            result = result & cast[inputBotInlineMessageText](objs).TLEncode()
        if objs of inputBotInlineMessageMediaGeo:
            result = result & cast[inputBotInlineMessageMediaGeo](objs).TLEncode()
        if objs of inputBotInlineMessageMediaVenue:
            result = result & cast[inputBotInlineMessageMediaVenue](objs).TLEncode()
        if objs of inputBotInlineMessageMediaContact:
            result = result & cast[inputBotInlineMessageMediaContact](objs).TLEncode()
        if objs of inputBotInlineMessageGame:
            result = result & cast[inputBotInlineMessageGame](objs).TLEncode()

proc TLEncode*(obj: seq[ChatFullI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of chatFull:
            result = result & cast[chatFull](objs).TLEncode()
        if objs of channelFull:
            result = result & cast[channelFull](objs).TLEncode()

proc TLEncode*(obj: seq[AccountDaysTTLI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of accountDaysTTL:
            result = result & cast[accountDaysTTL](objs).TLEncode()

proc TLEncode*(obj: seq[messages_ChatsI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of messages_chats:
            result = result & cast[messages_chats](objs).TLEncode()
        if objs of messages_chatsSlice:
            result = result & cast[messages_chatsSlice](objs).TLEncode()

proc TLEncode*(obj: seq[RecentMeUrlI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of recentMeUrlUnknown:
            result = result & cast[recentMeUrlUnknown](objs).TLEncode()
        if objs of recentMeUrlUser:
            result = result & cast[recentMeUrlUser](objs).TLEncode()
        if objs of recentMeUrlChat:
            result = result & cast[recentMeUrlChat](objs).TLEncode()
        if objs of recentMeUrlChatInvite:
            result = result & cast[recentMeUrlChatInvite](objs).TLEncode()
        if objs of recentMeUrlStickerSet:
            result = result & cast[recentMeUrlStickerSet](objs).TLEncode()

proc TLEncode*(obj: seq[auth_LoginTokenI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of auth_loginToken:
            result = result & cast[auth_loginToken](objs).TLEncode()
        if objs of auth_loginTokenMigrateTo:
            result = result & cast[auth_loginTokenMigrateTo](objs).TLEncode()
        if objs of auth_loginTokenSuccess:
            result = result & cast[auth_loginTokenSuccess](objs).TLEncode()

proc TLEncode*(obj: seq[messages_MessageViewsI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of messages_messageViews:
            result = result & cast[messages_messageViews](objs).TLEncode()

proc TLEncode*(obj: seq[InputFileLocationI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of inputFileLocation:
            result = result & cast[inputFileLocation](objs).TLEncode()
        if objs of inputEncryptedFileLocation:
            result = result & cast[inputEncryptedFileLocation](objs).TLEncode()
        if objs of inputDocumentFileLocation:
            result = result & cast[inputDocumentFileLocation](objs).TLEncode()
        if objs of inputSecureFileLocation:
            result = result & cast[inputSecureFileLocation](objs).TLEncode()
        if objs of inputTakeoutFileLocation:
            result = result & cast[inputTakeoutFileLocation](objs).TLEncode()
        if objs of inputPhotoFileLocation:
            result = result & cast[inputPhotoFileLocation](objs).TLEncode()
        if objs of inputPhotoLegacyFileLocation:
            result = result & cast[inputPhotoLegacyFileLocation](objs).TLEncode()
        if objs of inputPeerPhotoFileLocation:
            result = result & cast[inputPeerPhotoFileLocation](objs).TLEncode()
        if objs of inputStickerSetThumb:
            result = result & cast[inputStickerSetThumb](objs).TLEncode()

proc TLEncode*(obj: seq[help_AppUpdateI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of help_appUpdate:
            result = result & cast[help_appUpdate](objs).TLEncode()
        if objs of help_noAppUpdate:
            result = result & cast[help_noAppUpdate](objs).TLEncode()

proc TLEncode*(obj: seq[PopularContactI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of popularContact:
            result = result & cast[popularContact](objs).TLEncode()

proc TLEncode*(obj: seq[EmojiURLI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of emojiURL:
            result = result & cast[emojiURL](objs).TLEncode()

proc TLEncode*(obj: seq[MessagesFilterI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of inputMessagesFilterEmpty:
            result = result & cast[inputMessagesFilterEmpty](objs).TLEncode()
        if objs of inputMessagesFilterPhotos:
            result = result & cast[inputMessagesFilterPhotos](objs).TLEncode()
        if objs of inputMessagesFilterVideo:
            result = result & cast[inputMessagesFilterVideo](objs).TLEncode()
        if objs of inputMessagesFilterPhotoVideo:
            result = result & cast[inputMessagesFilterPhotoVideo](objs).TLEncode()
        if objs of inputMessagesFilterDocument:
            result = result & cast[inputMessagesFilterDocument](objs).TLEncode()
        if objs of inputMessagesFilterUrl:
            result = result & cast[inputMessagesFilterUrl](objs).TLEncode()
        if objs of inputMessagesFilterGif:
            result = result & cast[inputMessagesFilterGif](objs).TLEncode()
        if objs of inputMessagesFilterVoice:
            result = result & cast[inputMessagesFilterVoice](objs).TLEncode()
        if objs of inputMessagesFilterMusic:
            result = result & cast[inputMessagesFilterMusic](objs).TLEncode()
        if objs of inputMessagesFilterChatPhotos:
            result = result & cast[inputMessagesFilterChatPhotos](objs).TLEncode()
        if objs of inputMessagesFilterPhoneCalls:
            result = result & cast[inputMessagesFilterPhoneCalls](objs).TLEncode()
        if objs of inputMessagesFilterRoundVoice:
            result = result & cast[inputMessagesFilterRoundVoice](objs).TLEncode()
        if objs of inputMessagesFilterRoundVideo:
            result = result & cast[inputMessagesFilterRoundVideo](objs).TLEncode()
        if objs of inputMessagesFilterMyMentions:
            result = result & cast[inputMessagesFilterMyMentions](objs).TLEncode()
        if objs of inputMessagesFilterGeo:
            result = result & cast[inputMessagesFilterGeo](objs).TLEncode()
        if objs of inputMessagesFilterContacts:
            result = result & cast[inputMessagesFilterContacts](objs).TLEncode()
        if objs of inputMessagesFilterPinned:
            result = result & cast[inputMessagesFilterPinned](objs).TLEncode()

proc TLEncode*(obj: seq[CodeSettingsI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of codeSettings:
            result = result & cast[codeSettings](objs).TLEncode()

proc TLEncode*(obj: seq[messages_MessageEditDataI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of messages_messageEditData:
            result = result & cast[messages_messageEditData](objs).TLEncode()

proc TLEncode*(obj: seq[help_CountriesListI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of help_countriesListNotModified:
            result = result & cast[help_countriesListNotModified](objs).TLEncode()
        if objs of help_countriesList:
            result = result & cast[help_countriesList](objs).TLEncode()

proc TLEncode*(obj: seq[MessageRepliesI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of messageReplies:
            result = result & cast[messageReplies](objs).TLEncode()

proc TLEncode*(obj: seq[account_AuthorizationFormI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of account_authorizationForm:
            result = result & cast[account_authorizationForm](objs).TLEncode()

proc TLEncode*(obj: seq[messages_DhConfigI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of messages_dhConfigNotModified:
            result = result & cast[messages_dhConfigNotModified](objs).TLEncode()
        if objs of messages_dhConfig:
            result = result & cast[messages_dhConfig](objs).TLEncode()

proc TLEncode*(obj: seq[account_TakeoutI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of account_takeout:
            result = result & cast[account_takeout](objs).TLEncode()

proc TLEncode*(obj: seq[UpdatesI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of updatesTooLong:
            result = result & cast[updatesTooLong](objs).TLEncode()
        if objs of updateShortMessage:
            result = result & cast[updateShortMessage](objs).TLEncode()
        if objs of updateShortChatMessage:
            result = result & cast[updateShortChatMessage](objs).TLEncode()
        if objs of updateShort:
            result = result & cast[updateShort](objs).TLEncode()
        if objs of updatesCombined:
            result = result & cast[updatesCombined](objs).TLEncode()
        if objs of updates:
            result = result & cast[updates](objs).TLEncode()
        if objs of updateShortSentMessage:
            result = result & cast[updateShortSentMessage](objs).TLEncode()

proc TLEncode*(obj: seq[MessageFwdHeaderI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of messageFwdHeader:
            result = result & cast[messageFwdHeader](objs).TLEncode()

proc TLEncode*(obj: seq[AuthorizationI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of authorization:
            result = result & cast[authorization](objs).TLEncode()

proc TLEncode*(obj: seq[help_TermsOfServiceUpdateI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of help_termsOfServiceUpdateEmpty:
            result = result & cast[help_termsOfServiceUpdateEmpty](objs).TLEncode()
        if objs of help_termsOfServiceUpdate:
            result = result & cast[help_termsOfServiceUpdate](objs).TLEncode()

proc TLEncode*(obj: seq[PageTableCellI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of pageTableCell:
            result = result & cast[pageTableCell](objs).TLEncode()

proc TLEncode*(obj: seq[account_ContentSettingsI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of account_contentSettings:
            result = result & cast[account_contentSettings](objs).TLEncode()

proc TLEncode*(obj: seq[account_WebAuthorizationsI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of account_webAuthorizations:
            result = result & cast[account_webAuthorizations](objs).TLEncode()

proc TLEncode*(obj: seq[SecureValueHashI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of secureValueHash:
            result = result & cast[secureValueHash](objs).TLEncode()

proc TLEncode*(obj: seq[PaymentRequestedInfoI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of paymentRequestedInfo:
            result = result & cast[paymentRequestedInfo](objs).TLEncode()

proc TLEncode*(obj: seq[PhoneCallI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of phoneCallEmpty:
            result = result & cast[phoneCallEmpty](objs).TLEncode()
        if objs of phoneCallWaiting:
            result = result & cast[phoneCallWaiting](objs).TLEncode()
        if objs of phoneCallRequested:
            result = result & cast[phoneCallRequested](objs).TLEncode()
        if objs of phoneCallAccepted:
            result = result & cast[phoneCallAccepted](objs).TLEncode()
        if objs of phoneCall:
            result = result & cast[phoneCall](objs).TLEncode()
        if objs of phoneCallDiscarded:
            result = result & cast[phoneCallDiscarded](objs).TLEncode()

proc TLEncode*(obj: seq[InputPrivacyKeyI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of inputPrivacyKeyStatusTimestamp:
            result = result & cast[inputPrivacyKeyStatusTimestamp](objs).TLEncode()
        if objs of inputPrivacyKeyChatInvite:
            result = result & cast[inputPrivacyKeyChatInvite](objs).TLEncode()
        if objs of inputPrivacyKeyPhoneCall:
            result = result & cast[inputPrivacyKeyPhoneCall](objs).TLEncode()
        if objs of inputPrivacyKeyPhoneP2P:
            result = result & cast[inputPrivacyKeyPhoneP2P](objs).TLEncode()
        if objs of inputPrivacyKeyForwards:
            result = result & cast[inputPrivacyKeyForwards](objs).TLEncode()
        if objs of inputPrivacyKeyProfilePhoto:
            result = result & cast[inputPrivacyKeyProfilePhoto](objs).TLEncode()
        if objs of inputPrivacyKeyPhoneNumber:
            result = result & cast[inputPrivacyKeyPhoneNumber](objs).TLEncode()
        if objs of inputPrivacyKeyAddedByPhone:
            result = result & cast[inputPrivacyKeyAddedByPhone](objs).TLEncode()

proc TLEncode*(obj: seq[MaskCoordsI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of maskCoords:
            result = result & cast[maskCoords](objs).TLEncode()

proc TLEncode*(obj: seq[PrivacyRuleI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of privacyValueAllowContacts:
            result = result & cast[privacyValueAllowContacts](objs).TLEncode()
        if objs of privacyValueAllowAll:
            result = result & cast[privacyValueAllowAll](objs).TLEncode()
        if objs of privacyValueAllowUsers:
            result = result & cast[privacyValueAllowUsers](objs).TLEncode()
        if objs of privacyValueDisallowContacts:
            result = result & cast[privacyValueDisallowContacts](objs).TLEncode()
        if objs of privacyValueDisallowAll:
            result = result & cast[privacyValueDisallowAll](objs).TLEncode()
        if objs of privacyValueDisallowUsers:
            result = result & cast[privacyValueDisallowUsers](objs).TLEncode()
        if objs of privacyValueAllowChatParticipants:
            result = result & cast[privacyValueAllowChatParticipants](objs).TLEncode()
        if objs of privacyValueDisallowChatParticipants:
            result = result & cast[privacyValueDisallowChatParticipants](objs).TLEncode()

proc TLEncode*(obj: seq[PageBlockI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of pageBlockUnsupported:
            result = result & cast[pageBlockUnsupported](objs).TLEncode()
        if objs of pageBlockTitle:
            result = result & cast[pageBlockTitle](objs).TLEncode()
        if objs of pageBlockSubtitle:
            result = result & cast[pageBlockSubtitle](objs).TLEncode()
        if objs of pageBlockAuthorDate:
            result = result & cast[pageBlockAuthorDate](objs).TLEncode()
        if objs of pageBlockHeader:
            result = result & cast[pageBlockHeader](objs).TLEncode()
        if objs of pageBlockSubheader:
            result = result & cast[pageBlockSubheader](objs).TLEncode()
        if objs of pageBlockParagraph:
            result = result & cast[pageBlockParagraph](objs).TLEncode()
        if objs of pageBlockPreformatted:
            result = result & cast[pageBlockPreformatted](objs).TLEncode()
        if objs of pageBlockFooter:
            result = result & cast[pageBlockFooter](objs).TLEncode()
        if objs of pageBlockDivider:
            result = result & cast[pageBlockDivider](objs).TLEncode()
        if objs of pageBlockAnchor:
            result = result & cast[pageBlockAnchor](objs).TLEncode()
        if objs of pageBlockList:
            result = result & cast[pageBlockList](objs).TLEncode()
        if objs of pageBlockBlockquote:
            result = result & cast[pageBlockBlockquote](objs).TLEncode()
        if objs of pageBlockPullquote:
            result = result & cast[pageBlockPullquote](objs).TLEncode()
        if objs of pageBlockPhoto:
            result = result & cast[pageBlockPhoto](objs).TLEncode()
        if objs of pageBlockVideo:
            result = result & cast[pageBlockVideo](objs).TLEncode()
        if objs of pageBlockCover:
            result = result & cast[pageBlockCover](objs).TLEncode()
        if objs of pageBlockEmbed:
            result = result & cast[pageBlockEmbed](objs).TLEncode()
        if objs of pageBlockEmbedPost:
            result = result & cast[pageBlockEmbedPost](objs).TLEncode()
        if objs of pageBlockCollage:
            result = result & cast[pageBlockCollage](objs).TLEncode()
        if objs of pageBlockSlideshow:
            result = result & cast[pageBlockSlideshow](objs).TLEncode()
        if objs of pageBlockChannel:
            result = result & cast[pageBlockChannel](objs).TLEncode()
        if objs of pageBlockAudio:
            result = result & cast[pageBlockAudio](objs).TLEncode()
        if objs of pageBlockKicker:
            result = result & cast[pageBlockKicker](objs).TLEncode()
        if objs of pageBlockTable:
            result = result & cast[pageBlockTable](objs).TLEncode()
        if objs of pageBlockOrderedList:
            result = result & cast[pageBlockOrderedList](objs).TLEncode()
        if objs of pageBlockDetails:
            result = result & cast[pageBlockDetails](objs).TLEncode()
        if objs of pageBlockRelatedArticles:
            result = result & cast[pageBlockRelatedArticles](objs).TLEncode()
        if objs of pageBlockMap:
            result = result & cast[pageBlockMap](objs).TLEncode()

proc TLEncode*(obj: seq[ChatPhotoI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of chatPhotoEmpty:
            result = result & cast[chatPhotoEmpty](objs).TLEncode()
        if objs of chatPhoto:
            result = result & cast[chatPhoto](objs).TLEncode()

proc TLEncode*(obj: seq[contacts_ContactsI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of contacts_contactsNotModified:
            result = result & cast[contacts_contactsNotModified](objs).TLEncode()
        if objs of contacts_contacts:
            result = result & cast[contacts_contacts](objs).TLEncode()

proc TLEncode*(obj: seq[EncryptedChatI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of encryptedChatEmpty:
            result = result & cast[encryptedChatEmpty](objs).TLEncode()
        if objs of encryptedChatWaiting:
            result = result & cast[encryptedChatWaiting](objs).TLEncode()
        if objs of encryptedChatRequested:
            result = result & cast[encryptedChatRequested](objs).TLEncode()
        if objs of encryptedChat:
            result = result & cast[encryptedChat](objs).TLEncode()
        if objs of encryptedChatDiscarded:
            result = result & cast[encryptedChatDiscarded](objs).TLEncode()

proc TLEncode*(obj: seq[messages_ChatFullI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of messages_chatFull:
            result = result & cast[messages_chatFull](objs).TLEncode()

proc TLEncode*(obj: seq[ReplyMarkupI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of replyKeyboardHide:
            result = result & cast[replyKeyboardHide](objs).TLEncode()
        if objs of replyKeyboardForceReply:
            result = result & cast[replyKeyboardForceReply](objs).TLEncode()
        if objs of replyKeyboardMarkup:
            result = result & cast[replyKeyboardMarkup](objs).TLEncode()
        if objs of replyInlineMarkup:
            result = result & cast[replyInlineMarkup](objs).TLEncode()

proc TLEncode*(obj: seq[StatsURLI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of statsURL:
            result = result & cast[statsURL](objs).TLEncode()

proc TLEncode*(obj: seq[StatsGraphI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of statsGraphAsync:
            result = result & cast[statsGraphAsync](objs).TLEncode()
        if objs of statsGraphError:
            result = result & cast[statsGraphError](objs).TLEncode()
        if objs of statsGraph:
            result = result & cast[statsGraph](objs).TLEncode()

proc TLEncode*(obj: seq[MessageI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of messageEmpty:
            result = result & cast[messageEmpty](objs).TLEncode()
        if objs of message:
            result = result & cast[message](objs).TLEncode()
        if objs of messageService:
            result = result & cast[messageService](objs).TLEncode()

proc TLEncode*(obj: seq[DocumentI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of documentEmpty:
            result = result & cast[documentEmpty](objs).TLEncode()
        if objs of document:
            result = result & cast[document](objs).TLEncode()

proc TLEncode*(obj: seq[StatsGroupTopInviterI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of statsGroupTopInviter:
            result = result & cast[statsGroupTopInviter](objs).TLEncode()

proc TLEncode*(obj: seq[InputAppEventI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of inputAppEvent:
            result = result & cast[inputAppEvent](objs).TLEncode()

proc TLEncode*(obj: seq[SecureValueTypeI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of secureValueTypePersonalDetails:
            result = result & cast[secureValueTypePersonalDetails](objs).TLEncode()
        if objs of secureValueTypePassport:
            result = result & cast[secureValueTypePassport](objs).TLEncode()
        if objs of secureValueTypeDriverLicense:
            result = result & cast[secureValueTypeDriverLicense](objs).TLEncode()
        if objs of secureValueTypeIdentityCard:
            result = result & cast[secureValueTypeIdentityCard](objs).TLEncode()
        if objs of secureValueTypeInternalPassport:
            result = result & cast[secureValueTypeInternalPassport](objs).TLEncode()
        if objs of secureValueTypeAddress:
            result = result & cast[secureValueTypeAddress](objs).TLEncode()
        if objs of secureValueTypeUtilityBill:
            result = result & cast[secureValueTypeUtilityBill](objs).TLEncode()
        if objs of secureValueTypeBankStatement:
            result = result & cast[secureValueTypeBankStatement](objs).TLEncode()
        if objs of secureValueTypeRentalAgreement:
            result = result & cast[secureValueTypeRentalAgreement](objs).TLEncode()
        if objs of secureValueTypePassportRegistration:
            result = result & cast[secureValueTypePassportRegistration](objs).TLEncode()
        if objs of secureValueTypeTemporaryRegistration:
            result = result & cast[secureValueTypeTemporaryRegistration](objs).TLEncode()
        if objs of secureValueTypePhone:
            result = result & cast[secureValueTypePhone](objs).TLEncode()
        if objs of secureValueTypeEmail:
            result = result & cast[secureValueTypeEmail](objs).TLEncode()

proc TLEncode*(obj: seq[BotInlineResultI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of botInlineResult:
            result = result & cast[botInlineResult](objs).TLEncode()
        if objs of botInlineMediaResult:
            result = result & cast[botInlineMediaResult](objs).TLEncode()

proc TLEncode*(obj: seq[SendMessageActionI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of sendMessageTypingAction:
            result = result & cast[sendMessageTypingAction](objs).TLEncode()
        if objs of sendMessageCancelAction:
            result = result & cast[sendMessageCancelAction](objs).TLEncode()
        if objs of sendMessageRecordVideoAction:
            result = result & cast[sendMessageRecordVideoAction](objs).TLEncode()
        if objs of sendMessageUploadVideoAction:
            result = result & cast[sendMessageUploadVideoAction](objs).TLEncode()
        if objs of sendMessageRecordAudioAction:
            result = result & cast[sendMessageRecordAudioAction](objs).TLEncode()
        if objs of sendMessageUploadAudioAction:
            result = result & cast[sendMessageUploadAudioAction](objs).TLEncode()
        if objs of sendMessageUploadPhotoAction:
            result = result & cast[sendMessageUploadPhotoAction](objs).TLEncode()
        if objs of sendMessageUploadDocumentAction:
            result = result & cast[sendMessageUploadDocumentAction](objs).TLEncode()
        if objs of sendMessageGeoLocationAction:
            result = result & cast[sendMessageGeoLocationAction](objs).TLEncode()
        if objs of sendMessageChooseContactAction:
            result = result & cast[sendMessageChooseContactAction](objs).TLEncode()
        if objs of sendMessageGamePlayAction:
            result = result & cast[sendMessageGamePlayAction](objs).TLEncode()
        if objs of sendMessageRecordRoundAction:
            result = result & cast[sendMessageRecordRoundAction](objs).TLEncode()
        if objs of sendMessageUploadRoundAction:
            result = result & cast[sendMessageUploadRoundAction](objs).TLEncode()

proc TLEncode*(obj: seq[help_DeepLinkInfoI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of help_deepLinkInfoEmpty:
            result = result & cast[help_deepLinkInfoEmpty](objs).TLEncode()
        if objs of help_deepLinkInfo:
            result = result & cast[help_deepLinkInfo](objs).TLEncode()

proc TLEncode*(obj: seq[SecureFileI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of secureFileEmpty:
            result = result & cast[secureFileEmpty](objs).TLEncode()
        if objs of secureFile:
            result = result & cast[secureFile](objs).TLEncode()

proc TLEncode*(obj: seq[InputStickerSetItemI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of inputStickerSetItem:
            result = result & cast[inputStickerSetItem](objs).TLEncode()

proc TLEncode*(obj: seq[EmojiKeywordI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of emojiKeyword:
            result = result & cast[emojiKeyword](objs).TLEncode()
        if objs of emojiKeywordDeleted:
            result = result & cast[emojiKeywordDeleted](objs).TLEncode()

proc TLEncode*(obj: seq[PeerSettingsI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of peerSettings:
            result = result & cast[peerSettings](objs).TLEncode()

proc TLEncode*(obj: seq[ChatBannedRightsI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of chatBannedRights:
            result = result & cast[chatBannedRights](objs).TLEncode()

proc TLEncode*(obj: seq[BotInlineMessageI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of botInlineMessageMediaAuto:
            result = result & cast[botInlineMessageMediaAuto](objs).TLEncode()
        if objs of botInlineMessageText:
            result = result & cast[botInlineMessageText](objs).TLEncode()
        if objs of botInlineMessageMediaGeo:
            result = result & cast[botInlineMessageMediaGeo](objs).TLEncode()
        if objs of botInlineMessageMediaVenue:
            result = result & cast[botInlineMessageMediaVenue](objs).TLEncode()
        if objs of botInlineMessageMediaContact:
            result = result & cast[botInlineMessageMediaContact](objs).TLEncode()

proc TLEncode*(obj: seq[PeerLocatedI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of peerLocated:
            result = result & cast[peerLocated](objs).TLEncode()
        if objs of peerSelfLocated:
            result = result & cast[peerSelfLocated](objs).TLEncode()

proc TLEncode*(obj: seq[ChannelLocationI]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of channelLocationEmpty:
            result = result & cast[channelLocationEmpty](objs).TLEncode()
        if objs of channelLocation:
            result = result & cast[channelLocation](objs).TLEncode()

proc TLEncodeApi*(obj: TLObject): seq[uint8] = 
    if obj of help_PromoDataI:
        return cast[help_PromoDataI](obj).TLEncode()
    if obj of stats_MegagroupStatsI:
        return cast[stats_MegagroupStatsI](obj).TLEncode()
    if obj of PrivacyKeyI:
        return cast[PrivacyKeyI](obj).TLEncode()
    if obj of help_CountryCodeI:
        return cast[help_CountryCodeI](obj).TLEncode()
    if obj of WebAuthorizationI:
        return cast[WebAuthorizationI](obj).TLEncode()
    if obj of PollI:
        return cast[PollI](obj).TLEncode()
    if obj of DialogPeerI:
        return cast[DialogPeerI](obj).TLEncode()
    if obj of TopPeerCategoryI:
        return cast[TopPeerCategoryI](obj).TLEncode()
    if obj of help_SupportNameI:
        return cast[help_SupportNameI](obj).TLEncode()
    if obj of PhotoSizeI:
        return cast[PhotoSizeI](obj).TLEncode()
    if obj of JSONValueI:
        return cast[JSONValueI](obj).TLEncode()
    if obj of messages_ArchivedStickersI:
        return cast[messages_ArchivedStickersI](obj).TLEncode()
    if obj of BaseThemeI:
        return cast[BaseThemeI](obj).TLEncode()
    if obj of DialogFilterI:
        return cast[DialogFilterI](obj).TLEncode()
    if obj of MessageEntityI:
        return cast[MessageEntityI](obj).TLEncode()
    if obj of ThemeI:
        return cast[ThemeI](obj).TLEncode()
    if obj of DialogFilterSuggestedI:
        return cast[DialogFilterSuggestedI](obj).TLEncode()
    if obj of stats_MessageStatsI:
        return cast[stats_MessageStatsI](obj).TLEncode()
    if obj of payments_PaymentResultI:
        return cast[payments_PaymentResultI](obj).TLEncode()
    if obj of StickerPackI:
        return cast[StickerPackI](obj).TLEncode()
    if obj of account_PasswordSettingsI:
        return cast[account_PasswordSettingsI](obj).TLEncode()
    if obj of CdnConfigI:
        return cast[CdnConfigI](obj).TLEncode()
    if obj of InputCheckPasswordSRPI:
        return cast[InputCheckPasswordSRPI](obj).TLEncode()
    if obj of PollAnswerVotersI:
        return cast[PollAnswerVotersI](obj).TLEncode()
    if obj of SecureDataI:
        return cast[SecureDataI](obj).TLEncode()
    if obj of PageTableRowI:
        return cast[PageTableRowI](obj).TLEncode()
    if obj of phone_PhoneCallI:
        return cast[phone_PhoneCallI](obj).TLEncode()
    if obj of ChatOnlinesI:
        return cast[ChatOnlinesI](obj).TLEncode()
    if obj of SecurePlainDataI:
        return cast[SecurePlainDataI](obj).TLEncode()
    if obj of InputChatPhotoI:
        return cast[InputChatPhotoI](obj).TLEncode()
    if obj of SecureSecretSettingsI:
        return cast[SecureSecretSettingsI](obj).TLEncode()
    if obj of EmojiKeywordsDifferenceI:
        return cast[EmojiKeywordsDifferenceI](obj).TLEncode()
    if obj of photos_PhotosI:
        return cast[photos_PhotosI](obj).TLEncode()
    if obj of ChannelParticipantsFilterI:
        return cast[ChannelParticipantsFilterI](obj).TLEncode()
    if obj of StatsGroupTopAdminI:
        return cast[StatsGroupTopAdminI](obj).TLEncode()
    if obj of InputBotInlineMessageIDI:
        return cast[InputBotInlineMessageIDI](obj).TLEncode()
    if obj of InputPhotoI:
        return cast[InputPhotoI](obj).TLEncode()
    if obj of channels_ChannelParticipantI:
        return cast[channels_ChannelParticipantI](obj).TLEncode()
    if obj of photos_PhotoI:
        return cast[photos_PhotoI](obj).TLEncode()
    if obj of EncryptedMessageI:
        return cast[EncryptedMessageI](obj).TLEncode()
    if obj of DocumentAttributeI:
        return cast[DocumentAttributeI](obj).TLEncode()
    if obj of InputEncryptedChatI:
        return cast[InputEncryptedChatI](obj).TLEncode()
    if obj of messages_FeaturedStickersI:
        return cast[messages_FeaturedStickersI](obj).TLEncode()
    if obj of payments_SavedInfoI:
        return cast[payments_SavedInfoI](obj).TLEncode()
    if obj of PhoneCallProtocolI:
        return cast[PhoneCallProtocolI](obj).TLEncode()
    if obj of ChannelAdminLogEventI:
        return cast[ChannelAdminLogEventI](obj).TLEncode()
    if obj of KeyboardButtonI:
        return cast[KeyboardButtonI](obj).TLEncode()
    if obj of RichTextI:
        return cast[RichTextI](obj).TLEncode()
    if obj of InputMessageI:
        return cast[InputMessageI](obj).TLEncode()
    if obj of InputWebFileLocationI:
        return cast[InputWebFileLocationI](obj).TLEncode()
    if obj of messages_AllStickersI:
        return cast[messages_AllStickersI](obj).TLEncode()
    if obj of FileHashI:
        return cast[FileHashI](obj).TLEncode()
    if obj of ChatInviteI:
        return cast[ChatInviteI](obj).TLEncode()
    if obj of messages_BotResultsI:
        return cast[messages_BotResultsI](obj).TLEncode()
    if obj of InputWebDocumentI:
        return cast[InputWebDocumentI](obj).TLEncode()
    if obj of PageListItemI:
        return cast[PageListItemI](obj).TLEncode()
    if obj of PageRelatedArticleI:
        return cast[PageRelatedArticleI](obj).TLEncode()
    if obj of help_InviteTextI:
        return cast[help_InviteTextI](obj).TLEncode()
    if obj of messages_SavedGifsI:
        return cast[messages_SavedGifsI](obj).TLEncode()
    if obj of UserStatusI:
        return cast[UserStatusI](obj).TLEncode()
    if obj of ContactI:
        return cast[ContactI](obj).TLEncode()
    if obj of InputSecureFileI:
        return cast[InputSecureFileI](obj).TLEncode()
    if obj of auth_PasswordRecoveryI:
        return cast[auth_PasswordRecoveryI](obj).TLEncode()
    if obj of account_WallPapersI:
        return cast[account_WallPapersI](obj).TLEncode()
    if obj of StatsDateRangeDaysI:
        return cast[StatsDateRangeDaysI](obj).TLEncode()
    if obj of messages_MessagesI:
        return cast[messages_MessagesI](obj).TLEncode()
    if obj of VideoSizeI:
        return cast[VideoSizeI](obj).TLEncode()
    if obj of messages_BotCallbackAnswerI:
        return cast[messages_BotCallbackAnswerI](obj).TLEncode()
    if obj of auth_CodeTypeI:
        return cast[auth_CodeTypeI](obj).TLEncode()
    if obj of InputSecureValueI:
        return cast[InputSecureValueI](obj).TLEncode()
    if obj of ConfigI:
        return cast[ConfigI](obj).TLEncode()
    if obj of InputWallPaperI:
        return cast[InputWallPaperI](obj).TLEncode()
    if obj of upload_FileI:
        return cast[upload_FileI](obj).TLEncode()
    if obj of SecurePasswordKdfAlgoI:
        return cast[SecurePasswordKdfAlgoI](obj).TLEncode()
    if obj of MessageUserVoteI:
        return cast[MessageUserVoteI](obj).TLEncode()
    if obj of messages_FavedStickersI:
        return cast[messages_FavedStickersI](obj).TLEncode()
    if obj of SecureRequiredTypeI:
        return cast[SecureRequiredTypeI](obj).TLEncode()
    if obj of StatsGroupTopPosterI:
        return cast[StatsGroupTopPosterI](obj).TLEncode()
    if obj of BotCommandI:
        return cast[BotCommandI](obj).TLEncode()
    if obj of messages_FoundStickerSetsI:
        return cast[messages_FoundStickerSetsI](obj).TLEncode()
    if obj of SecureCredentialsEncryptedI:
        return cast[SecureCredentialsEncryptedI](obj).TLEncode()
    if obj of channels_ChannelParticipantsI:
        return cast[channels_ChannelParticipantsI](obj).TLEncode()
    if obj of PhotoI:
        return cast[PhotoI](obj).TLEncode()
    if obj of ChatParticipantI:
        return cast[ChatParticipantI](obj).TLEncode()
    if obj of JSONObjectValueI:
        return cast[JSONObjectValueI](obj).TLEncode()
    if obj of messages_StickerSetI:
        return cast[messages_StickerSetI](obj).TLEncode()
    if obj of SecureValueErrorI:
        return cast[SecureValueErrorI](obj).TLEncode()
    if obj of help_UserInfoI:
        return cast[help_UserInfoI](obj).TLEncode()
    if obj of BankCardOpenUrlI:
        return cast[BankCardOpenUrlI](obj).TLEncode()
    if obj of help_PassportConfigI:
        return cast[help_PassportConfigI](obj).TLEncode()
    if obj of ChatAdminRightsI:
        return cast[ChatAdminRightsI](obj).TLEncode()
    if obj of auth_AuthorizationI:
        return cast[auth_AuthorizationI](obj).TLEncode()
    if obj of messages_StickerSetInstallResultI:
        return cast[messages_StickerSetInstallResultI](obj).TLEncode()
    if obj of MessageViewsI:
        return cast[MessageViewsI](obj).TLEncode()
    if obj of InputFileI:
        return cast[InputFileI](obj).TLEncode()
    if obj of updates_StateI:
        return cast[updates_StateI](obj).TLEncode()
    if obj of EncryptedFileI:
        return cast[EncryptedFileI](obj).TLEncode()
    if obj of updates_ChannelDifferenceI:
        return cast[updates_ChannelDifferenceI](obj).TLEncode()
    if obj of FolderPeerI:
        return cast[FolderPeerI](obj).TLEncode()
    if obj of account_PasswordI:
        return cast[account_PasswordI](obj).TLEncode()
    if obj of GameI:
        return cast[GameI](obj).TLEncode()
    if obj of ChatParticipantsI:
        return cast[ChatParticipantsI](obj).TLEncode()
    if obj of auth_ExportedAuthorizationI:
        return cast[auth_ExportedAuthorizationI](obj).TLEncode()
    if obj of InputPhoneCallI:
        return cast[InputPhoneCallI](obj).TLEncode()
    if obj of WebPageI:
        return cast[WebPageI](obj).TLEncode()
    if obj of messages_RecentStickersI:
        return cast[messages_RecentStickersI](obj).TLEncode()
    if obj of FolderI:
        return cast[FolderI](obj).TLEncode()
    if obj of InputUserI:
        return cast[InputUserI](obj).TLEncode()
    if obj of PeerI:
        return cast[PeerI](obj).TLEncode()
    if obj of MessageActionI:
        return cast[MessageActionI](obj).TLEncode()
    if obj of updates_DifferenceI:
        return cast[updates_DifferenceI](obj).TLEncode()
    if obj of PasswordKdfAlgoI:
        return cast[PasswordKdfAlgoI](obj).TLEncode()
    if obj of AutoDownloadSettingsI:
        return cast[AutoDownloadSettingsI](obj).TLEncode()
    if obj of UrlAuthResultI:
        return cast[UrlAuthResultI](obj).TLEncode()
    if obj of PageI:
        return cast[PageI](obj).TLEncode()
    if obj of HighScoreI:
        return cast[HighScoreI](obj).TLEncode()
    if obj of InputClientProxyI:
        return cast[InputClientProxyI](obj).TLEncode()
    if obj of ReceivedNotifyMessageI:
        return cast[ReceivedNotifyMessageI](obj).TLEncode()
    if obj of InputGameI:
        return cast[InputGameI](obj).TLEncode()
    if obj of payments_PaymentReceiptI:
        return cast[payments_PaymentReceiptI](obj).TLEncode()
    if obj of TopPeerI:
        return cast[TopPeerI](obj).TLEncode()
    if obj of ChannelAdminLogEventActionI:
        return cast[ChannelAdminLogEventActionI](obj).TLEncode()
    if obj of UserFullI:
        return cast[UserFullI](obj).TLEncode()
    if obj of WebDocumentI:
        return cast[WebDocumentI](obj).TLEncode()
    if obj of StatsAbsValueAndPrevI:
        return cast[StatsAbsValueAndPrevI](obj).TLEncode()
    if obj of contacts_ImportedContactsI:
        return cast[contacts_ImportedContactsI](obj).TLEncode()
    if obj of EmojiLanguageI:
        return cast[EmojiLanguageI](obj).TLEncode()
    if obj of ReportReasonI:
        return cast[ReportReasonI](obj).TLEncode()
    if obj of account_PasswordInputSettingsI:
        return cast[account_PasswordInputSettingsI](obj).TLEncode()
    if obj of ChannelParticipantI:
        return cast[ChannelParticipantI](obj).TLEncode()
    if obj of InputStickeredMediaI:
        return cast[InputStickeredMediaI](obj).TLEncode()
    if obj of InputChannelI:
        return cast[InputChannelI](obj).TLEncode()
    if obj of messages_SearchCounterI:
        return cast[messages_SearchCounterI](obj).TLEncode()
    if obj of InputDocumentI:
        return cast[InputDocumentI](obj).TLEncode()
    if obj of InputEncryptedFileI:
        return cast[InputEncryptedFileI](obj).TLEncode()
    if obj of account_PrivacyRulesI:
        return cast[account_PrivacyRulesI](obj).TLEncode()
    if obj of InputThemeSettingsI:
        return cast[InputThemeSettingsI](obj).TLEncode()
    if obj of payments_ValidatedRequestedInfoI:
        return cast[payments_ValidatedRequestedInfoI](obj).TLEncode()
    if obj of account_AuthorizationsI:
        return cast[account_AuthorizationsI](obj).TLEncode()
    if obj of InputPrivacyRuleI:
        return cast[InputPrivacyRuleI](obj).TLEncode()
    if obj of StickerSetI:
        return cast[StickerSetI](obj).TLEncode()
    if obj of PollResultsI:
        return cast[PollResultsI](obj).TLEncode()
    if obj of SecureValueI:
        return cast[SecureValueI](obj).TLEncode()
    if obj of ChannelAdminLogEventsFilterI:
        return cast[ChannelAdminLogEventsFilterI](obj).TLEncode()
    if obj of RestrictionReasonI:
        return cast[RestrictionReasonI](obj).TLEncode()
    if obj of InputBotInlineResultI:
        return cast[InputBotInlineResultI](obj).TLEncode()
    if obj of WallPaperI:
        return cast[WallPaperI](obj).TLEncode()
    if obj of ImportedContactI:
        return cast[ImportedContactI](obj).TLEncode()
    if obj of help_TermsOfServiceI:
        return cast[help_TermsOfServiceI](obj).TLEncode()
    if obj of DataJSONI:
        return cast[DataJSONI](obj).TLEncode()
    if obj of ShippingOptionI:
        return cast[ShippingOptionI](obj).TLEncode()
    if obj of InputMediaI:
        return cast[InputMediaI](obj).TLEncode()
    if obj of ExportedMessageLinkI:
        return cast[ExportedMessageLinkI](obj).TLEncode()
    if obj of PaymentChargeI:
        return cast[PaymentChargeI](obj).TLEncode()
    if obj of InputNotifyPeerI:
        return cast[InputNotifyPeerI](obj).TLEncode()
    if obj of InputStickerSetI:
        return cast[InputStickerSetI](obj).TLEncode()
    if obj of payments_PaymentFormI:
        return cast[payments_PaymentFormI](obj).TLEncode()
    if obj of LangPackDifferenceI:
        return cast[LangPackDifferenceI](obj).TLEncode()
    if obj of messages_DialogsI:
        return cast[messages_DialogsI](obj).TLEncode()
    if obj of MessageInteractionCountersI:
        return cast[MessageInteractionCountersI](obj).TLEncode()
    if obj of auth_SentCodeTypeI:
        return cast[auth_SentCodeTypeI](obj).TLEncode()
    if obj of PeerNotifySettingsI:
        return cast[PeerNotifySettingsI](obj).TLEncode()
    if obj of StickerSetCoveredI:
        return cast[StickerSetCoveredI](obj).TLEncode()
    if obj of messages_DiscussionMessageI:
        return cast[messages_DiscussionMessageI](obj).TLEncode()
    if obj of UpdateI:
        return cast[UpdateI](obj).TLEncode()
    if obj of TopPeerCategoryPeersI:
        return cast[TopPeerCategoryPeersI](obj).TLEncode()
    if obj of auth_SentCodeI:
        return cast[auth_SentCodeI](obj).TLEncode()
    if obj of ExportedChatInviteI:
        return cast[ExportedChatInviteI](obj).TLEncode()
    if obj of account_ThemesI:
        return cast[account_ThemesI](obj).TLEncode()
    if obj of help_CountryI:
        return cast[help_CountryI](obj).TLEncode()
    if obj of messages_InactiveChatsI:
        return cast[messages_InactiveChatsI](obj).TLEncode()
    if obj of PhoneCallDiscardReasonI:
        return cast[PhoneCallDiscardReasonI](obj).TLEncode()
    if obj of stats_BroadcastStatsI:
        return cast[stats_BroadcastStatsI](obj).TLEncode()
    if obj of account_TmpPasswordI:
        return cast[account_TmpPasswordI](obj).TLEncode()
    if obj of InputPaymentCredentialsI:
        return cast[InputPaymentCredentialsI](obj).TLEncode()
    if obj of ThemeSettingsI:
        return cast[ThemeSettingsI](obj).TLEncode()
    if obj of BotInfoI:
        return cast[BotInfoI](obj).TLEncode()
    if obj of PollAnswerI:
        return cast[PollAnswerI](obj).TLEncode()
    if obj of DialogI:
        return cast[DialogI](obj).TLEncode()
    if obj of PageListOrderedItemI:
        return cast[PageListOrderedItemI](obj).TLEncode()
    if obj of PaymentSavedCredentialsI:
        return cast[PaymentSavedCredentialsI](obj).TLEncode()
    if obj of KeyboardButtonRowI:
        return cast[KeyboardButtonRowI](obj).TLEncode()
    if obj of InlineBotSwitchPMI:
        return cast[InlineBotSwitchPMI](obj).TLEncode()
    if obj of messages_HighScoresI:
        return cast[messages_HighScoresI](obj).TLEncode()
    if obj of messages_AffectedHistoryI:
        return cast[messages_AffectedHistoryI](obj).TLEncode()
    if obj of FileLocationI:
        return cast[FileLocationI](obj).TLEncode()
    if obj of NearestDcI:
        return cast[NearestDcI](obj).TLEncode()
    if obj of InputSingleMediaI:
        return cast[InputSingleMediaI](obj).TLEncode()
    if obj of UserI:
        return cast[UserI](obj).TLEncode()
    if obj of LangPackLanguageI:
        return cast[LangPackLanguageI](obj).TLEncode()
    if obj of LangPackStringI:
        return cast[LangPackStringI](obj).TLEncode()
    if obj of WebPageAttributeI:
        return cast[WebPageAttributeI](obj).TLEncode()
    if obj of NotifyPeerI:
        return cast[NotifyPeerI](obj).TLEncode()
    if obj of InputDialogPeerI:
        return cast[InputDialogPeerI](obj).TLEncode()
    if obj of payments_BankCardDataI:
        return cast[payments_BankCardDataI](obj).TLEncode()
    if obj of StatsPercentValueI:
        return cast[StatsPercentValueI](obj).TLEncode()
    if obj of contacts_TopPeersI:
        return cast[contacts_TopPeersI](obj).TLEncode()
    if obj of contacts_BlockedI:
        return cast[contacts_BlockedI](obj).TLEncode()
    if obj of DcOptionI:
        return cast[DcOptionI](obj).TLEncode()
    if obj of SavedContactI:
        return cast[SavedContactI](obj).TLEncode()
    if obj of PageCaptionI:
        return cast[PageCaptionI](obj).TLEncode()
    if obj of upload_WebFileI:
        return cast[upload_WebFileI](obj).TLEncode()
    if obj of account_AutoDownloadSettingsI:
        return cast[account_AutoDownloadSettingsI](obj).TLEncode()
    if obj of messages_VotesListI:
        return cast[messages_VotesListI](obj).TLEncode()
    if obj of messages_StickersI:
        return cast[messages_StickersI](obj).TLEncode()
    if obj of ChannelMessagesFilterI:
        return cast[ChannelMessagesFilterI](obj).TLEncode()
    if obj of InputPeerNotifySettingsI:
        return cast[InputPeerNotifySettingsI](obj).TLEncode()
    if obj of InvoiceI:
        return cast[InvoiceI](obj).TLEncode()
    if obj of PhoneConnectionI:
        return cast[PhoneConnectionI](obj).TLEncode()
    if obj of InputContactI:
        return cast[InputContactI](obj).TLEncode()
    if obj of messages_SentEncryptedMessageI:
        return cast[messages_SentEncryptedMessageI](obj).TLEncode()
    if obj of channels_AdminLogResultsI:
        return cast[channels_AdminLogResultsI](obj).TLEncode()
    if obj of WallPaperSettingsI:
        return cast[WallPaperSettingsI](obj).TLEncode()
    if obj of storage_FileTypeI:
        return cast[storage_FileTypeI](obj).TLEncode()
    if obj of InputThemeI:
        return cast[InputThemeI](obj).TLEncode()
    if obj of MessageReplyHeaderI:
        return cast[MessageReplyHeaderI](obj).TLEncode()
    if obj of messages_AffectedMessagesI:
        return cast[messages_AffectedMessagesI](obj).TLEncode()
    if obj of LabeledPriceI:
        return cast[LabeledPriceI](obj).TLEncode()
    if obj of contacts_ResolvedPeerI:
        return cast[contacts_ResolvedPeerI](obj).TLEncode()
    if obj of messages_PeerDialogsI:
        return cast[messages_PeerDialogsI](obj).TLEncode()
    if obj of MessageRangeI:
        return cast[MessageRangeI](obj).TLEncode()
    if obj of PostAddressI:
        return cast[PostAddressI](obj).TLEncode()
    if obj of GeoPointI:
        return cast[GeoPointI](obj).TLEncode()
    if obj of upload_CdnFileI:
        return cast[upload_CdnFileI](obj).TLEncode()
    if obj of help_SupportI:
        return cast[help_SupportI](obj).TLEncode()
    if obj of PeerBlockedI:
        return cast[PeerBlockedI](obj).TLEncode()
    if obj of InputFolderPeerI:
        return cast[InputFolderPeerI](obj).TLEncode()
    if obj of CdnPublicKeyI:
        return cast[CdnPublicKeyI](obj).TLEncode()
    if obj of MessageMediaI:
        return cast[MessageMediaI](obj).TLEncode()
    if obj of ChatI:
        return cast[ChatI](obj).TLEncode()
    if obj of help_RecentMeUrlsI:
        return cast[help_RecentMeUrlsI](obj).TLEncode()
    if obj of UserProfilePhotoI:
        return cast[UserProfilePhotoI](obj).TLEncode()
    if obj of InputGeoPointI:
        return cast[InputGeoPointI](obj).TLEncode()
    if obj of ContactStatusI:
        return cast[ContactStatusI](obj).TLEncode()
    if obj of contacts_FoundI:
        return cast[contacts_FoundI](obj).TLEncode()
    if obj of GlobalPrivacySettingsI:
        return cast[GlobalPrivacySettingsI](obj).TLEncode()
    if obj of InputPeerI:
        return cast[InputPeerI](obj).TLEncode()
    if obj of DraftMessageI:
        return cast[DraftMessageI](obj).TLEncode()
    if obj of account_SentEmailCodeI:
        return cast[account_SentEmailCodeI](obj).TLEncode()
    if obj of InputBotInlineMessageI:
        return cast[InputBotInlineMessageI](obj).TLEncode()
    if obj of ChatFullI:
        return cast[ChatFullI](obj).TLEncode()
    if obj of AccountDaysTTLI:
        return cast[AccountDaysTTLI](obj).TLEncode()
    if obj of messages_ChatsI:
        return cast[messages_ChatsI](obj).TLEncode()
    if obj of RecentMeUrlI:
        return cast[RecentMeUrlI](obj).TLEncode()
    if obj of auth_LoginTokenI:
        return cast[auth_LoginTokenI](obj).TLEncode()
    if obj of messages_MessageViewsI:
        return cast[messages_MessageViewsI](obj).TLEncode()
    if obj of InputFileLocationI:
        return cast[InputFileLocationI](obj).TLEncode()
    if obj of help_AppUpdateI:
        return cast[help_AppUpdateI](obj).TLEncode()
    if obj of PopularContactI:
        return cast[PopularContactI](obj).TLEncode()
    if obj of EmojiURLI:
        return cast[EmojiURLI](obj).TLEncode()
    if obj of MessagesFilterI:
        return cast[MessagesFilterI](obj).TLEncode()
    if obj of CodeSettingsI:
        return cast[CodeSettingsI](obj).TLEncode()
    if obj of messages_MessageEditDataI:
        return cast[messages_MessageEditDataI](obj).TLEncode()
    if obj of help_CountriesListI:
        return cast[help_CountriesListI](obj).TLEncode()
    if obj of MessageRepliesI:
        return cast[MessageRepliesI](obj).TLEncode()
    if obj of account_AuthorizationFormI:
        return cast[account_AuthorizationFormI](obj).TLEncode()
    if obj of messages_DhConfigI:
        return cast[messages_DhConfigI](obj).TLEncode()
    if obj of account_TakeoutI:
        return cast[account_TakeoutI](obj).TLEncode()
    if obj of UpdatesI:
        return cast[UpdatesI](obj).TLEncode()
    if obj of MessageFwdHeaderI:
        return cast[MessageFwdHeaderI](obj).TLEncode()
    if obj of AuthorizationI:
        return cast[AuthorizationI](obj).TLEncode()
    if obj of help_TermsOfServiceUpdateI:
        return cast[help_TermsOfServiceUpdateI](obj).TLEncode()
    if obj of PageTableCellI:
        return cast[PageTableCellI](obj).TLEncode()
    if obj of account_ContentSettingsI:
        return cast[account_ContentSettingsI](obj).TLEncode()
    if obj of account_WebAuthorizationsI:
        return cast[account_WebAuthorizationsI](obj).TLEncode()
    if obj of SecureValueHashI:
        return cast[SecureValueHashI](obj).TLEncode()
    if obj of PaymentRequestedInfoI:
        return cast[PaymentRequestedInfoI](obj).TLEncode()
    if obj of PhoneCallI:
        return cast[PhoneCallI](obj).TLEncode()
    if obj of InputPrivacyKeyI:
        return cast[InputPrivacyKeyI](obj).TLEncode()
    if obj of MaskCoordsI:
        return cast[MaskCoordsI](obj).TLEncode()
    if obj of PrivacyRuleI:
        return cast[PrivacyRuleI](obj).TLEncode()
    if obj of PageBlockI:
        return cast[PageBlockI](obj).TLEncode()
    if obj of ChatPhotoI:
        return cast[ChatPhotoI](obj).TLEncode()
    if obj of contacts_ContactsI:
        return cast[contacts_ContactsI](obj).TLEncode()
    if obj of EncryptedChatI:
        return cast[EncryptedChatI](obj).TLEncode()
    if obj of messages_ChatFullI:
        return cast[messages_ChatFullI](obj).TLEncode()
    if obj of ReplyMarkupI:
        return cast[ReplyMarkupI](obj).TLEncode()
    if obj of StatsURLI:
        return cast[StatsURLI](obj).TLEncode()
    if obj of StatsGraphI:
        return cast[StatsGraphI](obj).TLEncode()
    if obj of MessageI:
        return cast[MessageI](obj).TLEncode()
    if obj of DocumentI:
        return cast[DocumentI](obj).TLEncode()
    if obj of StatsGroupTopInviterI:
        return cast[StatsGroupTopInviterI](obj).TLEncode()
    if obj of InputAppEventI:
        return cast[InputAppEventI](obj).TLEncode()
    if obj of SecureValueTypeI:
        return cast[SecureValueTypeI](obj).TLEncode()
    if obj of BotInlineResultI:
        return cast[BotInlineResultI](obj).TLEncode()
    if obj of SendMessageActionI:
        return cast[SendMessageActionI](obj).TLEncode()
    if obj of help_DeepLinkInfoI:
        return cast[help_DeepLinkInfoI](obj).TLEncode()
    if obj of SecureFileI:
        return cast[SecureFileI](obj).TLEncode()
    if obj of InputStickerSetItemI:
        return cast[InputStickerSetItemI](obj).TLEncode()
    if obj of EmojiKeywordI:
        return cast[EmojiKeywordI](obj).TLEncode()
    if obj of PeerSettingsI:
        return cast[PeerSettingsI](obj).TLEncode()
    if obj of ChatBannedRightsI:
        return cast[ChatBannedRightsI](obj).TLEncode()
    if obj of BotInlineMessageI:
        return cast[BotInlineMessageI](obj).TLEncode()
    if obj of PeerLocatedI:
        return cast[PeerLocatedI](obj).TLEncode()
    if obj of ChannelLocationI:
        return cast[ChannelLocationI](obj).TLEncode()


proc TLEncodeApi*(obj: seq[TLObject]): seq[uint8] =
    result = TLEncode(int32(481674261))
    result = result & TLEncode(int32(len(obj)))
    for objs in obj:
        if objs of help_PromoDataI:
            result = result & cast[help_PromoDataI](objs).TLEncode()
        if objs of stats_MegagroupStatsI:
            result = result & cast[stats_MegagroupStatsI](objs).TLEncode()
        if objs of PrivacyKeyI:
            result = result & cast[PrivacyKeyI](objs).TLEncode()
        if objs of help_CountryCodeI:
            result = result & cast[help_CountryCodeI](objs).TLEncode()
        if objs of WebAuthorizationI:
            result = result & cast[WebAuthorizationI](objs).TLEncode()
        if objs of PollI:
            result = result & cast[PollI](objs).TLEncode()
        if objs of DialogPeerI:
            result = result & cast[DialogPeerI](objs).TLEncode()
        if objs of TopPeerCategoryI:
            result = result & cast[TopPeerCategoryI](objs).TLEncode()
        if objs of help_SupportNameI:
            result = result & cast[help_SupportNameI](objs).TLEncode()
        if objs of PhotoSizeI:
            result = result & cast[PhotoSizeI](objs).TLEncode()
        if objs of JSONValueI:
            result = result & cast[JSONValueI](objs).TLEncode()
        if objs of messages_ArchivedStickersI:
            result = result & cast[messages_ArchivedStickersI](objs).TLEncode()
        if objs of BaseThemeI:
            result = result & cast[BaseThemeI](objs).TLEncode()
        if objs of DialogFilterI:
            result = result & cast[DialogFilterI](objs).TLEncode()
        if objs of MessageEntityI:
            result = result & cast[MessageEntityI](objs).TLEncode()
        if objs of ThemeI:
            result = result & cast[ThemeI](objs).TLEncode()
        if objs of DialogFilterSuggestedI:
            result = result & cast[DialogFilterSuggestedI](objs).TLEncode()
        if objs of stats_MessageStatsI:
            result = result & cast[stats_MessageStatsI](objs).TLEncode()
        if objs of payments_PaymentResultI:
            result = result & cast[payments_PaymentResultI](objs).TLEncode()
        if objs of StickerPackI:
            result = result & cast[StickerPackI](objs).TLEncode()
        if objs of account_PasswordSettingsI:
            result = result & cast[account_PasswordSettingsI](objs).TLEncode()
        if objs of CdnConfigI:
            result = result & cast[CdnConfigI](objs).TLEncode()
        if objs of InputCheckPasswordSRPI:
            result = result & cast[InputCheckPasswordSRPI](objs).TLEncode()
        if objs of PollAnswerVotersI:
            result = result & cast[PollAnswerVotersI](objs).TLEncode()
        if objs of SecureDataI:
            result = result & cast[SecureDataI](objs).TLEncode()
        if objs of PageTableRowI:
            result = result & cast[PageTableRowI](objs).TLEncode()
        if objs of phone_PhoneCallI:
            result = result & cast[phone_PhoneCallI](objs).TLEncode()
        if objs of ChatOnlinesI:
            result = result & cast[ChatOnlinesI](objs).TLEncode()
        if objs of SecurePlainDataI:
            result = result & cast[SecurePlainDataI](objs).TLEncode()
        if objs of InputChatPhotoI:
            result = result & cast[InputChatPhotoI](objs).TLEncode()
        if objs of SecureSecretSettingsI:
            result = result & cast[SecureSecretSettingsI](objs).TLEncode()
        if objs of EmojiKeywordsDifferenceI:
            result = result & cast[EmojiKeywordsDifferenceI](objs).TLEncode()
        if objs of photos_PhotosI:
            result = result & cast[photos_PhotosI](objs).TLEncode()
        if objs of ChannelParticipantsFilterI:
            result = result & cast[ChannelParticipantsFilterI](objs).TLEncode()
        if objs of StatsGroupTopAdminI:
            result = result & cast[StatsGroupTopAdminI](objs).TLEncode()
        if objs of InputBotInlineMessageIDI:
            result = result & cast[InputBotInlineMessageIDI](objs).TLEncode()
        if objs of InputPhotoI:
            result = result & cast[InputPhotoI](objs).TLEncode()
        if objs of channels_ChannelParticipantI:
            result = result & cast[channels_ChannelParticipantI](objs).TLEncode()
        if objs of photos_PhotoI:
            result = result & cast[photos_PhotoI](objs).TLEncode()
        if objs of EncryptedMessageI:
            result = result & cast[EncryptedMessageI](objs).TLEncode()
        if objs of DocumentAttributeI:
            result = result & cast[DocumentAttributeI](objs).TLEncode()
        if objs of InputEncryptedChatI:
            result = result & cast[InputEncryptedChatI](objs).TLEncode()
        if objs of messages_FeaturedStickersI:
            result = result & cast[messages_FeaturedStickersI](objs).TLEncode()
        if objs of payments_SavedInfoI:
            result = result & cast[payments_SavedInfoI](objs).TLEncode()
        if objs of PhoneCallProtocolI:
            result = result & cast[PhoneCallProtocolI](objs).TLEncode()
        if objs of ChannelAdminLogEventI:
            result = result & cast[ChannelAdminLogEventI](objs).TLEncode()
        if objs of KeyboardButtonI:
            result = result & cast[KeyboardButtonI](objs).TLEncode()
        if objs of RichTextI:
            result = result & cast[RichTextI](objs).TLEncode()
        if objs of InputMessageI:
            result = result & cast[InputMessageI](objs).TLEncode()
        if objs of InputWebFileLocationI:
            result = result & cast[InputWebFileLocationI](objs).TLEncode()
        if objs of messages_AllStickersI:
            result = result & cast[messages_AllStickersI](objs).TLEncode()
        if objs of FileHashI:
            result = result & cast[FileHashI](objs).TLEncode()
        if objs of ChatInviteI:
            result = result & cast[ChatInviteI](objs).TLEncode()
        if objs of messages_BotResultsI:
            result = result & cast[messages_BotResultsI](objs).TLEncode()
        if objs of InputWebDocumentI:
            result = result & cast[InputWebDocumentI](objs).TLEncode()
        if objs of PageListItemI:
            result = result & cast[PageListItemI](objs).TLEncode()
        if objs of PageRelatedArticleI:
            result = result & cast[PageRelatedArticleI](objs).TLEncode()
        if objs of help_InviteTextI:
            result = result & cast[help_InviteTextI](objs).TLEncode()
        if objs of messages_SavedGifsI:
            result = result & cast[messages_SavedGifsI](objs).TLEncode()
        if objs of UserStatusI:
            result = result & cast[UserStatusI](objs).TLEncode()
        if objs of ContactI:
            result = result & cast[ContactI](objs).TLEncode()
        if objs of InputSecureFileI:
            result = result & cast[InputSecureFileI](objs).TLEncode()
        if objs of auth_PasswordRecoveryI:
            result = result & cast[auth_PasswordRecoveryI](objs).TLEncode()
        if objs of account_WallPapersI:
            result = result & cast[account_WallPapersI](objs).TLEncode()
        if objs of StatsDateRangeDaysI:
            result = result & cast[StatsDateRangeDaysI](objs).TLEncode()
        if objs of messages_MessagesI:
            result = result & cast[messages_MessagesI](objs).TLEncode()
        if objs of VideoSizeI:
            result = result & cast[VideoSizeI](objs).TLEncode()
        if objs of messages_BotCallbackAnswerI:
            result = result & cast[messages_BotCallbackAnswerI](objs).TLEncode()
        if objs of auth_CodeTypeI:
            result = result & cast[auth_CodeTypeI](objs).TLEncode()
        if objs of InputSecureValueI:
            result = result & cast[InputSecureValueI](objs).TLEncode()
        if objs of ConfigI:
            result = result & cast[ConfigI](objs).TLEncode()
        if objs of InputWallPaperI:
            result = result & cast[InputWallPaperI](objs).TLEncode()
        if objs of upload_FileI:
            result = result & cast[upload_FileI](objs).TLEncode()
        if objs of SecurePasswordKdfAlgoI:
            result = result & cast[SecurePasswordKdfAlgoI](objs).TLEncode()
        if objs of MessageUserVoteI:
            result = result & cast[MessageUserVoteI](objs).TLEncode()
        if objs of messages_FavedStickersI:
            result = result & cast[messages_FavedStickersI](objs).TLEncode()
        if objs of SecureRequiredTypeI:
            result = result & cast[SecureRequiredTypeI](objs).TLEncode()
        if objs of StatsGroupTopPosterI:
            result = result & cast[StatsGroupTopPosterI](objs).TLEncode()
        if objs of BotCommandI:
            result = result & cast[BotCommandI](objs).TLEncode()
        if objs of messages_FoundStickerSetsI:
            result = result & cast[messages_FoundStickerSetsI](objs).TLEncode()
        if objs of SecureCredentialsEncryptedI:
            result = result & cast[SecureCredentialsEncryptedI](objs).TLEncode()
        if objs of channels_ChannelParticipantsI:
            result = result & cast[channels_ChannelParticipantsI](objs).TLEncode()
        if objs of PhotoI:
            result = result & cast[PhotoI](objs).TLEncode()
        if objs of ChatParticipantI:
            result = result & cast[ChatParticipantI](objs).TLEncode()
        if objs of JSONObjectValueI:
            result = result & cast[JSONObjectValueI](objs).TLEncode()
        if objs of messages_StickerSetI:
            result = result & cast[messages_StickerSetI](objs).TLEncode()
        if objs of SecureValueErrorI:
            result = result & cast[SecureValueErrorI](objs).TLEncode()
        if objs of help_UserInfoI:
            result = result & cast[help_UserInfoI](objs).TLEncode()
        if objs of BankCardOpenUrlI:
            result = result & cast[BankCardOpenUrlI](objs).TLEncode()
        if objs of help_PassportConfigI:
            result = result & cast[help_PassportConfigI](objs).TLEncode()
        if objs of ChatAdminRightsI:
            result = result & cast[ChatAdminRightsI](objs).TLEncode()
        if objs of auth_AuthorizationI:
            result = result & cast[auth_AuthorizationI](objs).TLEncode()
        if objs of messages_StickerSetInstallResultI:
            result = result & cast[messages_StickerSetInstallResultI](objs).TLEncode()
        if objs of MessageViewsI:
            result = result & cast[MessageViewsI](objs).TLEncode()
        if objs of InputFileI:
            result = result & cast[InputFileI](objs).TLEncode()
        if objs of updates_StateI:
            result = result & cast[updates_StateI](objs).TLEncode()
        if objs of EncryptedFileI:
            result = result & cast[EncryptedFileI](objs).TLEncode()
        if objs of updates_ChannelDifferenceI:
            result = result & cast[updates_ChannelDifferenceI](objs).TLEncode()
        if objs of FolderPeerI:
            result = result & cast[FolderPeerI](objs).TLEncode()
        if objs of account_PasswordI:
            result = result & cast[account_PasswordI](objs).TLEncode()
        if objs of GameI:
            result = result & cast[GameI](objs).TLEncode()
        if objs of ChatParticipantsI:
            result = result & cast[ChatParticipantsI](objs).TLEncode()
        if objs of auth_ExportedAuthorizationI:
            result = result & cast[auth_ExportedAuthorizationI](objs).TLEncode()
        if objs of InputPhoneCallI:
            result = result & cast[InputPhoneCallI](objs).TLEncode()
        if objs of WebPageI:
            result = result & cast[WebPageI](objs).TLEncode()
        if objs of messages_RecentStickersI:
            result = result & cast[messages_RecentStickersI](objs).TLEncode()
        if objs of FolderI:
            result = result & cast[FolderI](objs).TLEncode()
        if objs of InputUserI:
            result = result & cast[InputUserI](objs).TLEncode()
        if objs of PeerI:
            result = result & cast[PeerI](objs).TLEncode()
        if objs of MessageActionI:
            result = result & cast[MessageActionI](objs).TLEncode()
        if objs of updates_DifferenceI:
            result = result & cast[updates_DifferenceI](objs).TLEncode()
        if objs of PasswordKdfAlgoI:
            result = result & cast[PasswordKdfAlgoI](objs).TLEncode()
        if objs of AutoDownloadSettingsI:
            result = result & cast[AutoDownloadSettingsI](objs).TLEncode()
        if objs of UrlAuthResultI:
            result = result & cast[UrlAuthResultI](objs).TLEncode()
        if objs of PageI:
            result = result & cast[PageI](objs).TLEncode()
        if objs of HighScoreI:
            result = result & cast[HighScoreI](objs).TLEncode()
        if objs of InputClientProxyI:
            result = result & cast[InputClientProxyI](objs).TLEncode()
        if objs of ReceivedNotifyMessageI:
            result = result & cast[ReceivedNotifyMessageI](objs).TLEncode()
        if objs of InputGameI:
            result = result & cast[InputGameI](objs).TLEncode()
        if objs of payments_PaymentReceiptI:
            result = result & cast[payments_PaymentReceiptI](objs).TLEncode()
        if objs of TopPeerI:
            result = result & cast[TopPeerI](objs).TLEncode()
        if objs of ChannelAdminLogEventActionI:
            result = result & cast[ChannelAdminLogEventActionI](objs).TLEncode()
        if objs of UserFullI:
            result = result & cast[UserFullI](objs).TLEncode()
        if objs of WebDocumentI:
            result = result & cast[WebDocumentI](objs).TLEncode()
        if objs of StatsAbsValueAndPrevI:
            result = result & cast[StatsAbsValueAndPrevI](objs).TLEncode()
        if objs of contacts_ImportedContactsI:
            result = result & cast[contacts_ImportedContactsI](objs).TLEncode()
        if objs of EmojiLanguageI:
            result = result & cast[EmojiLanguageI](objs).TLEncode()
        if objs of ReportReasonI:
            result = result & cast[ReportReasonI](objs).TLEncode()
        if objs of account_PasswordInputSettingsI:
            result = result & cast[account_PasswordInputSettingsI](objs).TLEncode()
        if objs of ChannelParticipantI:
            result = result & cast[ChannelParticipantI](objs).TLEncode()
        if objs of InputStickeredMediaI:
            result = result & cast[InputStickeredMediaI](objs).TLEncode()
        if objs of InputChannelI:
            result = result & cast[InputChannelI](objs).TLEncode()
        if objs of messages_SearchCounterI:
            result = result & cast[messages_SearchCounterI](objs).TLEncode()
        if objs of InputDocumentI:
            result = result & cast[InputDocumentI](objs).TLEncode()
        if objs of InputEncryptedFileI:
            result = result & cast[InputEncryptedFileI](objs).TLEncode()
        if objs of account_PrivacyRulesI:
            result = result & cast[account_PrivacyRulesI](objs).TLEncode()
        if objs of InputThemeSettingsI:
            result = result & cast[InputThemeSettingsI](objs).TLEncode()
        if objs of payments_ValidatedRequestedInfoI:
            result = result & cast[payments_ValidatedRequestedInfoI](objs).TLEncode()
        if objs of account_AuthorizationsI:
            result = result & cast[account_AuthorizationsI](objs).TLEncode()
        if objs of InputPrivacyRuleI:
            result = result & cast[InputPrivacyRuleI](objs).TLEncode()
        if objs of StickerSetI:
            result = result & cast[StickerSetI](objs).TLEncode()
        if objs of PollResultsI:
            result = result & cast[PollResultsI](objs).TLEncode()
        if objs of SecureValueI:
            result = result & cast[SecureValueI](objs).TLEncode()
        if objs of ChannelAdminLogEventsFilterI:
            result = result & cast[ChannelAdminLogEventsFilterI](objs).TLEncode()
        if objs of RestrictionReasonI:
            result = result & cast[RestrictionReasonI](objs).TLEncode()
        if objs of InputBotInlineResultI:
            result = result & cast[InputBotInlineResultI](objs).TLEncode()
        if objs of WallPaperI:
            result = result & cast[WallPaperI](objs).TLEncode()
        if objs of ImportedContactI:
            result = result & cast[ImportedContactI](objs).TLEncode()
        if objs of help_TermsOfServiceI:
            result = result & cast[help_TermsOfServiceI](objs).TLEncode()
        if objs of DataJSONI:
            result = result & cast[DataJSONI](objs).TLEncode()
        if objs of ShippingOptionI:
            result = result & cast[ShippingOptionI](objs).TLEncode()
        if objs of InputMediaI:
            result = result & cast[InputMediaI](objs).TLEncode()
        if objs of ExportedMessageLinkI:
            result = result & cast[ExportedMessageLinkI](objs).TLEncode()
        if objs of PaymentChargeI:
            result = result & cast[PaymentChargeI](objs).TLEncode()
        if objs of InputNotifyPeerI:
            result = result & cast[InputNotifyPeerI](objs).TLEncode()
        if objs of InputStickerSetI:
            result = result & cast[InputStickerSetI](objs).TLEncode()
        if objs of payments_PaymentFormI:
            result = result & cast[payments_PaymentFormI](objs).TLEncode()
        if objs of LangPackDifferenceI:
            result = result & cast[LangPackDifferenceI](objs).TLEncode()
        if objs of messages_DialogsI:
            result = result & cast[messages_DialogsI](objs).TLEncode()
        if objs of MessageInteractionCountersI:
            result = result & cast[MessageInteractionCountersI](objs).TLEncode()
        if objs of auth_SentCodeTypeI:
            result = result & cast[auth_SentCodeTypeI](objs).TLEncode()
        if objs of PeerNotifySettingsI:
            result = result & cast[PeerNotifySettingsI](objs).TLEncode()
        if objs of StickerSetCoveredI:
            result = result & cast[StickerSetCoveredI](objs).TLEncode()
        if objs of messages_DiscussionMessageI:
            result = result & cast[messages_DiscussionMessageI](objs).TLEncode()
        if objs of UpdateI:
            result = result & cast[UpdateI](objs).TLEncode()
        if objs of TopPeerCategoryPeersI:
            result = result & cast[TopPeerCategoryPeersI](objs).TLEncode()
        if objs of auth_SentCodeI:
            result = result & cast[auth_SentCodeI](objs).TLEncode()
        if objs of ExportedChatInviteI:
            result = result & cast[ExportedChatInviteI](objs).TLEncode()
        if objs of account_ThemesI:
            result = result & cast[account_ThemesI](objs).TLEncode()
        if objs of help_CountryI:
            result = result & cast[help_CountryI](objs).TLEncode()
        if objs of messages_InactiveChatsI:
            result = result & cast[messages_InactiveChatsI](objs).TLEncode()
        if objs of PhoneCallDiscardReasonI:
            result = result & cast[PhoneCallDiscardReasonI](objs).TLEncode()
        if objs of stats_BroadcastStatsI:
            result = result & cast[stats_BroadcastStatsI](objs).TLEncode()
        if objs of account_TmpPasswordI:
            result = result & cast[account_TmpPasswordI](objs).TLEncode()
        if objs of InputPaymentCredentialsI:
            result = result & cast[InputPaymentCredentialsI](objs).TLEncode()
        if objs of ThemeSettingsI:
            result = result & cast[ThemeSettingsI](objs).TLEncode()
        if objs of BotInfoI:
            result = result & cast[BotInfoI](objs).TLEncode()
        if objs of PollAnswerI:
            result = result & cast[PollAnswerI](objs).TLEncode()
        if objs of DialogI:
            result = result & cast[DialogI](objs).TLEncode()
        if objs of PageListOrderedItemI:
            result = result & cast[PageListOrderedItemI](objs).TLEncode()
        if objs of PaymentSavedCredentialsI:
            result = result & cast[PaymentSavedCredentialsI](objs).TLEncode()
        if objs of KeyboardButtonRowI:
            result = result & cast[KeyboardButtonRowI](objs).TLEncode()
        if objs of InlineBotSwitchPMI:
            result = result & cast[InlineBotSwitchPMI](objs).TLEncode()
        if objs of messages_HighScoresI:
            result = result & cast[messages_HighScoresI](objs).TLEncode()
        if objs of messages_AffectedHistoryI:
            result = result & cast[messages_AffectedHistoryI](objs).TLEncode()
        if objs of FileLocationI:
            result = result & cast[FileLocationI](objs).TLEncode()
        if objs of NearestDcI:
            result = result & cast[NearestDcI](objs).TLEncode()
        if objs of InputSingleMediaI:
            result = result & cast[InputSingleMediaI](objs).TLEncode()
        if objs of UserI:
            result = result & cast[UserI](objs).TLEncode()
        if objs of LangPackLanguageI:
            result = result & cast[LangPackLanguageI](objs).TLEncode()
        if objs of LangPackStringI:
            result = result & cast[LangPackStringI](objs).TLEncode()
        if objs of WebPageAttributeI:
            result = result & cast[WebPageAttributeI](objs).TLEncode()
        if objs of NotifyPeerI:
            result = result & cast[NotifyPeerI](objs).TLEncode()
        if objs of InputDialogPeerI:
            result = result & cast[InputDialogPeerI](objs).TLEncode()
        if objs of payments_BankCardDataI:
            result = result & cast[payments_BankCardDataI](objs).TLEncode()
        if objs of StatsPercentValueI:
            result = result & cast[StatsPercentValueI](objs).TLEncode()
        if objs of contacts_TopPeersI:
            result = result & cast[contacts_TopPeersI](objs).TLEncode()
        if objs of contacts_BlockedI:
            result = result & cast[contacts_BlockedI](objs).TLEncode()
        if objs of DcOptionI:
            result = result & cast[DcOptionI](objs).TLEncode()
        if objs of SavedContactI:
            result = result & cast[SavedContactI](objs).TLEncode()
        if objs of PageCaptionI:
            result = result & cast[PageCaptionI](objs).TLEncode()
        if objs of upload_WebFileI:
            result = result & cast[upload_WebFileI](objs).TLEncode()
        if objs of account_AutoDownloadSettingsI:
            result = result & cast[account_AutoDownloadSettingsI](objs).TLEncode()
        if objs of messages_VotesListI:
            result = result & cast[messages_VotesListI](objs).TLEncode()
        if objs of messages_StickersI:
            result = result & cast[messages_StickersI](objs).TLEncode()
        if objs of ChannelMessagesFilterI:
            result = result & cast[ChannelMessagesFilterI](objs).TLEncode()
        if objs of InputPeerNotifySettingsI:
            result = result & cast[InputPeerNotifySettingsI](objs).TLEncode()
        if objs of InvoiceI:
            result = result & cast[InvoiceI](objs).TLEncode()
        if objs of PhoneConnectionI:
            result = result & cast[PhoneConnectionI](objs).TLEncode()
        if objs of InputContactI:
            result = result & cast[InputContactI](objs).TLEncode()
        if objs of messages_SentEncryptedMessageI:
            result = result & cast[messages_SentEncryptedMessageI](objs).TLEncode()
        if objs of channels_AdminLogResultsI:
            result = result & cast[channels_AdminLogResultsI](objs).TLEncode()
        if objs of WallPaperSettingsI:
            result = result & cast[WallPaperSettingsI](objs).TLEncode()
        if objs of storage_FileTypeI:
            result = result & cast[storage_FileTypeI](objs).TLEncode()
        if objs of InputThemeI:
            result = result & cast[InputThemeI](objs).TLEncode()
        if objs of MessageReplyHeaderI:
            result = result & cast[MessageReplyHeaderI](objs).TLEncode()
        if objs of messages_AffectedMessagesI:
            result = result & cast[messages_AffectedMessagesI](objs).TLEncode()
        if objs of LabeledPriceI:
            result = result & cast[LabeledPriceI](objs).TLEncode()
        if objs of contacts_ResolvedPeerI:
            result = result & cast[contacts_ResolvedPeerI](objs).TLEncode()
        if objs of messages_PeerDialogsI:
            result = result & cast[messages_PeerDialogsI](objs).TLEncode()
        if objs of MessageRangeI:
            result = result & cast[MessageRangeI](objs).TLEncode()
        if objs of PostAddressI:
            result = result & cast[PostAddressI](objs).TLEncode()
        if objs of GeoPointI:
            result = result & cast[GeoPointI](objs).TLEncode()
        if objs of upload_CdnFileI:
            result = result & cast[upload_CdnFileI](objs).TLEncode()
        if objs of help_SupportI:
            result = result & cast[help_SupportI](objs).TLEncode()
        if objs of PeerBlockedI:
            result = result & cast[PeerBlockedI](objs).TLEncode()
        if objs of InputFolderPeerI:
            result = result & cast[InputFolderPeerI](objs).TLEncode()
        if objs of CdnPublicKeyI:
            result = result & cast[CdnPublicKeyI](objs).TLEncode()
        if objs of MessageMediaI:
            result = result & cast[MessageMediaI](objs).TLEncode()
        if objs of ChatI:
            result = result & cast[ChatI](objs).TLEncode()
        if objs of help_RecentMeUrlsI:
            result = result & cast[help_RecentMeUrlsI](objs).TLEncode()
        if objs of UserProfilePhotoI:
            result = result & cast[UserProfilePhotoI](objs).TLEncode()
        if objs of InputGeoPointI:
            result = result & cast[InputGeoPointI](objs).TLEncode()
        if objs of ContactStatusI:
            result = result & cast[ContactStatusI](objs).TLEncode()
        if objs of contacts_FoundI:
            result = result & cast[contacts_FoundI](objs).TLEncode()
        if objs of GlobalPrivacySettingsI:
            result = result & cast[GlobalPrivacySettingsI](objs).TLEncode()
        if objs of InputPeerI:
            result = result & cast[InputPeerI](objs).TLEncode()
        if objs of DraftMessageI:
            result = result & cast[DraftMessageI](objs).TLEncode()
        if objs of account_SentEmailCodeI:
            result = result & cast[account_SentEmailCodeI](objs).TLEncode()
        if objs of InputBotInlineMessageI:
            result = result & cast[InputBotInlineMessageI](objs).TLEncode()
        if objs of ChatFullI:
            result = result & cast[ChatFullI](objs).TLEncode()
        if objs of AccountDaysTTLI:
            result = result & cast[AccountDaysTTLI](objs).TLEncode()
        if objs of messages_ChatsI:
            result = result & cast[messages_ChatsI](objs).TLEncode()
        if objs of RecentMeUrlI:
            result = result & cast[RecentMeUrlI](objs).TLEncode()
        if objs of auth_LoginTokenI:
            result = result & cast[auth_LoginTokenI](objs).TLEncode()
        if objs of messages_MessageViewsI:
            result = result & cast[messages_MessageViewsI](objs).TLEncode()
        if objs of InputFileLocationI:
            result = result & cast[InputFileLocationI](objs).TLEncode()
        if objs of help_AppUpdateI:
            result = result & cast[help_AppUpdateI](objs).TLEncode()
        if objs of PopularContactI:
            result = result & cast[PopularContactI](objs).TLEncode()
        if objs of EmojiURLI:
            result = result & cast[EmojiURLI](objs).TLEncode()
        if objs of MessagesFilterI:
            result = result & cast[MessagesFilterI](objs).TLEncode()
        if objs of CodeSettingsI:
            result = result & cast[CodeSettingsI](objs).TLEncode()
        if objs of messages_MessageEditDataI:
            result = result & cast[messages_MessageEditDataI](objs).TLEncode()
        if objs of help_CountriesListI:
            result = result & cast[help_CountriesListI](objs).TLEncode()
        if objs of MessageRepliesI:
            result = result & cast[MessageRepliesI](objs).TLEncode()
        if objs of account_AuthorizationFormI:
            result = result & cast[account_AuthorizationFormI](objs).TLEncode()
        if objs of messages_DhConfigI:
            result = result & cast[messages_DhConfigI](objs).TLEncode()
        if objs of account_TakeoutI:
            result = result & cast[account_TakeoutI](objs).TLEncode()
        if objs of UpdatesI:
            result = result & cast[UpdatesI](objs).TLEncode()
        if objs of MessageFwdHeaderI:
            result = result & cast[MessageFwdHeaderI](objs).TLEncode()
        if objs of AuthorizationI:
            result = result & cast[AuthorizationI](objs).TLEncode()
        if objs of help_TermsOfServiceUpdateI:
            result = result & cast[help_TermsOfServiceUpdateI](objs).TLEncode()
        if objs of PageTableCellI:
            result = result & cast[PageTableCellI](objs).TLEncode()
        if objs of account_ContentSettingsI:
            result = result & cast[account_ContentSettingsI](objs).TLEncode()
        if objs of account_WebAuthorizationsI:
            result = result & cast[account_WebAuthorizationsI](objs).TLEncode()
        if objs of SecureValueHashI:
            result = result & cast[SecureValueHashI](objs).TLEncode()
        if objs of PaymentRequestedInfoI:
            result = result & cast[PaymentRequestedInfoI](objs).TLEncode()
        if objs of PhoneCallI:
            result = result & cast[PhoneCallI](objs).TLEncode()
        if objs of InputPrivacyKeyI:
            result = result & cast[InputPrivacyKeyI](objs).TLEncode()
        if objs of MaskCoordsI:
            result = result & cast[MaskCoordsI](objs).TLEncode()
        if objs of PrivacyRuleI:
            result = result & cast[PrivacyRuleI](objs).TLEncode()
        if objs of PageBlockI:
            result = result & cast[PageBlockI](objs).TLEncode()
        if objs of ChatPhotoI:
            result = result & cast[ChatPhotoI](objs).TLEncode()
        if objs of contacts_ContactsI:
            result = result & cast[contacts_ContactsI](objs).TLEncode()
        if objs of EncryptedChatI:
            result = result & cast[EncryptedChatI](objs).TLEncode()
        if objs of messages_ChatFullI:
            result = result & cast[messages_ChatFullI](objs).TLEncode()
        if objs of ReplyMarkupI:
            result = result & cast[ReplyMarkupI](objs).TLEncode()
        if objs of StatsURLI:
            result = result & cast[StatsURLI](objs).TLEncode()
        if objs of StatsGraphI:
            result = result & cast[StatsGraphI](objs).TLEncode()
        if objs of MessageI:
            result = result & cast[MessageI](objs).TLEncode()
        if objs of DocumentI:
            result = result & cast[DocumentI](objs).TLEncode()
        if objs of StatsGroupTopInviterI:
            result = result & cast[StatsGroupTopInviterI](objs).TLEncode()
        if objs of InputAppEventI:
            result = result & cast[InputAppEventI](objs).TLEncode()
        if objs of SecureValueTypeI:
            result = result & cast[SecureValueTypeI](objs).TLEncode()
        if objs of BotInlineResultI:
            result = result & cast[BotInlineResultI](objs).TLEncode()
        if objs of SendMessageActionI:
            result = result & cast[SendMessageActionI](objs).TLEncode()
        if objs of help_DeepLinkInfoI:
            result = result & cast[help_DeepLinkInfoI](objs).TLEncode()
        if objs of SecureFileI:
            result = result & cast[SecureFileI](objs).TLEncode()
        if objs of InputStickerSetItemI:
            result = result & cast[InputStickerSetItemI](objs).TLEncode()
        if objs of EmojiKeywordI:
            result = result & cast[EmojiKeywordI](objs).TLEncode()
        if objs of PeerSettingsI:
            result = result & cast[PeerSettingsI](objs).TLEncode()
        if objs of ChatBannedRightsI:
            result = result & cast[ChatBannedRightsI](objs).TLEncode()
        if objs of BotInlineMessageI:
            result = result & cast[BotInlineMessageI](objs).TLEncode()
        if objs of PeerLocatedI:
            result = result & cast[PeerLocatedI](objs).TLEncode()
        if objs of ChannelLocationI:
            result = result & cast[ChannelLocationI](objs).TLEncode()



proc TLEncodeType*(obj: inputPeerEmpty): seq[uint8] = 
    result = result & TLEncode(int32(2134579434))

proc TLEncodeType*(obj: inputPeerSelf): seq[uint8] = 
    result = result & TLEncode(int32(2107670217))

proc TLEncodeType*(obj: inputPeerChat): seq[uint8] = 
    result = result & TLEncode(int32(396093539))
    result = result & TLEncode(obj.chat_id)


proc TLEncodeType*(obj: inputPeerUser): seq[uint8] = 
    result = result & TLEncode(int32(2072935910))
    result = result & TLEncode(obj.user_id)

    result = result & TLEncode(obj.access_hash)


proc TLEncodeType*(obj: inputPeerChannel): seq[uint8] = 
    result = result & TLEncode(int32(548253432))
    result = result & TLEncode(obj.channel_id)

    result = result & TLEncode(obj.access_hash)


proc TLEncodeType*(obj: inputPeerUserFromMessage): seq[uint8] = 
    result = result & TLEncode(int32(398123750))
    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.msg_id)

    result = result & TLEncode(obj.user_id)


proc TLEncodeType*(obj: inputPeerChannelFromMessage): seq[uint8] = 
    result = result & TLEncode(int32(-1667893317))
    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.msg_id)

    result = result & TLEncode(obj.channel_id)


proc TLEncodeType*(obj: inputUserEmpty): seq[uint8] = 
    result = result & TLEncode(int32(-1182234929))

proc TLEncodeType*(obj: inputUserSelf): seq[uint8] = 
    result = result & TLEncode(int32(-138301121))

proc TLEncodeType*(obj: inputUser): seq[uint8] = 
    result = result & TLEncode(int32(-668391402))
    result = result & TLEncode(obj.user_id)

    result = result & TLEncode(obj.access_hash)


proc TLEncodeType*(obj: inputUserFromMessage): seq[uint8] = 
    result = result & TLEncode(int32(756118935))
    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.msg_id)

    result = result & TLEncode(obj.user_id)


proc TLEncodeType*(obj: inputPhoneContact): seq[uint8] = 
    result = result & TLEncode(int32(-208488460))
    result = result & TLEncode(obj.client_id)

    result = result & TLEncode(obj.phone)

    result = result & TLEncode(obj.first_name)

    result = result & TLEncode(obj.last_name)


proc TLEncodeType*(obj: inputFile): seq[uint8] = 
    result = result & TLEncode(int32(-181407105))
    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.parts)

    result = result & TLEncode(obj.name)

    result = result & TLEncode(obj.md5_checksum)


proc TLEncodeType*(obj: inputFileBig): seq[uint8] = 
    result = result & TLEncode(int32(-95482955))
    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.parts)

    result = result & TLEncode(obj.name)


proc TLEncodeType*(obj: inputMediaEmpty): seq[uint8] = 
    result = result & TLEncode(int32(-1771768449))

proc TLEncodeType*(obj: inputMediaUploadedPhoto): seq[uint8] = 
    result = result & TLEncode(int32(505969924))
    if obj.stickers.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.ttl_seconds.isSome():
        obj.flags = obj.flags or 1 shl 1

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.file)

    if obj.stickers.isSome():
        result = result & TLEncode(obj.stickers.get())

    if obj.ttl_seconds.isSome():
        result = result & TLEncode(obj.ttl_seconds.get())


proc TLEncodeType*(obj: inputMediaPhoto): seq[uint8] = 
    result = result & TLEncode(int32(-1279654347))
    if obj.ttl_seconds.isSome():
        obj.flags = obj.flags or 1 shl 0

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.id)

    if obj.ttl_seconds.isSome():
        result = result & TLEncode(obj.ttl_seconds.get())


proc TLEncodeType*(obj: inputMediaGeoPoint): seq[uint8] = 
    result = result & TLEncode(int32(-104578748))
    result = result & TLEncode(obj.geo_point)


proc TLEncodeType*(obj: inputMediaContact): seq[uint8] = 
    result = result & TLEncode(int32(-122978821))
    result = result & TLEncode(obj.phone_number)

    result = result & TLEncode(obj.first_name)

    result = result & TLEncode(obj.last_name)

    result = result & TLEncode(obj.vcard)


proc TLEncodeType*(obj: inputMediaUploadedDocument): seq[uint8] = 
    result = result & TLEncode(int32(1530447553))
    if obj.thumb.isSome():
        obj.flags = obj.flags or 1 shl 2

    if obj.stickers.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.ttl_seconds.isSome():
        obj.flags = obj.flags or 1 shl 1

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.file)

    if obj.thumb.isSome():
        result = result & TLEncode(obj.thumb.get())

    result = result & TLEncode(obj.mime_type)

    result = result & TLEncode(obj.attributes)

    if obj.stickers.isSome():
        result = result & TLEncode(obj.stickers.get())

    if obj.ttl_seconds.isSome():
        result = result & TLEncode(obj.ttl_seconds.get())


proc TLEncodeType*(obj: inputMediaDocument): seq[uint8] = 
    result = result & TLEncode(int32(598418386))
    if obj.ttl_seconds.isSome():
        obj.flags = obj.flags or 1 shl 0

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.id)

    if obj.ttl_seconds.isSome():
        result = result & TLEncode(obj.ttl_seconds.get())


proc TLEncodeType*(obj: inputMediaVenue): seq[uint8] = 
    result = result & TLEncode(int32(-1052959727))
    result = result & TLEncode(obj.geo_point)

    result = result & TLEncode(obj.title)

    result = result & TLEncode(obj.address)

    result = result & TLEncode(obj.provider)

    result = result & TLEncode(obj.venue_id)

    result = result & TLEncode(obj.venue_type)


proc TLEncodeType*(obj: inputMediaPhotoExternal): seq[uint8] = 
    result = result & TLEncode(int32(-440664550))
    if obj.ttl_seconds.isSome():
        obj.flags = obj.flags or 1 shl 0

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.url)

    if obj.ttl_seconds.isSome():
        result = result & TLEncode(obj.ttl_seconds.get())


proc TLEncodeType*(obj: inputMediaDocumentExternal): seq[uint8] = 
    result = result & TLEncode(int32(-78455655))
    if obj.ttl_seconds.isSome():
        obj.flags = obj.flags or 1 shl 0

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.url)

    if obj.ttl_seconds.isSome():
        result = result & TLEncode(obj.ttl_seconds.get())


proc TLEncodeType*(obj: inputMediaGame): seq[uint8] = 
    result = result & TLEncode(int32(-750828557))
    result = result & TLEncode(obj.id)


proc TLEncodeType*(obj: inputMediaInvoice): seq[uint8] = 
    result = result & TLEncode(int32(-186607933))
    if obj.photo.isSome():
        obj.flags = obj.flags or 1 shl 0

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.title)

    result = result & TLEncode(obj.description)

    if obj.photo.isSome():
        result = result & TLEncode(obj.photo.get())

    result = result & TLEncode(obj.invoice)

    result = result & TLEncode(obj.payload)

    result = result & TLEncode(obj.provider)

    result = result & TLEncode(obj.provider_data)

    result = result & TLEncode(obj.start_param)


proc TLEncodeType*(obj: inputMediaGeoLive): seq[uint8] = 
    result = result & TLEncode(int32(-1759532989))
    if obj.heading.isSome():
        obj.flags = obj.flags or 1 shl 2

    if obj.period.isSome():
        obj.flags = obj.flags or 1 shl 1

    if obj.proximity_notification_radius.isSome():
        obj.flags = obj.flags or 1 shl 3

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.geo_point)

    if obj.heading.isSome():
        result = result & TLEncode(obj.heading.get())

    if obj.period.isSome():
        result = result & TLEncode(obj.period.get())

    if obj.proximity_notification_radius.isSome():
        result = result & TLEncode(obj.proximity_notification_radius.get())


proc TLEncodeType*(obj: inputMediaPoll): seq[uint8] = 
    result = result & TLEncode(int32(-112304368))
    if obj.correct_answers.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.solution.isSome():
        obj.flags = obj.flags or 1 shl 1

    if obj.solution_entities.isSome():
        obj.flags = obj.flags or 1 shl 1

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.poll)

    if obj.correct_answers.isSome():
        result = result & TLEncode(obj.correct_answers.get())

    if obj.solution.isSome():
        result = result & TLEncode(obj.solution.get())

    if obj.solution_entities.isSome():
        result = result & TLEncode(obj.solution_entities.get())


proc TLEncodeType*(obj: inputMediaDice): seq[uint8] = 
    result = result & TLEncode(int32(-428884101))
    result = result & TLEncode(obj.emoticon)


proc TLEncodeType*(obj: inputChatPhotoEmpty): seq[uint8] = 
    result = result & TLEncode(int32(480546647))

proc TLEncodeType*(obj: inputChatUploadedPhoto): seq[uint8] = 
    result = result & TLEncode(int32(-968723890))
    if obj.file.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.video.isSome():
        obj.flags = obj.flags or 1 shl 1

    if obj.video_start_ts.isSome():
        obj.flags = obj.flags or 1 shl 2

    result = result & TLEncode(obj.flags)

    if obj.file.isSome():
        result = result & TLEncode(obj.file.get())

    if obj.video.isSome():
        result = result & TLEncode(obj.video.get())

    if obj.video_start_ts.isSome():
        result = result & TLEncode(obj.video_start_ts.get())


proc TLEncodeType*(obj: inputChatPhoto): seq[uint8] = 
    result = result & TLEncode(int32(-1991004873))
    result = result & TLEncode(obj.id)


proc TLEncodeType*(obj: inputGeoPointEmpty): seq[uint8] = 
    result = result & TLEncode(int32(-457104426))

proc TLEncodeType*(obj: inputGeoPoint): seq[uint8] = 
    result = result & TLEncode(int32(1210199983))
    if obj.accuracy_radius.isSome():
        obj.flags = obj.flags or 1 shl 0

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.lat)

    result = result & TLEncode(obj.long)

    if obj.accuracy_radius.isSome():
        result = result & TLEncode(obj.accuracy_radius.get())


proc TLEncodeType*(obj: inputPhotoEmpty): seq[uint8] = 
    result = result & TLEncode(int32(483901197))

proc TLEncodeType*(obj: inputPhoto): seq[uint8] = 
    result = result & TLEncode(int32(1001634122))
    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.access_hash)

    result = result & TLEncode(obj.file_reference)


proc TLEncodeType*(obj: inputFileLocation): seq[uint8] = 
    result = result & TLEncode(int32(-539317279))
    result = result & TLEncode(obj.volume_id)

    result = result & TLEncode(obj.local_id)

    result = result & TLEncode(obj.secret)

    result = result & TLEncode(obj.file_reference)


proc TLEncodeType*(obj: inputEncryptedFileLocation): seq[uint8] = 
    result = result & TLEncode(int32(-182231723))
    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.access_hash)


proc TLEncodeType*(obj: inputDocumentFileLocation): seq[uint8] = 
    result = result & TLEncode(int32(-1160743548))
    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.access_hash)

    result = result & TLEncode(obj.file_reference)

    result = result & TLEncode(obj.thumb_size)


proc TLEncodeType*(obj: inputSecureFileLocation): seq[uint8] = 
    result = result & TLEncode(int32(-876089816))
    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.access_hash)


proc TLEncodeType*(obj: inputTakeoutFileLocation): seq[uint8] = 
    result = result & TLEncode(int32(700340377))

proc TLEncodeType*(obj: inputPhotoFileLocation): seq[uint8] = 
    result = result & TLEncode(int32(1075322878))
    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.access_hash)

    result = result & TLEncode(obj.file_reference)

    result = result & TLEncode(obj.thumb_size)


proc TLEncodeType*(obj: inputPhotoLegacyFileLocation): seq[uint8] = 
    result = result & TLEncode(int32(-667654413))
    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.access_hash)

    result = result & TLEncode(obj.file_reference)

    result = result & TLEncode(obj.volume_id)

    result = result & TLEncode(obj.local_id)

    result = result & TLEncode(obj.secret)


proc TLEncodeType*(obj: inputPeerPhotoFileLocation): seq[uint8] = 
    result = result & TLEncode(int32(668375447))
    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.volume_id)

    result = result & TLEncode(obj.local_id)


proc TLEncodeType*(obj: inputStickerSetThumb): seq[uint8] = 
    result = result & TLEncode(int32(-609309040))
    result = result & TLEncode(obj.stickerset)

    result = result & TLEncode(obj.volume_id)

    result = result & TLEncode(obj.local_id)


proc TLEncodeType*(obj: peerUser): seq[uint8] = 
    result = result & TLEncode(int32(-1649296275))
    result = result & TLEncode(obj.user_id)


proc TLEncodeType*(obj: peerChat): seq[uint8] = 
    result = result & TLEncode(int32(-1160714821))
    result = result & TLEncode(obj.chat_id)


proc TLEncodeType*(obj: peerChannel): seq[uint8] = 
    result = result & TLEncode(int32(-1109531342))
    result = result & TLEncode(obj.channel_id)


proc TLEncodeType*(obj: storage_fileUnknown): seq[uint8] = 
    result = result & TLEncode(int32(-1432995067))

proc TLEncodeType*(obj: storage_filePartial): seq[uint8] = 
    result = result & TLEncode(int32(1086091090))

proc TLEncodeType*(obj: storage_fileJpeg): seq[uint8] = 
    result = result & TLEncode(int32(2130578944))

proc TLEncodeType*(obj: storage_fileGif): seq[uint8] = 
    result = result & TLEncode(int32(-891180321))

proc TLEncodeType*(obj: storage_filePng): seq[uint8] = 
    result = result & TLEncode(int32(-1527366656))

proc TLEncodeType*(obj: storage_filePdf): seq[uint8] = 
    result = result & TLEncode(int32(-1373745011))

proc TLEncodeType*(obj: storage_fileMp3): seq[uint8] = 
    result = result & TLEncode(int32(1384777335))

proc TLEncodeType*(obj: storage_fileMov): seq[uint8] = 
    result = result & TLEncode(int32(1258941372))

proc TLEncodeType*(obj: storage_fileMp4): seq[uint8] = 
    result = result & TLEncode(int32(-1278304028))

proc TLEncodeType*(obj: storage_fileWebp): seq[uint8] = 
    result = result & TLEncode(int32(276907596))

proc TLEncodeType*(obj: userEmpty): seq[uint8] = 
    result = result & TLEncode(int32(537022650))
    result = result & TLEncode(obj.id)


proc TLEncodeType*(obj: user): seq[uint8] = 
    result = result & TLEncode(int32(-1820043071))
    if obj.access_hash.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.first_name.isSome():
        obj.flags = obj.flags or 1 shl 1

    if obj.last_name.isSome():
        obj.flags = obj.flags or 1 shl 2

    if obj.username.isSome():
        obj.flags = obj.flags or 1 shl 3

    if obj.phone.isSome():
        obj.flags = obj.flags or 1 shl 4

    if obj.photo.isSome():
        obj.flags = obj.flags or 1 shl 5

    if obj.status.isSome():
        obj.flags = obj.flags or 1 shl 6

    if obj.bot_info_version.isSome():
        obj.flags = obj.flags or 1 shl 14

    if obj.restriction_reason.isSome():
        obj.flags = obj.flags or 1 shl 18

    if obj.bot_inline_placeholder.isSome():
        obj.flags = obj.flags or 1 shl 19

    if obj.lang_code.isSome():
        obj.flags = obj.flags or 1 shl 22

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.id)

    if obj.access_hash.isSome():
        result = result & TLEncode(obj.access_hash.get())

    if obj.first_name.isSome():
        result = result & TLEncode(obj.first_name.get())

    if obj.last_name.isSome():
        result = result & TLEncode(obj.last_name.get())

    if obj.username.isSome():
        result = result & TLEncode(obj.username.get())

    if obj.phone.isSome():
        result = result & TLEncode(obj.phone.get())

    if obj.photo.isSome():
        result = result & TLEncode(obj.photo.get())

    if obj.status.isSome():
        result = result & TLEncode(obj.status.get())

    if obj.bot_info_version.isSome():
        result = result & TLEncode(obj.bot_info_version.get())

    if obj.restriction_reason.isSome():
        result = result & TLEncode(obj.restriction_reason.get())

    if obj.bot_inline_placeholder.isSome():
        result = result & TLEncode(obj.bot_inline_placeholder.get())

    if obj.lang_code.isSome():
        result = result & TLEncode(obj.lang_code.get())


proc TLEncodeType*(obj: userProfilePhotoEmpty): seq[uint8] = 
    result = result & TLEncode(int32(1326562017))

proc TLEncodeType*(obj: userProfilePhoto): seq[uint8] = 
    result = result & TLEncode(int32(1775479590))
    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.photo_id)

    result = result & TLEncode(obj.photo_small)

    result = result & TLEncode(obj.photo_big)

    result = result & TLEncode(obj.dc_id)


proc TLEncodeType*(obj: userStatusEmpty): seq[uint8] = 
    result = result & TLEncode(int32(-1660615536))

proc TLEncodeType*(obj: userStatusOnline): seq[uint8] = 
    result = result & TLEncode(int32(-306628279))
    result = result & TLEncode(obj.expires)


proc TLEncodeType*(obj: userStatusOffline): seq[uint8] = 
    result = result & TLEncode(int32(-1938800896))
    result = result & TLEncode(obj.was_online)


proc TLEncodeType*(obj: userStatusRecently): seq[uint8] = 
    result = result & TLEncode(int32(-496024847))

proc TLEncodeType*(obj: userStatusLastWeek): seq[uint8] = 
    result = result & TLEncode(int32(2079367104))

proc TLEncodeType*(obj: userStatusLastMonth): seq[uint8] = 
    result = result & TLEncode(int32(2011940674))

proc TLEncodeType*(obj: chatEmpty): seq[uint8] = 
    result = result & TLEncode(int32(-1683826688))
    result = result & TLEncode(obj.id)


proc TLEncodeType*(obj: chat): seq[uint8] = 
    result = result & TLEncode(int32(1004149726))
    if obj.migrated_to.isSome():
        obj.flags = obj.flags or 1 shl 6

    if obj.admin_rights.isSome():
        obj.flags = obj.flags or 1 shl 14

    if obj.default_banned_rights.isSome():
        obj.flags = obj.flags or 1 shl 18

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.title)

    result = result & TLEncode(obj.photo)

    result = result & TLEncode(obj.participants_count)

    result = result & TLEncode(obj.date)

    result = result & TLEncode(obj.version)

    if obj.migrated_to.isSome():
        result = result & TLEncode(obj.migrated_to.get())

    if obj.admin_rights.isSome():
        result = result & TLEncode(obj.admin_rights.get())

    if obj.default_banned_rights.isSome():
        result = result & TLEncode(obj.default_banned_rights.get())


proc TLEncodeType*(obj: chatForbidden): seq[uint8] = 
    result = result & TLEncode(int32(1932049840))
    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.title)


proc TLEncodeType*(obj: channel): seq[uint8] = 
    result = result & TLEncode(int32(-753232354))
    if obj.access_hash.isSome():
        obj.flags = obj.flags or 1 shl 13

    if obj.username.isSome():
        obj.flags = obj.flags or 1 shl 6

    if obj.restriction_reason.isSome():
        obj.flags = obj.flags or 1 shl 9

    if obj.admin_rights.isSome():
        obj.flags = obj.flags or 1 shl 14

    if obj.banned_rights.isSome():
        obj.flags = obj.flags or 1 shl 15

    if obj.default_banned_rights.isSome():
        obj.flags = obj.flags or 1 shl 18

    if obj.participants_count.isSome():
        obj.flags = obj.flags or 1 shl 17

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.id)

    if obj.access_hash.isSome():
        result = result & TLEncode(obj.access_hash.get())

    result = result & TLEncode(obj.title)

    if obj.username.isSome():
        result = result & TLEncode(obj.username.get())

    result = result & TLEncode(obj.photo)

    result = result & TLEncode(obj.date)

    result = result & TLEncode(obj.version)

    if obj.restriction_reason.isSome():
        result = result & TLEncode(obj.restriction_reason.get())

    if obj.admin_rights.isSome():
        result = result & TLEncode(obj.admin_rights.get())

    if obj.banned_rights.isSome():
        result = result & TLEncode(obj.banned_rights.get())

    if obj.default_banned_rights.isSome():
        result = result & TLEncode(obj.default_banned_rights.get())

    if obj.participants_count.isSome():
        result = result & TLEncode(obj.participants_count.get())


proc TLEncodeType*(obj: channelForbidden): seq[uint8] = 
    result = result & TLEncode(int32(681420594))
    if obj.until_date.isSome():
        obj.flags = obj.flags or 1 shl 16

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.access_hash)

    result = result & TLEncode(obj.title)

    if obj.until_date.isSome():
        result = result & TLEncode(obj.until_date.get())


proc TLEncodeType*(obj: chatFull): seq[uint8] = 
    result = result & TLEncode(int32(461151667))
    if obj.chat_photo.isSome():
        obj.flags = obj.flags or 1 shl 2

    if obj.bot_info.isSome():
        obj.flags = obj.flags or 1 shl 3

    if obj.pinned_msg_id.isSome():
        obj.flags = obj.flags or 1 shl 6

    if obj.folder_id.isSome():
        obj.flags = obj.flags or 1 shl 11

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.about)

    result = result & TLEncode(obj.participants)

    if obj.chat_photo.isSome():
        result = result & TLEncode(obj.chat_photo.get())

    result = result & TLEncode(obj.notify_settings)

    result = result & TLEncode(obj.exported_invite)

    if obj.bot_info.isSome():
        result = result & TLEncode(obj.bot_info.get())

    if obj.pinned_msg_id.isSome():
        result = result & TLEncode(obj.pinned_msg_id.get())

    if obj.folder_id.isSome():
        result = result & TLEncode(obj.folder_id.get())


proc TLEncodeType*(obj: channelFull): seq[uint8] = 
    result = result & TLEncode(int32(-253335766))
    if obj.participants_count.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.admins_count.isSome():
        obj.flags = obj.flags or 1 shl 1

    if obj.kicked_count.isSome():
        obj.flags = obj.flags or 1 shl 2

    if obj.banned_count.isSome():
        obj.flags = obj.flags or 1 shl 2

    if obj.online_count.isSome():
        obj.flags = obj.flags or 1 shl 13

    if obj.migrated_from_chat_id.isSome():
        obj.flags = obj.flags or 1 shl 4

    if obj.migrated_from_max_id.isSome():
        obj.flags = obj.flags or 1 shl 4

    if obj.pinned_msg_id.isSome():
        obj.flags = obj.flags or 1 shl 5

    if obj.stickerset.isSome():
        obj.flags = obj.flags or 1 shl 8

    if obj.available_min_id.isSome():
        obj.flags = obj.flags or 1 shl 9

    if obj.folder_id.isSome():
        obj.flags = obj.flags or 1 shl 11

    if obj.linked_chat_id.isSome():
        obj.flags = obj.flags or 1 shl 14

    if obj.location.isSome():
        obj.flags = obj.flags or 1 shl 15

    if obj.slowmode_seconds.isSome():
        obj.flags = obj.flags or 1 shl 17

    if obj.slowmode_next_send_date.isSome():
        obj.flags = obj.flags or 1 shl 18

    if obj.stats_dc.isSome():
        obj.flags = obj.flags or 1 shl 12

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.about)

    if obj.participants_count.isSome():
        result = result & TLEncode(obj.participants_count.get())

    if obj.admins_count.isSome():
        result = result & TLEncode(obj.admins_count.get())

    if obj.kicked_count.isSome():
        result = result & TLEncode(obj.kicked_count.get())

    if obj.banned_count.isSome():
        result = result & TLEncode(obj.banned_count.get())

    if obj.online_count.isSome():
        result = result & TLEncode(obj.online_count.get())

    result = result & TLEncode(obj.read_inbox_max_id)

    result = result & TLEncode(obj.read_outbox_max_id)

    result = result & TLEncode(obj.unread_count)

    result = result & TLEncode(obj.chat_photo)

    result = result & TLEncode(obj.notify_settings)

    result = result & TLEncode(obj.exported_invite)

    result = result & TLEncode(obj.bot_info)

    if obj.migrated_from_chat_id.isSome():
        result = result & TLEncode(obj.migrated_from_chat_id.get())

    if obj.migrated_from_max_id.isSome():
        result = result & TLEncode(obj.migrated_from_max_id.get())

    if obj.pinned_msg_id.isSome():
        result = result & TLEncode(obj.pinned_msg_id.get())

    if obj.stickerset.isSome():
        result = result & TLEncode(obj.stickerset.get())

    if obj.available_min_id.isSome():
        result = result & TLEncode(obj.available_min_id.get())

    if obj.folder_id.isSome():
        result = result & TLEncode(obj.folder_id.get())

    if obj.linked_chat_id.isSome():
        result = result & TLEncode(obj.linked_chat_id.get())

    if obj.location.isSome():
        result = result & TLEncode(obj.location.get())

    if obj.slowmode_seconds.isSome():
        result = result & TLEncode(obj.slowmode_seconds.get())

    if obj.slowmode_next_send_date.isSome():
        result = result & TLEncode(obj.slowmode_next_send_date.get())

    if obj.stats_dc.isSome():
        result = result & TLEncode(obj.stats_dc.get())

    result = result & TLEncode(obj.pts)


proc TLEncodeType*(obj: chatParticipant): seq[uint8] = 
    result = result & TLEncode(int32(-925415106))
    result = result & TLEncode(obj.user_id)

    result = result & TLEncode(obj.inviter_id)

    result = result & TLEncode(obj.date)


proc TLEncodeType*(obj: chatParticipantCreator): seq[uint8] = 
    result = result & TLEncode(int32(-636267638))
    result = result & TLEncode(obj.user_id)


proc TLEncodeType*(obj: chatParticipantAdmin): seq[uint8] = 
    result = result & TLEncode(int32(-489233354))
    result = result & TLEncode(obj.user_id)

    result = result & TLEncode(obj.inviter_id)

    result = result & TLEncode(obj.date)


proc TLEncodeType*(obj: chatParticipantsForbidden): seq[uint8] = 
    result = result & TLEncode(int32(-57668565))
    if obj.self_participant.isSome():
        obj.flags = obj.flags or 1 shl 0

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.chat_id)

    if obj.self_participant.isSome():
        result = result & TLEncode(obj.self_participant.get())


proc TLEncodeType*(obj: chatParticipants): seq[uint8] = 
    result = result & TLEncode(int32(1061556205))
    result = result & TLEncode(obj.chat_id)

    result = result & TLEncode(obj.participants)

    result = result & TLEncode(obj.version)


proc TLEncodeType*(obj: chatPhotoEmpty): seq[uint8] = 
    result = result & TLEncode(int32(935395612))

proc TLEncodeType*(obj: chatPhoto): seq[uint8] = 
    result = result & TLEncode(int32(-770990276))
    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.photo_small)

    result = result & TLEncode(obj.photo_big)

    result = result & TLEncode(obj.dc_id)


proc TLEncodeType*(obj: messageEmpty): seq[uint8] = 
    result = result & TLEncode(int32(-2082087340))
    result = result & TLEncode(obj.id)


proc TLEncodeType*(obj: message): seq[uint8] = 
    result = result & TLEncode(int32(1487813065))
    if obj.from_id.isSome():
        obj.flags = obj.flags or 1 shl 8

    if obj.fwd_from.isSome():
        obj.flags = obj.flags or 1 shl 2

    if obj.via_bot_id.isSome():
        obj.flags = obj.flags or 1 shl 11

    if obj.reply_to.isSome():
        obj.flags = obj.flags or 1 shl 3

    if obj.media.isSome():
        obj.flags = obj.flags or 1 shl 9

    if obj.reply_markup.isSome():
        obj.flags = obj.flags or 1 shl 6

    if obj.entities.isSome():
        obj.flags = obj.flags or 1 shl 7

    if obj.views.isSome():
        obj.flags = obj.flags or 1 shl 10

    if obj.forwards.isSome():
        obj.flags = obj.flags or 1 shl 10

    if obj.replies.isSome():
        obj.flags = obj.flags or 1 shl 23

    if obj.edit_date.isSome():
        obj.flags = obj.flags or 1 shl 15

    if obj.post_author.isSome():
        obj.flags = obj.flags or 1 shl 16

    if obj.grouped_id.isSome():
        obj.flags = obj.flags or 1 shl 17

    if obj.restriction_reason.isSome():
        obj.flags = obj.flags or 1 shl 22

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.id)

    if obj.from_id.isSome():
        result = result & TLEncode(obj.from_id.get())

    result = result & TLEncode(obj.peer_id)

    if obj.fwd_from.isSome():
        result = result & TLEncode(obj.fwd_from.get())

    if obj.via_bot_id.isSome():
        result = result & TLEncode(obj.via_bot_id.get())

    if obj.reply_to.isSome():
        result = result & TLEncode(obj.reply_to.get())

    result = result & TLEncode(obj.date)

    result = result & TLEncode(obj.message)

    if obj.media.isSome():
        result = result & TLEncode(obj.media.get())

    if obj.reply_markup.isSome():
        result = result & TLEncode(obj.reply_markup.get())

    if obj.entities.isSome():
        result = result & TLEncode(obj.entities.get())

    if obj.views.isSome():
        result = result & TLEncode(obj.views.get())

    if obj.forwards.isSome():
        result = result & TLEncode(obj.forwards.get())

    if obj.replies.isSome():
        result = result & TLEncode(obj.replies.get())

    if obj.edit_date.isSome():
        result = result & TLEncode(obj.edit_date.get())

    if obj.post_author.isSome():
        result = result & TLEncode(obj.post_author.get())

    if obj.grouped_id.isSome():
        result = result & TLEncode(obj.grouped_id.get())

    if obj.restriction_reason.isSome():
        result = result & TLEncode(obj.restriction_reason.get())


proc TLEncodeType*(obj: messageService): seq[uint8] = 
    result = result & TLEncode(int32(678405636))
    if obj.from_id.isSome():
        obj.flags = obj.flags or 1 shl 8

    if obj.reply_to.isSome():
        obj.flags = obj.flags or 1 shl 3

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.id)

    if obj.from_id.isSome():
        result = result & TLEncode(obj.from_id.get())

    result = result & TLEncode(obj.peer_id)

    if obj.reply_to.isSome():
        result = result & TLEncode(obj.reply_to.get())

    result = result & TLEncode(obj.date)

    result = result & TLEncode(obj.action)


proc TLEncodeType*(obj: messageMediaEmpty): seq[uint8] = 
    result = result & TLEncode(int32(1038967584))

proc TLEncodeType*(obj: messageMediaPhoto): seq[uint8] = 
    result = result & TLEncode(int32(1766936791))
    if obj.photo.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.ttl_seconds.isSome():
        obj.flags = obj.flags or 1 shl 2

    result = result & TLEncode(obj.flags)

    if obj.photo.isSome():
        result = result & TLEncode(obj.photo.get())

    if obj.ttl_seconds.isSome():
        result = result & TLEncode(obj.ttl_seconds.get())


proc TLEncodeType*(obj: messageMediaGeo): seq[uint8] = 
    result = result & TLEncode(int32(1457575028))
    result = result & TLEncode(obj.geo)


proc TLEncodeType*(obj: messageMediaContact): seq[uint8] = 
    result = result & TLEncode(int32(-873313984))
    result = result & TLEncode(obj.phone_number)

    result = result & TLEncode(obj.first_name)

    result = result & TLEncode(obj.last_name)

    result = result & TLEncode(obj.vcard)

    result = result & TLEncode(obj.user_id)


proc TLEncodeType*(obj: messageMediaUnsupported): seq[uint8] = 
    result = result & TLEncode(int32(-1618676578))

proc TLEncodeType*(obj: messageMediaDocument): seq[uint8] = 
    result = result & TLEncode(int32(-1666158377))
    if obj.document.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.ttl_seconds.isSome():
        obj.flags = obj.flags or 1 shl 2

    result = result & TLEncode(obj.flags)

    if obj.document.isSome():
        result = result & TLEncode(obj.document.get())

    if obj.ttl_seconds.isSome():
        result = result & TLEncode(obj.ttl_seconds.get())


proc TLEncodeType*(obj: messageMediaWebPage): seq[uint8] = 
    result = result & TLEncode(int32(-1557277184))
    result = result & TLEncode(obj.webpage)


proc TLEncodeType*(obj: messageMediaVenue): seq[uint8] = 
    result = result & TLEncode(int32(784356159))
    result = result & TLEncode(obj.geo)

    result = result & TLEncode(obj.title)

    result = result & TLEncode(obj.address)

    result = result & TLEncode(obj.provider)

    result = result & TLEncode(obj.venue_id)

    result = result & TLEncode(obj.venue_type)


proc TLEncodeType*(obj: messageMediaGame): seq[uint8] = 
    result = result & TLEncode(int32(-38694904))
    result = result & TLEncode(obj.game)


proc TLEncodeType*(obj: messageMediaInvoice): seq[uint8] = 
    result = result & TLEncode(int32(-2074799289))
    if obj.photo.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.receipt_msg_id.isSome():
        obj.flags = obj.flags or 1 shl 2

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.title)

    result = result & TLEncode(obj.description)

    if obj.photo.isSome():
        result = result & TLEncode(obj.photo.get())

    if obj.receipt_msg_id.isSome():
        result = result & TLEncode(obj.receipt_msg_id.get())

    result = result & TLEncode(obj.currency)

    result = result & TLEncode(obj.total_amount)

    result = result & TLEncode(obj.start_param)


proc TLEncodeType*(obj: messageMediaGeoLive): seq[uint8] = 
    result = result & TLEncode(int32(-1186937242))
    if obj.heading.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.proximity_notification_radius.isSome():
        obj.flags = obj.flags or 1 shl 1

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.geo)

    if obj.heading.isSome():
        result = result & TLEncode(obj.heading.get())

    result = result & TLEncode(obj.period)

    if obj.proximity_notification_radius.isSome():
        result = result & TLEncode(obj.proximity_notification_radius.get())


proc TLEncodeType*(obj: messageMediaPoll): seq[uint8] = 
    result = result & TLEncode(int32(1272375192))
    result = result & TLEncode(obj.poll)

    result = result & TLEncode(obj.results)


proc TLEncodeType*(obj: messageMediaDice): seq[uint8] = 
    result = result & TLEncode(int32(1065280907))
    result = result & TLEncode(obj.value)

    result = result & TLEncode(obj.emoticon)


proc TLEncodeType*(obj: messageActionEmpty): seq[uint8] = 
    result = result & TLEncode(int32(-1230047312))

proc TLEncodeType*(obj: messageActionChatCreate): seq[uint8] = 
    result = result & TLEncode(int32(-1503425638))
    result = result & TLEncode(obj.title)

    result = result & TLEncode(obj.users)


proc TLEncodeType*(obj: messageActionChatEditTitle): seq[uint8] = 
    result = result & TLEncode(int32(-1247687078))
    result = result & TLEncode(obj.title)


proc TLEncodeType*(obj: messageActionChatEditPhoto): seq[uint8] = 
    result = result & TLEncode(int32(2144015272))
    result = result & TLEncode(obj.photo)


proc TLEncodeType*(obj: messageActionChatDeletePhoto): seq[uint8] = 
    result = result & TLEncode(int32(-1780220945))

proc TLEncodeType*(obj: messageActionChatAddUser): seq[uint8] = 
    result = result & TLEncode(int32(1217033015))
    result = result & TLEncode(obj.users)


proc TLEncodeType*(obj: messageActionChatDeleteUser): seq[uint8] = 
    result = result & TLEncode(int32(-1297179892))
    result = result & TLEncode(obj.user_id)


proc TLEncodeType*(obj: messageActionChatJoinedByLink): seq[uint8] = 
    result = result & TLEncode(int32(-123931160))
    result = result & TLEncode(obj.inviter_id)


proc TLEncodeType*(obj: messageActionChannelCreate): seq[uint8] = 
    result = result & TLEncode(int32(-1781355374))
    result = result & TLEncode(obj.title)


proc TLEncodeType*(obj: messageActionChatMigrateTo): seq[uint8] = 
    result = result & TLEncode(int32(1371385889))
    result = result & TLEncode(obj.channel_id)


proc TLEncodeType*(obj: messageActionChannelMigrateFrom): seq[uint8] = 
    result = result & TLEncode(int32(-1336546578))
    result = result & TLEncode(obj.title)

    result = result & TLEncode(obj.chat_id)


proc TLEncodeType*(obj: messageActionPinMessage): seq[uint8] = 
    result = result & TLEncode(int32(-1799538451))

proc TLEncodeType*(obj: messageActionHistoryClear): seq[uint8] = 
    result = result & TLEncode(int32(-1615153660))

proc TLEncodeType*(obj: messageActionGameScore): seq[uint8] = 
    result = result & TLEncode(int32(-1834538890))
    result = result & TLEncode(obj.game_id)

    result = result & TLEncode(obj.score)


proc TLEncodeType*(obj: messageActionPaymentSentMe): seq[uint8] = 
    result = result & TLEncode(int32(-1892568281))
    if obj.info.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.shipping_option_id.isSome():
        obj.flags = obj.flags or 1 shl 1

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.currency)

    result = result & TLEncode(obj.total_amount)

    result = result & TLEncode(obj.payload)

    if obj.info.isSome():
        result = result & TLEncode(obj.info.get())

    if obj.shipping_option_id.isSome():
        result = result & TLEncode(obj.shipping_option_id.get())

    result = result & TLEncode(obj.charge)


proc TLEncodeType*(obj: messageActionPaymentSent): seq[uint8] = 
    result = result & TLEncode(int32(1080663248))
    result = result & TLEncode(obj.currency)

    result = result & TLEncode(obj.total_amount)


proc TLEncodeType*(obj: messageActionPhoneCall): seq[uint8] = 
    result = result & TLEncode(int32(-2132731265))
    if obj.reason.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.duration.isSome():
        obj.flags = obj.flags or 1 shl 1

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.call_id)

    if obj.reason.isSome():
        result = result & TLEncode(obj.reason.get())

    if obj.duration.isSome():
        result = result & TLEncode(obj.duration.get())


proc TLEncodeType*(obj: messageActionScreenshotTaken): seq[uint8] = 
    result = result & TLEncode(int32(1200788123))

proc TLEncodeType*(obj: messageActionCustomAction): seq[uint8] = 
    result = result & TLEncode(int32(-85549226))
    result = result & TLEncode(obj.message)


proc TLEncodeType*(obj: messageActionBotAllowed): seq[uint8] = 
    result = result & TLEncode(int32(-1410748418))
    result = result & TLEncode(obj.domain)


proc TLEncodeType*(obj: messageActionSecureValuesSentMe): seq[uint8] = 
    result = result & TLEncode(int32(455635795))
    result = result & TLEncode(obj.values)

    result = result & TLEncode(obj.credentials)


proc TLEncodeType*(obj: messageActionSecureValuesSent): seq[uint8] = 
    result = result & TLEncode(int32(-648257196))
    result = result & TLEncode(obj.types)


proc TLEncodeType*(obj: messageActionContactSignUp): seq[uint8] = 
    result = result & TLEncode(int32(-202219658))

proc TLEncodeType*(obj: messageActionGeoProximityReached): seq[uint8] = 
    result = result & TLEncode(int32(-1730095465))
    result = result & TLEncode(obj.from_id)

    result = result & TLEncode(obj.to_id)

    result = result & TLEncode(obj.distance)


proc TLEncodeType*(obj: dialog): seq[uint8] = 
    result = result & TLEncode(int32(739712882))
    if obj.pts.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.draft.isSome():
        obj.flags = obj.flags or 1 shl 1

    if obj.folder_id.isSome():
        obj.flags = obj.flags or 1 shl 4

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.top_message)

    result = result & TLEncode(obj.read_inbox_max_id)

    result = result & TLEncode(obj.read_outbox_max_id)

    result = result & TLEncode(obj.unread_count)

    result = result & TLEncode(obj.unread_mentions_count)

    result = result & TLEncode(obj.notify_settings)

    if obj.pts.isSome():
        result = result & TLEncode(obj.pts.get())

    if obj.draft.isSome():
        result = result & TLEncode(obj.draft.get())

    if obj.folder_id.isSome():
        result = result & TLEncode(obj.folder_id.get())


proc TLEncodeType*(obj: dialogFolder): seq[uint8] = 
    result = result & TLEncode(int32(1908216652))
    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.folder)

    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.top_message)

    result = result & TLEncode(obj.unread_muted_peers_count)

    result = result & TLEncode(obj.unread_unmuted_peers_count)

    result = result & TLEncode(obj.unread_muted_messages_count)

    result = result & TLEncode(obj.unread_unmuted_messages_count)


proc TLEncodeType*(obj: photoEmpty): seq[uint8] = 
    result = result & TLEncode(int32(590459437))
    result = result & TLEncode(obj.id)


proc TLEncodeType*(obj: photo): seq[uint8] = 
    result = result & TLEncode(int32(-82216347))
    if obj.video_sizes.isSome():
        obj.flags = obj.flags or 1 shl 1

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.access_hash)

    result = result & TLEncode(obj.file_reference)

    result = result & TLEncode(obj.date)

    result = result & TLEncode(obj.sizes)

    if obj.video_sizes.isSome():
        result = result & TLEncode(obj.video_sizes.get())

    result = result & TLEncode(obj.dc_id)


proc TLEncodeType*(obj: photoSizeEmpty): seq[uint8] = 
    result = result & TLEncode(int32(-511827008))
    result = result & TLEncode(obj.typeof)


proc TLEncodeType*(obj: photoSize): seq[uint8] = 
    result = result & TLEncode(int32(2009052699))
    result = result & TLEncode(obj.typeof)

    result = result & TLEncode(obj.location)

    result = result & TLEncode(obj.w)

    result = result & TLEncode(obj.h)

    result = result & TLEncode(obj.size)


proc TLEncodeType*(obj: photoCachedSize): seq[uint8] = 
    result = result & TLEncode(int32(-374917894))
    result = result & TLEncode(obj.typeof)

    result = result & TLEncode(obj.location)

    result = result & TLEncode(obj.w)

    result = result & TLEncode(obj.h)

    result = result & TLEncode(obj.bytes)


proc TLEncodeType*(obj: photoStrippedSize): seq[uint8] = 
    result = result & TLEncode(int32(-525288402))
    result = result & TLEncode(obj.typeof)

    result = result & TLEncode(obj.bytes)


proc TLEncodeType*(obj: photoSizeProgressive): seq[uint8] = 
    result = result & TLEncode(int32(1520986705))
    result = result & TLEncode(obj.typeof)

    result = result & TLEncode(obj.location)

    result = result & TLEncode(obj.w)

    result = result & TLEncode(obj.h)

    result = result & TLEncode(obj.sizes)


proc TLEncodeType*(obj: geoPointEmpty): seq[uint8] = 
    result = result & TLEncode(int32(286776671))

proc TLEncodeType*(obj: geoPoint): seq[uint8] = 
    result = result & TLEncode(int32(-1297942941))
    if obj.accuracy_radius.isSome():
        obj.flags = obj.flags or 1 shl 0

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.long)

    result = result & TLEncode(obj.lat)

    result = result & TLEncode(obj.access_hash)

    if obj.accuracy_radius.isSome():
        result = result & TLEncode(obj.accuracy_radius.get())


proc TLEncodeType*(obj: auth_sentCode): seq[uint8] = 
    result = result & TLEncode(int32(1577067778))
    if obj.next_type.isSome():
        obj.flags = obj.flags or 1 shl 1

    if obj.timeout.isSome():
        obj.flags = obj.flags or 1 shl 2

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.typeof)

    result = result & TLEncode(obj.phone_code_hash)

    if obj.next_type.isSome():
        result = result & TLEncode(obj.next_type.get())

    if obj.timeout.isSome():
        result = result & TLEncode(obj.timeout.get())


proc TLEncodeType*(obj: auth_authorization): seq[uint8] = 
    result = result & TLEncode(int32(-855308010))
    if obj.tmp_sessions.isSome():
        obj.flags = obj.flags or 1 shl 0

    result = result & TLEncode(obj.flags)

    if obj.tmp_sessions.isSome():
        result = result & TLEncode(obj.tmp_sessions.get())

    result = result & TLEncode(obj.user)


proc TLEncodeType*(obj: auth_authorizationSignUpRequired): seq[uint8] = 
    result = result & TLEncode(int32(1148485274))
    if obj.terms_of_service.isSome():
        obj.flags = obj.flags or 1 shl 0

    result = result & TLEncode(obj.flags)

    if obj.terms_of_service.isSome():
        result = result & TLEncode(obj.terms_of_service.get())


proc TLEncodeType*(obj: auth_exportedAuthorization): seq[uint8] = 
    result = result & TLEncode(int32(-543777747))
    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.bytes)


proc TLEncodeType*(obj: inputNotifyPeer): seq[uint8] = 
    result = result & TLEncode(int32(-1195615476))
    result = result & TLEncode(obj.peer)


proc TLEncodeType*(obj: inputNotifyUsers): seq[uint8] = 
    result = result & TLEncode(int32(423314455))

proc TLEncodeType*(obj: inputNotifyChats): seq[uint8] = 
    result = result & TLEncode(int32(1251338318))

proc TLEncodeType*(obj: inputNotifyBroadcasts): seq[uint8] = 
    result = result & TLEncode(int32(-1311015810))

proc TLEncodeType*(obj: inputPeerNotifySettings): seq[uint8] = 
    result = result & TLEncode(int32(-1673717362))
    if obj.show_previews.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.silent.isSome():
        obj.flags = obj.flags or 1 shl 1

    if obj.mute_until.isSome():
        obj.flags = obj.flags or 1 shl 2

    if obj.sound.isSome():
        obj.flags = obj.flags or 1 shl 3

    result = result & TLEncode(obj.flags)

    if obj.show_previews.isSome():
        result = result & TLEncode(obj.show_previews.get())

    if obj.silent.isSome():
        result = result & TLEncode(obj.silent.get())

    if obj.mute_until.isSome():
        result = result & TLEncode(obj.mute_until.get())

    if obj.sound.isSome():
        result = result & TLEncode(obj.sound.get())


proc TLEncodeType*(obj: peerNotifySettings): seq[uint8] = 
    result = result & TLEncode(int32(-1353671392))
    if obj.show_previews.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.silent.isSome():
        obj.flags = obj.flags or 1 shl 1

    if obj.mute_until.isSome():
        obj.flags = obj.flags or 1 shl 2

    if obj.sound.isSome():
        obj.flags = obj.flags or 1 shl 3

    result = result & TLEncode(obj.flags)

    if obj.show_previews.isSome():
        result = result & TLEncode(obj.show_previews.get())

    if obj.silent.isSome():
        result = result & TLEncode(obj.silent.get())

    if obj.mute_until.isSome():
        result = result & TLEncode(obj.mute_until.get())

    if obj.sound.isSome():
        result = result & TLEncode(obj.sound.get())


proc TLEncodeType*(obj: peerSettings): seq[uint8] = 
    result = result & TLEncode(int32(1933519201))
    if obj.geo_distance.isSome():
        obj.flags = obj.flags or 1 shl 6

    result = result & TLEncode(obj.flags)

    if obj.geo_distance.isSome():
        result = result & TLEncode(obj.geo_distance.get())


proc TLEncodeType*(obj: wallPaper): seq[uint8] = 
    result = result & TLEncode(int32(-1539849235))
    if obj.settings.isSome():
        obj.flags = obj.flags or 1 shl 2

    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.access_hash)

    result = result & TLEncode(obj.slug)

    result = result & TLEncode(obj.document)

    if obj.settings.isSome():
        result = result & TLEncode(obj.settings.get())


proc TLEncodeType*(obj: wallPaperNoFile): seq[uint8] = 
    result = result & TLEncode(int32(-1963717851))
    if obj.settings.isSome():
        obj.flags = obj.flags or 1 shl 2

    result = result & TLEncode(obj.flags)

    if obj.settings.isSome():
        result = result & TLEncode(obj.settings.get())


proc TLEncodeType*(obj: inputReportReasonSpam): seq[uint8] = 
    result = result & TLEncode(int32(1490799288))

proc TLEncodeType*(obj: inputReportReasonViolence): seq[uint8] = 
    result = result & TLEncode(int32(505595789))

proc TLEncodeType*(obj: inputReportReasonPornography): seq[uint8] = 
    result = result & TLEncode(int32(777640226))

proc TLEncodeType*(obj: inputReportReasonChildAbuse): seq[uint8] = 
    result = result & TLEncode(int32(-1376497949))

proc TLEncodeType*(obj: inputReportReasonOther): seq[uint8] = 
    result = result & TLEncode(int32(-512463606))
    result = result & TLEncode(obj.text)


proc TLEncodeType*(obj: inputReportReasonCopyright): seq[uint8] = 
    result = result & TLEncode(int32(-1685456582))

proc TLEncodeType*(obj: inputReportReasonGeoIrrelevant): seq[uint8] = 
    result = result & TLEncode(int32(-606798099))

proc TLEncodeType*(obj: userFull): seq[uint8] = 
    result = result & TLEncode(int32(-302941166))
    if obj.about.isSome():
        obj.flags = obj.flags or 1 shl 1

    if obj.profile_photo.isSome():
        obj.flags = obj.flags or 1 shl 2

    if obj.bot_info.isSome():
        obj.flags = obj.flags or 1 shl 3

    if obj.pinned_msg_id.isSome():
        obj.flags = obj.flags or 1 shl 6

    if obj.folder_id.isSome():
        obj.flags = obj.flags or 1 shl 11

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.user)

    if obj.about.isSome():
        result = result & TLEncode(obj.about.get())

    result = result & TLEncode(obj.settings)

    if obj.profile_photo.isSome():
        result = result & TLEncode(obj.profile_photo.get())

    result = result & TLEncode(obj.notify_settings)

    if obj.bot_info.isSome():
        result = result & TLEncode(obj.bot_info.get())

    if obj.pinned_msg_id.isSome():
        result = result & TLEncode(obj.pinned_msg_id.get())

    result = result & TLEncode(obj.common_chats_count)

    if obj.folder_id.isSome():
        result = result & TLEncode(obj.folder_id.get())


proc TLEncodeType*(obj: contact): seq[uint8] = 
    result = result & TLEncode(int32(-116274796))
    result = result & TLEncode(obj.user_id)

    result = result & TLEncode(obj.mutual)


proc TLEncodeType*(obj: importedContact): seq[uint8] = 
    result = result & TLEncode(int32(-805141448))
    result = result & TLEncode(obj.user_id)

    result = result & TLEncode(obj.client_id)


proc TLEncodeType*(obj: contactStatus): seq[uint8] = 
    result = result & TLEncode(int32(-748155807))
    result = result & TLEncode(obj.user_id)

    result = result & TLEncode(obj.status)


proc TLEncodeType*(obj: contacts_contactsNotModified): seq[uint8] = 
    result = result & TLEncode(int32(-1219778094))

proc TLEncodeType*(obj: contacts_contacts): seq[uint8] = 
    result = result & TLEncode(int32(-353862078))
    result = result & TLEncode(obj.contacts)

    result = result & TLEncode(obj.saved_count)

    result = result & TLEncode(obj.users)


proc TLEncodeType*(obj: contacts_importedContacts): seq[uint8] = 
    result = result & TLEncode(int32(2010127419))
    result = result & TLEncode(obj.imported)

    result = result & TLEncode(obj.popular_invites)

    result = result & TLEncode(obj.retry_contacts)

    result = result & TLEncode(obj.users)


proc TLEncodeType*(obj: contacts_blocked): seq[uint8] = 
    result = result & TLEncode(int32(-1377740528))
    result = result & TLEncode(obj.blocked)

    result = result & TLEncode(obj.chats)

    result = result & TLEncode(obj.users)


proc TLEncodeType*(obj: contacts_blockedSlice): seq[uint8] = 
    result = result & TLEncode(int32(-513392236))
    result = result & TLEncode(obj.count)

    result = result & TLEncode(obj.blocked)

    result = result & TLEncode(obj.chats)

    result = result & TLEncode(obj.users)


proc TLEncodeType*(obj: messages_dialogs): seq[uint8] = 
    result = result & TLEncode(int32(364538944))
    result = result & TLEncode(obj.dialogs)

    result = result & TLEncode(obj.messages)

    result = result & TLEncode(obj.chats)

    result = result & TLEncode(obj.users)


proc TLEncodeType*(obj: messages_dialogsSlice): seq[uint8] = 
    result = result & TLEncode(int32(1910543603))
    result = result & TLEncode(obj.count)

    result = result & TLEncode(obj.dialogs)

    result = result & TLEncode(obj.messages)

    result = result & TLEncode(obj.chats)

    result = result & TLEncode(obj.users)


proc TLEncodeType*(obj: messages_dialogsNotModified): seq[uint8] = 
    result = result & TLEncode(int32(-253500010))
    result = result & TLEncode(obj.count)


proc TLEncodeType*(obj: messages_messages): seq[uint8] = 
    result = result & TLEncode(int32(-1938715001))
    result = result & TLEncode(obj.messages)

    result = result & TLEncode(obj.chats)

    result = result & TLEncode(obj.users)


proc TLEncodeType*(obj: messages_messagesSlice): seq[uint8] = 
    result = result & TLEncode(int32(978610270))
    if obj.next_rate.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.offset_id_offset.isSome():
        obj.flags = obj.flags or 1 shl 2

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.count)

    if obj.next_rate.isSome():
        result = result & TLEncode(obj.next_rate.get())

    if obj.offset_id_offset.isSome():
        result = result & TLEncode(obj.offset_id_offset.get())

    result = result & TLEncode(obj.messages)

    result = result & TLEncode(obj.chats)

    result = result & TLEncode(obj.users)


proc TLEncodeType*(obj: messages_channelMessages): seq[uint8] = 
    result = result & TLEncode(int32(1682413576))
    if obj.offset_id_offset.isSome():
        obj.flags = obj.flags or 1 shl 2

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.pts)

    result = result & TLEncode(obj.count)

    if obj.offset_id_offset.isSome():
        result = result & TLEncode(obj.offset_id_offset.get())

    result = result & TLEncode(obj.messages)

    result = result & TLEncode(obj.chats)

    result = result & TLEncode(obj.users)


proc TLEncodeType*(obj: messages_messagesNotModified): seq[uint8] = 
    result = result & TLEncode(int32(1951620897))
    result = result & TLEncode(obj.count)


proc TLEncodeType*(obj: messages_chats): seq[uint8] = 
    result = result & TLEncode(int32(1694474197))
    result = result & TLEncode(obj.chats)


proc TLEncodeType*(obj: messages_chatsSlice): seq[uint8] = 
    result = result & TLEncode(int32(-1663561404))
    result = result & TLEncode(obj.count)

    result = result & TLEncode(obj.chats)


proc TLEncodeType*(obj: messages_chatFull): seq[uint8] = 
    result = result & TLEncode(int32(-438840932))
    result = result & TLEncode(obj.full_chat)

    result = result & TLEncode(obj.chats)

    result = result & TLEncode(obj.users)


proc TLEncodeType*(obj: messages_affectedHistory): seq[uint8] = 
    result = result & TLEncode(int32(-1269012015))
    result = result & TLEncode(obj.pts)

    result = result & TLEncode(obj.pts_count)

    result = result & TLEncode(obj.offset)


proc TLEncodeType*(obj: inputMessagesFilterEmpty): seq[uint8] = 
    result = result & TLEncode(int32(1474492012))

proc TLEncodeType*(obj: inputMessagesFilterPhotos): seq[uint8] = 
    result = result & TLEncode(int32(-1777752804))

proc TLEncodeType*(obj: inputMessagesFilterVideo): seq[uint8] = 
    result = result & TLEncode(int32(-1614803355))

proc TLEncodeType*(obj: inputMessagesFilterPhotoVideo): seq[uint8] = 
    result = result & TLEncode(int32(1458172132))

proc TLEncodeType*(obj: inputMessagesFilterDocument): seq[uint8] = 
    result = result & TLEncode(int32(-1629621880))

proc TLEncodeType*(obj: inputMessagesFilterUrl): seq[uint8] = 
    result = result & TLEncode(int32(2129714567))

proc TLEncodeType*(obj: inputMessagesFilterGif): seq[uint8] = 
    result = result & TLEncode(int32(-3644025))

proc TLEncodeType*(obj: inputMessagesFilterVoice): seq[uint8] = 
    result = result & TLEncode(int32(1358283666))

proc TLEncodeType*(obj: inputMessagesFilterMusic): seq[uint8] = 
    result = result & TLEncode(int32(928101534))

proc TLEncodeType*(obj: inputMessagesFilterChatPhotos): seq[uint8] = 
    result = result & TLEncode(int32(975236280))

proc TLEncodeType*(obj: inputMessagesFilterPhoneCalls): seq[uint8] = 
    result = result & TLEncode(int32(-2134272152))
    result = result & TLEncode(obj.flags)


proc TLEncodeType*(obj: inputMessagesFilterRoundVoice): seq[uint8] = 
    result = result & TLEncode(int32(2054952868))

proc TLEncodeType*(obj: inputMessagesFilterRoundVideo): seq[uint8] = 
    result = result & TLEncode(int32(-1253451181))

proc TLEncodeType*(obj: inputMessagesFilterMyMentions): seq[uint8] = 
    result = result & TLEncode(int32(-1040652646))

proc TLEncodeType*(obj: inputMessagesFilterGeo): seq[uint8] = 
    result = result & TLEncode(int32(-419271411))

proc TLEncodeType*(obj: inputMessagesFilterContacts): seq[uint8] = 
    result = result & TLEncode(int32(-530392189))

proc TLEncodeType*(obj: inputMessagesFilterPinned): seq[uint8] = 
    result = result & TLEncode(int32(464520273))

proc TLEncodeType*(obj: updateNewMessage): seq[uint8] = 
    result = result & TLEncode(int32(522914557))
    result = result & TLEncode(obj.message)

    result = result & TLEncode(obj.pts)

    result = result & TLEncode(obj.pts_count)


proc TLEncodeType*(obj: updateMessageID): seq[uint8] = 
    result = result & TLEncode(int32(1318109142))
    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.random_id)


proc TLEncodeType*(obj: updateDeleteMessages): seq[uint8] = 
    result = result & TLEncode(int32(-1576161051))
    result = result & TLEncode(obj.messages)

    result = result & TLEncode(obj.pts)

    result = result & TLEncode(obj.pts_count)


proc TLEncodeType*(obj: updateUserTyping): seq[uint8] = 
    result = result & TLEncode(int32(1548249383))
    result = result & TLEncode(obj.user_id)

    result = result & TLEncode(obj.action)


proc TLEncodeType*(obj: updateChatUserTyping): seq[uint8] = 
    result = result & TLEncode(int32(-1704596961))
    result = result & TLEncode(obj.chat_id)

    result = result & TLEncode(obj.user_id)

    result = result & TLEncode(obj.action)


proc TLEncodeType*(obj: updateChatParticipants): seq[uint8] = 
    result = result & TLEncode(int32(2002852224))
    result = result & TLEncode(obj.participants)


proc TLEncodeType*(obj: updateUserStatus): seq[uint8] = 
    result = result & TLEncode(int32(469489699))
    result = result & TLEncode(obj.user_id)

    result = result & TLEncode(obj.status)


proc TLEncodeType*(obj: updateUserName): seq[uint8] = 
    result = result & TLEncode(int32(-1489818765))
    result = result & TLEncode(obj.user_id)

    result = result & TLEncode(obj.first_name)

    result = result & TLEncode(obj.last_name)

    result = result & TLEncode(obj.username)


proc TLEncodeType*(obj: updateUserPhoto): seq[uint8] = 
    result = result & TLEncode(int32(-1791935732))
    result = result & TLEncode(obj.user_id)

    result = result & TLEncode(obj.date)

    result = result & TLEncode(obj.photo)

    result = result & TLEncode(obj.previous)


proc TLEncodeType*(obj: updateNewEncryptedMessage): seq[uint8] = 
    result = result & TLEncode(int32(314359194))
    result = result & TLEncode(obj.message)

    result = result & TLEncode(obj.qts)


proc TLEncodeType*(obj: updateEncryptedChatTyping): seq[uint8] = 
    result = result & TLEncode(int32(386986326))
    result = result & TLEncode(obj.chat_id)


proc TLEncodeType*(obj: updateEncryption): seq[uint8] = 
    result = result & TLEncode(int32(-1264392051))
    result = result & TLEncode(obj.chat)

    result = result & TLEncode(obj.date)


proc TLEncodeType*(obj: updateEncryptedMessagesRead): seq[uint8] = 
    result = result & TLEncode(int32(956179895))
    result = result & TLEncode(obj.chat_id)

    result = result & TLEncode(obj.max_date)

    result = result & TLEncode(obj.date)


proc TLEncodeType*(obj: updateChatParticipantAdd): seq[uint8] = 
    result = result & TLEncode(int32(-364179876))
    result = result & TLEncode(obj.chat_id)

    result = result & TLEncode(obj.user_id)

    result = result & TLEncode(obj.inviter_id)

    result = result & TLEncode(obj.date)

    result = result & TLEncode(obj.version)


proc TLEncodeType*(obj: updateChatParticipantDelete): seq[uint8] = 
    result = result & TLEncode(int32(1851755554))
    result = result & TLEncode(obj.chat_id)

    result = result & TLEncode(obj.user_id)

    result = result & TLEncode(obj.version)


proc TLEncodeType*(obj: updateDcOptions): seq[uint8] = 
    result = result & TLEncode(int32(-1906403213))
    result = result & TLEncode(obj.dc_options)


proc TLEncodeType*(obj: updateNotifySettings): seq[uint8] = 
    result = result & TLEncode(int32(-1094555409))
    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.notify_settings)


proc TLEncodeType*(obj: updateServiceNotification): seq[uint8] = 
    result = result & TLEncode(int32(-337352679))
    if obj.inbox_date.isSome():
        obj.flags = obj.flags or 1 shl 1

    result = result & TLEncode(obj.flags)

    if obj.inbox_date.isSome():
        result = result & TLEncode(obj.inbox_date.get())

    result = result & TLEncode(obj.typeof)

    result = result & TLEncode(obj.message)

    result = result & TLEncode(obj.media)

    result = result & TLEncode(obj.entities)


proc TLEncodeType*(obj: updatePrivacy): seq[uint8] = 
    result = result & TLEncode(int32(-298113238))
    result = result & TLEncode(obj.key)

    result = result & TLEncode(obj.rules)


proc TLEncodeType*(obj: updateUserPhone): seq[uint8] = 
    result = result & TLEncode(int32(314130811))
    result = result & TLEncode(obj.user_id)

    result = result & TLEncode(obj.phone)


proc TLEncodeType*(obj: updateReadHistoryInbox): seq[uint8] = 
    result = result & TLEncode(int32(-1667805217))
    if obj.folder_id.isSome():
        obj.flags = obj.flags or 1 shl 0

    result = result & TLEncode(obj.flags)

    if obj.folder_id.isSome():
        result = result & TLEncode(obj.folder_id.get())

    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.max_id)

    result = result & TLEncode(obj.still_unread_count)

    result = result & TLEncode(obj.pts)

    result = result & TLEncode(obj.pts_count)


proc TLEncodeType*(obj: updateReadHistoryOutbox): seq[uint8] = 
    result = result & TLEncode(int32(791617983))
    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.max_id)

    result = result & TLEncode(obj.pts)

    result = result & TLEncode(obj.pts_count)


proc TLEncodeType*(obj: updateWebPage): seq[uint8] = 
    result = result & TLEncode(int32(2139689491))
    result = result & TLEncode(obj.webpage)

    result = result & TLEncode(obj.pts)

    result = result & TLEncode(obj.pts_count)


proc TLEncodeType*(obj: updateReadMessagesContents): seq[uint8] = 
    result = result & TLEncode(int32(1757493555))
    result = result & TLEncode(obj.messages)

    result = result & TLEncode(obj.pts)

    result = result & TLEncode(obj.pts_count)


proc TLEncodeType*(obj: updateChannelTooLong): seq[uint8] = 
    result = result & TLEncode(int32(-352032773))
    if obj.pts.isSome():
        obj.flags = obj.flags or 1 shl 0

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.channel_id)

    if obj.pts.isSome():
        result = result & TLEncode(obj.pts.get())


proc TLEncodeType*(obj: updateChannel): seq[uint8] = 
    result = result & TLEncode(int32(-1227598250))
    result = result & TLEncode(obj.channel_id)


proc TLEncodeType*(obj: updateNewChannelMessage): seq[uint8] = 
    result = result & TLEncode(int32(1656358105))
    result = result & TLEncode(obj.message)

    result = result & TLEncode(obj.pts)

    result = result & TLEncode(obj.pts_count)


proc TLEncodeType*(obj: updateReadChannelInbox): seq[uint8] = 
    result = result & TLEncode(int32(856380452))
    if obj.folder_id.isSome():
        obj.flags = obj.flags or 1 shl 0

    result = result & TLEncode(obj.flags)

    if obj.folder_id.isSome():
        result = result & TLEncode(obj.folder_id.get())

    result = result & TLEncode(obj.channel_id)

    result = result & TLEncode(obj.max_id)

    result = result & TLEncode(obj.still_unread_count)

    result = result & TLEncode(obj.pts)


proc TLEncodeType*(obj: updateDeleteChannelMessages): seq[uint8] = 
    result = result & TLEncode(int32(-1015733815))
    result = result & TLEncode(obj.channel_id)

    result = result & TLEncode(obj.messages)

    result = result & TLEncode(obj.pts)

    result = result & TLEncode(obj.pts_count)


proc TLEncodeType*(obj: updateChannelMessageViews): seq[uint8] = 
    result = result & TLEncode(int32(-1734268085))
    result = result & TLEncode(obj.channel_id)

    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.views)


proc TLEncodeType*(obj: updateChatParticipantAdmin): seq[uint8] = 
    result = result & TLEncode(int32(-1232070311))
    result = result & TLEncode(obj.chat_id)

    result = result & TLEncode(obj.user_id)

    result = result & TLEncode(obj.is_admin)

    result = result & TLEncode(obj.version)


proc TLEncodeType*(obj: updateNewStickerSet): seq[uint8] = 
    result = result & TLEncode(int32(1753886890))
    result = result & TLEncode(obj.stickerset)


proc TLEncodeType*(obj: updateStickerSetsOrder): seq[uint8] = 
    result = result & TLEncode(int32(-1154670576))
    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.order)


proc TLEncodeType*(obj: updateStickerSets): seq[uint8] = 
    result = result & TLEncode(int32(1135492588))

proc TLEncodeType*(obj: updateSavedGifs): seq[uint8] = 
    result = result & TLEncode(int32(-1821035490))

proc TLEncodeType*(obj: updateBotInlineQuery): seq[uint8] = 
    result = result & TLEncode(int32(1417832080))
    if obj.geo.isSome():
        obj.flags = obj.flags or 1 shl 0

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.query_id)

    result = result & TLEncode(obj.user_id)

    result = result & TLEncode(obj.query)

    if obj.geo.isSome():
        result = result & TLEncode(obj.geo.get())

    result = result & TLEncode(obj.offset)


proc TLEncodeType*(obj: updateBotInlineSend): seq[uint8] = 
    result = result & TLEncode(int32(-460351936))
    if obj.geo.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.msg_id.isSome():
        obj.flags = obj.flags or 1 shl 1

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.user_id)

    result = result & TLEncode(obj.query)

    if obj.geo.isSome():
        result = result & TLEncode(obj.geo.get())

    result = result & TLEncode(obj.id)

    if obj.msg_id.isSome():
        result = result & TLEncode(obj.msg_id.get())


proc TLEncodeType*(obj: updateEditChannelMessage): seq[uint8] = 
    result = result & TLEncode(int32(457133559))
    result = result & TLEncode(obj.message)

    result = result & TLEncode(obj.pts)

    result = result & TLEncode(obj.pts_count)


proc TLEncodeType*(obj: updateBotCallbackQuery): seq[uint8] = 
    result = result & TLEncode(int32(-415938591))
    if obj.data.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.game_short_name.isSome():
        obj.flags = obj.flags or 1 shl 1

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.query_id)

    result = result & TLEncode(obj.user_id)

    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.msg_id)

    result = result & TLEncode(obj.chat_instance)

    if obj.data.isSome():
        result = result & TLEncode(obj.data.get())

    if obj.game_short_name.isSome():
        result = result & TLEncode(obj.game_short_name.get())


proc TLEncodeType*(obj: updateEditMessage): seq[uint8] = 
    result = result & TLEncode(int32(-469536605))
    result = result & TLEncode(obj.message)

    result = result & TLEncode(obj.pts)

    result = result & TLEncode(obj.pts_count)


proc TLEncodeType*(obj: updateInlineBotCallbackQuery): seq[uint8] = 
    result = result & TLEncode(int32(-103646630))
    if obj.data.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.game_short_name.isSome():
        obj.flags = obj.flags or 1 shl 1

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.query_id)

    result = result & TLEncode(obj.user_id)

    result = result & TLEncode(obj.msg_id)

    result = result & TLEncode(obj.chat_instance)

    if obj.data.isSome():
        result = result & TLEncode(obj.data.get())

    if obj.game_short_name.isSome():
        result = result & TLEncode(obj.game_short_name.get())


proc TLEncodeType*(obj: updateReadChannelOutbox): seq[uint8] = 
    result = result & TLEncode(int32(634833351))
    result = result & TLEncode(obj.channel_id)

    result = result & TLEncode(obj.max_id)


proc TLEncodeType*(obj: updateDraftMessage): seq[uint8] = 
    result = result & TLEncode(int32(-299124375))
    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.draft)


proc TLEncodeType*(obj: updateReadFeaturedStickers): seq[uint8] = 
    result = result & TLEncode(int32(1461528386))

proc TLEncodeType*(obj: updateRecentStickers): seq[uint8] = 
    result = result & TLEncode(int32(-1706939360))

proc TLEncodeType*(obj: updateConfig): seq[uint8] = 
    result = result & TLEncode(int32(-1574314746))

proc TLEncodeType*(obj: updatePtsChanged): seq[uint8] = 
    result = result & TLEncode(int32(861169551))

proc TLEncodeType*(obj: updateChannelWebPage): seq[uint8] = 
    result = result & TLEncode(int32(1081547008))
    result = result & TLEncode(obj.channel_id)

    result = result & TLEncode(obj.webpage)

    result = result & TLEncode(obj.pts)

    result = result & TLEncode(obj.pts_count)


proc TLEncodeType*(obj: updateDialogPinned): seq[uint8] = 
    result = result & TLEncode(int32(1852826908))
    if obj.folder_id.isSome():
        obj.flags = obj.flags or 1 shl 1

    result = result & TLEncode(obj.flags)

    if obj.folder_id.isSome():
        result = result & TLEncode(obj.folder_id.get())

    result = result & TLEncode(obj.peer)


proc TLEncodeType*(obj: updatePinnedDialogs): seq[uint8] = 
    result = result & TLEncode(int32(-99664734))
    if obj.folder_id.isSome():
        obj.flags = obj.flags or 1 shl 1

    if obj.order.isSome():
        obj.flags = obj.flags or 1 shl 0

    result = result & TLEncode(obj.flags)

    if obj.folder_id.isSome():
        result = result & TLEncode(obj.folder_id.get())

    if obj.order.isSome():
        result = result & TLEncode(obj.order.get())


proc TLEncodeType*(obj: updateBotWebhookJSON): seq[uint8] = 
    result = result & TLEncode(int32(-2095595325))
    result = result & TLEncode(obj.data)


proc TLEncodeType*(obj: updateBotWebhookJSONQuery): seq[uint8] = 
    result = result & TLEncode(int32(-1684914010))
    result = result & TLEncode(obj.query_id)

    result = result & TLEncode(obj.data)

    result = result & TLEncode(obj.timeout)


proc TLEncodeType*(obj: updateBotShippingQuery): seq[uint8] = 
    result = result & TLEncode(int32(-523384512))
    result = result & TLEncode(obj.query_id)

    result = result & TLEncode(obj.user_id)

    result = result & TLEncode(obj.payload)

    result = result & TLEncode(obj.shipping_address)


proc TLEncodeType*(obj: updateBotPrecheckoutQuery): seq[uint8] = 
    result = result & TLEncode(int32(1563376297))
    if obj.info.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.shipping_option_id.isSome():
        obj.flags = obj.flags or 1 shl 1

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.query_id)

    result = result & TLEncode(obj.user_id)

    result = result & TLEncode(obj.payload)

    if obj.info.isSome():
        result = result & TLEncode(obj.info.get())

    if obj.shipping_option_id.isSome():
        result = result & TLEncode(obj.shipping_option_id.get())

    result = result & TLEncode(obj.currency)

    result = result & TLEncode(obj.total_amount)


proc TLEncodeType*(obj: updatePhoneCall): seq[uint8] = 
    result = result & TLEncode(int32(-1425052898))
    result = result & TLEncode(obj.phone_call)


proc TLEncodeType*(obj: updateLangPackTooLong): seq[uint8] = 
    result = result & TLEncode(int32(1180041828))
    result = result & TLEncode(obj.lang_code)


proc TLEncodeType*(obj: updateLangPack): seq[uint8] = 
    result = result & TLEncode(int32(1442983757))
    result = result & TLEncode(obj.difference)


proc TLEncodeType*(obj: updateFavedStickers): seq[uint8] = 
    result = result & TLEncode(int32(-451831443))

proc TLEncodeType*(obj: updateChannelReadMessagesContents): seq[uint8] = 
    result = result & TLEncode(int32(-1987495099))
    result = result & TLEncode(obj.channel_id)

    result = result & TLEncode(obj.messages)


proc TLEncodeType*(obj: updateContactsReset): seq[uint8] = 
    result = result & TLEncode(int32(1887741886))

proc TLEncodeType*(obj: updateChannelAvailableMessages): seq[uint8] = 
    result = result & TLEncode(int32(1893427255))
    result = result & TLEncode(obj.channel_id)

    result = result & TLEncode(obj.available_min_id)


proc TLEncodeType*(obj: updateDialogUnreadMark): seq[uint8] = 
    result = result & TLEncode(int32(-513517117))
    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.peer)


proc TLEncodeType*(obj: updateMessagePoll): seq[uint8] = 
    result = result & TLEncode(int32(-1398708869))
    if obj.poll.isSome():
        obj.flags = obj.flags or 1 shl 0

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.poll_id)

    if obj.poll.isSome():
        result = result & TLEncode(obj.poll.get())

    result = result & TLEncode(obj.results)


proc TLEncodeType*(obj: updateChatDefaultBannedRights): seq[uint8] = 
    result = result & TLEncode(int32(1421875280))
    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.default_banned_rights)

    result = result & TLEncode(obj.version)


proc TLEncodeType*(obj: updateFolderPeers): seq[uint8] = 
    result = result & TLEncode(int32(422972864))
    result = result & TLEncode(obj.folder_peers)

    result = result & TLEncode(obj.pts)

    result = result & TLEncode(obj.pts_count)


proc TLEncodeType*(obj: updatePeerSettings): seq[uint8] = 
    result = result & TLEncode(int32(1786671974))
    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.settings)


proc TLEncodeType*(obj: updatePeerLocated): seq[uint8] = 
    result = result & TLEncode(int32(-1263546448))
    result = result & TLEncode(obj.peers)


proc TLEncodeType*(obj: updateNewScheduledMessage): seq[uint8] = 
    result = result & TLEncode(int32(967122427))
    result = result & TLEncode(obj.message)


proc TLEncodeType*(obj: updateDeleteScheduledMessages): seq[uint8] = 
    result = result & TLEncode(int32(-1870238482))
    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.messages)


proc TLEncodeType*(obj: updateTheme): seq[uint8] = 
    result = result & TLEncode(int32(-2112423005))
    result = result & TLEncode(obj.theme)


proc TLEncodeType*(obj: updateGeoLiveViewed): seq[uint8] = 
    result = result & TLEncode(int32(-2027964103))
    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.msg_id)


proc TLEncodeType*(obj: updateLoginToken): seq[uint8] = 
    result = result & TLEncode(int32(1448076945))

proc TLEncodeType*(obj: updateMessagePollVote): seq[uint8] = 
    result = result & TLEncode(int32(1123585836))
    result = result & TLEncode(obj.poll_id)

    result = result & TLEncode(obj.user_id)

    result = result & TLEncode(obj.options)


proc TLEncodeType*(obj: updateDialogFilter): seq[uint8] = 
    result = result & TLEncode(int32(654302845))
    if obj.filter.isSome():
        obj.flags = obj.flags or 1 shl 0

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.id)

    if obj.filter.isSome():
        result = result & TLEncode(obj.filter.get())


proc TLEncodeType*(obj: updateDialogFilterOrder): seq[uint8] = 
    result = result & TLEncode(int32(-1512627963))
    result = result & TLEncode(obj.order)


proc TLEncodeType*(obj: updateDialogFilters): seq[uint8] = 
    result = result & TLEncode(int32(889491791))

proc TLEncodeType*(obj: updatePhoneCallSignalingData): seq[uint8] = 
    result = result & TLEncode(int32(643940105))
    result = result & TLEncode(obj.phone_call_id)

    result = result & TLEncode(obj.data)


proc TLEncodeType*(obj: updateChannelParticipant): seq[uint8] = 
    result = result & TLEncode(int32(1708307556))
    if obj.prev_participant.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.new_participant.isSome():
        obj.flags = obj.flags or 1 shl 1

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.channel_id)

    result = result & TLEncode(obj.date)

    result = result & TLEncode(obj.user_id)

    if obj.prev_participant.isSome():
        result = result & TLEncode(obj.prev_participant.get())

    if obj.new_participant.isSome():
        result = result & TLEncode(obj.new_participant.get())

    result = result & TLEncode(obj.qts)


proc TLEncodeType*(obj: updateChannelMessageForwards): seq[uint8] = 
    result = result & TLEncode(int32(1854571743))
    result = result & TLEncode(obj.channel_id)

    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.forwards)


proc TLEncodeType*(obj: updateReadChannelDiscussionInbox): seq[uint8] = 
    result = result & TLEncode(int32(482860628))
    if obj.broadcast_id.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.broadcast_post.isSome():
        obj.flags = obj.flags or 1 shl 0

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.channel_id)

    result = result & TLEncode(obj.top_msg_id)

    result = result & TLEncode(obj.read_max_id)

    if obj.broadcast_id.isSome():
        result = result & TLEncode(obj.broadcast_id.get())

    if obj.broadcast_post.isSome():
        result = result & TLEncode(obj.broadcast_post.get())


proc TLEncodeType*(obj: updateReadChannelDiscussionOutbox): seq[uint8] = 
    result = result & TLEncode(int32(1178116716))
    result = result & TLEncode(obj.channel_id)

    result = result & TLEncode(obj.top_msg_id)

    result = result & TLEncode(obj.read_max_id)


proc TLEncodeType*(obj: updatePeerBlocked): seq[uint8] = 
    result = result & TLEncode(int32(610945826))
    result = result & TLEncode(obj.peer_id)

    result = result & TLEncode(obj.blocked)


proc TLEncodeType*(obj: updateChannelUserTyping): seq[uint8] = 
    result = result & TLEncode(int32(-13975905))
    if obj.top_msg_id.isSome():
        obj.flags = obj.flags or 1 shl 0

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.channel_id)

    if obj.top_msg_id.isSome():
        result = result & TLEncode(obj.top_msg_id.get())

    result = result & TLEncode(obj.user_id)

    result = result & TLEncode(obj.action)


proc TLEncodeType*(obj: updatePinnedMessages): seq[uint8] = 
    result = result & TLEncode(int32(-309990731))
    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.messages)

    result = result & TLEncode(obj.pts)

    result = result & TLEncode(obj.pts_count)


proc TLEncodeType*(obj: updatePinnedChannelMessages): seq[uint8] = 
    result = result & TLEncode(int32(-2054649973))
    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.channel_id)

    result = result & TLEncode(obj.messages)

    result = result & TLEncode(obj.pts)

    result = result & TLEncode(obj.pts_count)


proc TLEncodeType*(obj: updates_state): seq[uint8] = 
    result = result & TLEncode(int32(-1519637954))
    result = result & TLEncode(obj.pts)

    result = result & TLEncode(obj.qts)

    result = result & TLEncode(obj.date)

    result = result & TLEncode(obj.seq)

    result = result & TLEncode(obj.unread_count)


proc TLEncodeType*(obj: updates_differenceEmpty): seq[uint8] = 
    result = result & TLEncode(int32(1567990072))
    result = result & TLEncode(obj.date)

    result = result & TLEncode(obj.seq)


proc TLEncodeType*(obj: updates_difference): seq[uint8] = 
    result = result & TLEncode(int32(-191062016))
    result = result & TLEncode(obj.new_messages)

    result = result & TLEncode(obj.new_encrypted_messages)

    result = result & TLEncode(obj.other_updates)

    result = result & TLEncode(obj.chats)

    result = result & TLEncode(obj.users)

    result = result & TLEncode(obj.state)


proc TLEncodeType*(obj: updates_differenceSlice): seq[uint8] = 
    result = result & TLEncode(int32(-1459938943))
    result = result & TLEncode(obj.new_messages)

    result = result & TLEncode(obj.new_encrypted_messages)

    result = result & TLEncode(obj.other_updates)

    result = result & TLEncode(obj.chats)

    result = result & TLEncode(obj.users)

    result = result & TLEncode(obj.intermediate_state)


proc TLEncodeType*(obj: updates_differenceTooLong): seq[uint8] = 
    result = result & TLEncode(int32(1258196845))
    result = result & TLEncode(obj.pts)


proc TLEncodeType*(obj: updatesTooLong): seq[uint8] = 
    result = result & TLEncode(int32(-484987010))

proc TLEncodeType*(obj: updateShortMessage): seq[uint8] = 
    result = result & TLEncode(int32(580309704))
    if obj.fwd_from.isSome():
        obj.flags = obj.flags or 1 shl 2

    if obj.via_bot_id.isSome():
        obj.flags = obj.flags or 1 shl 11

    if obj.reply_to.isSome():
        obj.flags = obj.flags or 1 shl 3

    if obj.entities.isSome():
        obj.flags = obj.flags or 1 shl 7

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.user_id)

    result = result & TLEncode(obj.message)

    result = result & TLEncode(obj.pts)

    result = result & TLEncode(obj.pts_count)

    result = result & TLEncode(obj.date)

    if obj.fwd_from.isSome():
        result = result & TLEncode(obj.fwd_from.get())

    if obj.via_bot_id.isSome():
        result = result & TLEncode(obj.via_bot_id.get())

    if obj.reply_to.isSome():
        result = result & TLEncode(obj.reply_to.get())

    if obj.entities.isSome():
        result = result & TLEncode(obj.entities.get())


proc TLEncodeType*(obj: updateShortChatMessage): seq[uint8] = 
    result = result & TLEncode(int32(1076714939))
    if obj.fwd_from.isSome():
        obj.flags = obj.flags or 1 shl 2

    if obj.via_bot_id.isSome():
        obj.flags = obj.flags or 1 shl 11

    if obj.reply_to.isSome():
        obj.flags = obj.flags or 1 shl 3

    if obj.entities.isSome():
        obj.flags = obj.flags or 1 shl 7

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.from_id)

    result = result & TLEncode(obj.chat_id)

    result = result & TLEncode(obj.message)

    result = result & TLEncode(obj.pts)

    result = result & TLEncode(obj.pts_count)

    result = result & TLEncode(obj.date)

    if obj.fwd_from.isSome():
        result = result & TLEncode(obj.fwd_from.get())

    if obj.via_bot_id.isSome():
        result = result & TLEncode(obj.via_bot_id.get())

    if obj.reply_to.isSome():
        result = result & TLEncode(obj.reply_to.get())

    if obj.entities.isSome():
        result = result & TLEncode(obj.entities.get())


proc TLEncodeType*(obj: updateShort): seq[uint8] = 
    result = result & TLEncode(int32(2027216577))
    result = result & TLEncode(obj.update)

    result = result & TLEncode(obj.date)


proc TLEncodeType*(obj: updatesCombined): seq[uint8] = 
    result = result & TLEncode(int32(1918567619))
    result = result & TLEncode(obj.updates)

    result = result & TLEncode(obj.users)

    result = result & TLEncode(obj.chats)

    result = result & TLEncode(obj.date)

    result = result & TLEncode(obj.seq_start)

    result = result & TLEncode(obj.seq)


proc TLEncodeType*(obj: updates): seq[uint8] = 
    result = result & TLEncode(int32(1957577280))
    result = result & TLEncode(obj.updates)

    result = result & TLEncode(obj.users)

    result = result & TLEncode(obj.chats)

    result = result & TLEncode(obj.date)

    result = result & TLEncode(obj.seq)


proc TLEncodeType*(obj: updateShortSentMessage): seq[uint8] = 
    result = result & TLEncode(int32(301019932))
    if obj.media.isSome():
        obj.flags = obj.flags or 1 shl 9

    if obj.entities.isSome():
        obj.flags = obj.flags or 1 shl 7

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.pts)

    result = result & TLEncode(obj.pts_count)

    result = result & TLEncode(obj.date)

    if obj.media.isSome():
        result = result & TLEncode(obj.media.get())

    if obj.entities.isSome():
        result = result & TLEncode(obj.entities.get())


proc TLEncodeType*(obj: photos_photos): seq[uint8] = 
    result = result & TLEncode(int32(-1916114267))
    result = result & TLEncode(obj.photos)

    result = result & TLEncode(obj.users)


proc TLEncodeType*(obj: photos_photosSlice): seq[uint8] = 
    result = result & TLEncode(int32(352657236))
    result = result & TLEncode(obj.count)

    result = result & TLEncode(obj.photos)

    result = result & TLEncode(obj.users)


proc TLEncodeType*(obj: photos_photo): seq[uint8] = 
    result = result & TLEncode(int32(539045032))
    result = result & TLEncode(obj.photo)

    result = result & TLEncode(obj.users)


proc TLEncodeType*(obj: upload_file): seq[uint8] = 
    result = result & TLEncode(int32(-1767797424))
    result = result & TLEncode(obj.typeof)

    result = result & TLEncode(obj.mtime)

    result = result & TLEncode(obj.bytes)


proc TLEncodeType*(obj: upload_fileCdnRedirect): seq[uint8] = 
    result = result & TLEncode(int32(-242427324))
    result = result & TLEncode(obj.dc_id)

    result = result & TLEncode(obj.file_token)

    result = result & TLEncode(obj.encryption_key)

    result = result & TLEncode(obj.encryption_iv)

    result = result & TLEncode(obj.file_hashes)


proc TLEncodeType*(obj: dcOption): seq[uint8] = 
    result = result & TLEncode(int32(414687501))
    if obj.secret.isSome():
        obj.flags = obj.flags or 1 shl 10

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.ip_address)

    result = result & TLEncode(obj.port)

    if obj.secret.isSome():
        result = result & TLEncode(obj.secret.get())


proc TLEncodeType*(obj: config): seq[uint8] = 
    result = result & TLEncode(int32(856375399))
    if obj.tmp_sessions.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.autoupdate_url_prefix.isSome():
        obj.flags = obj.flags or 1 shl 7

    if obj.gif_search_username.isSome():
        obj.flags = obj.flags or 1 shl 9

    if obj.venue_search_username.isSome():
        obj.flags = obj.flags or 1 shl 10

    if obj.img_search_username.isSome():
        obj.flags = obj.flags or 1 shl 11

    if obj.static_maps_provider.isSome():
        obj.flags = obj.flags or 1 shl 12

    if obj.suggested_lang_code.isSome():
        obj.flags = obj.flags or 1 shl 2

    if obj.lang_pack_version.isSome():
        obj.flags = obj.flags or 1 shl 2

    if obj.base_lang_pack_version.isSome():
        obj.flags = obj.flags or 1 shl 2

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.date)

    result = result & TLEncode(obj.expires)

    result = result & TLEncode(obj.test_mode)

    result = result & TLEncode(obj.this_dc)

    result = result & TLEncode(obj.dc_options)

    result = result & TLEncode(obj.dc_txt_domain_name)

    result = result & TLEncode(obj.chat_size_max)

    result = result & TLEncode(obj.megagroup_size_max)

    result = result & TLEncode(obj.forwarded_count_max)

    result = result & TLEncode(obj.online_update_period_ms)

    result = result & TLEncode(obj.offline_blur_timeout_ms)

    result = result & TLEncode(obj.offline_idle_timeout_ms)

    result = result & TLEncode(obj.online_cloud_timeout_ms)

    result = result & TLEncode(obj.notify_cloud_delay_ms)

    result = result & TLEncode(obj.notify_default_delay_ms)

    result = result & TLEncode(obj.push_chat_period_ms)

    result = result & TLEncode(obj.push_chat_limit)

    result = result & TLEncode(obj.saved_gifs_limit)

    result = result & TLEncode(obj.edit_time_limit)

    result = result & TLEncode(obj.revoke_time_limit)

    result = result & TLEncode(obj.revoke_pm_time_limit)

    result = result & TLEncode(obj.rating_e_decay)

    result = result & TLEncode(obj.stickers_recent_limit)

    result = result & TLEncode(obj.stickers_faved_limit)

    result = result & TLEncode(obj.channels_read_media_period)

    if obj.tmp_sessions.isSome():
        result = result & TLEncode(obj.tmp_sessions.get())

    result = result & TLEncode(obj.pinned_dialogs_count_max)

    result = result & TLEncode(obj.pinned_infolder_count_max)

    result = result & TLEncode(obj.call_receive_timeout_ms)

    result = result & TLEncode(obj.call_ring_timeout_ms)

    result = result & TLEncode(obj.call_connect_timeout_ms)

    result = result & TLEncode(obj.call_packet_timeout_ms)

    result = result & TLEncode(obj.me_url_prefix)

    if obj.autoupdate_url_prefix.isSome():
        result = result & TLEncode(obj.autoupdate_url_prefix.get())

    if obj.gif_search_username.isSome():
        result = result & TLEncode(obj.gif_search_username.get())

    if obj.venue_search_username.isSome():
        result = result & TLEncode(obj.venue_search_username.get())

    if obj.img_search_username.isSome():
        result = result & TLEncode(obj.img_search_username.get())

    if obj.static_maps_provider.isSome():
        result = result & TLEncode(obj.static_maps_provider.get())

    result = result & TLEncode(obj.caption_length_max)

    result = result & TLEncode(obj.message_length_max)

    result = result & TLEncode(obj.webfile_dc_id)

    if obj.suggested_lang_code.isSome():
        result = result & TLEncode(obj.suggested_lang_code.get())

    if obj.lang_pack_version.isSome():
        result = result & TLEncode(obj.lang_pack_version.get())

    if obj.base_lang_pack_version.isSome():
        result = result & TLEncode(obj.base_lang_pack_version.get())


proc TLEncodeType*(obj: nearestDc): seq[uint8] = 
    result = result & TLEncode(int32(-1910892683))
    result = result & TLEncode(obj.country)

    result = result & TLEncode(obj.this_dc)

    result = result & TLEncode(obj.nearest_dc)


proc TLEncodeType*(obj: help_appUpdate): seq[uint8] = 
    result = result & TLEncode(int32(497489295))
    if obj.document.isSome():
        obj.flags = obj.flags or 1 shl 1

    if obj.url.isSome():
        obj.flags = obj.flags or 1 shl 2

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.version)

    result = result & TLEncode(obj.text)

    result = result & TLEncode(obj.entities)

    if obj.document.isSome():
        result = result & TLEncode(obj.document.get())

    if obj.url.isSome():
        result = result & TLEncode(obj.url.get())


proc TLEncodeType*(obj: help_noAppUpdate): seq[uint8] = 
    result = result & TLEncode(int32(-1000708810))

proc TLEncodeType*(obj: help_inviteText): seq[uint8] = 
    result = result & TLEncode(int32(415997816))
    result = result & TLEncode(obj.message)


proc TLEncodeType*(obj: encryptedChatEmpty): seq[uint8] = 
    result = result & TLEncode(int32(-1417756512))
    result = result & TLEncode(obj.id)


proc TLEncodeType*(obj: encryptedChatWaiting): seq[uint8] = 
    result = result & TLEncode(int32(1006044124))
    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.access_hash)

    result = result & TLEncode(obj.date)

    result = result & TLEncode(obj.admin_id)

    result = result & TLEncode(obj.participant_id)


proc TLEncodeType*(obj: encryptedChatRequested): seq[uint8] = 
    result = result & TLEncode(int32(1651608194))
    if obj.folder_id.isSome():
        obj.flags = obj.flags or 1 shl 0

    result = result & TLEncode(obj.flags)

    if obj.folder_id.isSome():
        result = result & TLEncode(obj.folder_id.get())

    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.access_hash)

    result = result & TLEncode(obj.date)

    result = result & TLEncode(obj.admin_id)

    result = result & TLEncode(obj.participant_id)

    result = result & TLEncode(obj.g_a)


proc TLEncodeType*(obj: encryptedChat): seq[uint8] = 
    result = result & TLEncode(int32(-94974410))
    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.access_hash)

    result = result & TLEncode(obj.date)

    result = result & TLEncode(obj.admin_id)

    result = result & TLEncode(obj.participant_id)

    result = result & TLEncode(obj.g_a_or_b)

    result = result & TLEncode(obj.key_fingerprint)


proc TLEncodeType*(obj: encryptedChatDiscarded): seq[uint8] = 
    result = result & TLEncode(int32(332848423))
    result = result & TLEncode(obj.id)


proc TLEncodeType*(obj: inputEncryptedChat): seq[uint8] = 
    result = result & TLEncode(int32(-247351839))
    result = result & TLEncode(obj.chat_id)

    result = result & TLEncode(obj.access_hash)


proc TLEncodeType*(obj: encryptedFileEmpty): seq[uint8] = 
    result = result & TLEncode(int32(-1038136962))

proc TLEncodeType*(obj: encryptedFile): seq[uint8] = 
    result = result & TLEncode(int32(1248893260))
    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.access_hash)

    result = result & TLEncode(obj.size)

    result = result & TLEncode(obj.dc_id)

    result = result & TLEncode(obj.key_fingerprint)


proc TLEncodeType*(obj: inputEncryptedFileEmpty): seq[uint8] = 
    result = result & TLEncode(int32(406307684))

proc TLEncodeType*(obj: inputEncryptedFileUploaded): seq[uint8] = 
    result = result & TLEncode(int32(1690108678))
    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.parts)

    result = result & TLEncode(obj.md5_checksum)

    result = result & TLEncode(obj.key_fingerprint)


proc TLEncodeType*(obj: inputEncryptedFile): seq[uint8] = 
    result = result & TLEncode(int32(1511503333))
    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.access_hash)


proc TLEncodeType*(obj: inputEncryptedFileBigUploaded): seq[uint8] = 
    result = result & TLEncode(int32(767652808))
    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.parts)

    result = result & TLEncode(obj.key_fingerprint)


proc TLEncodeType*(obj: encryptedMessage): seq[uint8] = 
    result = result & TLEncode(int32(-317144808))
    result = result & TLEncode(obj.random_id)

    result = result & TLEncode(obj.chat_id)

    result = result & TLEncode(obj.date)

    result = result & TLEncode(obj.bytes)

    result = result & TLEncode(obj.file)


proc TLEncodeType*(obj: encryptedMessageService): seq[uint8] = 
    result = result & TLEncode(int32(594758406))
    result = result & TLEncode(obj.random_id)

    result = result & TLEncode(obj.chat_id)

    result = result & TLEncode(obj.date)

    result = result & TLEncode(obj.bytes)


proc TLEncodeType*(obj: messages_dhConfigNotModified): seq[uint8] = 
    result = result & TLEncode(int32(-1058912715))
    result = result & TLEncode(obj.random)


proc TLEncodeType*(obj: messages_dhConfig): seq[uint8] = 
    result = result & TLEncode(int32(740433629))
    result = result & TLEncode(obj.g)

    result = result & TLEncode(obj.p)

    result = result & TLEncode(obj.version)

    result = result & TLEncode(obj.random)


proc TLEncodeType*(obj: messages_sentEncryptedMessage): seq[uint8] = 
    result = result & TLEncode(int32(1443858741))
    result = result & TLEncode(obj.date)


proc TLEncodeType*(obj: messages_sentEncryptedFile): seq[uint8] = 
    result = result & TLEncode(int32(-1802240206))
    result = result & TLEncode(obj.date)

    result = result & TLEncode(obj.file)


proc TLEncodeType*(obj: inputDocumentEmpty): seq[uint8] = 
    result = result & TLEncode(int32(1928391342))

proc TLEncodeType*(obj: inputDocument): seq[uint8] = 
    result = result & TLEncode(int32(448771445))
    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.access_hash)

    result = result & TLEncode(obj.file_reference)


proc TLEncodeType*(obj: documentEmpty): seq[uint8] = 
    result = result & TLEncode(int32(922273905))
    result = result & TLEncode(obj.id)


proc TLEncodeType*(obj: document): seq[uint8] = 
    result = result & TLEncode(int32(512177195))
    if obj.thumbs.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.video_thumbs.isSome():
        obj.flags = obj.flags or 1 shl 1

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.access_hash)

    result = result & TLEncode(obj.file_reference)

    result = result & TLEncode(obj.date)

    result = result & TLEncode(obj.mime_type)

    result = result & TLEncode(obj.size)

    if obj.thumbs.isSome():
        result = result & TLEncode(obj.thumbs.get())

    if obj.video_thumbs.isSome():
        result = result & TLEncode(obj.video_thumbs.get())

    result = result & TLEncode(obj.dc_id)

    result = result & TLEncode(obj.attributes)


proc TLEncodeType*(obj: help_support): seq[uint8] = 
    result = result & TLEncode(int32(398898678))
    result = result & TLEncode(obj.phone_number)

    result = result & TLEncode(obj.user)


proc TLEncodeType*(obj: notifyPeer): seq[uint8] = 
    result = result & TLEncode(int32(-1613493288))
    result = result & TLEncode(obj.peer)


proc TLEncodeType*(obj: notifyUsers): seq[uint8] = 
    result = result & TLEncode(int32(-1261946036))

proc TLEncodeType*(obj: notifyChats): seq[uint8] = 
    result = result & TLEncode(int32(-1073230141))

proc TLEncodeType*(obj: notifyBroadcasts): seq[uint8] = 
    result = result & TLEncode(int32(-703403793))

proc TLEncodeType*(obj: sendMessageTypingAction): seq[uint8] = 
    result = result & TLEncode(int32(381645902))

proc TLEncodeType*(obj: sendMessageCancelAction): seq[uint8] = 
    result = result & TLEncode(int32(-44119819))

proc TLEncodeType*(obj: sendMessageRecordVideoAction): seq[uint8] = 
    result = result & TLEncode(int32(-1584933265))

proc TLEncodeType*(obj: sendMessageUploadVideoAction): seq[uint8] = 
    result = result & TLEncode(int32(-378127636))
    result = result & TLEncode(obj.progress)


proc TLEncodeType*(obj: sendMessageRecordAudioAction): seq[uint8] = 
    result = result & TLEncode(int32(-718310409))

proc TLEncodeType*(obj: sendMessageUploadAudioAction): seq[uint8] = 
    result = result & TLEncode(int32(-212740181))
    result = result & TLEncode(obj.progress)


proc TLEncodeType*(obj: sendMessageUploadPhotoAction): seq[uint8] = 
    result = result & TLEncode(int32(-774682074))
    result = result & TLEncode(obj.progress)


proc TLEncodeType*(obj: sendMessageUploadDocumentAction): seq[uint8] = 
    result = result & TLEncode(int32(-1441998364))
    result = result & TLEncode(obj.progress)


proc TLEncodeType*(obj: sendMessageGeoLocationAction): seq[uint8] = 
    result = result & TLEncode(int32(393186209))

proc TLEncodeType*(obj: sendMessageChooseContactAction): seq[uint8] = 
    result = result & TLEncode(int32(1653390447))

proc TLEncodeType*(obj: sendMessageGamePlayAction): seq[uint8] = 
    result = result & TLEncode(int32(-580219064))

proc TLEncodeType*(obj: sendMessageRecordRoundAction): seq[uint8] = 
    result = result & TLEncode(int32(-1997373508))

proc TLEncodeType*(obj: sendMessageUploadRoundAction): seq[uint8] = 
    result = result & TLEncode(int32(608050278))
    result = result & TLEncode(obj.progress)


proc TLEncodeType*(obj: contacts_found): seq[uint8] = 
    result = result & TLEncode(int32(-1290580579))
    result = result & TLEncode(obj.my_results)

    result = result & TLEncode(obj.results)

    result = result & TLEncode(obj.chats)

    result = result & TLEncode(obj.users)


proc TLEncodeType*(obj: inputPrivacyKeyStatusTimestamp): seq[uint8] = 
    result = result & TLEncode(int32(1335282456))

proc TLEncodeType*(obj: inputPrivacyKeyChatInvite): seq[uint8] = 
    result = result & TLEncode(int32(-1107622874))

proc TLEncodeType*(obj: inputPrivacyKeyPhoneCall): seq[uint8] = 
    result = result & TLEncode(int32(-88417185))

proc TLEncodeType*(obj: inputPrivacyKeyPhoneP2P): seq[uint8] = 
    result = result & TLEncode(int32(-610373422))

proc TLEncodeType*(obj: inputPrivacyKeyForwards): seq[uint8] = 
    result = result & TLEncode(int32(-1529000952))

proc TLEncodeType*(obj: inputPrivacyKeyProfilePhoto): seq[uint8] = 
    result = result & TLEncode(int32(1461304012))

proc TLEncodeType*(obj: inputPrivacyKeyPhoneNumber): seq[uint8] = 
    result = result & TLEncode(int32(892186528))

proc TLEncodeType*(obj: inputPrivacyKeyAddedByPhone): seq[uint8] = 
    result = result & TLEncode(int32(-786326563))

proc TLEncodeType*(obj: privacyKeyStatusTimestamp): seq[uint8] = 
    result = result & TLEncode(int32(-1137792208))

proc TLEncodeType*(obj: privacyKeyChatInvite): seq[uint8] = 
    result = result & TLEncode(int32(1343122938))

proc TLEncodeType*(obj: privacyKeyPhoneCall): seq[uint8] = 
    result = result & TLEncode(int32(1030105979))

proc TLEncodeType*(obj: privacyKeyPhoneP2P): seq[uint8] = 
    result = result & TLEncode(int32(961092808))

proc TLEncodeType*(obj: privacyKeyForwards): seq[uint8] = 
    result = result & TLEncode(int32(1777096355))

proc TLEncodeType*(obj: privacyKeyProfilePhoto): seq[uint8] = 
    result = result & TLEncode(int32(-1777000467))

proc TLEncodeType*(obj: privacyKeyPhoneNumber): seq[uint8] = 
    result = result & TLEncode(int32(-778378131))

proc TLEncodeType*(obj: privacyKeyAddedByPhone): seq[uint8] = 
    result = result & TLEncode(int32(1124062251))

proc TLEncodeType*(obj: inputPrivacyValueAllowContacts): seq[uint8] = 
    result = result & TLEncode(int32(-794949712))

proc TLEncodeType*(obj: inputPrivacyValueAllowAll): seq[uint8] = 
    result = result & TLEncode(int32(407582158))

proc TLEncodeType*(obj: inputPrivacyValueAllowUsers): seq[uint8] = 
    result = result & TLEncode(int32(320652927))
    result = result & TLEncode(obj.users)


proc TLEncodeType*(obj: inputPrivacyValueDisallowContacts): seq[uint8] = 
    result = result & TLEncode(int32(-1169031056))

proc TLEncodeType*(obj: inputPrivacyValueDisallowAll): seq[uint8] = 
    result = result & TLEncode(int32(-697604407))

proc TLEncodeType*(obj: inputPrivacyValueDisallowUsers): seq[uint8] = 
    result = result & TLEncode(int32(-1877932953))
    result = result & TLEncode(obj.users)


proc TLEncodeType*(obj: inputPrivacyValueAllowChatParticipants): seq[uint8] = 
    result = result & TLEncode(int32(1283572154))
    result = result & TLEncode(obj.chats)


proc TLEncodeType*(obj: inputPrivacyValueDisallowChatParticipants): seq[uint8] = 
    result = result & TLEncode(int32(-668769361))
    result = result & TLEncode(obj.chats)


proc TLEncodeType*(obj: privacyValueAllowContacts): seq[uint8] = 
    result = result & TLEncode(int32(-123988))

proc TLEncodeType*(obj: privacyValueAllowAll): seq[uint8] = 
    result = result & TLEncode(int32(1698855810))

proc TLEncodeType*(obj: privacyValueAllowUsers): seq[uint8] = 
    result = result & TLEncode(int32(1297858060))
    result = result & TLEncode(obj.users)


proc TLEncodeType*(obj: privacyValueDisallowContacts): seq[uint8] = 
    result = result & TLEncode(int32(-125240806))

proc TLEncodeType*(obj: privacyValueDisallowAll): seq[uint8] = 
    result = result & TLEncode(int32(-1955338397))

proc TLEncodeType*(obj: privacyValueDisallowUsers): seq[uint8] = 
    result = result & TLEncode(int32(-940270736))
    result = result & TLEncode(obj.users)


proc TLEncodeType*(obj: privacyValueAllowChatParticipants): seq[uint8] = 
    result = result & TLEncode(int32(415136107))
    result = result & TLEncode(obj.chats)


proc TLEncodeType*(obj: privacyValueDisallowChatParticipants): seq[uint8] = 
    result = result & TLEncode(int32(-1397881200))
    result = result & TLEncode(obj.chats)


proc TLEncodeType*(obj: account_privacyRules): seq[uint8] = 
    result = result & TLEncode(int32(1352683077))
    result = result & TLEncode(obj.rules)

    result = result & TLEncode(obj.chats)

    result = result & TLEncode(obj.users)


proc TLEncodeType*(obj: accountDaysTTL): seq[uint8] = 
    result = result & TLEncode(int32(-1194283041))
    result = result & TLEncode(obj.days)


proc TLEncodeType*(obj: documentAttributeImageSize): seq[uint8] = 
    result = result & TLEncode(int32(1815593308))
    result = result & TLEncode(obj.w)

    result = result & TLEncode(obj.h)


proc TLEncodeType*(obj: documentAttributeAnimated): seq[uint8] = 
    result = result & TLEncode(int32(297109817))

proc TLEncodeType*(obj: documentAttributeSticker): seq[uint8] = 
    result = result & TLEncode(int32(1662637586))
    if obj.mask_coords.isSome():
        obj.flags = obj.flags or 1 shl 0

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.alt)

    result = result & TLEncode(obj.stickerset)

    if obj.mask_coords.isSome():
        result = result & TLEncode(obj.mask_coords.get())


proc TLEncodeType*(obj: documentAttributeVideo): seq[uint8] = 
    result = result & TLEncode(int32(-285028768))
    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.duration)

    result = result & TLEncode(obj.w)

    result = result & TLEncode(obj.h)


proc TLEncodeType*(obj: documentAttributeAudio): seq[uint8] = 
    result = result & TLEncode(int32(-1739392570))
    if obj.title.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.performer.isSome():
        obj.flags = obj.flags or 1 shl 1

    if obj.waveform.isSome():
        obj.flags = obj.flags or 1 shl 2

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.duration)

    if obj.title.isSome():
        result = result & TLEncode(obj.title.get())

    if obj.performer.isSome():
        result = result & TLEncode(obj.performer.get())

    if obj.waveform.isSome():
        result = result & TLEncode(obj.waveform.get())


proc TLEncodeType*(obj: documentAttributeFilename): seq[uint8] = 
    result = result & TLEncode(int32(358154344))
    result = result & TLEncode(obj.file_name)


proc TLEncodeType*(obj: documentAttributeHasStickers): seq[uint8] = 
    result = result & TLEncode(int32(-1744710921))

proc TLEncodeType*(obj: messages_stickersNotModified): seq[uint8] = 
    result = result & TLEncode(int32(-244016606))

proc TLEncodeType*(obj: messages_stickers): seq[uint8] = 
    result = result & TLEncode(int32(-463889475))
    result = result & TLEncode(obj.hash)

    result = result & TLEncode(obj.stickers)


proc TLEncodeType*(obj: stickerPack): seq[uint8] = 
    result = result & TLEncode(int32(313694676))
    result = result & TLEncode(obj.emoticon)

    result = result & TLEncode(obj.documents)


proc TLEncodeType*(obj: messages_allStickersNotModified): seq[uint8] = 
    result = result & TLEncode(int32(-395967805))

proc TLEncodeType*(obj: messages_allStickers): seq[uint8] = 
    result = result & TLEncode(int32(-302170017))
    result = result & TLEncode(obj.hash)

    result = result & TLEncode(obj.sets)


proc TLEncodeType*(obj: messages_affectedMessages): seq[uint8] = 
    result = result & TLEncode(int32(-2066640507))
    result = result & TLEncode(obj.pts)

    result = result & TLEncode(obj.pts_count)


proc TLEncodeType*(obj: webPageEmpty): seq[uint8] = 
    result = result & TLEncode(int32(-350980120))
    result = result & TLEncode(obj.id)


proc TLEncodeType*(obj: webPagePending): seq[uint8] = 
    result = result & TLEncode(int32(-981018084))
    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.date)


proc TLEncodeType*(obj: webPage): seq[uint8] = 
    result = result & TLEncode(int32(-392411726))
    if obj.typeof.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.site_name.isSome():
        obj.flags = obj.flags or 1 shl 1

    if obj.title.isSome():
        obj.flags = obj.flags or 1 shl 2

    if obj.description.isSome():
        obj.flags = obj.flags or 1 shl 3

    if obj.photo.isSome():
        obj.flags = obj.flags or 1 shl 4

    if obj.embed_url.isSome():
        obj.flags = obj.flags or 1 shl 5

    if obj.embed_type.isSome():
        obj.flags = obj.flags or 1 shl 5

    if obj.embed_width.isSome():
        obj.flags = obj.flags or 1 shl 6

    if obj.embed_height.isSome():
        obj.flags = obj.flags or 1 shl 6

    if obj.duration.isSome():
        obj.flags = obj.flags or 1 shl 7

    if obj.author.isSome():
        obj.flags = obj.flags or 1 shl 8

    if obj.document.isSome():
        obj.flags = obj.flags or 1 shl 9

    if obj.cached_page.isSome():
        obj.flags = obj.flags or 1 shl 10

    if obj.attributes.isSome():
        obj.flags = obj.flags or 1 shl 12

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.url)

    result = result & TLEncode(obj.display_url)

    result = result & TLEncode(obj.hash)

    if obj.typeof.isSome():
        result = result & TLEncode(obj.typeof.get())

    if obj.site_name.isSome():
        result = result & TLEncode(obj.site_name.get())

    if obj.title.isSome():
        result = result & TLEncode(obj.title.get())

    if obj.description.isSome():
        result = result & TLEncode(obj.description.get())

    if obj.photo.isSome():
        result = result & TLEncode(obj.photo.get())

    if obj.embed_url.isSome():
        result = result & TLEncode(obj.embed_url.get())

    if obj.embed_type.isSome():
        result = result & TLEncode(obj.embed_type.get())

    if obj.embed_width.isSome():
        result = result & TLEncode(obj.embed_width.get())

    if obj.embed_height.isSome():
        result = result & TLEncode(obj.embed_height.get())

    if obj.duration.isSome():
        result = result & TLEncode(obj.duration.get())

    if obj.author.isSome():
        result = result & TLEncode(obj.author.get())

    if obj.document.isSome():
        result = result & TLEncode(obj.document.get())

    if obj.cached_page.isSome():
        result = result & TLEncode(obj.cached_page.get())

    if obj.attributes.isSome():
        result = result & TLEncode(obj.attributes.get())


proc TLEncodeType*(obj: webPageNotModified): seq[uint8] = 
    result = result & TLEncode(int32(1930545681))
    if obj.cached_page_views.isSome():
        obj.flags = obj.flags or 1 shl 0

    result = result & TLEncode(obj.flags)

    if obj.cached_page_views.isSome():
        result = result & TLEncode(obj.cached_page_views.get())


proc TLEncodeType*(obj: authorization): seq[uint8] = 
    result = result & TLEncode(int32(-1392388579))
    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.hash)

    result = result & TLEncode(obj.device_model)

    result = result & TLEncode(obj.platform)

    result = result & TLEncode(obj.system_version)

    result = result & TLEncode(obj.api_id)

    result = result & TLEncode(obj.app_name)

    result = result & TLEncode(obj.app_version)

    result = result & TLEncode(obj.date_created)

    result = result & TLEncode(obj.date_active)

    result = result & TLEncode(obj.ip)

    result = result & TLEncode(obj.country)

    result = result & TLEncode(obj.region)


proc TLEncodeType*(obj: account_authorizations): seq[uint8] = 
    result = result & TLEncode(int32(307276766))
    result = result & TLEncode(obj.authorizations)


proc TLEncodeType*(obj: account_password): seq[uint8] = 
    result = result & TLEncode(int32(-1390001672))
    if obj.current_algo.isSome():
        obj.flags = obj.flags or 1 shl 2

    if obj.srp_B.isSome():
        obj.flags = obj.flags or 1 shl 2

    if obj.srp_id.isSome():
        obj.flags = obj.flags or 1 shl 2

    if obj.hint.isSome():
        obj.flags = obj.flags or 1 shl 3

    if obj.email_unconfirmed_pattern.isSome():
        obj.flags = obj.flags or 1 shl 4

    result = result & TLEncode(obj.flags)

    if obj.current_algo.isSome():
        result = result & TLEncode(obj.current_algo.get())

    if obj.srp_B.isSome():
        result = result & TLEncode(obj.srp_B.get())

    if obj.srp_id.isSome():
        result = result & TLEncode(obj.srp_id.get())

    if obj.hint.isSome():
        result = result & TLEncode(obj.hint.get())

    if obj.email_unconfirmed_pattern.isSome():
        result = result & TLEncode(obj.email_unconfirmed_pattern.get())

    result = result & TLEncode(obj.new_algo)

    result = result & TLEncode(obj.new_secure_algo)

    result = result & TLEncode(obj.secure_random)


proc TLEncodeType*(obj: account_passwordSettings): seq[uint8] = 
    result = result & TLEncode(int32(-1705233435))
    if obj.email.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.secure_settings.isSome():
        obj.flags = obj.flags or 1 shl 1

    result = result & TLEncode(obj.flags)

    if obj.email.isSome():
        result = result & TLEncode(obj.email.get())

    if obj.secure_settings.isSome():
        result = result & TLEncode(obj.secure_settings.get())


proc TLEncodeType*(obj: account_passwordInputSettings): seq[uint8] = 
    result = result & TLEncode(int32(-1036572727))
    if obj.new_algo.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.new_password_hash.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.hint.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.email.isSome():
        obj.flags = obj.flags or 1 shl 1

    if obj.new_secure_settings.isSome():
        obj.flags = obj.flags or 1 shl 2

    result = result & TLEncode(obj.flags)

    if obj.new_algo.isSome():
        result = result & TLEncode(obj.new_algo.get())

    if obj.new_password_hash.isSome():
        result = result & TLEncode(obj.new_password_hash.get())

    if obj.hint.isSome():
        result = result & TLEncode(obj.hint.get())

    if obj.email.isSome():
        result = result & TLEncode(obj.email.get())

    if obj.new_secure_settings.isSome():
        result = result & TLEncode(obj.new_secure_settings.get())


proc TLEncodeType*(obj: auth_passwordRecovery): seq[uint8] = 
    result = result & TLEncode(int32(326715557))
    result = result & TLEncode(obj.email_pattern)


proc TLEncodeType*(obj: receivedNotifyMessage): seq[uint8] = 
    result = result & TLEncode(int32(-1551583367))
    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.flags)


proc TLEncodeType*(obj: chatInviteEmpty): seq[uint8] = 
    result = result & TLEncode(int32(1776236393))

proc TLEncodeType*(obj: chatInviteExported): seq[uint8] = 
    result = result & TLEncode(int32(-64092740))
    result = result & TLEncode(obj.link)


proc TLEncodeType*(obj: chatInviteAlready): seq[uint8] = 
    result = result & TLEncode(int32(1516793212))
    result = result & TLEncode(obj.chat)


proc TLEncodeType*(obj: chatInvite): seq[uint8] = 
    result = result & TLEncode(int32(-540871282))
    if obj.participants.isSome():
        obj.flags = obj.flags or 1 shl 4

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.title)

    result = result & TLEncode(obj.photo)

    result = result & TLEncode(obj.participants_count)

    if obj.participants.isSome():
        result = result & TLEncode(obj.participants.get())


proc TLEncodeType*(obj: chatInvitePeek): seq[uint8] = 
    result = result & TLEncode(int32(1634294960))
    result = result & TLEncode(obj.chat)

    result = result & TLEncode(obj.expires)


proc TLEncodeType*(obj: inputStickerSetEmpty): seq[uint8] = 
    result = result & TLEncode(int32(-4838507))

proc TLEncodeType*(obj: inputStickerSetID): seq[uint8] = 
    result = result & TLEncode(int32(-1645763991))
    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.access_hash)


proc TLEncodeType*(obj: inputStickerSetShortName): seq[uint8] = 
    result = result & TLEncode(int32(-2044933984))
    result = result & TLEncode(obj.short_name)


proc TLEncodeType*(obj: inputStickerSetAnimatedEmoji): seq[uint8] = 
    result = result & TLEncode(int32(678444160))

proc TLEncodeType*(obj: inputStickerSetDice): seq[uint8] = 
    result = result & TLEncode(int32(-427863538))
    result = result & TLEncode(obj.emoticon)


proc TLEncodeType*(obj: stickerSet): seq[uint8] = 
    result = result & TLEncode(int32(-290164953))
    if obj.installed_date.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.thumb.isSome():
        obj.flags = obj.flags or 1 shl 4

    if obj.thumb_dc_id.isSome():
        obj.flags = obj.flags or 1 shl 4

    result = result & TLEncode(obj.flags)

    if obj.installed_date.isSome():
        result = result & TLEncode(obj.installed_date.get())

    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.access_hash)

    result = result & TLEncode(obj.title)

    result = result & TLEncode(obj.short_name)

    if obj.thumb.isSome():
        result = result & TLEncode(obj.thumb.get())

    if obj.thumb_dc_id.isSome():
        result = result & TLEncode(obj.thumb_dc_id.get())

    result = result & TLEncode(obj.count)

    result = result & TLEncode(obj.hash)


proc TLEncodeType*(obj: messages_stickerSet): seq[uint8] = 
    result = result & TLEncode(int32(-1240849242))
    result = result & TLEncode(obj.set)

    result = result & TLEncode(obj.packs)

    result = result & TLEncode(obj.documents)


proc TLEncodeType*(obj: botCommand): seq[uint8] = 
    result = result & TLEncode(int32(-1032140601))
    result = result & TLEncode(obj.command)

    result = result & TLEncode(obj.description)


proc TLEncodeType*(obj: botInfo): seq[uint8] = 
    result = result & TLEncode(int32(-1729618630))
    result = result & TLEncode(obj.user_id)

    result = result & TLEncode(obj.description)

    result = result & TLEncode(obj.commands)


proc TLEncodeType*(obj: keyboardButton): seq[uint8] = 
    result = result & TLEncode(int32(-1560655744))
    result = result & TLEncode(obj.text)


proc TLEncodeType*(obj: keyboardButtonUrl): seq[uint8] = 
    result = result & TLEncode(int32(629866245))
    result = result & TLEncode(obj.text)

    result = result & TLEncode(obj.url)


proc TLEncodeType*(obj: keyboardButtonCallback): seq[uint8] = 
    result = result & TLEncode(int32(901503851))
    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.text)

    result = result & TLEncode(obj.data)


proc TLEncodeType*(obj: keyboardButtonRequestPhone): seq[uint8] = 
    result = result & TLEncode(int32(-1318425559))
    result = result & TLEncode(obj.text)


proc TLEncodeType*(obj: keyboardButtonRequestGeoLocation): seq[uint8] = 
    result = result & TLEncode(int32(-59151553))
    result = result & TLEncode(obj.text)


proc TLEncodeType*(obj: keyboardButtonSwitchInline): seq[uint8] = 
    result = result & TLEncode(int32(1451914368))
    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.text)

    result = result & TLEncode(obj.query)


proc TLEncodeType*(obj: keyboardButtonGame): seq[uint8] = 
    result = result & TLEncode(int32(1358175439))
    result = result & TLEncode(obj.text)


proc TLEncodeType*(obj: keyboardButtonBuy): seq[uint8] = 
    result = result & TLEncode(int32(-1344716869))
    result = result & TLEncode(obj.text)


proc TLEncodeType*(obj: keyboardButtonUrlAuth): seq[uint8] = 
    result = result & TLEncode(int32(280464681))
    if obj.fwd_text.isSome():
        obj.flags = obj.flags or 1 shl 0

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.text)

    if obj.fwd_text.isSome():
        result = result & TLEncode(obj.fwd_text.get())

    result = result & TLEncode(obj.url)

    result = result & TLEncode(obj.button_id)


proc TLEncodeType*(obj: inputKeyboardButtonUrlAuth): seq[uint8] = 
    result = result & TLEncode(int32(-802258988))
    if obj.fwd_text.isSome():
        obj.flags = obj.flags or 1 shl 1

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.text)

    if obj.fwd_text.isSome():
        result = result & TLEncode(obj.fwd_text.get())

    result = result & TLEncode(obj.url)

    result = result & TLEncode(obj.bot)


proc TLEncodeType*(obj: keyboardButtonRequestPoll): seq[uint8] = 
    result = result & TLEncode(int32(-1144565411))
    if obj.quiz.isSome():
        obj.flags = obj.flags or 1 shl 0

    result = result & TLEncode(obj.flags)

    if obj.quiz.isSome():
        result = result & TLEncode(obj.quiz.get())

    result = result & TLEncode(obj.text)


proc TLEncodeType*(obj: keyboardButtonRow): seq[uint8] = 
    result = result & TLEncode(int32(2002815875))
    result = result & TLEncode(obj.buttons)


proc TLEncodeType*(obj: replyKeyboardHide): seq[uint8] = 
    result = result & TLEncode(int32(-1606526075))
    result = result & TLEncode(obj.flags)


proc TLEncodeType*(obj: replyKeyboardForceReply): seq[uint8] = 
    result = result & TLEncode(int32(-200242528))
    result = result & TLEncode(obj.flags)


proc TLEncodeType*(obj: replyKeyboardMarkup): seq[uint8] = 
    result = result & TLEncode(int32(889353612))
    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.rows)


proc TLEncodeType*(obj: replyInlineMarkup): seq[uint8] = 
    result = result & TLEncode(int32(1218642516))
    result = result & TLEncode(obj.rows)


proc TLEncodeType*(obj: messageEntityUnknown): seq[uint8] = 
    result = result & TLEncode(int32(-1148011883))
    result = result & TLEncode(obj.offset)

    result = result & TLEncode(obj.length)


proc TLEncodeType*(obj: messageEntityMention): seq[uint8] = 
    result = result & TLEncode(int32(-100378723))
    result = result & TLEncode(obj.offset)

    result = result & TLEncode(obj.length)


proc TLEncodeType*(obj: messageEntityHashtag): seq[uint8] = 
    result = result & TLEncode(int32(1868782349))
    result = result & TLEncode(obj.offset)

    result = result & TLEncode(obj.length)


proc TLEncodeType*(obj: messageEntityBotCommand): seq[uint8] = 
    result = result & TLEncode(int32(1827637959))
    result = result & TLEncode(obj.offset)

    result = result & TLEncode(obj.length)


proc TLEncodeType*(obj: messageEntityUrl): seq[uint8] = 
    result = result & TLEncode(int32(1859134776))
    result = result & TLEncode(obj.offset)

    result = result & TLEncode(obj.length)


proc TLEncodeType*(obj: messageEntityEmail): seq[uint8] = 
    result = result & TLEncode(int32(1692693954))
    result = result & TLEncode(obj.offset)

    result = result & TLEncode(obj.length)


proc TLEncodeType*(obj: messageEntityBold): seq[uint8] = 
    result = result & TLEncode(int32(-1117713463))
    result = result & TLEncode(obj.offset)

    result = result & TLEncode(obj.length)


proc TLEncodeType*(obj: messageEntityItalic): seq[uint8] = 
    result = result & TLEncode(int32(-2106619040))
    result = result & TLEncode(obj.offset)

    result = result & TLEncode(obj.length)


proc TLEncodeType*(obj: messageEntityCode): seq[uint8] = 
    result = result & TLEncode(int32(681706865))
    result = result & TLEncode(obj.offset)

    result = result & TLEncode(obj.length)


proc TLEncodeType*(obj: messageEntityPre): seq[uint8] = 
    result = result & TLEncode(int32(1938967520))
    result = result & TLEncode(obj.offset)

    result = result & TLEncode(obj.length)

    result = result & TLEncode(obj.language)


proc TLEncodeType*(obj: messageEntityTextUrl): seq[uint8] = 
    result = result & TLEncode(int32(1990644519))
    result = result & TLEncode(obj.offset)

    result = result & TLEncode(obj.length)

    result = result & TLEncode(obj.url)


proc TLEncodeType*(obj: messageEntityMentionName): seq[uint8] = 
    result = result & TLEncode(int32(892193368))
    result = result & TLEncode(obj.offset)

    result = result & TLEncode(obj.length)

    result = result & TLEncode(obj.user_id)


proc TLEncodeType*(obj: inputMessageEntityMentionName): seq[uint8] = 
    result = result & TLEncode(int32(546203849))
    result = result & TLEncode(obj.offset)

    result = result & TLEncode(obj.length)

    result = result & TLEncode(obj.user_id)


proc TLEncodeType*(obj: messageEntityPhone): seq[uint8] = 
    result = result & TLEncode(int32(-1687559349))
    result = result & TLEncode(obj.offset)

    result = result & TLEncode(obj.length)


proc TLEncodeType*(obj: messageEntityCashtag): seq[uint8] = 
    result = result & TLEncode(int32(1280209983))
    result = result & TLEncode(obj.offset)

    result = result & TLEncode(obj.length)


proc TLEncodeType*(obj: messageEntityUnderline): seq[uint8] = 
    result = result & TLEncode(int32(-1672577397))
    result = result & TLEncode(obj.offset)

    result = result & TLEncode(obj.length)


proc TLEncodeType*(obj: messageEntityStrike): seq[uint8] = 
    result = result & TLEncode(int32(-1090087980))
    result = result & TLEncode(obj.offset)

    result = result & TLEncode(obj.length)


proc TLEncodeType*(obj: messageEntityBlockquote): seq[uint8] = 
    result = result & TLEncode(int32(551509248))
    result = result & TLEncode(obj.offset)

    result = result & TLEncode(obj.length)


proc TLEncodeType*(obj: messageEntityBankCard): seq[uint8] = 
    result = result & TLEncode(int32(1981704948))
    result = result & TLEncode(obj.offset)

    result = result & TLEncode(obj.length)


proc TLEncodeType*(obj: inputChannelEmpty): seq[uint8] = 
    result = result & TLEncode(int32(-292807034))

proc TLEncodeType*(obj: inputChannel): seq[uint8] = 
    result = result & TLEncode(int32(-1343524562))
    result = result & TLEncode(obj.channel_id)

    result = result & TLEncode(obj.access_hash)


proc TLEncodeType*(obj: inputChannelFromMessage): seq[uint8] = 
    result = result & TLEncode(int32(707290417))
    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.msg_id)

    result = result & TLEncode(obj.channel_id)


proc TLEncodeType*(obj: contacts_resolvedPeer): seq[uint8] = 
    result = result & TLEncode(int32(2131196633))
    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.chats)

    result = result & TLEncode(obj.users)


proc TLEncodeType*(obj: messageRange): seq[uint8] = 
    result = result & TLEncode(int32(-1372576464))
    result = result & TLEncode(obj.min_id)

    result = result & TLEncode(obj.max_id)


proc TLEncodeType*(obj: updates_channelDifferenceEmpty): seq[uint8] = 
    result = result & TLEncode(int32(1041346555))
    if obj.timeout.isSome():
        obj.flags = obj.flags or 1 shl 1

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.pts)

    if obj.timeout.isSome():
        result = result & TLEncode(obj.timeout.get())


proc TLEncodeType*(obj: updates_channelDifferenceTooLong): seq[uint8] = 
    result = result & TLEncode(int32(-1531132162))
    if obj.timeout.isSome():
        obj.flags = obj.flags or 1 shl 1

    result = result & TLEncode(obj.flags)

    if obj.timeout.isSome():
        result = result & TLEncode(obj.timeout.get())

    result = result & TLEncode(obj.dialog)

    result = result & TLEncode(obj.messages)

    result = result & TLEncode(obj.chats)

    result = result & TLEncode(obj.users)


proc TLEncodeType*(obj: updates_channelDifference): seq[uint8] = 
    result = result & TLEncode(int32(543450958))
    if obj.timeout.isSome():
        obj.flags = obj.flags or 1 shl 1

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.pts)

    if obj.timeout.isSome():
        result = result & TLEncode(obj.timeout.get())

    result = result & TLEncode(obj.new_messages)

    result = result & TLEncode(obj.other_updates)

    result = result & TLEncode(obj.chats)

    result = result & TLEncode(obj.users)


proc TLEncodeType*(obj: channelMessagesFilterEmpty): seq[uint8] = 
    result = result & TLEncode(int32(-1798033689))

proc TLEncodeType*(obj: channelMessagesFilter): seq[uint8] = 
    result = result & TLEncode(int32(-847783593))
    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.ranges)


proc TLEncodeType*(obj: channelParticipant): seq[uint8] = 
    result = result & TLEncode(int32(367766557))
    result = result & TLEncode(obj.user_id)

    result = result & TLEncode(obj.date)


proc TLEncodeType*(obj: channelParticipantSelf): seq[uint8] = 
    result = result & TLEncode(int32(-1557620115))
    result = result & TLEncode(obj.user_id)

    result = result & TLEncode(obj.inviter_id)

    result = result & TLEncode(obj.date)


proc TLEncodeType*(obj: channelParticipantCreator): seq[uint8] = 
    result = result & TLEncode(int32(1149094475))
    if obj.rank.isSome():
        obj.flags = obj.flags or 1 shl 0

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.user_id)

    result = result & TLEncode(obj.admin_rights)

    if obj.rank.isSome():
        result = result & TLEncode(obj.rank.get())


proc TLEncodeType*(obj: channelParticipantAdmin): seq[uint8] = 
    result = result & TLEncode(int32(-859915345))
    if obj.inviter_id.isSome():
        obj.flags = obj.flags or 1 shl 1

    if obj.rank.isSome():
        obj.flags = obj.flags or 1 shl 2

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.user_id)

    if obj.inviter_id.isSome():
        result = result & TLEncode(obj.inviter_id.get())

    result = result & TLEncode(obj.promoted_by)

    result = result & TLEncode(obj.date)

    result = result & TLEncode(obj.admin_rights)

    if obj.rank.isSome():
        result = result & TLEncode(obj.rank.get())


proc TLEncodeType*(obj: channelParticipantBanned): seq[uint8] = 
    result = result & TLEncode(int32(470789295))
    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.user_id)

    result = result & TLEncode(obj.kicked_by)

    result = result & TLEncode(obj.date)

    result = result & TLEncode(obj.banned_rights)


proc TLEncodeType*(obj: channelParticipantLeft): seq[uint8] = 
    result = result & TLEncode(int32(-1010402965))
    result = result & TLEncode(obj.user_id)


proc TLEncodeType*(obj: channelParticipantsRecent): seq[uint8] = 
    result = result & TLEncode(int32(-566281095))

proc TLEncodeType*(obj: channelParticipantsAdmins): seq[uint8] = 
    result = result & TLEncode(int32(-1268741783))

proc TLEncodeType*(obj: channelParticipantsKicked): seq[uint8] = 
    result = result & TLEncode(int32(-1548400251))
    result = result & TLEncode(obj.q)


proc TLEncodeType*(obj: channelParticipantsBots): seq[uint8] = 
    result = result & TLEncode(int32(-1328445861))

proc TLEncodeType*(obj: channelParticipantsBanned): seq[uint8] = 
    result = result & TLEncode(int32(338142689))
    result = result & TLEncode(obj.q)


proc TLEncodeType*(obj: channelParticipantsSearch): seq[uint8] = 
    result = result & TLEncode(int32(1701495984))
    result = result & TLEncode(obj.q)


proc TLEncodeType*(obj: channelParticipantsContacts): seq[uint8] = 
    result = result & TLEncode(int32(-1150621555))
    result = result & TLEncode(obj.q)


proc TLEncodeType*(obj: channelParticipantsMentions): seq[uint8] = 
    result = result & TLEncode(int32(-531931925))
    if obj.q.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.top_msg_id.isSome():
        obj.flags = obj.flags or 1 shl 1

    result = result & TLEncode(obj.flags)

    if obj.q.isSome():
        result = result & TLEncode(obj.q.get())

    if obj.top_msg_id.isSome():
        result = result & TLEncode(obj.top_msg_id.get())


proc TLEncodeType*(obj: channels_channelParticipants): seq[uint8] = 
    result = result & TLEncode(int32(-177282392))
    result = result & TLEncode(obj.count)

    result = result & TLEncode(obj.participants)

    result = result & TLEncode(obj.users)


proc TLEncodeType*(obj: channels_channelParticipantsNotModified): seq[uint8] = 
    result = result & TLEncode(int32(-266911767))

proc TLEncodeType*(obj: channels_channelParticipant): seq[uint8] = 
    result = result & TLEncode(int32(-791039645))
    result = result & TLEncode(obj.participant)

    result = result & TLEncode(obj.users)


proc TLEncodeType*(obj: help_termsOfService): seq[uint8] = 
    result = result & TLEncode(int32(2013922064))
    if obj.min_age_confirm.isSome():
        obj.flags = obj.flags or 1 shl 1

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.text)

    result = result & TLEncode(obj.entities)

    if obj.min_age_confirm.isSome():
        result = result & TLEncode(obj.min_age_confirm.get())


proc TLEncodeType*(obj: messages_savedGifsNotModified): seq[uint8] = 
    result = result & TLEncode(int32(-402498398))

proc TLEncodeType*(obj: messages_savedGifs): seq[uint8] = 
    result = result & TLEncode(int32(772213157))
    result = result & TLEncode(obj.hash)

    result = result & TLEncode(obj.gifs)


proc TLEncodeType*(obj: inputBotInlineMessageMediaAuto): seq[uint8] = 
    result = result & TLEncode(int32(864077702))
    if obj.entities.isSome():
        obj.flags = obj.flags or 1 shl 1

    if obj.reply_markup.isSome():
        obj.flags = obj.flags or 1 shl 2

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.message)

    if obj.entities.isSome():
        result = result & TLEncode(obj.entities.get())

    if obj.reply_markup.isSome():
        result = result & TLEncode(obj.reply_markup.get())


proc TLEncodeType*(obj: inputBotInlineMessageText): seq[uint8] = 
    result = result & TLEncode(int32(1036876423))
    if obj.entities.isSome():
        obj.flags = obj.flags or 1 shl 1

    if obj.reply_markup.isSome():
        obj.flags = obj.flags or 1 shl 2

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.message)

    if obj.entities.isSome():
        result = result & TLEncode(obj.entities.get())

    if obj.reply_markup.isSome():
        result = result & TLEncode(obj.reply_markup.get())


proc TLEncodeType*(obj: inputBotInlineMessageMediaGeo): seq[uint8] = 
    result = result & TLEncode(int32(-1768777083))
    if obj.heading.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.period.isSome():
        obj.flags = obj.flags or 1 shl 1

    if obj.proximity_notification_radius.isSome():
        obj.flags = obj.flags or 1 shl 3

    if obj.reply_markup.isSome():
        obj.flags = obj.flags or 1 shl 2

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.geo_point)

    if obj.heading.isSome():
        result = result & TLEncode(obj.heading.get())

    if obj.period.isSome():
        result = result & TLEncode(obj.period.get())

    if obj.proximity_notification_radius.isSome():
        result = result & TLEncode(obj.proximity_notification_radius.get())

    if obj.reply_markup.isSome():
        result = result & TLEncode(obj.reply_markup.get())


proc TLEncodeType*(obj: inputBotInlineMessageMediaVenue): seq[uint8] = 
    result = result & TLEncode(int32(1098628881))
    if obj.reply_markup.isSome():
        obj.flags = obj.flags or 1 shl 2

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.geo_point)

    result = result & TLEncode(obj.title)

    result = result & TLEncode(obj.address)

    result = result & TLEncode(obj.provider)

    result = result & TLEncode(obj.venue_id)

    result = result & TLEncode(obj.venue_type)

    if obj.reply_markup.isSome():
        result = result & TLEncode(obj.reply_markup.get())


proc TLEncodeType*(obj: inputBotInlineMessageMediaContact): seq[uint8] = 
    result = result & TLEncode(int32(-1494368259))
    if obj.reply_markup.isSome():
        obj.flags = obj.flags or 1 shl 2

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.phone_number)

    result = result & TLEncode(obj.first_name)

    result = result & TLEncode(obj.last_name)

    result = result & TLEncode(obj.vcard)

    if obj.reply_markup.isSome():
        result = result & TLEncode(obj.reply_markup.get())


proc TLEncodeType*(obj: inputBotInlineMessageGame): seq[uint8] = 
    result = result & TLEncode(int32(1262639204))
    if obj.reply_markup.isSome():
        obj.flags = obj.flags or 1 shl 2

    result = result & TLEncode(obj.flags)

    if obj.reply_markup.isSome():
        result = result & TLEncode(obj.reply_markup.get())


proc TLEncodeType*(obj: inputBotInlineResult): seq[uint8] = 
    result = result & TLEncode(int32(-2000710887))
    if obj.title.isSome():
        obj.flags = obj.flags or 1 shl 1

    if obj.description.isSome():
        obj.flags = obj.flags or 1 shl 2

    if obj.url.isSome():
        obj.flags = obj.flags or 1 shl 3

    if obj.thumb.isSome():
        obj.flags = obj.flags or 1 shl 4

    if obj.content.isSome():
        obj.flags = obj.flags or 1 shl 5

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.typeof)

    if obj.title.isSome():
        result = result & TLEncode(obj.title.get())

    if obj.description.isSome():
        result = result & TLEncode(obj.description.get())

    if obj.url.isSome():
        result = result & TLEncode(obj.url.get())

    if obj.thumb.isSome():
        result = result & TLEncode(obj.thumb.get())

    if obj.content.isSome():
        result = result & TLEncode(obj.content.get())

    result = result & TLEncode(obj.send_message)


proc TLEncodeType*(obj: inputBotInlineResultPhoto): seq[uint8] = 
    result = result & TLEncode(int32(-1462213465))
    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.typeof)

    result = result & TLEncode(obj.photo)

    result = result & TLEncode(obj.send_message)


proc TLEncodeType*(obj: inputBotInlineResultDocument): seq[uint8] = 
    result = result & TLEncode(int32(-459324))
    if obj.title.isSome():
        obj.flags = obj.flags or 1 shl 1

    if obj.description.isSome():
        obj.flags = obj.flags or 1 shl 2

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.typeof)

    if obj.title.isSome():
        result = result & TLEncode(obj.title.get())

    if obj.description.isSome():
        result = result & TLEncode(obj.description.get())

    result = result & TLEncode(obj.document)

    result = result & TLEncode(obj.send_message)


proc TLEncodeType*(obj: inputBotInlineResultGame): seq[uint8] = 
    result = result & TLEncode(int32(1336154098))
    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.short_name)

    result = result & TLEncode(obj.send_message)


proc TLEncodeType*(obj: botInlineMessageMediaAuto): seq[uint8] = 
    result = result & TLEncode(int32(1984755728))
    if obj.entities.isSome():
        obj.flags = obj.flags or 1 shl 1

    if obj.reply_markup.isSome():
        obj.flags = obj.flags or 1 shl 2

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.message)

    if obj.entities.isSome():
        result = result & TLEncode(obj.entities.get())

    if obj.reply_markup.isSome():
        result = result & TLEncode(obj.reply_markup.get())


proc TLEncodeType*(obj: botInlineMessageText): seq[uint8] = 
    result = result & TLEncode(int32(-1937807902))
    if obj.entities.isSome():
        obj.flags = obj.flags or 1 shl 1

    if obj.reply_markup.isSome():
        obj.flags = obj.flags or 1 shl 2

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.message)

    if obj.entities.isSome():
        result = result & TLEncode(obj.entities.get())

    if obj.reply_markup.isSome():
        result = result & TLEncode(obj.reply_markup.get())


proc TLEncodeType*(obj: botInlineMessageMediaGeo): seq[uint8] = 
    result = result & TLEncode(int32(1367633872))
    if obj.heading.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.period.isSome():
        obj.flags = obj.flags or 1 shl 1

    if obj.proximity_notification_radius.isSome():
        obj.flags = obj.flags or 1 shl 3

    if obj.reply_markup.isSome():
        obj.flags = obj.flags or 1 shl 2

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.geo)

    if obj.heading.isSome():
        result = result & TLEncode(obj.heading.get())

    if obj.period.isSome():
        result = result & TLEncode(obj.period.get())

    if obj.proximity_notification_radius.isSome():
        result = result & TLEncode(obj.proximity_notification_radius.get())

    if obj.reply_markup.isSome():
        result = result & TLEncode(obj.reply_markup.get())


proc TLEncodeType*(obj: botInlineMessageMediaVenue): seq[uint8] = 
    result = result & TLEncode(int32(-1970903652))
    if obj.reply_markup.isSome():
        obj.flags = obj.flags or 1 shl 2

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.geo)

    result = result & TLEncode(obj.title)

    result = result & TLEncode(obj.address)

    result = result & TLEncode(obj.provider)

    result = result & TLEncode(obj.venue_id)

    result = result & TLEncode(obj.venue_type)

    if obj.reply_markup.isSome():
        result = result & TLEncode(obj.reply_markup.get())


proc TLEncodeType*(obj: botInlineMessageMediaContact): seq[uint8] = 
    result = result & TLEncode(int32(416402882))
    if obj.reply_markup.isSome():
        obj.flags = obj.flags or 1 shl 2

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.phone_number)

    result = result & TLEncode(obj.first_name)

    result = result & TLEncode(obj.last_name)

    result = result & TLEncode(obj.vcard)

    if obj.reply_markup.isSome():
        result = result & TLEncode(obj.reply_markup.get())


proc TLEncodeType*(obj: botInlineResult): seq[uint8] = 
    result = result & TLEncode(int32(295067450))
    if obj.title.isSome():
        obj.flags = obj.flags or 1 shl 1

    if obj.description.isSome():
        obj.flags = obj.flags or 1 shl 2

    if obj.url.isSome():
        obj.flags = obj.flags or 1 shl 3

    if obj.thumb.isSome():
        obj.flags = obj.flags or 1 shl 4

    if obj.content.isSome():
        obj.flags = obj.flags or 1 shl 5

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.typeof)

    if obj.title.isSome():
        result = result & TLEncode(obj.title.get())

    if obj.description.isSome():
        result = result & TLEncode(obj.description.get())

    if obj.url.isSome():
        result = result & TLEncode(obj.url.get())

    if obj.thumb.isSome():
        result = result & TLEncode(obj.thumb.get())

    if obj.content.isSome():
        result = result & TLEncode(obj.content.get())

    result = result & TLEncode(obj.send_message)


proc TLEncodeType*(obj: botInlineMediaResult): seq[uint8] = 
    result = result & TLEncode(int32(400266251))
    if obj.photo.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.document.isSome():
        obj.flags = obj.flags or 1 shl 1

    if obj.title.isSome():
        obj.flags = obj.flags or 1 shl 2

    if obj.description.isSome():
        obj.flags = obj.flags or 1 shl 3

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.typeof)

    if obj.photo.isSome():
        result = result & TLEncode(obj.photo.get())

    if obj.document.isSome():
        result = result & TLEncode(obj.document.get())

    if obj.title.isSome():
        result = result & TLEncode(obj.title.get())

    if obj.description.isSome():
        result = result & TLEncode(obj.description.get())

    result = result & TLEncode(obj.send_message)


proc TLEncodeType*(obj: messages_botResults): seq[uint8] = 
    result = result & TLEncode(int32(-1803769784))
    if obj.next_offset.isSome():
        obj.flags = obj.flags or 1 shl 1

    if obj.switch_pm.isSome():
        obj.flags = obj.flags or 1 shl 2

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.query_id)

    if obj.next_offset.isSome():
        result = result & TLEncode(obj.next_offset.get())

    if obj.switch_pm.isSome():
        result = result & TLEncode(obj.switch_pm.get())

    result = result & TLEncode(obj.results)

    result = result & TLEncode(obj.cache_time)

    result = result & TLEncode(obj.users)


proc TLEncodeType*(obj: exportedMessageLink): seq[uint8] = 
    result = result & TLEncode(int32(1571494644))
    result = result & TLEncode(obj.link)

    result = result & TLEncode(obj.html)


proc TLEncodeType*(obj: messageFwdHeader): seq[uint8] = 
    result = result & TLEncode(int32(1601666510))
    if obj.from_id.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.from_name.isSome():
        obj.flags = obj.flags or 1 shl 5

    if obj.channel_post.isSome():
        obj.flags = obj.flags or 1 shl 2

    if obj.post_author.isSome():
        obj.flags = obj.flags or 1 shl 3

    if obj.saved_from_peer.isSome():
        obj.flags = obj.flags or 1 shl 4

    if obj.saved_from_msg_id.isSome():
        obj.flags = obj.flags or 1 shl 4

    if obj.psa_type.isSome():
        obj.flags = obj.flags or 1 shl 6

    result = result & TLEncode(obj.flags)

    if obj.from_id.isSome():
        result = result & TLEncode(obj.from_id.get())

    if obj.from_name.isSome():
        result = result & TLEncode(obj.from_name.get())

    result = result & TLEncode(obj.date)

    if obj.channel_post.isSome():
        result = result & TLEncode(obj.channel_post.get())

    if obj.post_author.isSome():
        result = result & TLEncode(obj.post_author.get())

    if obj.saved_from_peer.isSome():
        result = result & TLEncode(obj.saved_from_peer.get())

    if obj.saved_from_msg_id.isSome():
        result = result & TLEncode(obj.saved_from_msg_id.get())

    if obj.psa_type.isSome():
        result = result & TLEncode(obj.psa_type.get())


proc TLEncodeType*(obj: auth_codeTypeSms): seq[uint8] = 
    result = result & TLEncode(int32(1923290508))

proc TLEncodeType*(obj: auth_codeTypeCall): seq[uint8] = 
    result = result & TLEncode(int32(1948046307))

proc TLEncodeType*(obj: auth_codeTypeFlashCall): seq[uint8] = 
    result = result & TLEncode(int32(577556219))

proc TLEncodeType*(obj: auth_sentCodeTypeApp): seq[uint8] = 
    result = result & TLEncode(int32(1035688326))
    result = result & TLEncode(obj.length)


proc TLEncodeType*(obj: auth_sentCodeTypeSms): seq[uint8] = 
    result = result & TLEncode(int32(-1073693790))
    result = result & TLEncode(obj.length)


proc TLEncodeType*(obj: auth_sentCodeTypeCall): seq[uint8] = 
    result = result & TLEncode(int32(1398007207))
    result = result & TLEncode(obj.length)


proc TLEncodeType*(obj: auth_sentCodeTypeFlashCall): seq[uint8] = 
    result = result & TLEncode(int32(-1425815847))
    result = result & TLEncode(obj.pattern)


proc TLEncodeType*(obj: messages_botCallbackAnswer): seq[uint8] = 
    result = result & TLEncode(int32(911761060))
    if obj.message.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.url.isSome():
        obj.flags = obj.flags or 1 shl 2

    result = result & TLEncode(obj.flags)

    if obj.message.isSome():
        result = result & TLEncode(obj.message.get())

    if obj.url.isSome():
        result = result & TLEncode(obj.url.get())

    result = result & TLEncode(obj.cache_time)


proc TLEncodeType*(obj: messages_messageEditData): seq[uint8] = 
    result = result & TLEncode(int32(649453030))
    result = result & TLEncode(obj.flags)


proc TLEncodeType*(obj: inputBotInlineMessageID): seq[uint8] = 
    result = result & TLEncode(int32(-1995686519))
    result = result & TLEncode(obj.dc_id)

    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.access_hash)


proc TLEncodeType*(obj: inlineBotSwitchPM): seq[uint8] = 
    result = result & TLEncode(int32(1008755359))
    result = result & TLEncode(obj.text)

    result = result & TLEncode(obj.start_param)


proc TLEncodeType*(obj: messages_peerDialogs): seq[uint8] = 
    result = result & TLEncode(int32(863093588))
    result = result & TLEncode(obj.dialogs)

    result = result & TLEncode(obj.messages)

    result = result & TLEncode(obj.chats)

    result = result & TLEncode(obj.users)

    result = result & TLEncode(obj.state)


proc TLEncodeType*(obj: topPeer): seq[uint8] = 
    result = result & TLEncode(int32(-305282981))
    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.rating)


proc TLEncodeType*(obj: topPeerCategoryBotsPM): seq[uint8] = 
    result = result & TLEncode(int32(-1419371685))

proc TLEncodeType*(obj: topPeerCategoryBotsInline): seq[uint8] = 
    result = result & TLEncode(int32(344356834))

proc TLEncodeType*(obj: topPeerCategoryCorrespondents): seq[uint8] = 
    result = result & TLEncode(int32(1669037776))

proc TLEncodeType*(obj: topPeerCategoryGroups): seq[uint8] = 
    result = result & TLEncode(int32(-1122524854))

proc TLEncodeType*(obj: topPeerCategoryChannels): seq[uint8] = 
    result = result & TLEncode(int32(371037736))

proc TLEncodeType*(obj: topPeerCategoryPhoneCalls): seq[uint8] = 
    result = result & TLEncode(int32(511092620))

proc TLEncodeType*(obj: topPeerCategoryForwardUsers): seq[uint8] = 
    result = result & TLEncode(int32(-1472172887))

proc TLEncodeType*(obj: topPeerCategoryForwardChats): seq[uint8] = 
    result = result & TLEncode(int32(-68239120))

proc TLEncodeType*(obj: topPeerCategoryPeers): seq[uint8] = 
    result = result & TLEncode(int32(-75283823))
    result = result & TLEncode(obj.category)

    result = result & TLEncode(obj.count)

    result = result & TLEncode(obj.peers)


proc TLEncodeType*(obj: contacts_topPeersNotModified): seq[uint8] = 
    result = result & TLEncode(int32(-567906571))

proc TLEncodeType*(obj: contacts_topPeers): seq[uint8] = 
    result = result & TLEncode(int32(1891070632))
    result = result & TLEncode(obj.categories)

    result = result & TLEncode(obj.chats)

    result = result & TLEncode(obj.users)


proc TLEncodeType*(obj: contacts_topPeersDisabled): seq[uint8] = 
    result = result & TLEncode(int32(-1255369827))

proc TLEncodeType*(obj: draftMessageEmpty): seq[uint8] = 
    result = result & TLEncode(int32(453805082))
    if obj.date.isSome():
        obj.flags = obj.flags or 1 shl 0

    result = result & TLEncode(obj.flags)

    if obj.date.isSome():
        result = result & TLEncode(obj.date.get())


proc TLEncodeType*(obj: draftMessage): seq[uint8] = 
    result = result & TLEncode(int32(-40996577))
    if obj.reply_to_msg_id.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.entities.isSome():
        obj.flags = obj.flags or 1 shl 3

    result = result & TLEncode(obj.flags)

    if obj.reply_to_msg_id.isSome():
        result = result & TLEncode(obj.reply_to_msg_id.get())

    result = result & TLEncode(obj.message)

    if obj.entities.isSome():
        result = result & TLEncode(obj.entities.get())

    result = result & TLEncode(obj.date)


proc TLEncodeType*(obj: messages_featuredStickersNotModified): seq[uint8] = 
    result = result & TLEncode(int32(-958657434))
    result = result & TLEncode(obj.count)


proc TLEncodeType*(obj: messages_featuredStickers): seq[uint8] = 
    result = result & TLEncode(int32(-1230257343))
    result = result & TLEncode(obj.hash)

    result = result & TLEncode(obj.count)

    result = result & TLEncode(obj.sets)

    result = result & TLEncode(obj.unread)


proc TLEncodeType*(obj: messages_recentStickersNotModified): seq[uint8] = 
    result = result & TLEncode(int32(-1317041920))

proc TLEncodeType*(obj: messages_recentStickers): seq[uint8] = 
    result = result & TLEncode(int32(586395571))
    result = result & TLEncode(obj.hash)

    result = result & TLEncode(obj.packs)

    result = result & TLEncode(obj.stickers)

    result = result & TLEncode(obj.dates)


proc TLEncodeType*(obj: messages_archivedStickers): seq[uint8] = 
    result = result & TLEncode(int32(1338747336))
    result = result & TLEncode(obj.count)

    result = result & TLEncode(obj.sets)


proc TLEncodeType*(obj: messages_stickerSetInstallResultSuccess): seq[uint8] = 
    result = result & TLEncode(int32(946083368))

proc TLEncodeType*(obj: messages_stickerSetInstallResultArchive): seq[uint8] = 
    result = result & TLEncode(int32(904138920))
    result = result & TLEncode(obj.sets)


proc TLEncodeType*(obj: stickerSetCovered): seq[uint8] = 
    result = result & TLEncode(int32(1678812626))
    result = result & TLEncode(obj.set)

    result = result & TLEncode(obj.cover)


proc TLEncodeType*(obj: stickerSetMultiCovered): seq[uint8] = 
    result = result & TLEncode(int32(872932635))
    result = result & TLEncode(obj.set)

    result = result & TLEncode(obj.covers)


proc TLEncodeType*(obj: maskCoords): seq[uint8] = 
    result = result & TLEncode(int32(-1361650766))
    result = result & TLEncode(obj.n)

    result = result & TLEncode(obj.x)

    result = result & TLEncode(obj.y)

    result = result & TLEncode(obj.zoom)


proc TLEncodeType*(obj: inputStickeredMediaPhoto): seq[uint8] = 
    result = result & TLEncode(int32(1251549527))
    result = result & TLEncode(obj.id)


proc TLEncodeType*(obj: inputStickeredMediaDocument): seq[uint8] = 
    result = result & TLEncode(int32(1133012400))
    result = result & TLEncode(obj.id)


proc TLEncodeType*(obj: game): seq[uint8] = 
    result = result & TLEncode(int32(-1107729093))
    if obj.document.isSome():
        obj.flags = obj.flags or 1 shl 0

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.access_hash)

    result = result & TLEncode(obj.short_name)

    result = result & TLEncode(obj.title)

    result = result & TLEncode(obj.description)

    result = result & TLEncode(obj.photo)

    if obj.document.isSome():
        result = result & TLEncode(obj.document.get())


proc TLEncodeType*(obj: inputGameID): seq[uint8] = 
    result = result & TLEncode(int32(851699568))
    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.access_hash)


proc TLEncodeType*(obj: inputGameShortName): seq[uint8] = 
    result = result & TLEncode(int32(-1020139510))
    result = result & TLEncode(obj.bot_id)

    result = result & TLEncode(obj.short_name)


proc TLEncodeType*(obj: highScore): seq[uint8] = 
    result = result & TLEncode(int32(1493171408))
    result = result & TLEncode(obj.pos)

    result = result & TLEncode(obj.user_id)

    result = result & TLEncode(obj.score)


proc TLEncodeType*(obj: messages_highScores): seq[uint8] = 
    result = result & TLEncode(int32(-1707344487))
    result = result & TLEncode(obj.scores)

    result = result & TLEncode(obj.users)


proc TLEncodeType*(obj: textEmpty): seq[uint8] = 
    result = result & TLEncode(int32(-599948721))

proc TLEncodeType*(obj: textPlain): seq[uint8] = 
    result = result & TLEncode(int32(1950782688))
    result = result & TLEncode(obj.text)


proc TLEncodeType*(obj: textBold): seq[uint8] = 
    result = result & TLEncode(int32(1730456516))
    result = result & TLEncode(obj.text)


proc TLEncodeType*(obj: textItalic): seq[uint8] = 
    result = result & TLEncode(int32(-653089380))
    result = result & TLEncode(obj.text)


proc TLEncodeType*(obj: textUnderline): seq[uint8] = 
    result = result & TLEncode(int32(-1054465340))
    result = result & TLEncode(obj.text)


proc TLEncodeType*(obj: textStrike): seq[uint8] = 
    result = result & TLEncode(int32(-1678197867))
    result = result & TLEncode(obj.text)


proc TLEncodeType*(obj: textFixed): seq[uint8] = 
    result = result & TLEncode(int32(1816074681))
    result = result & TLEncode(obj.text)


proc TLEncodeType*(obj: textUrl): seq[uint8] = 
    result = result & TLEncode(int32(1009288385))
    result = result & TLEncode(obj.text)

    result = result & TLEncode(obj.url)

    result = result & TLEncode(obj.webpage_id)


proc TLEncodeType*(obj: textEmail): seq[uint8] = 
    result = result & TLEncode(int32(-564523562))
    result = result & TLEncode(obj.text)

    result = result & TLEncode(obj.email)


proc TLEncodeType*(obj: textConcat): seq[uint8] = 
    result = result & TLEncode(int32(2120376535))
    result = result & TLEncode(obj.texts)


proc TLEncodeType*(obj: textSubscript): seq[uint8] = 
    result = result & TLEncode(int32(-311786236))
    result = result & TLEncode(obj.text)


proc TLEncodeType*(obj: textSuperscript): seq[uint8] = 
    result = result & TLEncode(int32(-939827711))
    result = result & TLEncode(obj.text)


proc TLEncodeType*(obj: textMarked): seq[uint8] = 
    result = result & TLEncode(int32(884498960))
    result = result & TLEncode(obj.text)


proc TLEncodeType*(obj: textPhone): seq[uint8] = 
    result = result & TLEncode(int32(483104362))
    result = result & TLEncode(obj.text)

    result = result & TLEncode(obj.phone)


proc TLEncodeType*(obj: textImage): seq[uint8] = 
    result = result & TLEncode(int32(-2117274384))
    result = result & TLEncode(obj.document_id)

    result = result & TLEncode(obj.w)

    result = result & TLEncode(obj.h)


proc TLEncodeType*(obj: textAnchor): seq[uint8] = 
    result = result & TLEncode(int32(894777186))
    result = result & TLEncode(obj.text)

    result = result & TLEncode(obj.name)


proc TLEncodeType*(obj: pageBlockUnsupported): seq[uint8] = 
    result = result & TLEncode(int32(324435594))

proc TLEncodeType*(obj: pageBlockTitle): seq[uint8] = 
    result = result & TLEncode(int32(1890305021))
    result = result & TLEncode(obj.text)


proc TLEncodeType*(obj: pageBlockSubtitle): seq[uint8] = 
    result = result & TLEncode(int32(-1879401953))
    result = result & TLEncode(obj.text)


proc TLEncodeType*(obj: pageBlockAuthorDate): seq[uint8] = 
    result = result & TLEncode(int32(-1162877472))
    result = result & TLEncode(obj.author)

    result = result & TLEncode(obj.published_date)


proc TLEncodeType*(obj: pageBlockHeader): seq[uint8] = 
    result = result & TLEncode(int32(-1076861716))
    result = result & TLEncode(obj.text)


proc TLEncodeType*(obj: pageBlockSubheader): seq[uint8] = 
    result = result & TLEncode(int32(-248793375))
    result = result & TLEncode(obj.text)


proc TLEncodeType*(obj: pageBlockParagraph): seq[uint8] = 
    result = result & TLEncode(int32(1182402406))
    result = result & TLEncode(obj.text)


proc TLEncodeType*(obj: pageBlockPreformatted): seq[uint8] = 
    result = result & TLEncode(int32(-1066346178))
    result = result & TLEncode(obj.text)

    result = result & TLEncode(obj.language)


proc TLEncodeType*(obj: pageBlockFooter): seq[uint8] = 
    result = result & TLEncode(int32(1216809369))
    result = result & TLEncode(obj.text)


proc TLEncodeType*(obj: pageBlockDivider): seq[uint8] = 
    result = result & TLEncode(int32(-618614392))

proc TLEncodeType*(obj: pageBlockAnchor): seq[uint8] = 
    result = result & TLEncode(int32(-837994576))
    result = result & TLEncode(obj.name)


proc TLEncodeType*(obj: pageBlockList): seq[uint8] = 
    result = result & TLEncode(int32(-454524911))
    result = result & TLEncode(obj.items)


proc TLEncodeType*(obj: pageBlockBlockquote): seq[uint8] = 
    result = result & TLEncode(int32(641563686))
    result = result & TLEncode(obj.text)

    result = result & TLEncode(obj.caption)


proc TLEncodeType*(obj: pageBlockPullquote): seq[uint8] = 
    result = result & TLEncode(int32(1329878739))
    result = result & TLEncode(obj.text)

    result = result & TLEncode(obj.caption)


proc TLEncodeType*(obj: pageBlockPhoto): seq[uint8] = 
    result = result & TLEncode(int32(391759200))
    if obj.url.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.webpage_id.isSome():
        obj.flags = obj.flags or 1 shl 0

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.photo_id)

    result = result & TLEncode(obj.caption)

    if obj.url.isSome():
        result = result & TLEncode(obj.url.get())

    if obj.webpage_id.isSome():
        result = result & TLEncode(obj.webpage_id.get())


proc TLEncodeType*(obj: pageBlockVideo): seq[uint8] = 
    result = result & TLEncode(int32(2089805750))
    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.video_id)

    result = result & TLEncode(obj.caption)


proc TLEncodeType*(obj: pageBlockCover): seq[uint8] = 
    result = result & TLEncode(int32(972174080))
    result = result & TLEncode(obj.cover)


proc TLEncodeType*(obj: pageBlockEmbed): seq[uint8] = 
    result = result & TLEncode(int32(-1468953147))
    if obj.url.isSome():
        obj.flags = obj.flags or 1 shl 1

    if obj.html.isSome():
        obj.flags = obj.flags or 1 shl 2

    if obj.poster_photo_id.isSome():
        obj.flags = obj.flags or 1 shl 4

    if obj.w.isSome():
        obj.flags = obj.flags or 1 shl 5

    if obj.h.isSome():
        obj.flags = obj.flags or 1 shl 5

    result = result & TLEncode(obj.flags)

    if obj.url.isSome():
        result = result & TLEncode(obj.url.get())

    if obj.html.isSome():
        result = result & TLEncode(obj.html.get())

    if obj.poster_photo_id.isSome():
        result = result & TLEncode(obj.poster_photo_id.get())

    if obj.w.isSome():
        result = result & TLEncode(obj.w.get())

    if obj.h.isSome():
        result = result & TLEncode(obj.h.get())

    result = result & TLEncode(obj.caption)


proc TLEncodeType*(obj: pageBlockEmbedPost): seq[uint8] = 
    result = result & TLEncode(int32(-229005301))
    result = result & TLEncode(obj.url)

    result = result & TLEncode(obj.webpage_id)

    result = result & TLEncode(obj.author_photo_id)

    result = result & TLEncode(obj.author)

    result = result & TLEncode(obj.date)

    result = result & TLEncode(obj.blocks)

    result = result & TLEncode(obj.caption)


proc TLEncodeType*(obj: pageBlockCollage): seq[uint8] = 
    result = result & TLEncode(int32(1705048653))
    result = result & TLEncode(obj.items)

    result = result & TLEncode(obj.caption)


proc TLEncodeType*(obj: pageBlockSlideshow): seq[uint8] = 
    result = result & TLEncode(int32(838424832))
    result = result & TLEncode(obj.items)

    result = result & TLEncode(obj.caption)


proc TLEncodeType*(obj: pageBlockChannel): seq[uint8] = 
    result = result & TLEncode(int32(-283684427))
    result = result & TLEncode(obj.channel)


proc TLEncodeType*(obj: pageBlockAudio): seq[uint8] = 
    result = result & TLEncode(int32(-2143067670))
    result = result & TLEncode(obj.audio_id)

    result = result & TLEncode(obj.caption)


proc TLEncodeType*(obj: pageBlockKicker): seq[uint8] = 
    result = result & TLEncode(int32(504660880))
    result = result & TLEncode(obj.text)


proc TLEncodeType*(obj: pageBlockTable): seq[uint8] = 
    result = result & TLEncode(int32(-1085412734))
    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.title)

    result = result & TLEncode(obj.rows)


proc TLEncodeType*(obj: pageBlockOrderedList): seq[uint8] = 
    result = result & TLEncode(int32(-1702174239))
    result = result & TLEncode(obj.items)


proc TLEncodeType*(obj: pageBlockDetails): seq[uint8] = 
    result = result & TLEncode(int32(1987480557))
    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.blocks)

    result = result & TLEncode(obj.title)


proc TLEncodeType*(obj: pageBlockRelatedArticles): seq[uint8] = 
    result = result & TLEncode(int32(370236054))
    result = result & TLEncode(obj.title)

    result = result & TLEncode(obj.articles)


proc TLEncodeType*(obj: pageBlockMap): seq[uint8] = 
    result = result & TLEncode(int32(-1538310410))
    result = result & TLEncode(obj.geo)

    result = result & TLEncode(obj.zoom)

    result = result & TLEncode(obj.w)

    result = result & TLEncode(obj.h)

    result = result & TLEncode(obj.caption)


proc TLEncodeType*(obj: phoneCallDiscardReasonMissed): seq[uint8] = 
    result = result & TLEncode(int32(-2048646399))

proc TLEncodeType*(obj: phoneCallDiscardReasonDisconnect): seq[uint8] = 
    result = result & TLEncode(int32(-527056480))

proc TLEncodeType*(obj: phoneCallDiscardReasonHangup): seq[uint8] = 
    result = result & TLEncode(int32(1471006352))

proc TLEncodeType*(obj: phoneCallDiscardReasonBusy): seq[uint8] = 
    result = result & TLEncode(int32(-84416311))

proc TLEncodeType*(obj: dataJSON): seq[uint8] = 
    result = result & TLEncode(int32(2104790276))
    result = result & TLEncode(obj.data)


proc TLEncodeType*(obj: labeledPrice): seq[uint8] = 
    result = result & TLEncode(int32(-886477832))
    result = result & TLEncode(obj.label)

    result = result & TLEncode(obj.amount)


proc TLEncodeType*(obj: invoice): seq[uint8] = 
    result = result & TLEncode(int32(-1022713000))
    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.currency)

    result = result & TLEncode(obj.prices)


proc TLEncodeType*(obj: paymentCharge): seq[uint8] = 
    result = result & TLEncode(int32(-368917890))
    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.provider_charge_id)


proc TLEncodeType*(obj: postAddress): seq[uint8] = 
    result = result & TLEncode(int32(512535275))
    result = result & TLEncode(obj.street_line1)

    result = result & TLEncode(obj.street_line2)

    result = result & TLEncode(obj.city)

    result = result & TLEncode(obj.state)

    result = result & TLEncode(obj.country_iso2)

    result = result & TLEncode(obj.post_code)


proc TLEncodeType*(obj: paymentRequestedInfo): seq[uint8] = 
    result = result & TLEncode(int32(-1868808300))
    if obj.name.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.phone.isSome():
        obj.flags = obj.flags or 1 shl 1

    if obj.email.isSome():
        obj.flags = obj.flags or 1 shl 2

    if obj.shipping_address.isSome():
        obj.flags = obj.flags or 1 shl 3

    result = result & TLEncode(obj.flags)

    if obj.name.isSome():
        result = result & TLEncode(obj.name.get())

    if obj.phone.isSome():
        result = result & TLEncode(obj.phone.get())

    if obj.email.isSome():
        result = result & TLEncode(obj.email.get())

    if obj.shipping_address.isSome():
        result = result & TLEncode(obj.shipping_address.get())


proc TLEncodeType*(obj: paymentSavedCredentialsCard): seq[uint8] = 
    result = result & TLEncode(int32(-842892769))
    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.title)


proc TLEncodeType*(obj: webDocument): seq[uint8] = 
    result = result & TLEncode(int32(475467473))
    result = result & TLEncode(obj.url)

    result = result & TLEncode(obj.access_hash)

    result = result & TLEncode(obj.size)

    result = result & TLEncode(obj.mime_type)

    result = result & TLEncode(obj.attributes)


proc TLEncodeType*(obj: webDocumentNoProxy): seq[uint8] = 
    result = result & TLEncode(int32(-104284986))
    result = result & TLEncode(obj.url)

    result = result & TLEncode(obj.size)

    result = result & TLEncode(obj.mime_type)

    result = result & TLEncode(obj.attributes)


proc TLEncodeType*(obj: inputWebDocument): seq[uint8] = 
    result = result & TLEncode(int32(-1678949555))
    result = result & TLEncode(obj.url)

    result = result & TLEncode(obj.size)

    result = result & TLEncode(obj.mime_type)

    result = result & TLEncode(obj.attributes)


proc TLEncodeType*(obj: inputWebFileLocation): seq[uint8] = 
    result = result & TLEncode(int32(-1036396922))
    result = result & TLEncode(obj.url)

    result = result & TLEncode(obj.access_hash)


proc TLEncodeType*(obj: inputWebFileGeoPointLocation): seq[uint8] = 
    result = result & TLEncode(int32(-1625153079))
    result = result & TLEncode(obj.geo_point)

    result = result & TLEncode(obj.access_hash)

    result = result & TLEncode(obj.w)

    result = result & TLEncode(obj.h)

    result = result & TLEncode(obj.zoom)

    result = result & TLEncode(obj.scale)


proc TLEncodeType*(obj: upload_webFile): seq[uint8] = 
    result = result & TLEncode(int32(568808380))
    result = result & TLEncode(obj.size)

    result = result & TLEncode(obj.mime_type)

    result = result & TLEncode(obj.file_type)

    result = result & TLEncode(obj.mtime)

    result = result & TLEncode(obj.bytes)


proc TLEncodeType*(obj: payments_paymentForm): seq[uint8] = 
    result = result & TLEncode(int32(1062645411))
    if obj.native_provider.isSome():
        obj.flags = obj.flags or 1 shl 4

    if obj.native_params.isSome():
        obj.flags = obj.flags or 1 shl 4

    if obj.saved_info.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.saved_credentials.isSome():
        obj.flags = obj.flags or 1 shl 1

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.bot_id)

    result = result & TLEncode(obj.invoice)

    result = result & TLEncode(obj.provider_id)

    result = result & TLEncode(obj.url)

    if obj.native_provider.isSome():
        result = result & TLEncode(obj.native_provider.get())

    if obj.native_params.isSome():
        result = result & TLEncode(obj.native_params.get())

    if obj.saved_info.isSome():
        result = result & TLEncode(obj.saved_info.get())

    if obj.saved_credentials.isSome():
        result = result & TLEncode(obj.saved_credentials.get())

    result = result & TLEncode(obj.users)


proc TLEncodeType*(obj: payments_validatedRequestedInfo): seq[uint8] = 
    result = result & TLEncode(int32(-784000893))
    if obj.id.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.shipping_options.isSome():
        obj.flags = obj.flags or 1 shl 1

    result = result & TLEncode(obj.flags)

    if obj.id.isSome():
        result = result & TLEncode(obj.id.get())

    if obj.shipping_options.isSome():
        result = result & TLEncode(obj.shipping_options.get())


proc TLEncodeType*(obj: payments_paymentResult): seq[uint8] = 
    result = result & TLEncode(int32(1314881805))
    result = result & TLEncode(obj.updates)


proc TLEncodeType*(obj: payments_paymentVerificationNeeded): seq[uint8] = 
    result = result & TLEncode(int32(-666824391))
    result = result & TLEncode(obj.url)


proc TLEncodeType*(obj: payments_paymentReceipt): seq[uint8] = 
    result = result & TLEncode(int32(1342771681))
    if obj.info.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.shipping.isSome():
        obj.flags = obj.flags or 1 shl 1

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.date)

    result = result & TLEncode(obj.bot_id)

    result = result & TLEncode(obj.invoice)

    result = result & TLEncode(obj.provider_id)

    if obj.info.isSome():
        result = result & TLEncode(obj.info.get())

    if obj.shipping.isSome():
        result = result & TLEncode(obj.shipping.get())

    result = result & TLEncode(obj.currency)

    result = result & TLEncode(obj.total_amount)

    result = result & TLEncode(obj.credentials_title)

    result = result & TLEncode(obj.users)


proc TLEncodeType*(obj: payments_savedInfo): seq[uint8] = 
    result = result & TLEncode(int32(-74456004))
    if obj.saved_info.isSome():
        obj.flags = obj.flags or 1 shl 0

    result = result & TLEncode(obj.flags)

    if obj.saved_info.isSome():
        result = result & TLEncode(obj.saved_info.get())


proc TLEncodeType*(obj: inputPaymentCredentialsSaved): seq[uint8] = 
    result = result & TLEncode(int32(-1056001329))
    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.tmp_password)


proc TLEncodeType*(obj: inputPaymentCredentials): seq[uint8] = 
    result = result & TLEncode(int32(873977640))
    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.data)


proc TLEncodeType*(obj: inputPaymentCredentialsApplePay): seq[uint8] = 
    result = result & TLEncode(int32(-1440990736))
    result = result & TLEncode(obj.payment_data)


proc TLEncodeType*(obj: inputPaymentCredentialsAndroidPay): seq[uint8] = 
    result = result & TLEncode(int32(-905587442))
    result = result & TLEncode(obj.payment_token)

    result = result & TLEncode(obj.google_transaction_id)


proc TLEncodeType*(obj: account_tmpPassword): seq[uint8] = 
    result = result & TLEncode(int32(-614138572))
    result = result & TLEncode(obj.tmp_password)

    result = result & TLEncode(obj.valid_until)


proc TLEncodeType*(obj: shippingOption): seq[uint8] = 
    result = result & TLEncode(int32(-1239335713))
    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.title)

    result = result & TLEncode(obj.prices)


proc TLEncodeType*(obj: inputStickerSetItem): seq[uint8] = 
    result = result & TLEncode(int32(-6249322))
    if obj.mask_coords.isSome():
        obj.flags = obj.flags or 1 shl 0

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.document)

    result = result & TLEncode(obj.emoji)

    if obj.mask_coords.isSome():
        result = result & TLEncode(obj.mask_coords.get())


proc TLEncodeType*(obj: inputPhoneCall): seq[uint8] = 
    result = result & TLEncode(int32(506920429))
    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.access_hash)


proc TLEncodeType*(obj: phoneCallEmpty): seq[uint8] = 
    result = result & TLEncode(int32(1399245077))
    result = result & TLEncode(obj.id)


proc TLEncodeType*(obj: phoneCallWaiting): seq[uint8] = 
    result = result & TLEncode(int32(462375633))
    if obj.receive_date.isSome():
        obj.flags = obj.flags or 1 shl 0

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.access_hash)

    result = result & TLEncode(obj.date)

    result = result & TLEncode(obj.admin_id)

    result = result & TLEncode(obj.participant_id)

    result = result & TLEncode(obj.protocol)

    if obj.receive_date.isSome():
        result = result & TLEncode(obj.receive_date.get())


proc TLEncodeType*(obj: phoneCallRequested): seq[uint8] = 
    result = result & TLEncode(int32(-2014659757))
    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.access_hash)

    result = result & TLEncode(obj.date)

    result = result & TLEncode(obj.admin_id)

    result = result & TLEncode(obj.participant_id)

    result = result & TLEncode(obj.g_a_hash)

    result = result & TLEncode(obj.protocol)


proc TLEncodeType*(obj: phoneCallAccepted): seq[uint8] = 
    result = result & TLEncode(int32(-1719909046))
    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.access_hash)

    result = result & TLEncode(obj.date)

    result = result & TLEncode(obj.admin_id)

    result = result & TLEncode(obj.participant_id)

    result = result & TLEncode(obj.g_b)

    result = result & TLEncode(obj.protocol)


proc TLEncodeType*(obj: phoneCall): seq[uint8] = 
    result = result & TLEncode(int32(-2025673089))
    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.access_hash)

    result = result & TLEncode(obj.date)

    result = result & TLEncode(obj.admin_id)

    result = result & TLEncode(obj.participant_id)

    result = result & TLEncode(obj.g_a_or_b)

    result = result & TLEncode(obj.key_fingerprint)

    result = result & TLEncode(obj.protocol)

    result = result & TLEncode(obj.connections)

    result = result & TLEncode(obj.start_date)


proc TLEncodeType*(obj: phoneCallDiscarded): seq[uint8] = 
    result = result & TLEncode(int32(1355435489))
    if obj.reason.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.duration.isSome():
        obj.flags = obj.flags or 1 shl 1

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.id)

    if obj.reason.isSome():
        result = result & TLEncode(obj.reason.get())

    if obj.duration.isSome():
        result = result & TLEncode(obj.duration.get())


proc TLEncodeType*(obj: phoneConnection): seq[uint8] = 
    result = result & TLEncode(int32(-1655957568))
    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.ip)

    result = result & TLEncode(obj.ipv6)

    result = result & TLEncode(obj.port)

    result = result & TLEncode(obj.peer_tag)


proc TLEncodeType*(obj: phoneConnectionWebrtc): seq[uint8] = 
    result = result & TLEncode(int32(1667228533))
    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.ip)

    result = result & TLEncode(obj.ipv6)

    result = result & TLEncode(obj.port)

    result = result & TLEncode(obj.username)

    result = result & TLEncode(obj.password)


proc TLEncodeType*(obj: phoneCallProtocol): seq[uint8] = 
    result = result & TLEncode(int32(-58224696))
    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.min_layer)

    result = result & TLEncode(obj.max_layer)

    result = result & TLEncode(obj.library_versions)


proc TLEncodeType*(obj: phone_phoneCall): seq[uint8] = 
    result = result & TLEncode(int32(-326966976))
    result = result & TLEncode(obj.phone_call)

    result = result & TLEncode(obj.users)


proc TLEncodeType*(obj: upload_cdnFileReuploadNeeded): seq[uint8] = 
    result = result & TLEncode(int32(-290921362))
    result = result & TLEncode(obj.request_token)


proc TLEncodeType*(obj: upload_cdnFile): seq[uint8] = 
    result = result & TLEncode(int32(-1449145777))
    result = result & TLEncode(obj.bytes)


proc TLEncodeType*(obj: cdnPublicKey): seq[uint8] = 
    result = result & TLEncode(int32(-914167110))
    result = result & TLEncode(obj.dc_id)

    result = result & TLEncode(obj.public_key)


proc TLEncodeType*(obj: cdnConfig): seq[uint8] = 
    result = result & TLEncode(int32(1462101002))
    result = result & TLEncode(obj.public_keys)


proc TLEncodeType*(obj: langPackString): seq[uint8] = 
    result = result & TLEncode(int32(-892239370))
    result = result & TLEncode(obj.key)

    result = result & TLEncode(obj.value)


proc TLEncodeType*(obj: langPackStringPluralized): seq[uint8] = 
    result = result & TLEncode(int32(1816636575))
    if obj.zero_value.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.one_value.isSome():
        obj.flags = obj.flags or 1 shl 1

    if obj.two_value.isSome():
        obj.flags = obj.flags or 1 shl 2

    if obj.few_value.isSome():
        obj.flags = obj.flags or 1 shl 3

    if obj.many_value.isSome():
        obj.flags = obj.flags or 1 shl 4

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.key)

    if obj.zero_value.isSome():
        result = result & TLEncode(obj.zero_value.get())

    if obj.one_value.isSome():
        result = result & TLEncode(obj.one_value.get())

    if obj.two_value.isSome():
        result = result & TLEncode(obj.two_value.get())

    if obj.few_value.isSome():
        result = result & TLEncode(obj.few_value.get())

    if obj.many_value.isSome():
        result = result & TLEncode(obj.many_value.get())

    result = result & TLEncode(obj.other_value)


proc TLEncodeType*(obj: langPackStringDeleted): seq[uint8] = 
    result = result & TLEncode(int32(695856818))
    result = result & TLEncode(obj.key)


proc TLEncodeType*(obj: langPackDifference): seq[uint8] = 
    result = result & TLEncode(int32(-209337866))
    result = result & TLEncode(obj.lang_code)

    result = result & TLEncode(obj.from_version)

    result = result & TLEncode(obj.version)

    result = result & TLEncode(obj.strings)


proc TLEncodeType*(obj: langPackLanguage): seq[uint8] = 
    result = result & TLEncode(int32(-288727837))
    if obj.base_lang_code.isSome():
        obj.flags = obj.flags or 1 shl 1

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.name)

    result = result & TLEncode(obj.native_name)

    result = result & TLEncode(obj.lang_code)

    if obj.base_lang_code.isSome():
        result = result & TLEncode(obj.base_lang_code.get())

    result = result & TLEncode(obj.plural_code)

    result = result & TLEncode(obj.strings_count)

    result = result & TLEncode(obj.translated_count)

    result = result & TLEncode(obj.translations_url)


proc TLEncodeType*(obj: channelAdminLogEventActionChangeTitle): seq[uint8] = 
    result = result & TLEncode(int32(-421545947))
    result = result & TLEncode(obj.prev_value)

    result = result & TLEncode(obj.new_value)


proc TLEncodeType*(obj: channelAdminLogEventActionChangeAbout): seq[uint8] = 
    result = result & TLEncode(int32(1427671598))
    result = result & TLEncode(obj.prev_value)

    result = result & TLEncode(obj.new_value)


proc TLEncodeType*(obj: channelAdminLogEventActionChangeUsername): seq[uint8] = 
    result = result & TLEncode(int32(1783299128))
    result = result & TLEncode(obj.prev_value)

    result = result & TLEncode(obj.new_value)


proc TLEncodeType*(obj: channelAdminLogEventActionChangePhoto): seq[uint8] = 
    result = result & TLEncode(int32(1129042607))
    result = result & TLEncode(obj.prev_photo)

    result = result & TLEncode(obj.new_photo)


proc TLEncodeType*(obj: channelAdminLogEventActionToggleInvites): seq[uint8] = 
    result = result & TLEncode(int32(460916654))
    result = result & TLEncode(obj.new_value)


proc TLEncodeType*(obj: channelAdminLogEventActionToggleSignatures): seq[uint8] = 
    result = result & TLEncode(int32(648939889))
    result = result & TLEncode(obj.new_value)


proc TLEncodeType*(obj: channelAdminLogEventActionUpdatePinned): seq[uint8] = 
    result = result & TLEncode(int32(-370660328))
    result = result & TLEncode(obj.message)


proc TLEncodeType*(obj: channelAdminLogEventActionEditMessage): seq[uint8] = 
    result = result & TLEncode(int32(1889215493))
    result = result & TLEncode(obj.prev_message)

    result = result & TLEncode(obj.new_message)


proc TLEncodeType*(obj: channelAdminLogEventActionDeleteMessage): seq[uint8] = 
    result = result & TLEncode(int32(1121994683))
    result = result & TLEncode(obj.message)


proc TLEncodeType*(obj: channelAdminLogEventActionParticipantJoin): seq[uint8] = 
    result = result & TLEncode(int32(405815507))

proc TLEncodeType*(obj: channelAdminLogEventActionParticipantLeave): seq[uint8] = 
    result = result & TLEncode(int32(-124291086))

proc TLEncodeType*(obj: channelAdminLogEventActionParticipantInvite): seq[uint8] = 
    result = result & TLEncode(int32(-484690728))
    result = result & TLEncode(obj.participant)


proc TLEncodeType*(obj: channelAdminLogEventActionParticipantToggleBan): seq[uint8] = 
    result = result & TLEncode(int32(-422036098))
    result = result & TLEncode(obj.prev_participant)

    result = result & TLEncode(obj.new_participant)


proc TLEncodeType*(obj: channelAdminLogEventActionParticipantToggleAdmin): seq[uint8] = 
    result = result & TLEncode(int32(-714643696))
    result = result & TLEncode(obj.prev_participant)

    result = result & TLEncode(obj.new_participant)


proc TLEncodeType*(obj: channelAdminLogEventActionChangeStickerSet): seq[uint8] = 
    result = result & TLEncode(int32(-1312568665))
    result = result & TLEncode(obj.prev_stickerset)

    result = result & TLEncode(obj.new_stickerset)


proc TLEncodeType*(obj: channelAdminLogEventActionTogglePreHistoryHidden): seq[uint8] = 
    result = result & TLEncode(int32(1599903217))
    result = result & TLEncode(obj.new_value)


proc TLEncodeType*(obj: channelAdminLogEventActionDefaultBannedRights): seq[uint8] = 
    result = result & TLEncode(int32(771095562))
    result = result & TLEncode(obj.prev_banned_rights)

    result = result & TLEncode(obj.new_banned_rights)


proc TLEncodeType*(obj: channelAdminLogEventActionStopPoll): seq[uint8] = 
    result = result & TLEncode(int32(-1895328189))
    result = result & TLEncode(obj.message)


proc TLEncodeType*(obj: channelAdminLogEventActionChangeLinkedChat): seq[uint8] = 
    result = result & TLEncode(int32(-1569748965))
    result = result & TLEncode(obj.prev_value)

    result = result & TLEncode(obj.new_value)


proc TLEncodeType*(obj: channelAdminLogEventActionChangeLocation): seq[uint8] = 
    result = result & TLEncode(int32(-424187168))
    result = result & TLEncode(obj.prev_value)

    result = result & TLEncode(obj.new_value)


proc TLEncodeType*(obj: channelAdminLogEventActionToggleSlowMode): seq[uint8] = 
    result = result & TLEncode(int32(1401984889))
    result = result & TLEncode(obj.prev_value)

    result = result & TLEncode(obj.new_value)


proc TLEncodeType*(obj: channelAdminLogEvent): seq[uint8] = 
    result = result & TLEncode(int32(995769920))
    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.date)

    result = result & TLEncode(obj.user_id)

    result = result & TLEncode(obj.action)


proc TLEncodeType*(obj: channels_adminLogResults): seq[uint8] = 
    result = result & TLEncode(int32(-309659827))
    result = result & TLEncode(obj.events)

    result = result & TLEncode(obj.chats)

    result = result & TLEncode(obj.users)


proc TLEncodeType*(obj: channelAdminLogEventsFilter): seq[uint8] = 
    result = result & TLEncode(int32(-368018716))
    result = result & TLEncode(obj.flags)


proc TLEncodeType*(obj: popularContact): seq[uint8] = 
    result = result & TLEncode(int32(1558266229))
    result = result & TLEncode(obj.client_id)

    result = result & TLEncode(obj.importers)


proc TLEncodeType*(obj: messages_favedStickersNotModified): seq[uint8] = 
    result = result & TLEncode(int32(-1634752813))

proc TLEncodeType*(obj: messages_favedStickers): seq[uint8] = 
    result = result & TLEncode(int32(-209768682))
    result = result & TLEncode(obj.hash)

    result = result & TLEncode(obj.packs)

    result = result & TLEncode(obj.stickers)


proc TLEncodeType*(obj: recentMeUrlUnknown): seq[uint8] = 
    result = result & TLEncode(int32(1189204285))
    result = result & TLEncode(obj.url)


proc TLEncodeType*(obj: recentMeUrlUser): seq[uint8] = 
    result = result & TLEncode(int32(-1917045962))
    result = result & TLEncode(obj.url)

    result = result & TLEncode(obj.user_id)


proc TLEncodeType*(obj: recentMeUrlChat): seq[uint8] = 
    result = result & TLEncode(int32(-1608834311))
    result = result & TLEncode(obj.url)

    result = result & TLEncode(obj.chat_id)


proc TLEncodeType*(obj: recentMeUrlChatInvite): seq[uint8] = 
    result = result & TLEncode(int32(-347535331))
    result = result & TLEncode(obj.url)

    result = result & TLEncode(obj.chat_invite)


proc TLEncodeType*(obj: recentMeUrlStickerSet): seq[uint8] = 
    result = result & TLEncode(int32(-1140172836))
    result = result & TLEncode(obj.url)

    result = result & TLEncode(obj.set)


proc TLEncodeType*(obj: help_recentMeUrls): seq[uint8] = 
    result = result & TLEncode(int32(-533656208))
    result = result & TLEncode(obj.urls)

    result = result & TLEncode(obj.chats)

    result = result & TLEncode(obj.users)


proc TLEncodeType*(obj: inputSingleMedia): seq[uint8] = 
    result = result & TLEncode(int32(482797855))
    if obj.entities.isSome():
        obj.flags = obj.flags or 1 shl 0

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.media)

    result = result & TLEncode(obj.random_id)

    result = result & TLEncode(obj.message)

    if obj.entities.isSome():
        result = result & TLEncode(obj.entities.get())


proc TLEncodeType*(obj: webAuthorization): seq[uint8] = 
    result = result & TLEncode(int32(-892779534))
    result = result & TLEncode(obj.hash)

    result = result & TLEncode(obj.bot_id)

    result = result & TLEncode(obj.domain)

    result = result & TLEncode(obj.browser)

    result = result & TLEncode(obj.platform)

    result = result & TLEncode(obj.date_created)

    result = result & TLEncode(obj.date_active)

    result = result & TLEncode(obj.ip)

    result = result & TLEncode(obj.region)


proc TLEncodeType*(obj: account_webAuthorizations): seq[uint8] = 
    result = result & TLEncode(int32(-313079300))
    result = result & TLEncode(obj.authorizations)

    result = result & TLEncode(obj.users)


proc TLEncodeType*(obj: inputMessageID): seq[uint8] = 
    result = result & TLEncode(int32(-1502174430))
    result = result & TLEncode(obj.id)


proc TLEncodeType*(obj: inputMessageReplyTo): seq[uint8] = 
    result = result & TLEncode(int32(-1160215659))
    result = result & TLEncode(obj.id)


proc TLEncodeType*(obj: inputMessagePinned): seq[uint8] = 
    result = result & TLEncode(int32(-2037963464))

proc TLEncodeType*(obj: inputDialogPeer): seq[uint8] = 
    result = result & TLEncode(int32(-55902537))
    result = result & TLEncode(obj.peer)


proc TLEncodeType*(obj: inputDialogPeerFolder): seq[uint8] = 
    result = result & TLEncode(int32(1684014375))
    result = result & TLEncode(obj.folder_id)


proc TLEncodeType*(obj: dialogPeer): seq[uint8] = 
    result = result & TLEncode(int32(-445792507))
    result = result & TLEncode(obj.peer)


proc TLEncodeType*(obj: dialogPeerFolder): seq[uint8] = 
    result = result & TLEncode(int32(1363483106))
    result = result & TLEncode(obj.folder_id)


proc TLEncodeType*(obj: messages_foundStickerSetsNotModified): seq[uint8] = 
    result = result & TLEncode(int32(-716479024))

proc TLEncodeType*(obj: messages_foundStickerSets): seq[uint8] = 
    result = result & TLEncode(int32(1359533640))
    result = result & TLEncode(obj.hash)

    result = result & TLEncode(obj.sets)


proc TLEncodeType*(obj: fileHash): seq[uint8] = 
    result = result & TLEncode(int32(1648543603))
    result = result & TLEncode(obj.offset)

    result = result & TLEncode(obj.limit)

    result = result & TLEncode(obj.hash)


proc TLEncodeType*(obj: inputClientProxy): seq[uint8] = 
    result = result & TLEncode(int32(1968737087))
    result = result & TLEncode(obj.address)

    result = result & TLEncode(obj.port)


proc TLEncodeType*(obj: help_termsOfServiceUpdateEmpty): seq[uint8] = 
    result = result & TLEncode(int32(-483352705))
    result = result & TLEncode(obj.expires)


proc TLEncodeType*(obj: help_termsOfServiceUpdate): seq[uint8] = 
    result = result & TLEncode(int32(686618977))
    result = result & TLEncode(obj.expires)

    result = result & TLEncode(obj.terms_of_service)


proc TLEncodeType*(obj: inputSecureFileUploaded): seq[uint8] = 
    result = result & TLEncode(int32(859091184))
    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.parts)

    result = result & TLEncode(obj.md5_checksum)

    result = result & TLEncode(obj.file_hash)

    result = result & TLEncode(obj.secret)


proc TLEncodeType*(obj: inputSecureFile): seq[uint8] = 
    result = result & TLEncode(int32(1399317950))
    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.access_hash)


proc TLEncodeType*(obj: secureFileEmpty): seq[uint8] = 
    result = result & TLEncode(int32(1679398724))

proc TLEncodeType*(obj: secureFile): seq[uint8] = 
    result = result & TLEncode(int32(-534283678))
    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.access_hash)

    result = result & TLEncode(obj.size)

    result = result & TLEncode(obj.dc_id)

    result = result & TLEncode(obj.date)

    result = result & TLEncode(obj.file_hash)

    result = result & TLEncode(obj.secret)


proc TLEncodeType*(obj: secureData): seq[uint8] = 
    result = result & TLEncode(int32(-1964327229))
    result = result & TLEncode(obj.data)

    result = result & TLEncode(obj.data_hash)

    result = result & TLEncode(obj.secret)


proc TLEncodeType*(obj: securePlainPhone): seq[uint8] = 
    result = result & TLEncode(int32(2103482845))
    result = result & TLEncode(obj.phone)


proc TLEncodeType*(obj: securePlainEmail): seq[uint8] = 
    result = result & TLEncode(int32(569137759))
    result = result & TLEncode(obj.email)


proc TLEncodeType*(obj: secureValueTypePersonalDetails): seq[uint8] = 
    result = result & TLEncode(int32(-1658158621))

proc TLEncodeType*(obj: secureValueTypePassport): seq[uint8] = 
    result = result & TLEncode(int32(1034709504))

proc TLEncodeType*(obj: secureValueTypeDriverLicense): seq[uint8] = 
    result = result & TLEncode(int32(1849842752))

proc TLEncodeType*(obj: secureValueTypeIdentityCard): seq[uint8] = 
    result = result & TLEncode(int32(-1596951477))

proc TLEncodeType*(obj: secureValueTypeInternalPassport): seq[uint8] = 
    result = result & TLEncode(int32(-1717268701))

proc TLEncodeType*(obj: secureValueTypeAddress): seq[uint8] = 
    result = result & TLEncode(int32(-874308058))

proc TLEncodeType*(obj: secureValueTypeUtilityBill): seq[uint8] = 
    result = result & TLEncode(int32(-63531698))

proc TLEncodeType*(obj: secureValueTypeBankStatement): seq[uint8] = 
    result = result & TLEncode(int32(-1995211763))

proc TLEncodeType*(obj: secureValueTypeRentalAgreement): seq[uint8] = 
    result = result & TLEncode(int32(-1954007928))

proc TLEncodeType*(obj: secureValueTypePassportRegistration): seq[uint8] = 
    result = result & TLEncode(int32(-1713143702))

proc TLEncodeType*(obj: secureValueTypeTemporaryRegistration): seq[uint8] = 
    result = result & TLEncode(int32(-368907213))

proc TLEncodeType*(obj: secureValueTypePhone): seq[uint8] = 
    result = result & TLEncode(int32(-1289704741))

proc TLEncodeType*(obj: secureValueTypeEmail): seq[uint8] = 
    result = result & TLEncode(int32(-1908627474))

proc TLEncodeType*(obj: secureValue): seq[uint8] = 
    result = result & TLEncode(int32(411017418))
    if obj.data.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.front_side.isSome():
        obj.flags = obj.flags or 1 shl 1

    if obj.reverse_side.isSome():
        obj.flags = obj.flags or 1 shl 2

    if obj.selfie.isSome():
        obj.flags = obj.flags or 1 shl 3

    if obj.translation.isSome():
        obj.flags = obj.flags or 1 shl 6

    if obj.files.isSome():
        obj.flags = obj.flags or 1 shl 4

    if obj.plain_data.isSome():
        obj.flags = obj.flags or 1 shl 5

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.typeof)

    if obj.data.isSome():
        result = result & TLEncode(obj.data.get())

    if obj.front_side.isSome():
        result = result & TLEncode(obj.front_side.get())

    if obj.reverse_side.isSome():
        result = result & TLEncode(obj.reverse_side.get())

    if obj.selfie.isSome():
        result = result & TLEncode(obj.selfie.get())

    if obj.translation.isSome():
        result = result & TLEncode(obj.translation.get())

    if obj.files.isSome():
        result = result & TLEncode(obj.files.get())

    if obj.plain_data.isSome():
        result = result & TLEncode(obj.plain_data.get())

    result = result & TLEncode(obj.hash)


proc TLEncodeType*(obj: inputSecureValue): seq[uint8] = 
    result = result & TLEncode(int32(-618540889))
    if obj.data.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.front_side.isSome():
        obj.flags = obj.flags or 1 shl 1

    if obj.reverse_side.isSome():
        obj.flags = obj.flags or 1 shl 2

    if obj.selfie.isSome():
        obj.flags = obj.flags or 1 shl 3

    if obj.translation.isSome():
        obj.flags = obj.flags or 1 shl 6

    if obj.files.isSome():
        obj.flags = obj.flags or 1 shl 4

    if obj.plain_data.isSome():
        obj.flags = obj.flags or 1 shl 5

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.typeof)

    if obj.data.isSome():
        result = result & TLEncode(obj.data.get())

    if obj.front_side.isSome():
        result = result & TLEncode(obj.front_side.get())

    if obj.reverse_side.isSome():
        result = result & TLEncode(obj.reverse_side.get())

    if obj.selfie.isSome():
        result = result & TLEncode(obj.selfie.get())

    if obj.translation.isSome():
        result = result & TLEncode(obj.translation.get())

    if obj.files.isSome():
        result = result & TLEncode(obj.files.get())

    if obj.plain_data.isSome():
        result = result & TLEncode(obj.plain_data.get())


proc TLEncodeType*(obj: secureValueHash): seq[uint8] = 
    result = result & TLEncode(int32(-316748368))
    result = result & TLEncode(obj.typeof)

    result = result & TLEncode(obj.hash)


proc TLEncodeType*(obj: secureValueErrorData): seq[uint8] = 
    result = result & TLEncode(int32(-391902247))
    result = result & TLEncode(obj.typeof)

    result = result & TLEncode(obj.data_hash)

    result = result & TLEncode(obj.field)

    result = result & TLEncode(obj.text)


proc TLEncodeType*(obj: secureValueErrorFrontSide): seq[uint8] = 
    result = result & TLEncode(int32(-1103234560))
    result = result & TLEncode(obj.typeof)

    result = result & TLEncode(obj.file_hash)

    result = result & TLEncode(obj.text)


proc TLEncodeType*(obj: secureValueErrorReverseSide): seq[uint8] = 
    result = result & TLEncode(int32(-2037765467))
    result = result & TLEncode(obj.typeof)

    result = result & TLEncode(obj.file_hash)

    result = result & TLEncode(obj.text)


proc TLEncodeType*(obj: secureValueErrorSelfie): seq[uint8] = 
    result = result & TLEncode(int32(-449327402))
    result = result & TLEncode(obj.typeof)

    result = result & TLEncode(obj.file_hash)

    result = result & TLEncode(obj.text)


proc TLEncodeType*(obj: secureValueErrorFile): seq[uint8] = 
    result = result & TLEncode(int32(2054162547))
    result = result & TLEncode(obj.typeof)

    result = result & TLEncode(obj.file_hash)

    result = result & TLEncode(obj.text)


proc TLEncodeType*(obj: secureValueErrorFiles): seq[uint8] = 
    result = result & TLEncode(int32(1717706985))
    result = result & TLEncode(obj.typeof)

    result = result & TLEncode(obj.file_hash)

    result = result & TLEncode(obj.text)


proc TLEncodeType*(obj: secureValueError): seq[uint8] = 
    result = result & TLEncode(int32(-2036501105))
    result = result & TLEncode(obj.typeof)

    result = result & TLEncode(obj.hash)

    result = result & TLEncode(obj.text)


proc TLEncodeType*(obj: secureValueErrorTranslationFile): seq[uint8] = 
    result = result & TLEncode(int32(-1592506512))
    result = result & TLEncode(obj.typeof)

    result = result & TLEncode(obj.file_hash)

    result = result & TLEncode(obj.text)


proc TLEncodeType*(obj: secureValueErrorTranslationFiles): seq[uint8] = 
    result = result & TLEncode(int32(878931416))
    result = result & TLEncode(obj.typeof)

    result = result & TLEncode(obj.file_hash)

    result = result & TLEncode(obj.text)


proc TLEncodeType*(obj: secureCredentialsEncrypted): seq[uint8] = 
    result = result & TLEncode(int32(871426631))
    result = result & TLEncode(obj.data)

    result = result & TLEncode(obj.hash)

    result = result & TLEncode(obj.secret)


proc TLEncodeType*(obj: account_authorizationForm): seq[uint8] = 
    result = result & TLEncode(int32(-1389486888))
    if obj.privacy_policy_url.isSome():
        obj.flags = obj.flags or 1 shl 0

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.required_types)

    result = result & TLEncode(obj.values)

    result = result & TLEncode(obj.errors)

    result = result & TLEncode(obj.users)

    if obj.privacy_policy_url.isSome():
        result = result & TLEncode(obj.privacy_policy_url.get())


proc TLEncodeType*(obj: account_sentEmailCode): seq[uint8] = 
    result = result & TLEncode(int32(-2128640689))
    result = result & TLEncode(obj.email_pattern)

    result = result & TLEncode(obj.length)


proc TLEncodeType*(obj: help_deepLinkInfoEmpty): seq[uint8] = 
    result = result & TLEncode(int32(1722786150))

proc TLEncodeType*(obj: help_deepLinkInfo): seq[uint8] = 
    result = result & TLEncode(int32(1783556146))
    if obj.entities.isSome():
        obj.flags = obj.flags or 1 shl 1

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.message)

    if obj.entities.isSome():
        result = result & TLEncode(obj.entities.get())


proc TLEncodeType*(obj: savedPhoneContact): seq[uint8] = 
    result = result & TLEncode(int32(289586518))
    result = result & TLEncode(obj.phone)

    result = result & TLEncode(obj.first_name)

    result = result & TLEncode(obj.last_name)

    result = result & TLEncode(obj.date)


proc TLEncodeType*(obj: account_takeout): seq[uint8] = 
    result = result & TLEncode(int32(1304052993))
    result = result & TLEncode(obj.id)


proc TLEncodeType*(obj: passwordKdfAlgoUnknown): seq[uint8] = 
    result = result & TLEncode(int32(-732254058))

proc TLEncodeType*(obj: passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow): seq[uint8] = 
    result = result & TLEncode(int32(982592842))
    result = result & TLEncode(obj.salt1)

    result = result & TLEncode(obj.salt2)

    result = result & TLEncode(obj.g)

    result = result & TLEncode(obj.p)


proc TLEncodeType*(obj: securePasswordKdfAlgoUnknown): seq[uint8] = 
    result = result & TLEncode(int32(1250244352))

proc TLEncodeType*(obj: securePasswordKdfAlgoPBKDF2HMACSHA512iter100000): seq[uint8] = 
    result = result & TLEncode(int32(-1141711456))
    result = result & TLEncode(obj.salt)


proc TLEncodeType*(obj: securePasswordKdfAlgoSHA512): seq[uint8] = 
    result = result & TLEncode(int32(-2042159726))
    result = result & TLEncode(obj.salt)


proc TLEncodeType*(obj: secureSecretSettings): seq[uint8] = 
    result = result & TLEncode(int32(354925740))
    result = result & TLEncode(obj.secure_algo)

    result = result & TLEncode(obj.secure_secret)

    result = result & TLEncode(obj.secure_secret_id)


proc TLEncodeType*(obj: inputCheckPasswordEmpty): seq[uint8] = 
    result = result & TLEncode(int32(-1736378792))

proc TLEncodeType*(obj: inputCheckPasswordSRP): seq[uint8] = 
    result = result & TLEncode(int32(-763367294))
    result = result & TLEncode(obj.srp_id)

    result = result & TLEncode(obj.A)

    result = result & TLEncode(obj.M1)


proc TLEncodeType*(obj: secureRequiredType): seq[uint8] = 
    result = result & TLEncode(int32(-2103600678))
    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.typeof)


proc TLEncodeType*(obj: secureRequiredTypeOneOf): seq[uint8] = 
    result = result & TLEncode(int32(658996032))
    result = result & TLEncode(obj.types)


proc TLEncodeType*(obj: help_passportConfigNotModified): seq[uint8] = 
    result = result & TLEncode(int32(-1078332329))

proc TLEncodeType*(obj: help_passportConfig): seq[uint8] = 
    result = result & TLEncode(int32(-1600596305))
    result = result & TLEncode(obj.hash)

    result = result & TLEncode(obj.countries_langs)


proc TLEncodeType*(obj: inputAppEvent): seq[uint8] = 
    result = result & TLEncode(int32(488313413))
    result = result & TLEncode(obj.time)

    result = result & TLEncode(obj.typeof)

    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.data)


proc TLEncodeType*(obj: jsonObjectValue): seq[uint8] = 
    result = result & TLEncode(int32(-1059185703))
    result = result & TLEncode(obj.key)

    result = result & TLEncode(obj.value)


proc TLEncodeType*(obj: jsonNull): seq[uint8] = 
    result = result & TLEncode(int32(1064139624))

proc TLEncodeType*(obj: jsonBool): seq[uint8] = 
    result = result & TLEncode(int32(-952869270))
    result = result & TLEncode(obj.value)


proc TLEncodeType*(obj: jsonNumber): seq[uint8] = 
    result = result & TLEncode(int32(736157604))
    result = result & TLEncode(obj.value)


proc TLEncodeType*(obj: jsonString): seq[uint8] = 
    result = result & TLEncode(int32(-1222740358))
    result = result & TLEncode(obj.value)


proc TLEncodeType*(obj: jsonArray): seq[uint8] = 
    result = result & TLEncode(int32(-146520221))
    result = result & TLEncode(obj.value)


proc TLEncodeType*(obj: jsonObject): seq[uint8] = 
    result = result & TLEncode(int32(-1715350371))
    result = result & TLEncode(obj.value)


proc TLEncodeType*(obj: pageTableCell): seq[uint8] = 
    result = result & TLEncode(int32(878078826))
    if obj.text.isSome():
        obj.flags = obj.flags or 1 shl 7

    if obj.colspan.isSome():
        obj.flags = obj.flags or 1 shl 1

    if obj.rowspan.isSome():
        obj.flags = obj.flags or 1 shl 2

    result = result & TLEncode(obj.flags)

    if obj.text.isSome():
        result = result & TLEncode(obj.text.get())

    if obj.colspan.isSome():
        result = result & TLEncode(obj.colspan.get())

    if obj.rowspan.isSome():
        result = result & TLEncode(obj.rowspan.get())


proc TLEncodeType*(obj: pageTableRow): seq[uint8] = 
    result = result & TLEncode(int32(-524237339))
    result = result & TLEncode(obj.cells)


proc TLEncodeType*(obj: pageCaption): seq[uint8] = 
    result = result & TLEncode(int32(1869903447))
    result = result & TLEncode(obj.text)

    result = result & TLEncode(obj.credit)


proc TLEncodeType*(obj: pageListItemText): seq[uint8] = 
    result = result & TLEncode(int32(-1188055347))
    result = result & TLEncode(obj.text)


proc TLEncodeType*(obj: pageListItemBlocks): seq[uint8] = 
    result = result & TLEncode(int32(635466748))
    result = result & TLEncode(obj.blocks)


proc TLEncodeType*(obj: pageListOrderedItemText): seq[uint8] = 
    result = result & TLEncode(int32(1577484359))
    result = result & TLEncode(obj.num)

    result = result & TLEncode(obj.text)


proc TLEncodeType*(obj: pageListOrderedItemBlocks): seq[uint8] = 
    result = result & TLEncode(int32(-1730311882))
    result = result & TLEncode(obj.num)

    result = result & TLEncode(obj.blocks)


proc TLEncodeType*(obj: pageRelatedArticle): seq[uint8] = 
    result = result & TLEncode(int32(-1282352120))
    if obj.title.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.description.isSome():
        obj.flags = obj.flags or 1 shl 1

    if obj.photo_id.isSome():
        obj.flags = obj.flags or 1 shl 2

    if obj.author.isSome():
        obj.flags = obj.flags or 1 shl 3

    if obj.published_date.isSome():
        obj.flags = obj.flags or 1 shl 4

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.url)

    result = result & TLEncode(obj.webpage_id)

    if obj.title.isSome():
        result = result & TLEncode(obj.title.get())

    if obj.description.isSome():
        result = result & TLEncode(obj.description.get())

    if obj.photo_id.isSome():
        result = result & TLEncode(obj.photo_id.get())

    if obj.author.isSome():
        result = result & TLEncode(obj.author.get())

    if obj.published_date.isSome():
        result = result & TLEncode(obj.published_date.get())


proc TLEncodeType*(obj: page): seq[uint8] = 
    result = result & TLEncode(int32(-1738178803))
    if obj.views.isSome():
        obj.flags = obj.flags or 1 shl 3

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.url)

    result = result & TLEncode(obj.blocks)

    result = result & TLEncode(obj.photos)

    result = result & TLEncode(obj.documents)

    if obj.views.isSome():
        result = result & TLEncode(obj.views.get())


proc TLEncodeType*(obj: help_supportName): seq[uint8] = 
    result = result & TLEncode(int32(-1945767479))
    result = result & TLEncode(obj.name)


proc TLEncodeType*(obj: help_userInfoEmpty): seq[uint8] = 
    result = result & TLEncode(int32(-206688531))

proc TLEncodeType*(obj: help_userInfo): seq[uint8] = 
    result = result & TLEncode(int32(515077504))
    result = result & TLEncode(obj.message)

    result = result & TLEncode(obj.entities)

    result = result & TLEncode(obj.author)

    result = result & TLEncode(obj.date)


proc TLEncodeType*(obj: pollAnswer): seq[uint8] = 
    result = result & TLEncode(int32(1823064809))
    result = result & TLEncode(obj.text)

    result = result & TLEncode(obj.option)


proc TLEncodeType*(obj: poll): seq[uint8] = 
    result = result & TLEncode(int32(-2032041631))
    if obj.close_period.isSome():
        obj.flags = obj.flags or 1 shl 4

    if obj.close_date.isSome():
        obj.flags = obj.flags or 1 shl 5

    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.question)

    result = result & TLEncode(obj.answers)

    if obj.close_period.isSome():
        result = result & TLEncode(obj.close_period.get())

    if obj.close_date.isSome():
        result = result & TLEncode(obj.close_date.get())


proc TLEncodeType*(obj: pollAnswerVoters): seq[uint8] = 
    result = result & TLEncode(int32(997055186))
    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.option)

    result = result & TLEncode(obj.voters)


proc TLEncodeType*(obj: pollResults): seq[uint8] = 
    result = result & TLEncode(int32(-1159937629))
    if obj.results.isSome():
        obj.flags = obj.flags or 1 shl 1

    if obj.total_voters.isSome():
        obj.flags = obj.flags or 1 shl 2

    if obj.recent_voters.isSome():
        obj.flags = obj.flags or 1 shl 3

    if obj.solution.isSome():
        obj.flags = obj.flags or 1 shl 4

    if obj.solution_entities.isSome():
        obj.flags = obj.flags or 1 shl 4

    result = result & TLEncode(obj.flags)

    if obj.results.isSome():
        result = result & TLEncode(obj.results.get())

    if obj.total_voters.isSome():
        result = result & TLEncode(obj.total_voters.get())

    if obj.recent_voters.isSome():
        result = result & TLEncode(obj.recent_voters.get())

    if obj.solution.isSome():
        result = result & TLEncode(obj.solution.get())

    if obj.solution_entities.isSome():
        result = result & TLEncode(obj.solution_entities.get())


proc TLEncodeType*(obj: chatOnlines): seq[uint8] = 
    result = result & TLEncode(int32(-264117680))
    result = result & TLEncode(obj.onlines)


proc TLEncodeType*(obj: statsURL): seq[uint8] = 
    result = result & TLEncode(int32(1202287072))
    result = result & TLEncode(obj.url)


proc TLEncodeType*(obj: chatAdminRights): seq[uint8] = 
    result = result & TLEncode(int32(1605510357))
    result = result & TLEncode(obj.flags)


proc TLEncodeType*(obj: chatBannedRights): seq[uint8] = 
    result = result & TLEncode(int32(-1626209256))
    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.until_date)


proc TLEncodeType*(obj: inputWallPaper): seq[uint8] = 
    result = result & TLEncode(int32(-433014407))
    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.access_hash)


proc TLEncodeType*(obj: inputWallPaperSlug): seq[uint8] = 
    result = result & TLEncode(int32(1913199744))
    result = result & TLEncode(obj.slug)


proc TLEncodeType*(obj: inputWallPaperNoFile): seq[uint8] = 
    result = result & TLEncode(int32(-2077770836))

proc TLEncodeType*(obj: account_wallPapersNotModified): seq[uint8] = 
    result = result & TLEncode(int32(471437699))

proc TLEncodeType*(obj: account_wallPapers): seq[uint8] = 
    result = result & TLEncode(int32(1881892265))
    result = result & TLEncode(obj.hash)

    result = result & TLEncode(obj.wallpapers)


proc TLEncodeType*(obj: codeSettings): seq[uint8] = 
    result = result & TLEncode(int32(-557924733))
    result = result & TLEncode(obj.flags)


proc TLEncodeType*(obj: wallPaperSettings): seq[uint8] = 
    result = result & TLEncode(int32(1351012224))
    if obj.background_color.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.second_background_color.isSome():
        obj.flags = obj.flags or 1 shl 4

    if obj.intensity.isSome():
        obj.flags = obj.flags or 1 shl 3

    if obj.rotation.isSome():
        obj.flags = obj.flags or 1 shl 4

    result = result & TLEncode(obj.flags)

    if obj.background_color.isSome():
        result = result & TLEncode(obj.background_color.get())

    if obj.second_background_color.isSome():
        result = result & TLEncode(obj.second_background_color.get())

    if obj.intensity.isSome():
        result = result & TLEncode(obj.intensity.get())

    if obj.rotation.isSome():
        result = result & TLEncode(obj.rotation.get())


proc TLEncodeType*(obj: autoDownloadSettings): seq[uint8] = 
    result = result & TLEncode(int32(-532532493))
    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.photo_size_max)

    result = result & TLEncode(obj.video_size_max)

    result = result & TLEncode(obj.file_size_max)

    result = result & TLEncode(obj.video_upload_maxbitrate)


proc TLEncodeType*(obj: account_autoDownloadSettings): seq[uint8] = 
    result = result & TLEncode(int32(1674235686))
    result = result & TLEncode(obj.low)

    result = result & TLEncode(obj.medium)

    result = result & TLEncode(obj.high)


proc TLEncodeType*(obj: emojiKeyword): seq[uint8] = 
    result = result & TLEncode(int32(-709641735))
    result = result & TLEncode(obj.keyword)

    result = result & TLEncode(obj.emoticons)


proc TLEncodeType*(obj: emojiKeywordDeleted): seq[uint8] = 
    result = result & TLEncode(int32(594408994))
    result = result & TLEncode(obj.keyword)

    result = result & TLEncode(obj.emoticons)


proc TLEncodeType*(obj: emojiKeywordsDifference): seq[uint8] = 
    result = result & TLEncode(int32(1556570557))
    result = result & TLEncode(obj.lang_code)

    result = result & TLEncode(obj.from_version)

    result = result & TLEncode(obj.version)

    result = result & TLEncode(obj.keywords)


proc TLEncodeType*(obj: emojiURL): seq[uint8] = 
    result = result & TLEncode(int32(-1519029347))
    result = result & TLEncode(obj.url)


proc TLEncodeType*(obj: emojiLanguage): seq[uint8] = 
    result = result & TLEncode(int32(-1275374751))
    result = result & TLEncode(obj.lang_code)


proc TLEncodeType*(obj: fileLocationToBeDeprecated): seq[uint8] = 
    result = result & TLEncode(int32(-1132476723))
    result = result & TLEncode(obj.volume_id)

    result = result & TLEncode(obj.local_id)


proc TLEncodeType*(obj: folder): seq[uint8] = 
    result = result & TLEncode(int32(-11252123))
    if obj.photo.isSome():
        obj.flags = obj.flags or 1 shl 3

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.title)

    if obj.photo.isSome():
        result = result & TLEncode(obj.photo.get())


proc TLEncodeType*(obj: inputFolderPeer): seq[uint8] = 
    result = result & TLEncode(int32(-70073706))
    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.folder_id)


proc TLEncodeType*(obj: folderPeer): seq[uint8] = 
    result = result & TLEncode(int32(-373643672))
    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.folder_id)


proc TLEncodeType*(obj: messages_searchCounter): seq[uint8] = 
    result = result & TLEncode(int32(-398136321))
    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.filter)

    result = result & TLEncode(obj.count)


proc TLEncodeType*(obj: urlAuthResultRequest): seq[uint8] = 
    result = result & TLEncode(int32(-1831650802))
    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.bot)

    result = result & TLEncode(obj.domain)


proc TLEncodeType*(obj: urlAuthResultAccepted): seq[uint8] = 
    result = result & TLEncode(int32(-1886646706))
    result = result & TLEncode(obj.url)


proc TLEncodeType*(obj: urlAuthResultDefault): seq[uint8] = 
    result = result & TLEncode(int32(-1445536993))

proc TLEncodeType*(obj: channelLocationEmpty): seq[uint8] = 
    result = result & TLEncode(int32(-1078612597))

proc TLEncodeType*(obj: channelLocation): seq[uint8] = 
    result = result & TLEncode(int32(547062491))
    result = result & TLEncode(obj.geo_point)

    result = result & TLEncode(obj.address)


proc TLEncodeType*(obj: peerLocated): seq[uint8] = 
    result = result & TLEncode(int32(-901375139))
    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.expires)

    result = result & TLEncode(obj.distance)


proc TLEncodeType*(obj: peerSelfLocated): seq[uint8] = 
    result = result & TLEncode(int32(-118740917))
    result = result & TLEncode(obj.expires)


proc TLEncodeType*(obj: restrictionReason): seq[uint8] = 
    result = result & TLEncode(int32(-797791052))
    result = result & TLEncode(obj.platform)

    result = result & TLEncode(obj.reason)

    result = result & TLEncode(obj.text)


proc TLEncodeType*(obj: inputTheme): seq[uint8] = 
    result = result & TLEncode(int32(1012306921))
    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.access_hash)


proc TLEncodeType*(obj: inputThemeSlug): seq[uint8] = 
    result = result & TLEncode(int32(-175567375))
    result = result & TLEncode(obj.slug)


proc TLEncodeType*(obj: theme): seq[uint8] = 
    result = result & TLEncode(int32(686887232))
    if obj.document.isSome():
        obj.flags = obj.flags or 1 shl 2

    if obj.settings.isSome():
        obj.flags = obj.flags or 1 shl 3

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.access_hash)

    result = result & TLEncode(obj.slug)

    result = result & TLEncode(obj.title)

    if obj.document.isSome():
        result = result & TLEncode(obj.document.get())

    if obj.settings.isSome():
        result = result & TLEncode(obj.settings.get())

    result = result & TLEncode(obj.installs_count)


proc TLEncodeType*(obj: account_themesNotModified): seq[uint8] = 
    result = result & TLEncode(int32(-199313886))

proc TLEncodeType*(obj: account_themes): seq[uint8] = 
    result = result & TLEncode(int32(2137482273))
    result = result & TLEncode(obj.hash)

    result = result & TLEncode(obj.themes)


proc TLEncodeType*(obj: auth_loginToken): seq[uint8] = 
    result = result & TLEncode(int32(1654593920))
    result = result & TLEncode(obj.expires)

    result = result & TLEncode(obj.token)


proc TLEncodeType*(obj: auth_loginTokenMigrateTo): seq[uint8] = 
    result = result & TLEncode(int32(1760137568))
    result = result & TLEncode(obj.dc_id)

    result = result & TLEncode(obj.token)


proc TLEncodeType*(obj: auth_loginTokenSuccess): seq[uint8] = 
    result = result & TLEncode(int32(957176926))
    result = result & TLEncode(obj.authorization)


proc TLEncodeType*(obj: account_contentSettings): seq[uint8] = 
    result = result & TLEncode(int32(1474462241))
    result = result & TLEncode(obj.flags)


proc TLEncodeType*(obj: messages_inactiveChats): seq[uint8] = 
    result = result & TLEncode(int32(-1456996667))
    result = result & TLEncode(obj.dates)

    result = result & TLEncode(obj.chats)

    result = result & TLEncode(obj.users)


proc TLEncodeType*(obj: baseThemeClassic): seq[uint8] = 
    result = result & TLEncode(int32(-1012849566))

proc TLEncodeType*(obj: baseThemeDay): seq[uint8] = 
    result = result & TLEncode(int32(-69724536))

proc TLEncodeType*(obj: baseThemeNight): seq[uint8] = 
    result = result & TLEncode(int32(-1212997976))

proc TLEncodeType*(obj: baseThemeTinted): seq[uint8] = 
    result = result & TLEncode(int32(1834973166))

proc TLEncodeType*(obj: baseThemeArctic): seq[uint8] = 
    result = result & TLEncode(int32(1527845466))

proc TLEncodeType*(obj: inputThemeSettings): seq[uint8] = 
    result = result & TLEncode(int32(-1118798639))
    if obj.message_top_color.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.message_bottom_color.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.wallpaper.isSome():
        obj.flags = obj.flags or 1 shl 1

    if obj.wallpaper_settings.isSome():
        obj.flags = obj.flags or 1 shl 1

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.base_theme)

    result = result & TLEncode(obj.accent_color)

    if obj.message_top_color.isSome():
        result = result & TLEncode(obj.message_top_color.get())

    if obj.message_bottom_color.isSome():
        result = result & TLEncode(obj.message_bottom_color.get())

    if obj.wallpaper.isSome():
        result = result & TLEncode(obj.wallpaper.get())

    if obj.wallpaper_settings.isSome():
        result = result & TLEncode(obj.wallpaper_settings.get())


proc TLEncodeType*(obj: themeSettings): seq[uint8] = 
    result = result & TLEncode(int32(-1676371894))
    if obj.message_top_color.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.message_bottom_color.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.wallpaper.isSome():
        obj.flags = obj.flags or 1 shl 1

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.base_theme)

    result = result & TLEncode(obj.accent_color)

    if obj.message_top_color.isSome():
        result = result & TLEncode(obj.message_top_color.get())

    if obj.message_bottom_color.isSome():
        result = result & TLEncode(obj.message_bottom_color.get())

    if obj.wallpaper.isSome():
        result = result & TLEncode(obj.wallpaper.get())


proc TLEncodeType*(obj: webPageAttributeTheme): seq[uint8] = 
    result = result & TLEncode(int32(1421174295))
    if obj.documents.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.settings.isSome():
        obj.flags = obj.flags or 1 shl 1

    result = result & TLEncode(obj.flags)

    if obj.documents.isSome():
        result = result & TLEncode(obj.documents.get())

    if obj.settings.isSome():
        result = result & TLEncode(obj.settings.get())


proc TLEncodeType*(obj: messageUserVote): seq[uint8] = 
    result = result & TLEncode(int32(-1567730343))
    result = result & TLEncode(obj.user_id)

    result = result & TLEncode(obj.option)

    result = result & TLEncode(obj.date)


proc TLEncodeType*(obj: messageUserVoteInputOption): seq[uint8] = 
    result = result & TLEncode(int32(909603888))
    result = result & TLEncode(obj.user_id)

    result = result & TLEncode(obj.date)


proc TLEncodeType*(obj: messageUserVoteMultiple): seq[uint8] = 
    result = result & TLEncode(int32(-386003488))
    result = result & TLEncode(obj.user_id)

    result = result & TLEncode(obj.options)

    result = result & TLEncode(obj.date)


proc TLEncodeType*(obj: messages_votesList): seq[uint8] = 
    result = result & TLEncode(int32(-2109774704))
    if obj.next_offset.isSome():
        obj.flags = obj.flags or 1 shl 0

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.count)

    result = result & TLEncode(obj.votes)

    result = result & TLEncode(obj.users)

    if obj.next_offset.isSome():
        result = result & TLEncode(obj.next_offset.get())


proc TLEncodeType*(obj: bankCardOpenUrl): seq[uint8] = 
    result = result & TLEncode(int32(-177732982))
    result = result & TLEncode(obj.url)

    result = result & TLEncode(obj.name)


proc TLEncodeType*(obj: payments_bankCardData): seq[uint8] = 
    result = result & TLEncode(int32(1042605427))
    result = result & TLEncode(obj.title)

    result = result & TLEncode(obj.open_urls)


proc TLEncodeType*(obj: dialogFilter): seq[uint8] = 
    result = result & TLEncode(int32(1949890536))
    if obj.emoticon.isSome():
        obj.flags = obj.flags or 1 shl 25

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.title)

    if obj.emoticon.isSome():
        result = result & TLEncode(obj.emoticon.get())

    result = result & TLEncode(obj.pinned_peers)

    result = result & TLEncode(obj.include_peers)

    result = result & TLEncode(obj.exclude_peers)


proc TLEncodeType*(obj: dialogFilterSuggested): seq[uint8] = 
    result = result & TLEncode(int32(2004110666))
    result = result & TLEncode(obj.filter)

    result = result & TLEncode(obj.description)


proc TLEncodeType*(obj: statsDateRangeDays): seq[uint8] = 
    result = result & TLEncode(int32(-1237848657))
    result = result & TLEncode(obj.min_date)

    result = result & TLEncode(obj.max_date)


proc TLEncodeType*(obj: statsAbsValueAndPrev): seq[uint8] = 
    result = result & TLEncode(int32(-884757282))
    result = result & TLEncode(obj.current)

    result = result & TLEncode(obj.previous)


proc TLEncodeType*(obj: statsPercentValue): seq[uint8] = 
    result = result & TLEncode(int32(-875679776))
    result = result & TLEncode(obj.part)

    result = result & TLEncode(obj.total)


proc TLEncodeType*(obj: statsGraphAsync): seq[uint8] = 
    result = result & TLEncode(int32(1244130093))
    result = result & TLEncode(obj.token)


proc TLEncodeType*(obj: statsGraphError): seq[uint8] = 
    result = result & TLEncode(int32(-1092839390))
    result = result & TLEncode(obj.error)


proc TLEncodeType*(obj: statsGraph): seq[uint8] = 
    result = result & TLEncode(int32(-1901828938))
    if obj.zoom_token.isSome():
        obj.flags = obj.flags or 1 shl 0

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.json)

    if obj.zoom_token.isSome():
        result = result & TLEncode(obj.zoom_token.get())


proc TLEncodeType*(obj: messageInteractionCounters): seq[uint8] = 
    result = result & TLEncode(int32(-1387279939))
    result = result & TLEncode(obj.msg_id)

    result = result & TLEncode(obj.views)

    result = result & TLEncode(obj.forwards)


proc TLEncodeType*(obj: stats_broadcastStats): seq[uint8] = 
    result = result & TLEncode(int32(-1107852396))
    result = result & TLEncode(obj.period)

    result = result & TLEncode(obj.followers)

    result = result & TLEncode(obj.views_per_post)

    result = result & TLEncode(obj.shares_per_post)

    result = result & TLEncode(obj.enabled_notifications)

    result = result & TLEncode(obj.growth_graph)

    result = result & TLEncode(obj.followers_graph)

    result = result & TLEncode(obj.mute_graph)

    result = result & TLEncode(obj.top_hours_graph)

    result = result & TLEncode(obj.interactions_graph)

    result = result & TLEncode(obj.iv_interactions_graph)

    result = result & TLEncode(obj.views_by_source_graph)

    result = result & TLEncode(obj.new_followers_by_source_graph)

    result = result & TLEncode(obj.languages_graph)

    result = result & TLEncode(obj.recent_message_interactions)


proc TLEncodeType*(obj: help_promoDataEmpty): seq[uint8] = 
    result = result & TLEncode(int32(-1728664459))
    result = result & TLEncode(obj.expires)


proc TLEncodeType*(obj: help_promoData): seq[uint8] = 
    result = result & TLEncode(int32(-1942390465))
    if obj.psa_type.isSome():
        obj.flags = obj.flags or 1 shl 1

    if obj.psa_message.isSome():
        obj.flags = obj.flags or 1 shl 2

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.expires)

    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.chats)

    result = result & TLEncode(obj.users)

    if obj.psa_type.isSome():
        result = result & TLEncode(obj.psa_type.get())

    if obj.psa_message.isSome():
        result = result & TLEncode(obj.psa_message.get())


proc TLEncodeType*(obj: videoSize): seq[uint8] = 
    result = result & TLEncode(int32(-399391402))
    if obj.video_start_ts.isSome():
        obj.flags = obj.flags or 1 shl 0

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.typeof)

    result = result & TLEncode(obj.location)

    result = result & TLEncode(obj.w)

    result = result & TLEncode(obj.h)

    result = result & TLEncode(obj.size)

    if obj.video_start_ts.isSome():
        result = result & TLEncode(obj.video_start_ts.get())


proc TLEncodeType*(obj: statsGroupTopPoster): seq[uint8] = 
    result = result & TLEncode(int32(418631927))
    result = result & TLEncode(obj.user_id)

    result = result & TLEncode(obj.messages)

    result = result & TLEncode(obj.avg_chars)


proc TLEncodeType*(obj: statsGroupTopAdmin): seq[uint8] = 
    result = result & TLEncode(int32(1611985938))
    result = result & TLEncode(obj.user_id)

    result = result & TLEncode(obj.deleted)

    result = result & TLEncode(obj.kicked)

    result = result & TLEncode(obj.banned)


proc TLEncodeType*(obj: statsGroupTopInviter): seq[uint8] = 
    result = result & TLEncode(int32(831924812))
    result = result & TLEncode(obj.user_id)

    result = result & TLEncode(obj.invitations)


proc TLEncodeType*(obj: stats_megagroupStats): seq[uint8] = 
    result = result & TLEncode(int32(-276825834))
    result = result & TLEncode(obj.period)

    result = result & TLEncode(obj.members)

    result = result & TLEncode(obj.messages)

    result = result & TLEncode(obj.viewers)

    result = result & TLEncode(obj.posters)

    result = result & TLEncode(obj.growth_graph)

    result = result & TLEncode(obj.members_graph)

    result = result & TLEncode(obj.new_members_by_source_graph)

    result = result & TLEncode(obj.languages_graph)

    result = result & TLEncode(obj.messages_graph)

    result = result & TLEncode(obj.actions_graph)

    result = result & TLEncode(obj.top_hours_graph)

    result = result & TLEncode(obj.weekdays_graph)

    result = result & TLEncode(obj.top_posters)

    result = result & TLEncode(obj.top_admins)

    result = result & TLEncode(obj.top_inviters)

    result = result & TLEncode(obj.users)


proc TLEncodeType*(obj: globalPrivacySettings): seq[uint8] = 
    result = result & TLEncode(int32(-1096616924))
    if obj.archive_and_mute_new_noncontact_peers.isSome():
        obj.flags = obj.flags or 1 shl 0

    result = result & TLEncode(obj.flags)

    if obj.archive_and_mute_new_noncontact_peers.isSome():
        result = result & TLEncode(obj.archive_and_mute_new_noncontact_peers.get())


proc TLEncodeType*(obj: help_countryCode): seq[uint8] = 
    result = result & TLEncode(int32(1107543535))
    if obj.prefixes.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.patterns.isSome():
        obj.flags = obj.flags or 1 shl 1

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.country_code)

    if obj.prefixes.isSome():
        result = result & TLEncode(obj.prefixes.get())

    if obj.patterns.isSome():
        result = result & TLEncode(obj.patterns.get())


proc TLEncodeType*(obj: help_country): seq[uint8] = 
    result = result & TLEncode(int32(-1014526429))
    if obj.name.isSome():
        obj.flags = obj.flags or 1 shl 1

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.iso2)

    result = result & TLEncode(obj.default_name)

    if obj.name.isSome():
        result = result & TLEncode(obj.name.get())

    result = result & TLEncode(obj.country_codes)


proc TLEncodeType*(obj: help_countriesListNotModified): seq[uint8] = 
    result = result & TLEncode(int32(-1815339214))

proc TLEncodeType*(obj: help_countriesList): seq[uint8] = 
    result = result & TLEncode(int32(-2016381538))
    result = result & TLEncode(obj.countries)

    result = result & TLEncode(obj.hash)


proc TLEncodeType*(obj: messageViews): seq[uint8] = 
    result = result & TLEncode(int32(1163625789))
    if obj.views.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.forwards.isSome():
        obj.flags = obj.flags or 1 shl 1

    if obj.replies.isSome():
        obj.flags = obj.flags or 1 shl 2

    result = result & TLEncode(obj.flags)

    if obj.views.isSome():
        result = result & TLEncode(obj.views.get())

    if obj.forwards.isSome():
        result = result & TLEncode(obj.forwards.get())

    if obj.replies.isSome():
        result = result & TLEncode(obj.replies.get())


proc TLEncodeType*(obj: messages_messageViews): seq[uint8] = 
    result = result & TLEncode(int32(-1228606141))
    result = result & TLEncode(obj.views)

    result = result & TLEncode(obj.chats)

    result = result & TLEncode(obj.users)


proc TLEncodeType*(obj: messages_discussionMessage): seq[uint8] = 
    result = result & TLEncode(int32(-170029155))
    if obj.max_id.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.read_inbox_max_id.isSome():
        obj.flags = obj.flags or 1 shl 1

    if obj.read_outbox_max_id.isSome():
        obj.flags = obj.flags or 1 shl 2

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.messages)

    if obj.max_id.isSome():
        result = result & TLEncode(obj.max_id.get())

    if obj.read_inbox_max_id.isSome():
        result = result & TLEncode(obj.read_inbox_max_id.get())

    if obj.read_outbox_max_id.isSome():
        result = result & TLEncode(obj.read_outbox_max_id.get())

    result = result & TLEncode(obj.chats)

    result = result & TLEncode(obj.users)


proc TLEncodeType*(obj: messageReplyHeader): seq[uint8] = 
    result = result & TLEncode(int32(-1495959709))
    if obj.reply_to_peer_id.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.reply_to_top_id.isSome():
        obj.flags = obj.flags or 1 shl 1

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.reply_to_msg_id)

    if obj.reply_to_peer_id.isSome():
        result = result & TLEncode(obj.reply_to_peer_id.get())

    if obj.reply_to_top_id.isSome():
        result = result & TLEncode(obj.reply_to_top_id.get())


proc TLEncodeType*(obj: messageReplies): seq[uint8] = 
    result = result & TLEncode(int32(1093204652))
    if obj.recent_repliers.isSome():
        obj.flags = obj.flags or 1 shl 1

    if obj.channel_id.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.max_id.isSome():
        obj.flags = obj.flags or 1 shl 2

    if obj.read_max_id.isSome():
        obj.flags = obj.flags or 1 shl 3

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.replies)

    result = result & TLEncode(obj.replies_pts)

    if obj.recent_repliers.isSome():
        result = result & TLEncode(obj.recent_repliers.get())

    if obj.channel_id.isSome():
        result = result & TLEncode(obj.channel_id.get())

    if obj.max_id.isSome():
        result = result & TLEncode(obj.max_id.get())

    if obj.read_max_id.isSome():
        result = result & TLEncode(obj.read_max_id.get())


proc TLEncodeType*(obj: peerBlocked): seq[uint8] = 
    result = result & TLEncode(int32(-386039788))
    result = result & TLEncode(obj.peer_id)

    result = result & TLEncode(obj.date)


proc TLEncodeType*(obj: stats_messageStats): seq[uint8] = 
    result = result & TLEncode(int32(-1986399595))
    result = result & TLEncode(obj.views_graph)


const FromID* = {1: "default",
2134579434: "inputPeerEmpty",
2107670217: "inputPeerSelf",
396093539: "inputPeerChat",
2072935910: "inputPeerUser",
548253432: "inputPeerChannel",
398123750: "inputPeerUserFromMessage",
-1667893317: "inputPeerChannelFromMessage",
-1182234929: "inputUserEmpty",
-138301121: "inputUserSelf",
-668391402: "inputUser",
756118935: "inputUserFromMessage",
-208488460: "inputPhoneContact",
-181407105: "inputFile",
-95482955: "inputFileBig",
-1771768449: "inputMediaEmpty",
505969924: "inputMediaUploadedPhoto",
-1279654347: "inputMediaPhoto",
-104578748: "inputMediaGeoPoint",
-122978821: "inputMediaContact",
1530447553: "inputMediaUploadedDocument",
598418386: "inputMediaDocument",
-1052959727: "inputMediaVenue",
-440664550: "inputMediaPhotoExternal",
-78455655: "inputMediaDocumentExternal",
-750828557: "inputMediaGame",
-186607933: "inputMediaInvoice",
-1759532989: "inputMediaGeoLive",
-112304368: "inputMediaPoll",
-428884101: "inputMediaDice",
480546647: "inputChatPhotoEmpty",
-968723890: "inputChatUploadedPhoto",
-1991004873: "inputChatPhoto",
-457104426: "inputGeoPointEmpty",
1210199983: "inputGeoPoint",
483901197: "inputPhotoEmpty",
1001634122: "inputPhoto",
-539317279: "inputFileLocation",
-182231723: "inputEncryptedFileLocation",
-1160743548: "inputDocumentFileLocation",
-876089816: "inputSecureFileLocation",
700340377: "inputTakeoutFileLocation",
1075322878: "inputPhotoFileLocation",
-667654413: "inputPhotoLegacyFileLocation",
668375447: "inputPeerPhotoFileLocation",
-609309040: "inputStickerSetThumb",
-1649296275: "peerUser",
-1160714821: "peerChat",
-1109531342: "peerChannel",
-1432995067: "storage_fileUnknown",
1086091090: "storage_filePartial",
2130578944: "storage_fileJpeg",
-891180321: "storage_fileGif",
-1527366656: "storage_filePng",
-1373745011: "storage_filePdf",
1384777335: "storage_fileMp3",
1258941372: "storage_fileMov",
-1278304028: "storage_fileMp4",
276907596: "storage_fileWebp",
537022650: "userEmpty",
-1820043071: "user",
1326562017: "userProfilePhotoEmpty",
1775479590: "userProfilePhoto",
-1660615536: "userStatusEmpty",
-306628279: "userStatusOnline",
-1938800896: "userStatusOffline",
-496024847: "userStatusRecently",
2079367104: "userStatusLastWeek",
2011940674: "userStatusLastMonth",
-1683826688: "chatEmpty",
1004149726: "chat",
1932049840: "chatForbidden",
-753232354: "channel",
681420594: "channelForbidden",
461151667: "chatFull",
-253335766: "channelFull",
-925415106: "chatParticipant",
-636267638: "chatParticipantCreator",
-489233354: "chatParticipantAdmin",
-57668565: "chatParticipantsForbidden",
1061556205: "chatParticipants",
935395612: "chatPhotoEmpty",
-770990276: "chatPhoto",
-2082087340: "messageEmpty",
1487813065: "message",
678405636: "messageService",
1038967584: "messageMediaEmpty",
1766936791: "messageMediaPhoto",
1457575028: "messageMediaGeo",
-873313984: "messageMediaContact",
-1618676578: "messageMediaUnsupported",
-1666158377: "messageMediaDocument",
-1557277184: "messageMediaWebPage",
784356159: "messageMediaVenue",
-38694904: "messageMediaGame",
-2074799289: "messageMediaInvoice",
-1186937242: "messageMediaGeoLive",
1272375192: "messageMediaPoll",
1065280907: "messageMediaDice",
-1230047312: "messageActionEmpty",
-1503425638: "messageActionChatCreate",
-1247687078: "messageActionChatEditTitle",
2144015272: "messageActionChatEditPhoto",
-1780220945: "messageActionChatDeletePhoto",
1217033015: "messageActionChatAddUser",
-1297179892: "messageActionChatDeleteUser",
-123931160: "messageActionChatJoinedByLink",
-1781355374: "messageActionChannelCreate",
1371385889: "messageActionChatMigrateTo",
-1336546578: "messageActionChannelMigrateFrom",
-1799538451: "messageActionPinMessage",
-1615153660: "messageActionHistoryClear",
-1834538890: "messageActionGameScore",
-1892568281: "messageActionPaymentSentMe",
1080663248: "messageActionPaymentSent",
-2132731265: "messageActionPhoneCall",
1200788123: "messageActionScreenshotTaken",
-85549226: "messageActionCustomAction",
-1410748418: "messageActionBotAllowed",
455635795: "messageActionSecureValuesSentMe",
-648257196: "messageActionSecureValuesSent",
-202219658: "messageActionContactSignUp",
-1730095465: "messageActionGeoProximityReached",
739712882: "dialog",
1908216652: "dialogFolder",
590459437: "photoEmpty",
-82216347: "photo",
-511827008: "photoSizeEmpty",
2009052699: "photoSize",
-374917894: "photoCachedSize",
-525288402: "photoStrippedSize",
1520986705: "photoSizeProgressive",
286776671: "geoPointEmpty",
-1297942941: "geoPoint",
1577067778: "auth_sentCode",
-855308010: "auth_authorization",
1148485274: "auth_authorizationSignUpRequired",
-543777747: "auth_exportedAuthorization",
-1195615476: "inputNotifyPeer",
423314455: "inputNotifyUsers",
1251338318: "inputNotifyChats",
-1311015810: "inputNotifyBroadcasts",
-1673717362: "inputPeerNotifySettings",
-1353671392: "peerNotifySettings",
1933519201: "peerSettings",
-1539849235: "wallPaper",
-1963717851: "wallPaperNoFile",
1490799288: "inputReportReasonSpam",
505595789: "inputReportReasonViolence",
777640226: "inputReportReasonPornography",
-1376497949: "inputReportReasonChildAbuse",
-512463606: "inputReportReasonOther",
-1685456582: "inputReportReasonCopyright",
-606798099: "inputReportReasonGeoIrrelevant",
-302941166: "userFull",
-116274796: "contact",
-805141448: "importedContact",
-748155807: "contactStatus",
-1219778094: "contacts_contactsNotModified",
-353862078: "contacts_contacts",
2010127419: "contacts_importedContacts",
-1377740528: "contacts_blocked",
-513392236: "contacts_blockedSlice",
364538944: "messages_dialogs",
1910543603: "messages_dialogsSlice",
-253500010: "messages_dialogsNotModified",
-1938715001: "messages_messages",
978610270: "messages_messagesSlice",
1682413576: "messages_channelMessages",
1951620897: "messages_messagesNotModified",
1694474197: "messages_chats",
-1663561404: "messages_chatsSlice",
-438840932: "messages_chatFull",
-1269012015: "messages_affectedHistory",
1474492012: "inputMessagesFilterEmpty",
-1777752804: "inputMessagesFilterPhotos",
-1614803355: "inputMessagesFilterVideo",
1458172132: "inputMessagesFilterPhotoVideo",
-1629621880: "inputMessagesFilterDocument",
2129714567: "inputMessagesFilterUrl",
-3644025: "inputMessagesFilterGif",
1358283666: "inputMessagesFilterVoice",
928101534: "inputMessagesFilterMusic",
975236280: "inputMessagesFilterChatPhotos",
-2134272152: "inputMessagesFilterPhoneCalls",
2054952868: "inputMessagesFilterRoundVoice",
-1253451181: "inputMessagesFilterRoundVideo",
-1040652646: "inputMessagesFilterMyMentions",
-419271411: "inputMessagesFilterGeo",
-530392189: "inputMessagesFilterContacts",
464520273: "inputMessagesFilterPinned",
522914557: "updateNewMessage",
1318109142: "updateMessageID",
-1576161051: "updateDeleteMessages",
1548249383: "updateUserTyping",
-1704596961: "updateChatUserTyping",
2002852224: "updateChatParticipants",
469489699: "updateUserStatus",
-1489818765: "updateUserName",
-1791935732: "updateUserPhoto",
314359194: "updateNewEncryptedMessage",
386986326: "updateEncryptedChatTyping",
-1264392051: "updateEncryption",
956179895: "updateEncryptedMessagesRead",
-364179876: "updateChatParticipantAdd",
1851755554: "updateChatParticipantDelete",
-1906403213: "updateDcOptions",
-1094555409: "updateNotifySettings",
-337352679: "updateServiceNotification",
-298113238: "updatePrivacy",
314130811: "updateUserPhone",
-1667805217: "updateReadHistoryInbox",
791617983: "updateReadHistoryOutbox",
2139689491: "updateWebPage",
1757493555: "updateReadMessagesContents",
-352032773: "updateChannelTooLong",
-1227598250: "updateChannel",
1656358105: "updateNewChannelMessage",
856380452: "updateReadChannelInbox",
-1015733815: "updateDeleteChannelMessages",
-1734268085: "updateChannelMessageViews",
-1232070311: "updateChatParticipantAdmin",
1753886890: "updateNewStickerSet",
-1154670576: "updateStickerSetsOrder",
1135492588: "updateStickerSets",
-1821035490: "updateSavedGifs",
1417832080: "updateBotInlineQuery",
-460351936: "updateBotInlineSend",
457133559: "updateEditChannelMessage",
-415938591: "updateBotCallbackQuery",
-469536605: "updateEditMessage",
-103646630: "updateInlineBotCallbackQuery",
634833351: "updateReadChannelOutbox",
-299124375: "updateDraftMessage",
1461528386: "updateReadFeaturedStickers",
-1706939360: "updateRecentStickers",
-1574314746: "updateConfig",
861169551: "updatePtsChanged",
1081547008: "updateChannelWebPage",
1852826908: "updateDialogPinned",
-99664734: "updatePinnedDialogs",
-2095595325: "updateBotWebhookJSON",
-1684914010: "updateBotWebhookJSONQuery",
-523384512: "updateBotShippingQuery",
1563376297: "updateBotPrecheckoutQuery",
-1425052898: "updatePhoneCall",
1180041828: "updateLangPackTooLong",
1442983757: "updateLangPack",
-451831443: "updateFavedStickers",
-1987495099: "updateChannelReadMessagesContents",
1887741886: "updateContactsReset",
1893427255: "updateChannelAvailableMessages",
-513517117: "updateDialogUnreadMark",
-1398708869: "updateMessagePoll",
1421875280: "updateChatDefaultBannedRights",
422972864: "updateFolderPeers",
1786671974: "updatePeerSettings",
-1263546448: "updatePeerLocated",
967122427: "updateNewScheduledMessage",
-1870238482: "updateDeleteScheduledMessages",
-2112423005: "updateTheme",
-2027964103: "updateGeoLiveViewed",
1448076945: "updateLoginToken",
1123585836: "updateMessagePollVote",
654302845: "updateDialogFilter",
-1512627963: "updateDialogFilterOrder",
889491791: "updateDialogFilters",
643940105: "updatePhoneCallSignalingData",
1708307556: "updateChannelParticipant",
1854571743: "updateChannelMessageForwards",
482860628: "updateReadChannelDiscussionInbox",
1178116716: "updateReadChannelDiscussionOutbox",
610945826: "updatePeerBlocked",
-13975905: "updateChannelUserTyping",
-309990731: "updatePinnedMessages",
-2054649973: "updatePinnedChannelMessages",
-1519637954: "updates_state",
1567990072: "updates_differenceEmpty",
-191062016: "updates_difference",
-1459938943: "updates_differenceSlice",
1258196845: "updates_differenceTooLong",
-484987010: "updatesTooLong",
580309704: "updateShortMessage",
1076714939: "updateShortChatMessage",
2027216577: "updateShort",
1918567619: "updatesCombined",
1957577280: "updates",
301019932: "updateShortSentMessage",
-1916114267: "photos_photos",
352657236: "photos_photosSlice",
539045032: "photos_photo",
-1767797424: "upload_file",
-242427324: "upload_fileCdnRedirect",
414687501: "dcOption",
856375399: "config",
-1910892683: "nearestDc",
497489295: "help_appUpdate",
-1000708810: "help_noAppUpdate",
415997816: "help_inviteText",
-1417756512: "encryptedChatEmpty",
1006044124: "encryptedChatWaiting",
1651608194: "encryptedChatRequested",
-94974410: "encryptedChat",
332848423: "encryptedChatDiscarded",
-247351839: "inputEncryptedChat",
-1038136962: "encryptedFileEmpty",
1248893260: "encryptedFile",
406307684: "inputEncryptedFileEmpty",
1690108678: "inputEncryptedFileUploaded",
1511503333: "inputEncryptedFile",
767652808: "inputEncryptedFileBigUploaded",
-317144808: "encryptedMessage",
594758406: "encryptedMessageService",
-1058912715: "messages_dhConfigNotModified",
740433629: "messages_dhConfig",
1443858741: "messages_sentEncryptedMessage",
-1802240206: "messages_sentEncryptedFile",
1928391342: "inputDocumentEmpty",
448771445: "inputDocument",
922273905: "documentEmpty",
512177195: "document",
398898678: "help_support",
-1613493288: "notifyPeer",
-1261946036: "notifyUsers",
-1073230141: "notifyChats",
-703403793: "notifyBroadcasts",
381645902: "sendMessageTypingAction",
-44119819: "sendMessageCancelAction",
-1584933265: "sendMessageRecordVideoAction",
-378127636: "sendMessageUploadVideoAction",
-718310409: "sendMessageRecordAudioAction",
-212740181: "sendMessageUploadAudioAction",
-774682074: "sendMessageUploadPhotoAction",
-1441998364: "sendMessageUploadDocumentAction",
393186209: "sendMessageGeoLocationAction",
1653390447: "sendMessageChooseContactAction",
-580219064: "sendMessageGamePlayAction",
-1997373508: "sendMessageRecordRoundAction",
608050278: "sendMessageUploadRoundAction",
-1290580579: "contacts_found",
1335282456: "inputPrivacyKeyStatusTimestamp",
-1107622874: "inputPrivacyKeyChatInvite",
-88417185: "inputPrivacyKeyPhoneCall",
-610373422: "inputPrivacyKeyPhoneP2P",
-1529000952: "inputPrivacyKeyForwards",
1461304012: "inputPrivacyKeyProfilePhoto",
892186528: "inputPrivacyKeyPhoneNumber",
-786326563: "inputPrivacyKeyAddedByPhone",
-1137792208: "privacyKeyStatusTimestamp",
1343122938: "privacyKeyChatInvite",
1030105979: "privacyKeyPhoneCall",
961092808: "privacyKeyPhoneP2P",
1777096355: "privacyKeyForwards",
-1777000467: "privacyKeyProfilePhoto",
-778378131: "privacyKeyPhoneNumber",
1124062251: "privacyKeyAddedByPhone",
-794949712: "inputPrivacyValueAllowContacts",
407582158: "inputPrivacyValueAllowAll",
320652927: "inputPrivacyValueAllowUsers",
-1169031056: "inputPrivacyValueDisallowContacts",
-697604407: "inputPrivacyValueDisallowAll",
-1877932953: "inputPrivacyValueDisallowUsers",
1283572154: "inputPrivacyValueAllowChatParticipants",
-668769361: "inputPrivacyValueDisallowChatParticipants",
-123988: "privacyValueAllowContacts",
1698855810: "privacyValueAllowAll",
1297858060: "privacyValueAllowUsers",
-125240806: "privacyValueDisallowContacts",
-1955338397: "privacyValueDisallowAll",
-940270736: "privacyValueDisallowUsers",
415136107: "privacyValueAllowChatParticipants",
-1397881200: "privacyValueDisallowChatParticipants",
1352683077: "account_privacyRules",
-1194283041: "accountDaysTTL",
1815593308: "documentAttributeImageSize",
297109817: "documentAttributeAnimated",
1662637586: "documentAttributeSticker",
-285028768: "documentAttributeVideo",
-1739392570: "documentAttributeAudio",
358154344: "documentAttributeFilename",
-1744710921: "documentAttributeHasStickers",
-244016606: "messages_stickersNotModified",
-463889475: "messages_stickers",
313694676: "stickerPack",
-395967805: "messages_allStickersNotModified",
-302170017: "messages_allStickers",
-2066640507: "messages_affectedMessages",
-350980120: "webPageEmpty",
-981018084: "webPagePending",
-392411726: "webPage",
1930545681: "webPageNotModified",
-1392388579: "authorization",
307276766: "account_authorizations",
-1390001672: "account_password",
-1705233435: "account_passwordSettings",
-1036572727: "account_passwordInputSettings",
326715557: "auth_passwordRecovery",
-1551583367: "receivedNotifyMessage",
1776236393: "chatInviteEmpty",
-64092740: "chatInviteExported",
1516793212: "chatInviteAlready",
-540871282: "chatInvite",
1634294960: "chatInvitePeek",
-4838507: "inputStickerSetEmpty",
-1645763991: "inputStickerSetID",
-2044933984: "inputStickerSetShortName",
678444160: "inputStickerSetAnimatedEmoji",
-427863538: "inputStickerSetDice",
-290164953: "stickerSet",
-1240849242: "messages_stickerSet",
-1032140601: "botCommand",
-1729618630: "botInfo",
-1560655744: "keyboardButton",
629866245: "keyboardButtonUrl",
901503851: "keyboardButtonCallback",
-1318425559: "keyboardButtonRequestPhone",
-59151553: "keyboardButtonRequestGeoLocation",
1451914368: "keyboardButtonSwitchInline",
1358175439: "keyboardButtonGame",
-1344716869: "keyboardButtonBuy",
280464681: "keyboardButtonUrlAuth",
-802258988: "inputKeyboardButtonUrlAuth",
-1144565411: "keyboardButtonRequestPoll",
2002815875: "keyboardButtonRow",
-1606526075: "replyKeyboardHide",
-200242528: "replyKeyboardForceReply",
889353612: "replyKeyboardMarkup",
1218642516: "replyInlineMarkup",
-1148011883: "messageEntityUnknown",
-100378723: "messageEntityMention",
1868782349: "messageEntityHashtag",
1827637959: "messageEntityBotCommand",
1859134776: "messageEntityUrl",
1692693954: "messageEntityEmail",
-1117713463: "messageEntityBold",
-2106619040: "messageEntityItalic",
681706865: "messageEntityCode",
1938967520: "messageEntityPre",
1990644519: "messageEntityTextUrl",
892193368: "messageEntityMentionName",
546203849: "inputMessageEntityMentionName",
-1687559349: "messageEntityPhone",
1280209983: "messageEntityCashtag",
-1672577397: "messageEntityUnderline",
-1090087980: "messageEntityStrike",
551509248: "messageEntityBlockquote",
1981704948: "messageEntityBankCard",
-292807034: "inputChannelEmpty",
-1343524562: "inputChannel",
707290417: "inputChannelFromMessage",
2131196633: "contacts_resolvedPeer",
-1372576464: "messageRange",
1041346555: "updates_channelDifferenceEmpty",
-1531132162: "updates_channelDifferenceTooLong",
543450958: "updates_channelDifference",
-1798033689: "channelMessagesFilterEmpty",
-847783593: "channelMessagesFilter",
367766557: "channelParticipant",
-1557620115: "channelParticipantSelf",
1149094475: "channelParticipantCreator",
-859915345: "channelParticipantAdmin",
470789295: "channelParticipantBanned",
-1010402965: "channelParticipantLeft",
-566281095: "channelParticipantsRecent",
-1268741783: "channelParticipantsAdmins",
-1548400251: "channelParticipantsKicked",
-1328445861: "channelParticipantsBots",
338142689: "channelParticipantsBanned",
1701495984: "channelParticipantsSearch",
-1150621555: "channelParticipantsContacts",
-531931925: "channelParticipantsMentions",
-177282392: "channels_channelParticipants",
-266911767: "channels_channelParticipantsNotModified",
-791039645: "channels_channelParticipant",
2013922064: "help_termsOfService",
-402498398: "messages_savedGifsNotModified",
772213157: "messages_savedGifs",
864077702: "inputBotInlineMessageMediaAuto",
1036876423: "inputBotInlineMessageText",
-1768777083: "inputBotInlineMessageMediaGeo",
1098628881: "inputBotInlineMessageMediaVenue",
-1494368259: "inputBotInlineMessageMediaContact",
1262639204: "inputBotInlineMessageGame",
-2000710887: "inputBotInlineResult",
-1462213465: "inputBotInlineResultPhoto",
-459324: "inputBotInlineResultDocument",
1336154098: "inputBotInlineResultGame",
1984755728: "botInlineMessageMediaAuto",
-1937807902: "botInlineMessageText",
1367633872: "botInlineMessageMediaGeo",
-1970903652: "botInlineMessageMediaVenue",
416402882: "botInlineMessageMediaContact",
295067450: "botInlineResult",
400266251: "botInlineMediaResult",
-1803769784: "messages_botResults",
1571494644: "exportedMessageLink",
1601666510: "messageFwdHeader",
1923290508: "auth_codeTypeSms",
1948046307: "auth_codeTypeCall",
577556219: "auth_codeTypeFlashCall",
1035688326: "auth_sentCodeTypeApp",
-1073693790: "auth_sentCodeTypeSms",
1398007207: "auth_sentCodeTypeCall",
-1425815847: "auth_sentCodeTypeFlashCall",
911761060: "messages_botCallbackAnswer",
649453030: "messages_messageEditData",
-1995686519: "inputBotInlineMessageID",
1008755359: "inlineBotSwitchPM",
863093588: "messages_peerDialogs",
-305282981: "topPeer",
-1419371685: "topPeerCategoryBotsPM",
344356834: "topPeerCategoryBotsInline",
1669037776: "topPeerCategoryCorrespondents",
-1122524854: "topPeerCategoryGroups",
371037736: "topPeerCategoryChannels",
511092620: "topPeerCategoryPhoneCalls",
-1472172887: "topPeerCategoryForwardUsers",
-68239120: "topPeerCategoryForwardChats",
-75283823: "topPeerCategoryPeers",
-567906571: "contacts_topPeersNotModified",
1891070632: "contacts_topPeers",
-1255369827: "contacts_topPeersDisabled",
453805082: "draftMessageEmpty",
-40996577: "draftMessage",
-958657434: "messages_featuredStickersNotModified",
-1230257343: "messages_featuredStickers",
-1317041920: "messages_recentStickersNotModified",
586395571: "messages_recentStickers",
1338747336: "messages_archivedStickers",
946083368: "messages_stickerSetInstallResultSuccess",
904138920: "messages_stickerSetInstallResultArchive",
1678812626: "stickerSetCovered",
872932635: "stickerSetMultiCovered",
-1361650766: "maskCoords",
1251549527: "inputStickeredMediaPhoto",
1133012400: "inputStickeredMediaDocument",
-1107729093: "game",
851699568: "inputGameID",
-1020139510: "inputGameShortName",
1493171408: "highScore",
-1707344487: "messages_highScores",
-599948721: "textEmpty",
1950782688: "textPlain",
1730456516: "textBold",
-653089380: "textItalic",
-1054465340: "textUnderline",
-1678197867: "textStrike",
1816074681: "textFixed",
1009288385: "textUrl",
-564523562: "textEmail",
2120376535: "textConcat",
-311786236: "textSubscript",
-939827711: "textSuperscript",
884498960: "textMarked",
483104362: "textPhone",
-2117274384: "textImage",
894777186: "textAnchor",
324435594: "pageBlockUnsupported",
1890305021: "pageBlockTitle",
-1879401953: "pageBlockSubtitle",
-1162877472: "pageBlockAuthorDate",
-1076861716: "pageBlockHeader",
-248793375: "pageBlockSubheader",
1182402406: "pageBlockParagraph",
-1066346178: "pageBlockPreformatted",
1216809369: "pageBlockFooter",
-618614392: "pageBlockDivider",
-837994576: "pageBlockAnchor",
-454524911: "pageBlockList",
641563686: "pageBlockBlockquote",
1329878739: "pageBlockPullquote",
391759200: "pageBlockPhoto",
2089805750: "pageBlockVideo",
972174080: "pageBlockCover",
-1468953147: "pageBlockEmbed",
-229005301: "pageBlockEmbedPost",
1705048653: "pageBlockCollage",
838424832: "pageBlockSlideshow",
-283684427: "pageBlockChannel",
-2143067670: "pageBlockAudio",
504660880: "pageBlockKicker",
-1085412734: "pageBlockTable",
-1702174239: "pageBlockOrderedList",
1987480557: "pageBlockDetails",
370236054: "pageBlockRelatedArticles",
-1538310410: "pageBlockMap",
-2048646399: "phoneCallDiscardReasonMissed",
-527056480: "phoneCallDiscardReasonDisconnect",
1471006352: "phoneCallDiscardReasonHangup",
-84416311: "phoneCallDiscardReasonBusy",
2104790276: "dataJSON",
-886477832: "labeledPrice",
-1022713000: "invoice",
-368917890: "paymentCharge",
512535275: "postAddress",
-1868808300: "paymentRequestedInfo",
-842892769: "paymentSavedCredentialsCard",
475467473: "webDocument",
-104284986: "webDocumentNoProxy",
-1678949555: "inputWebDocument",
-1036396922: "inputWebFileLocation",
-1625153079: "inputWebFileGeoPointLocation",
568808380: "upload_webFile",
1062645411: "payments_paymentForm",
-784000893: "payments_validatedRequestedInfo",
1314881805: "payments_paymentResult",
-666824391: "payments_paymentVerificationNeeded",
1342771681: "payments_paymentReceipt",
-74456004: "payments_savedInfo",
-1056001329: "inputPaymentCredentialsSaved",
873977640: "inputPaymentCredentials",
-1440990736: "inputPaymentCredentialsApplePay",
-905587442: "inputPaymentCredentialsAndroidPay",
-614138572: "account_tmpPassword",
-1239335713: "shippingOption",
-6249322: "inputStickerSetItem",
506920429: "inputPhoneCall",
1399245077: "phoneCallEmpty",
462375633: "phoneCallWaiting",
-2014659757: "phoneCallRequested",
-1719909046: "phoneCallAccepted",
-2025673089: "phoneCall",
1355435489: "phoneCallDiscarded",
-1655957568: "phoneConnection",
1667228533: "phoneConnectionWebrtc",
-58224696: "phoneCallProtocol",
-326966976: "phone_phoneCall",
-290921362: "upload_cdnFileReuploadNeeded",
-1449145777: "upload_cdnFile",
-914167110: "cdnPublicKey",
1462101002: "cdnConfig",
-892239370: "langPackString",
1816636575: "langPackStringPluralized",
695856818: "langPackStringDeleted",
-209337866: "langPackDifference",
-288727837: "langPackLanguage",
-421545947: "channelAdminLogEventActionChangeTitle",
1427671598: "channelAdminLogEventActionChangeAbout",
1783299128: "channelAdminLogEventActionChangeUsername",
1129042607: "channelAdminLogEventActionChangePhoto",
460916654: "channelAdminLogEventActionToggleInvites",
648939889: "channelAdminLogEventActionToggleSignatures",
-370660328: "channelAdminLogEventActionUpdatePinned",
1889215493: "channelAdminLogEventActionEditMessage",
1121994683: "channelAdminLogEventActionDeleteMessage",
405815507: "channelAdminLogEventActionParticipantJoin",
-124291086: "channelAdminLogEventActionParticipantLeave",
-484690728: "channelAdminLogEventActionParticipantInvite",
-422036098: "channelAdminLogEventActionParticipantToggleBan",
-714643696: "channelAdminLogEventActionParticipantToggleAdmin",
-1312568665: "channelAdminLogEventActionChangeStickerSet",
1599903217: "channelAdminLogEventActionTogglePreHistoryHidden",
771095562: "channelAdminLogEventActionDefaultBannedRights",
-1895328189: "channelAdminLogEventActionStopPoll",
-1569748965: "channelAdminLogEventActionChangeLinkedChat",
-424187168: "channelAdminLogEventActionChangeLocation",
1401984889: "channelAdminLogEventActionToggleSlowMode",
995769920: "channelAdminLogEvent",
-309659827: "channels_adminLogResults",
-368018716: "channelAdminLogEventsFilter",
1558266229: "popularContact",
-1634752813: "messages_favedStickersNotModified",
-209768682: "messages_favedStickers",
1189204285: "recentMeUrlUnknown",
-1917045962: "recentMeUrlUser",
-1608834311: "recentMeUrlChat",
-347535331: "recentMeUrlChatInvite",
-1140172836: "recentMeUrlStickerSet",
-533656208: "help_recentMeUrls",
482797855: "inputSingleMedia",
-892779534: "webAuthorization",
-313079300: "account_webAuthorizations",
-1502174430: "inputMessageID",
-1160215659: "inputMessageReplyTo",
-2037963464: "inputMessagePinned",
-55902537: "inputDialogPeer",
1684014375: "inputDialogPeerFolder",
-445792507: "dialogPeer",
1363483106: "dialogPeerFolder",
-716479024: "messages_foundStickerSetsNotModified",
1359533640: "messages_foundStickerSets",
1648543603: "fileHash",
1968737087: "inputClientProxy",
-483352705: "help_termsOfServiceUpdateEmpty",
686618977: "help_termsOfServiceUpdate",
859091184: "inputSecureFileUploaded",
1399317950: "inputSecureFile",
1679398724: "secureFileEmpty",
-534283678: "secureFile",
-1964327229: "secureData",
2103482845: "securePlainPhone",
569137759: "securePlainEmail",
-1658158621: "secureValueTypePersonalDetails",
1034709504: "secureValueTypePassport",
1849842752: "secureValueTypeDriverLicense",
-1596951477: "secureValueTypeIdentityCard",
-1717268701: "secureValueTypeInternalPassport",
-874308058: "secureValueTypeAddress",
-63531698: "secureValueTypeUtilityBill",
-1995211763: "secureValueTypeBankStatement",
-1954007928: "secureValueTypeRentalAgreement",
-1713143702: "secureValueTypePassportRegistration",
-368907213: "secureValueTypeTemporaryRegistration",
-1289704741: "secureValueTypePhone",
-1908627474: "secureValueTypeEmail",
411017418: "secureValue",
-618540889: "inputSecureValue",
-316748368: "secureValueHash",
-391902247: "secureValueErrorData",
-1103234560: "secureValueErrorFrontSide",
-2037765467: "secureValueErrorReverseSide",
-449327402: "secureValueErrorSelfie",
2054162547: "secureValueErrorFile",
1717706985: "secureValueErrorFiles",
-2036501105: "secureValueError",
-1592506512: "secureValueErrorTranslationFile",
878931416: "secureValueErrorTranslationFiles",
871426631: "secureCredentialsEncrypted",
-1389486888: "account_authorizationForm",
-2128640689: "account_sentEmailCode",
1722786150: "help_deepLinkInfoEmpty",
1783556146: "help_deepLinkInfo",
289586518: "savedPhoneContact",
1304052993: "account_takeout",
-732254058: "passwordKdfAlgoUnknown",
982592842: "passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow",
1250244352: "securePasswordKdfAlgoUnknown",
-1141711456: "securePasswordKdfAlgoPBKDF2HMACSHA512iter100000",
-2042159726: "securePasswordKdfAlgoSHA512",
354925740: "secureSecretSettings",
-1736378792: "inputCheckPasswordEmpty",
-763367294: "inputCheckPasswordSRP",
-2103600678: "secureRequiredType",
658996032: "secureRequiredTypeOneOf",
-1078332329: "help_passportConfigNotModified",
-1600596305: "help_passportConfig",
488313413: "inputAppEvent",
-1059185703: "jsonObjectValue",
1064139624: "jsonNull",
-952869270: "jsonBool",
736157604: "jsonNumber",
-1222740358: "jsonString",
-146520221: "jsonArray",
-1715350371: "jsonObject",
878078826: "pageTableCell",
-524237339: "pageTableRow",
1869903447: "pageCaption",
-1188055347: "pageListItemText",
635466748: "pageListItemBlocks",
1577484359: "pageListOrderedItemText",
-1730311882: "pageListOrderedItemBlocks",
-1282352120: "pageRelatedArticle",
-1738178803: "page",
-1945767479: "help_supportName",
-206688531: "help_userInfoEmpty",
515077504: "help_userInfo",
1823064809: "pollAnswer",
-2032041631: "poll",
997055186: "pollAnswerVoters",
-1159937629: "pollResults",
-264117680: "chatOnlines",
1202287072: "statsURL",
1605510357: "chatAdminRights",
-1626209256: "chatBannedRights",
-433014407: "inputWallPaper",
1913199744: "inputWallPaperSlug",
-2077770836: "inputWallPaperNoFile",
471437699: "account_wallPapersNotModified",
1881892265: "account_wallPapers",
-557924733: "codeSettings",
1351012224: "wallPaperSettings",
-532532493: "autoDownloadSettings",
1674235686: "account_autoDownloadSettings",
-709641735: "emojiKeyword",
594408994: "emojiKeywordDeleted",
1556570557: "emojiKeywordsDifference",
-1519029347: "emojiURL",
-1275374751: "emojiLanguage",
-1132476723: "fileLocationToBeDeprecated",
-11252123: "folder",
-70073706: "inputFolderPeer",
-373643672: "folderPeer",
-398136321: "messages_searchCounter",
-1831650802: "urlAuthResultRequest",
-1886646706: "urlAuthResultAccepted",
-1445536993: "urlAuthResultDefault",
-1078612597: "channelLocationEmpty",
547062491: "channelLocation",
-901375139: "peerLocated",
-118740917: "peerSelfLocated",
-797791052: "restrictionReason",
1012306921: "inputTheme",
-175567375: "inputThemeSlug",
686887232: "theme",
-199313886: "account_themesNotModified",
2137482273: "account_themes",
1654593920: "auth_loginToken",
1760137568: "auth_loginTokenMigrateTo",
957176926: "auth_loginTokenSuccess",
1474462241: "account_contentSettings",
-1456996667: "messages_inactiveChats",
-1012849566: "baseThemeClassic",
-69724536: "baseThemeDay",
-1212997976: "baseThemeNight",
1834973166: "baseThemeTinted",
1527845466: "baseThemeArctic",
-1118798639: "inputThemeSettings",
-1676371894: "themeSettings",
1421174295: "webPageAttributeTheme",
-1567730343: "messageUserVote",
909603888: "messageUserVoteInputOption",
-386003488: "messageUserVoteMultiple",
-2109774704: "messages_votesList",
-177732982: "bankCardOpenUrl",
1042605427: "payments_bankCardData",
1949890536: "dialogFilter",
2004110666: "dialogFilterSuggested",
-1237848657: "statsDateRangeDays",
-884757282: "statsAbsValueAndPrev",
-875679776: "statsPercentValue",
1244130093: "statsGraphAsync",
-1092839390: "statsGraphError",
-1901828938: "statsGraph",
-1387279939: "messageInteractionCounters",
-1107852396: "stats_broadcastStats",
-1728664459: "help_promoDataEmpty",
-1942390465: "help_promoData",
-399391402: "videoSize",
418631927: "statsGroupTopPoster",
1611985938: "statsGroupTopAdmin",
831924812: "statsGroupTopInviter",
-276825834: "stats_megagroupStats",
-1096616924: "globalPrivacySettings",
1107543535: "help_countryCode",
-1014526429: "help_country",
-1815339214: "help_countriesListNotModified",
-2016381538: "help_countriesList",
1163625789: "messageViews",
-1228606141: "messages_messageViews",
-170029155: "messages_discussionMessage",
-1495959709: "messageReplyHeader",
1093204652: "messageReplies",
-386039788: "peerBlocked",
-1986399595: "stats_messageStats",
85337187: "resPQ",
-2083955988: "p_q_inner_data",
2043348061: "server_DH_params_fail",
-790100132: "server_DH_params_ok",
-1249309254: "server_DH_inner_data",
1715713620: "client_DH_inner_data",
1003222836: "dh_gen_ok",
1188831161: "dh_gen_retry",
-1499615742: "dh_gen_fail",
-212046591: "rpc_result",
558156313: "rpc_error",
1579864942: "rpc_answer_unknown",
-847714938: "rpc_answer_dropped_running",
-1539647305: "rpc_answer_dropped",
880243653: "pong",
-501201412: "destroy_session_ok",
1658015945: "destroy_session_none",
-1631450872: "new_session_created",
1658238041: "msgs_ack",
-1477445615: "bad_msg_notification",
-307542917: "bad_server_salt",
2105940488: "msg_resend_req",
-630588590: "msgs_state_req",
81704317: "msgs_state_info",
-1933520591: "msgs_all_info",
661470918: "msg_detailed_info",
-2137147681: "msg_new_detailed_info",
812830625: "gzip_packed"}


proc TLDecode*(self: var ScalingSeq[uint8], obj: var help_PromoDataI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "help_promoDataEmpty":
            var tempObject = new(help_promoDataEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "help_promoData":
            var tempObject = new(help_promoData)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var stats_MegagroupStatsI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "stats_megagroupStats":
            var tempObject = new(stats_megagroupStats)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var PrivacyKeyI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "privacyKeyStatusTimestamp":
            var tempObject = new(privacyKeyStatusTimestamp)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "privacyKeyChatInvite":
            var tempObject = new(privacyKeyChatInvite)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "privacyKeyPhoneCall":
            var tempObject = new(privacyKeyPhoneCall)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "privacyKeyPhoneP2P":
            var tempObject = new(privacyKeyPhoneP2P)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "privacyKeyForwards":
            var tempObject = new(privacyKeyForwards)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "privacyKeyProfilePhoto":
            var tempObject = new(privacyKeyProfilePhoto)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "privacyKeyPhoneNumber":
            var tempObject = new(privacyKeyPhoneNumber)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "privacyKeyAddedByPhone":
            var tempObject = new(privacyKeyAddedByPhone)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var help_CountryCodeI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "help_countryCode":
            var tempObject = new(help_countryCode)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var WebAuthorizationI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "webAuthorization":
            var tempObject = new(webAuthorization)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var PollI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "poll":
            var tempObject = new(poll)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var DialogPeerI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "dialogPeer":
            var tempObject = new(dialogPeer)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "dialogPeerFolder":
            var tempObject = new(dialogPeerFolder)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var TopPeerCategoryI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "topPeerCategoryBotsPM":
            var tempObject = new(topPeerCategoryBotsPM)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "topPeerCategoryBotsInline":
            var tempObject = new(topPeerCategoryBotsInline)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "topPeerCategoryCorrespondents":
            var tempObject = new(topPeerCategoryCorrespondents)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "topPeerCategoryGroups":
            var tempObject = new(topPeerCategoryGroups)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "topPeerCategoryChannels":
            var tempObject = new(topPeerCategoryChannels)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "topPeerCategoryPhoneCalls":
            var tempObject = new(topPeerCategoryPhoneCalls)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "topPeerCategoryForwardUsers":
            var tempObject = new(topPeerCategoryForwardUsers)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "topPeerCategoryForwardChats":
            var tempObject = new(topPeerCategoryForwardChats)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var help_SupportNameI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "help_supportName":
            var tempObject = new(help_supportName)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var PhotoSizeI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "photoSizeEmpty":
            var tempObject = new(photoSizeEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "photoSize":
            var tempObject = new(photoSize)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "photoCachedSize":
            var tempObject = new(photoCachedSize)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "photoStrippedSize":
            var tempObject = new(photoStrippedSize)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "photoSizeProgressive":
            var tempObject = new(photoSizeProgressive)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var JSONValueI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "jsonNull":
            var tempObject = new(jsonNull)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "jsonBool":
            var tempObject = new(jsonBool)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "jsonNumber":
            var tempObject = new(jsonNumber)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "jsonString":
            var tempObject = new(jsonString)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "jsonArray":
            var tempObject = new(jsonArray)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "jsonObject":
            var tempObject = new(jsonObject)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var messages_ArchivedStickersI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "messages_archivedStickers":
            var tempObject = new(messages_archivedStickers)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var BaseThemeI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "baseThemeClassic":
            var tempObject = new(baseThemeClassic)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "baseThemeDay":
            var tempObject = new(baseThemeDay)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "baseThemeNight":
            var tempObject = new(baseThemeNight)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "baseThemeTinted":
            var tempObject = new(baseThemeTinted)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "baseThemeArctic":
            var tempObject = new(baseThemeArctic)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var DialogFilterI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "dialogFilter":
            var tempObject = new(dialogFilter)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var MessageEntityI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "messageEntityUnknown":
            var tempObject = new(messageEntityUnknown)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageEntityMention":
            var tempObject = new(messageEntityMention)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageEntityHashtag":
            var tempObject = new(messageEntityHashtag)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageEntityBotCommand":
            var tempObject = new(messageEntityBotCommand)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageEntityUrl":
            var tempObject = new(messageEntityUrl)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageEntityEmail":
            var tempObject = new(messageEntityEmail)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageEntityBold":
            var tempObject = new(messageEntityBold)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageEntityItalic":
            var tempObject = new(messageEntityItalic)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageEntityCode":
            var tempObject = new(messageEntityCode)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageEntityPre":
            var tempObject = new(messageEntityPre)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageEntityTextUrl":
            var tempObject = new(messageEntityTextUrl)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageEntityMentionName":
            var tempObject = new(messageEntityMentionName)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMessageEntityMentionName":
            var tempObject = new(inputMessageEntityMentionName)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageEntityPhone":
            var tempObject = new(messageEntityPhone)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageEntityCashtag":
            var tempObject = new(messageEntityCashtag)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageEntityUnderline":
            var tempObject = new(messageEntityUnderline)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageEntityStrike":
            var tempObject = new(messageEntityStrike)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageEntityBlockquote":
            var tempObject = new(messageEntityBlockquote)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageEntityBankCard":
            var tempObject = new(messageEntityBankCard)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var ThemeI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "theme":
            var tempObject = new(theme)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var DialogFilterSuggestedI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "dialogFilterSuggested":
            var tempObject = new(dialogFilterSuggested)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var stats_MessageStatsI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "stats_messageStats":
            var tempObject = new(stats_messageStats)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var payments_PaymentResultI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "payments_paymentResult":
            var tempObject = new(payments_paymentResult)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "payments_paymentVerificationNeeded":
            var tempObject = new(payments_paymentVerificationNeeded)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var StickerPackI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "stickerPack":
            var tempObject = new(stickerPack)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var account_PasswordSettingsI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "account_passwordSettings":
            var tempObject = new(account_passwordSettings)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var CdnConfigI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "cdnConfig":
            var tempObject = new(cdnConfig)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var InputCheckPasswordSRPI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "inputCheckPasswordEmpty":
            var tempObject = new(inputCheckPasswordEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputCheckPasswordSRP":
            var tempObject = new(inputCheckPasswordSRP)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var PollAnswerVotersI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "pollAnswerVoters":
            var tempObject = new(pollAnswerVoters)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var SecureDataI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "secureData":
            var tempObject = new(secureData)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var PageTableRowI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "pageTableRow":
            var tempObject = new(pageTableRow)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var phone_PhoneCallI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "phone_phoneCall":
            var tempObject = new(phone_phoneCall)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var ChatOnlinesI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "chatOnlines":
            var tempObject = new(chatOnlines)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var SecurePlainDataI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "securePlainPhone":
            var tempObject = new(securePlainPhone)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "securePlainEmail":
            var tempObject = new(securePlainEmail)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var InputChatPhotoI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "inputChatPhotoEmpty":
            var tempObject = new(inputChatPhotoEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputChatUploadedPhoto":
            var tempObject = new(inputChatUploadedPhoto)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputChatPhoto":
            var tempObject = new(inputChatPhoto)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var SecureSecretSettingsI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "secureSecretSettings":
            var tempObject = new(secureSecretSettings)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var EmojiKeywordsDifferenceI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "emojiKeywordsDifference":
            var tempObject = new(emojiKeywordsDifference)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var photos_PhotosI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "photos_photos":
            var tempObject = new(photos_photos)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "photos_photosSlice":
            var tempObject = new(photos_photosSlice)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var ChannelParticipantsFilterI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "channelParticipantsRecent":
            var tempObject = new(channelParticipantsRecent)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelParticipantsAdmins":
            var tempObject = new(channelParticipantsAdmins)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelParticipantsKicked":
            var tempObject = new(channelParticipantsKicked)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelParticipantsBots":
            var tempObject = new(channelParticipantsBots)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelParticipantsBanned":
            var tempObject = new(channelParticipantsBanned)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelParticipantsSearch":
            var tempObject = new(channelParticipantsSearch)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelParticipantsContacts":
            var tempObject = new(channelParticipantsContacts)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelParticipantsMentions":
            var tempObject = new(channelParticipantsMentions)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var StatsGroupTopAdminI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "statsGroupTopAdmin":
            var tempObject = new(statsGroupTopAdmin)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var InputBotInlineMessageIDI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "inputBotInlineMessageID":
            var tempObject = new(inputBotInlineMessageID)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var InputPhotoI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "inputPhotoEmpty":
            var tempObject = new(inputPhotoEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputPhoto":
            var tempObject = new(inputPhoto)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var channels_ChannelParticipantI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "channels_channelParticipant":
            var tempObject = new(channels_channelParticipant)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var photos_PhotoI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "photos_photo":
            var tempObject = new(photos_photo)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var EncryptedMessageI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "encryptedMessage":
            var tempObject = new(encryptedMessage)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "encryptedMessageService":
            var tempObject = new(encryptedMessageService)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var DocumentAttributeI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "documentAttributeImageSize":
            var tempObject = new(documentAttributeImageSize)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "documentAttributeAnimated":
            var tempObject = new(documentAttributeAnimated)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "documentAttributeSticker":
            var tempObject = new(documentAttributeSticker)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "documentAttributeVideo":
            var tempObject = new(documentAttributeVideo)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "documentAttributeAudio":
            var tempObject = new(documentAttributeAudio)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "documentAttributeFilename":
            var tempObject = new(documentAttributeFilename)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "documentAttributeHasStickers":
            var tempObject = new(documentAttributeHasStickers)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var InputEncryptedChatI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "inputEncryptedChat":
            var tempObject = new(inputEncryptedChat)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var messages_FeaturedStickersI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "messages_featuredStickersNotModified":
            var tempObject = new(messages_featuredStickersNotModified)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messages_featuredStickers":
            var tempObject = new(messages_featuredStickers)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var payments_SavedInfoI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "payments_savedInfo":
            var tempObject = new(payments_savedInfo)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var PhoneCallProtocolI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "phoneCallProtocol":
            var tempObject = new(phoneCallProtocol)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var ChannelAdminLogEventI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "channelAdminLogEvent":
            var tempObject = new(channelAdminLogEvent)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var KeyboardButtonI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "keyboardButton":
            var tempObject = new(keyboardButton)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "keyboardButtonUrl":
            var tempObject = new(keyboardButtonUrl)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "keyboardButtonCallback":
            var tempObject = new(keyboardButtonCallback)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "keyboardButtonRequestPhone":
            var tempObject = new(keyboardButtonRequestPhone)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "keyboardButtonRequestGeoLocation":
            var tempObject = new(keyboardButtonRequestGeoLocation)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "keyboardButtonSwitchInline":
            var tempObject = new(keyboardButtonSwitchInline)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "keyboardButtonGame":
            var tempObject = new(keyboardButtonGame)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "keyboardButtonBuy":
            var tempObject = new(keyboardButtonBuy)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "keyboardButtonUrlAuth":
            var tempObject = new(keyboardButtonUrlAuth)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputKeyboardButtonUrlAuth":
            var tempObject = new(inputKeyboardButtonUrlAuth)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "keyboardButtonRequestPoll":
            var tempObject = new(keyboardButtonRequestPoll)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var RichTextI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "textEmpty":
            var tempObject = new(textEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "textPlain":
            var tempObject = new(textPlain)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "textBold":
            var tempObject = new(textBold)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "textItalic":
            var tempObject = new(textItalic)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "textUnderline":
            var tempObject = new(textUnderline)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "textStrike":
            var tempObject = new(textStrike)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "textFixed":
            var tempObject = new(textFixed)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "textUrl":
            var tempObject = new(textUrl)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "textEmail":
            var tempObject = new(textEmail)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "textConcat":
            var tempObject = new(textConcat)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "textSubscript":
            var tempObject = new(textSubscript)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "textSuperscript":
            var tempObject = new(textSuperscript)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "textMarked":
            var tempObject = new(textMarked)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "textPhone":
            var tempObject = new(textPhone)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "textImage":
            var tempObject = new(textImage)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "textAnchor":
            var tempObject = new(textAnchor)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var InputMessageI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "inputMessageID":
            var tempObject = new(inputMessageID)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMessageReplyTo":
            var tempObject = new(inputMessageReplyTo)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMessagePinned":
            var tempObject = new(inputMessagePinned)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var InputWebFileLocationI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "inputWebFileLocation":
            var tempObject = new(inputWebFileLocation)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputWebFileGeoPointLocation":
            var tempObject = new(inputWebFileGeoPointLocation)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var messages_AllStickersI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "messages_allStickersNotModified":
            var tempObject = new(messages_allStickersNotModified)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messages_allStickers":
            var tempObject = new(messages_allStickers)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var FileHashI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "fileHash":
            var tempObject = new(fileHash)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var ChatInviteI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "chatInviteAlready":
            var tempObject = new(chatInviteAlready)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "chatInvite":
            var tempObject = new(chatInvite)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "chatInvitePeek":
            var tempObject = new(chatInvitePeek)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var messages_BotResultsI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "messages_botResults":
            var tempObject = new(messages_botResults)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var InputWebDocumentI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "inputWebDocument":
            var tempObject = new(inputWebDocument)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var PageListItemI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "pageListItemText":
            var tempObject = new(pageListItemText)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pageListItemBlocks":
            var tempObject = new(pageListItemBlocks)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var PageRelatedArticleI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "pageRelatedArticle":
            var tempObject = new(pageRelatedArticle)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var help_InviteTextI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "help_inviteText":
            var tempObject = new(help_inviteText)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var messages_SavedGifsI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "messages_savedGifsNotModified":
            var tempObject = new(messages_savedGifsNotModified)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messages_savedGifs":
            var tempObject = new(messages_savedGifs)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var UserStatusI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "userStatusEmpty":
            var tempObject = new(userStatusEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "userStatusOnline":
            var tempObject = new(userStatusOnline)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "userStatusOffline":
            var tempObject = new(userStatusOffline)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "userStatusRecently":
            var tempObject = new(userStatusRecently)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "userStatusLastWeek":
            var tempObject = new(userStatusLastWeek)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "userStatusLastMonth":
            var tempObject = new(userStatusLastMonth)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var ContactI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "contact":
            var tempObject = new(contact)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var InputSecureFileI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "inputSecureFileUploaded":
            var tempObject = new(inputSecureFileUploaded)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputSecureFile":
            var tempObject = new(inputSecureFile)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var auth_PasswordRecoveryI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "auth_passwordRecovery":
            var tempObject = new(auth_passwordRecovery)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var account_WallPapersI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "account_wallPapersNotModified":
            var tempObject = new(account_wallPapersNotModified)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "account_wallPapers":
            var tempObject = new(account_wallPapers)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var StatsDateRangeDaysI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "statsDateRangeDays":
            var tempObject = new(statsDateRangeDays)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var messages_MessagesI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "messages_messages":
            var tempObject = new(messages_messages)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messages_messagesSlice":
            var tempObject = new(messages_messagesSlice)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messages_channelMessages":
            var tempObject = new(messages_channelMessages)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messages_messagesNotModified":
            var tempObject = new(messages_messagesNotModified)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var VideoSizeI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "videoSize":
            var tempObject = new(videoSize)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var messages_BotCallbackAnswerI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "messages_botCallbackAnswer":
            var tempObject = new(messages_botCallbackAnswer)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var auth_CodeTypeI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "auth_codeTypeSms":
            var tempObject = new(auth_codeTypeSms)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "auth_codeTypeCall":
            var tempObject = new(auth_codeTypeCall)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "auth_codeTypeFlashCall":
            var tempObject = new(auth_codeTypeFlashCall)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var InputSecureValueI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "inputSecureValue":
            var tempObject = new(inputSecureValue)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var ConfigI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "config":
            var tempObject = new(config)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var InputWallPaperI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "inputWallPaper":
            var tempObject = new(inputWallPaper)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputWallPaperSlug":
            var tempObject = new(inputWallPaperSlug)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputWallPaperNoFile":
            var tempObject = new(inputWallPaperNoFile)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var upload_FileI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "upload_file":
            var tempObject = new(upload_file)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "upload_fileCdnRedirect":
            var tempObject = new(upload_fileCdnRedirect)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var SecurePasswordKdfAlgoI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "securePasswordKdfAlgoUnknown":
            var tempObject = new(securePasswordKdfAlgoUnknown)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "securePasswordKdfAlgoPBKDF2HMACSHA512iter100000":
            var tempObject = new(securePasswordKdfAlgoPBKDF2HMACSHA512iter100000)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "securePasswordKdfAlgoSHA512":
            var tempObject = new(securePasswordKdfAlgoSHA512)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var MessageUserVoteI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "messageUserVote":
            var tempObject = new(messageUserVote)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageUserVoteInputOption":
            var tempObject = new(messageUserVoteInputOption)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageUserVoteMultiple":
            var tempObject = new(messageUserVoteMultiple)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var messages_FavedStickersI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "messages_favedStickersNotModified":
            var tempObject = new(messages_favedStickersNotModified)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messages_favedStickers":
            var tempObject = new(messages_favedStickers)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var SecureRequiredTypeI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "secureRequiredType":
            var tempObject = new(secureRequiredType)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "secureRequiredTypeOneOf":
            var tempObject = new(secureRequiredTypeOneOf)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var StatsGroupTopPosterI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "statsGroupTopPoster":
            var tempObject = new(statsGroupTopPoster)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var BotCommandI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "botCommand":
            var tempObject = new(botCommand)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var messages_FoundStickerSetsI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "messages_foundStickerSetsNotModified":
            var tempObject = new(messages_foundStickerSetsNotModified)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messages_foundStickerSets":
            var tempObject = new(messages_foundStickerSets)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var SecureCredentialsEncryptedI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "secureCredentialsEncrypted":
            var tempObject = new(secureCredentialsEncrypted)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var channels_ChannelParticipantsI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "channels_channelParticipants":
            var tempObject = new(channels_channelParticipants)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channels_channelParticipantsNotModified":
            var tempObject = new(channels_channelParticipantsNotModified)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var PhotoI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "photoEmpty":
            var tempObject = new(photoEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "photo":
            var tempObject = new(photo)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var ChatParticipantI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "chatParticipant":
            var tempObject = new(chatParticipant)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "chatParticipantCreator":
            var tempObject = new(chatParticipantCreator)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "chatParticipantAdmin":
            var tempObject = new(chatParticipantAdmin)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var JSONObjectValueI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "jsonObjectValue":
            var tempObject = new(jsonObjectValue)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var messages_StickerSetI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "messages_stickerSet":
            var tempObject = new(messages_stickerSet)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var SecureValueErrorI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "secureValueErrorData":
            var tempObject = new(secureValueErrorData)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "secureValueErrorFrontSide":
            var tempObject = new(secureValueErrorFrontSide)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "secureValueErrorReverseSide":
            var tempObject = new(secureValueErrorReverseSide)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "secureValueErrorSelfie":
            var tempObject = new(secureValueErrorSelfie)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "secureValueErrorFile":
            var tempObject = new(secureValueErrorFile)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "secureValueErrorFiles":
            var tempObject = new(secureValueErrorFiles)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "secureValueError":
            var tempObject = new(secureValueError)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "secureValueErrorTranslationFile":
            var tempObject = new(secureValueErrorTranslationFile)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "secureValueErrorTranslationFiles":
            var tempObject = new(secureValueErrorTranslationFiles)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var help_UserInfoI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "help_userInfoEmpty":
            var tempObject = new(help_userInfoEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "help_userInfo":
            var tempObject = new(help_userInfo)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var BankCardOpenUrlI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "bankCardOpenUrl":
            var tempObject = new(bankCardOpenUrl)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var help_PassportConfigI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "help_passportConfigNotModified":
            var tempObject = new(help_passportConfigNotModified)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "help_passportConfig":
            var tempObject = new(help_passportConfig)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var ChatAdminRightsI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "chatAdminRights":
            var tempObject = new(chatAdminRights)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var auth_AuthorizationI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "auth_authorization":
            var tempObject = new(auth_authorization)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "auth_authorizationSignUpRequired":
            var tempObject = new(auth_authorizationSignUpRequired)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var messages_StickerSetInstallResultI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "messages_stickerSetInstallResultSuccess":
            var tempObject = new(messages_stickerSetInstallResultSuccess)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messages_stickerSetInstallResultArchive":
            var tempObject = new(messages_stickerSetInstallResultArchive)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var MessageViewsI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "messageViews":
            var tempObject = new(messageViews)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var InputFileI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "inputFile":
            var tempObject = new(inputFile)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputFileBig":
            var tempObject = new(inputFileBig)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var updates_StateI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "updates_state":
            var tempObject = new(updates_state)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var EncryptedFileI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "encryptedFileEmpty":
            var tempObject = new(encryptedFileEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "encryptedFile":
            var tempObject = new(encryptedFile)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var updates_ChannelDifferenceI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "updates_channelDifferenceEmpty":
            var tempObject = new(updates_channelDifferenceEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updates_channelDifferenceTooLong":
            var tempObject = new(updates_channelDifferenceTooLong)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updates_channelDifference":
            var tempObject = new(updates_channelDifference)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var FolderPeerI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "folderPeer":
            var tempObject = new(folderPeer)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var account_PasswordI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "account_password":
            var tempObject = new(account_password)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var GameI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "game":
            var tempObject = new(game)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var ChatParticipantsI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "chatParticipantsForbidden":
            var tempObject = new(chatParticipantsForbidden)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "chatParticipants":
            var tempObject = new(chatParticipants)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var auth_ExportedAuthorizationI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "auth_exportedAuthorization":
            var tempObject = new(auth_exportedAuthorization)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var InputPhoneCallI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "inputPhoneCall":
            var tempObject = new(inputPhoneCall)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var WebPageI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "webPageEmpty":
            var tempObject = new(webPageEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "webPagePending":
            var tempObject = new(webPagePending)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "webPage":
            var tempObject = new(webPage)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "webPageNotModified":
            var tempObject = new(webPageNotModified)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var messages_RecentStickersI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "messages_recentStickersNotModified":
            var tempObject = new(messages_recentStickersNotModified)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messages_recentStickers":
            var tempObject = new(messages_recentStickers)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var FolderI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "folder":
            var tempObject = new(folder)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var InputUserI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "inputUserEmpty":
            var tempObject = new(inputUserEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputUserSelf":
            var tempObject = new(inputUserSelf)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputUser":
            var tempObject = new(inputUser)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputUserFromMessage":
            var tempObject = new(inputUserFromMessage)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var PeerI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "peerUser":
            var tempObject = new(peerUser)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "peerChat":
            var tempObject = new(peerChat)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "peerChannel":
            var tempObject = new(peerChannel)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var MessageActionI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "messageActionEmpty":
            var tempObject = new(messageActionEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageActionChatCreate":
            var tempObject = new(messageActionChatCreate)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageActionChatEditTitle":
            var tempObject = new(messageActionChatEditTitle)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageActionChatEditPhoto":
            var tempObject = new(messageActionChatEditPhoto)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageActionChatDeletePhoto":
            var tempObject = new(messageActionChatDeletePhoto)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageActionChatAddUser":
            var tempObject = new(messageActionChatAddUser)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageActionChatDeleteUser":
            var tempObject = new(messageActionChatDeleteUser)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageActionChatJoinedByLink":
            var tempObject = new(messageActionChatJoinedByLink)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageActionChannelCreate":
            var tempObject = new(messageActionChannelCreate)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageActionChatMigrateTo":
            var tempObject = new(messageActionChatMigrateTo)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageActionChannelMigrateFrom":
            var tempObject = new(messageActionChannelMigrateFrom)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageActionPinMessage":
            var tempObject = new(messageActionPinMessage)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageActionHistoryClear":
            var tempObject = new(messageActionHistoryClear)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageActionGameScore":
            var tempObject = new(messageActionGameScore)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageActionPaymentSentMe":
            var tempObject = new(messageActionPaymentSentMe)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageActionPaymentSent":
            var tempObject = new(messageActionPaymentSent)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageActionPhoneCall":
            var tempObject = new(messageActionPhoneCall)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageActionScreenshotTaken":
            var tempObject = new(messageActionScreenshotTaken)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageActionCustomAction":
            var tempObject = new(messageActionCustomAction)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageActionBotAllowed":
            var tempObject = new(messageActionBotAllowed)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageActionSecureValuesSentMe":
            var tempObject = new(messageActionSecureValuesSentMe)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageActionSecureValuesSent":
            var tempObject = new(messageActionSecureValuesSent)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageActionContactSignUp":
            var tempObject = new(messageActionContactSignUp)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageActionGeoProximityReached":
            var tempObject = new(messageActionGeoProximityReached)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var updates_DifferenceI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "updates_differenceEmpty":
            var tempObject = new(updates_differenceEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updates_difference":
            var tempObject = new(updates_difference)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updates_differenceSlice":
            var tempObject = new(updates_differenceSlice)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updates_differenceTooLong":
            var tempObject = new(updates_differenceTooLong)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var PasswordKdfAlgoI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "passwordKdfAlgoUnknown":
            var tempObject = new(passwordKdfAlgoUnknown)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow":
            var tempObject = new(passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var AutoDownloadSettingsI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "autoDownloadSettings":
            var tempObject = new(autoDownloadSettings)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var UrlAuthResultI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "urlAuthResultRequest":
            var tempObject = new(urlAuthResultRequest)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "urlAuthResultAccepted":
            var tempObject = new(urlAuthResultAccepted)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "urlAuthResultDefault":
            var tempObject = new(urlAuthResultDefault)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var PageI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "page":
            var tempObject = new(page)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var HighScoreI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "highScore":
            var tempObject = new(highScore)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var InputClientProxyI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "inputClientProxy":
            var tempObject = new(inputClientProxy)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var ReceivedNotifyMessageI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "receivedNotifyMessage":
            var tempObject = new(receivedNotifyMessage)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var InputGameI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "inputGameID":
            var tempObject = new(inputGameID)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputGameShortName":
            var tempObject = new(inputGameShortName)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var payments_PaymentReceiptI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "payments_paymentReceipt":
            var tempObject = new(payments_paymentReceipt)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var TopPeerI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "topPeer":
            var tempObject = new(topPeer)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var ChannelAdminLogEventActionI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "channelAdminLogEventActionChangeTitle":
            var tempObject = new(channelAdminLogEventActionChangeTitle)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelAdminLogEventActionChangeAbout":
            var tempObject = new(channelAdminLogEventActionChangeAbout)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelAdminLogEventActionChangeUsername":
            var tempObject = new(channelAdminLogEventActionChangeUsername)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelAdminLogEventActionChangePhoto":
            var tempObject = new(channelAdminLogEventActionChangePhoto)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelAdminLogEventActionToggleInvites":
            var tempObject = new(channelAdminLogEventActionToggleInvites)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelAdminLogEventActionToggleSignatures":
            var tempObject = new(channelAdminLogEventActionToggleSignatures)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelAdminLogEventActionUpdatePinned":
            var tempObject = new(channelAdminLogEventActionUpdatePinned)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelAdminLogEventActionEditMessage":
            var tempObject = new(channelAdminLogEventActionEditMessage)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelAdminLogEventActionDeleteMessage":
            var tempObject = new(channelAdminLogEventActionDeleteMessage)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelAdminLogEventActionParticipantJoin":
            var tempObject = new(channelAdminLogEventActionParticipantJoin)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelAdminLogEventActionParticipantLeave":
            var tempObject = new(channelAdminLogEventActionParticipantLeave)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelAdminLogEventActionParticipantInvite":
            var tempObject = new(channelAdminLogEventActionParticipantInvite)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelAdminLogEventActionParticipantToggleBan":
            var tempObject = new(channelAdminLogEventActionParticipantToggleBan)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelAdminLogEventActionParticipantToggleAdmin":
            var tempObject = new(channelAdminLogEventActionParticipantToggleAdmin)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelAdminLogEventActionChangeStickerSet":
            var tempObject = new(channelAdminLogEventActionChangeStickerSet)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelAdminLogEventActionTogglePreHistoryHidden":
            var tempObject = new(channelAdminLogEventActionTogglePreHistoryHidden)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelAdminLogEventActionDefaultBannedRights":
            var tempObject = new(channelAdminLogEventActionDefaultBannedRights)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelAdminLogEventActionStopPoll":
            var tempObject = new(channelAdminLogEventActionStopPoll)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelAdminLogEventActionChangeLinkedChat":
            var tempObject = new(channelAdminLogEventActionChangeLinkedChat)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelAdminLogEventActionChangeLocation":
            var tempObject = new(channelAdminLogEventActionChangeLocation)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelAdminLogEventActionToggleSlowMode":
            var tempObject = new(channelAdminLogEventActionToggleSlowMode)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var UserFullI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "userFull":
            var tempObject = new(userFull)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var WebDocumentI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "webDocument":
            var tempObject = new(webDocument)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "webDocumentNoProxy":
            var tempObject = new(webDocumentNoProxy)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var StatsAbsValueAndPrevI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "statsAbsValueAndPrev":
            var tempObject = new(statsAbsValueAndPrev)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var contacts_ImportedContactsI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "contacts_importedContacts":
            var tempObject = new(contacts_importedContacts)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var EmojiLanguageI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "emojiLanguage":
            var tempObject = new(emojiLanguage)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var ReportReasonI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "inputReportReasonSpam":
            var tempObject = new(inputReportReasonSpam)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputReportReasonViolence":
            var tempObject = new(inputReportReasonViolence)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputReportReasonPornography":
            var tempObject = new(inputReportReasonPornography)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputReportReasonChildAbuse":
            var tempObject = new(inputReportReasonChildAbuse)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputReportReasonOther":
            var tempObject = new(inputReportReasonOther)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputReportReasonCopyright":
            var tempObject = new(inputReportReasonCopyright)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputReportReasonGeoIrrelevant":
            var tempObject = new(inputReportReasonGeoIrrelevant)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var account_PasswordInputSettingsI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "account_passwordInputSettings":
            var tempObject = new(account_passwordInputSettings)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var ChannelParticipantI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "channelParticipant":
            var tempObject = new(channelParticipant)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelParticipantSelf":
            var tempObject = new(channelParticipantSelf)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelParticipantCreator":
            var tempObject = new(channelParticipantCreator)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelParticipantAdmin":
            var tempObject = new(channelParticipantAdmin)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelParticipantBanned":
            var tempObject = new(channelParticipantBanned)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelParticipantLeft":
            var tempObject = new(channelParticipantLeft)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var InputStickeredMediaI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "inputStickeredMediaPhoto":
            var tempObject = new(inputStickeredMediaPhoto)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputStickeredMediaDocument":
            var tempObject = new(inputStickeredMediaDocument)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var InputChannelI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "inputChannelEmpty":
            var tempObject = new(inputChannelEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputChannel":
            var tempObject = new(inputChannel)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputChannelFromMessage":
            var tempObject = new(inputChannelFromMessage)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var messages_SearchCounterI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "messages_searchCounter":
            var tempObject = new(messages_searchCounter)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var InputDocumentI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "inputDocumentEmpty":
            var tempObject = new(inputDocumentEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputDocument":
            var tempObject = new(inputDocument)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var InputEncryptedFileI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "inputEncryptedFileEmpty":
            var tempObject = new(inputEncryptedFileEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputEncryptedFileUploaded":
            var tempObject = new(inputEncryptedFileUploaded)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputEncryptedFile":
            var tempObject = new(inputEncryptedFile)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputEncryptedFileBigUploaded":
            var tempObject = new(inputEncryptedFileBigUploaded)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var account_PrivacyRulesI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "account_privacyRules":
            var tempObject = new(account_privacyRules)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var InputThemeSettingsI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "inputThemeSettings":
            var tempObject = new(inputThemeSettings)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var payments_ValidatedRequestedInfoI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "payments_validatedRequestedInfo":
            var tempObject = new(payments_validatedRequestedInfo)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var account_AuthorizationsI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "account_authorizations":
            var tempObject = new(account_authorizations)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var InputPrivacyRuleI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "inputPrivacyValueAllowContacts":
            var tempObject = new(inputPrivacyValueAllowContacts)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputPrivacyValueAllowAll":
            var tempObject = new(inputPrivacyValueAllowAll)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputPrivacyValueAllowUsers":
            var tempObject = new(inputPrivacyValueAllowUsers)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputPrivacyValueDisallowContacts":
            var tempObject = new(inputPrivacyValueDisallowContacts)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputPrivacyValueDisallowAll":
            var tempObject = new(inputPrivacyValueDisallowAll)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputPrivacyValueDisallowUsers":
            var tempObject = new(inputPrivacyValueDisallowUsers)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputPrivacyValueAllowChatParticipants":
            var tempObject = new(inputPrivacyValueAllowChatParticipants)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputPrivacyValueDisallowChatParticipants":
            var tempObject = new(inputPrivacyValueDisallowChatParticipants)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var StickerSetI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "stickerSet":
            var tempObject = new(stickerSet)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var PollResultsI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "pollResults":
            var tempObject = new(pollResults)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var SecureValueI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "secureValue":
            var tempObject = new(secureValue)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var ChannelAdminLogEventsFilterI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "channelAdminLogEventsFilter":
            var tempObject = new(channelAdminLogEventsFilter)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var RestrictionReasonI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "restrictionReason":
            var tempObject = new(restrictionReason)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var InputBotInlineResultI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "inputBotInlineResult":
            var tempObject = new(inputBotInlineResult)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputBotInlineResultPhoto":
            var tempObject = new(inputBotInlineResultPhoto)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputBotInlineResultDocument":
            var tempObject = new(inputBotInlineResultDocument)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputBotInlineResultGame":
            var tempObject = new(inputBotInlineResultGame)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var WallPaperI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "wallPaper":
            var tempObject = new(wallPaper)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "wallPaperNoFile":
            var tempObject = new(wallPaperNoFile)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var ImportedContactI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "importedContact":
            var tempObject = new(importedContact)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var help_TermsOfServiceI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "help_termsOfService":
            var tempObject = new(help_termsOfService)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var DataJSONI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "dataJSON":
            var tempObject = new(dataJSON)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var ShippingOptionI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "shippingOption":
            var tempObject = new(shippingOption)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var InputMediaI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "inputMediaEmpty":
            var tempObject = new(inputMediaEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMediaUploadedPhoto":
            var tempObject = new(inputMediaUploadedPhoto)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMediaPhoto":
            var tempObject = new(inputMediaPhoto)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMediaGeoPoint":
            var tempObject = new(inputMediaGeoPoint)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMediaContact":
            var tempObject = new(inputMediaContact)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMediaUploadedDocument":
            var tempObject = new(inputMediaUploadedDocument)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMediaDocument":
            var tempObject = new(inputMediaDocument)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMediaVenue":
            var tempObject = new(inputMediaVenue)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMediaPhotoExternal":
            var tempObject = new(inputMediaPhotoExternal)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMediaDocumentExternal":
            var tempObject = new(inputMediaDocumentExternal)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMediaGame":
            var tempObject = new(inputMediaGame)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMediaInvoice":
            var tempObject = new(inputMediaInvoice)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMediaGeoLive":
            var tempObject = new(inputMediaGeoLive)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMediaPoll":
            var tempObject = new(inputMediaPoll)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMediaDice":
            var tempObject = new(inputMediaDice)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var ExportedMessageLinkI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "exportedMessageLink":
            var tempObject = new(exportedMessageLink)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var PaymentChargeI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "paymentCharge":
            var tempObject = new(paymentCharge)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var InputNotifyPeerI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "inputNotifyPeer":
            var tempObject = new(inputNotifyPeer)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputNotifyUsers":
            var tempObject = new(inputNotifyUsers)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputNotifyChats":
            var tempObject = new(inputNotifyChats)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputNotifyBroadcasts":
            var tempObject = new(inputNotifyBroadcasts)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var InputStickerSetI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "inputStickerSetEmpty":
            var tempObject = new(inputStickerSetEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputStickerSetID":
            var tempObject = new(inputStickerSetID)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputStickerSetShortName":
            var tempObject = new(inputStickerSetShortName)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputStickerSetAnimatedEmoji":
            var tempObject = new(inputStickerSetAnimatedEmoji)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputStickerSetDice":
            var tempObject = new(inputStickerSetDice)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var payments_PaymentFormI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "payments_paymentForm":
            var tempObject = new(payments_paymentForm)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var LangPackDifferenceI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "langPackDifference":
            var tempObject = new(langPackDifference)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var messages_DialogsI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "messages_dialogs":
            var tempObject = new(messages_dialogs)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messages_dialogsSlice":
            var tempObject = new(messages_dialogsSlice)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messages_dialogsNotModified":
            var tempObject = new(messages_dialogsNotModified)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var MessageInteractionCountersI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "messageInteractionCounters":
            var tempObject = new(messageInteractionCounters)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var auth_SentCodeTypeI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "auth_sentCodeTypeApp":
            var tempObject = new(auth_sentCodeTypeApp)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "auth_sentCodeTypeSms":
            var tempObject = new(auth_sentCodeTypeSms)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "auth_sentCodeTypeCall":
            var tempObject = new(auth_sentCodeTypeCall)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "auth_sentCodeTypeFlashCall":
            var tempObject = new(auth_sentCodeTypeFlashCall)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var PeerNotifySettingsI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "peerNotifySettings":
            var tempObject = new(peerNotifySettings)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var StickerSetCoveredI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "stickerSetCovered":
            var tempObject = new(stickerSetCovered)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "stickerSetMultiCovered":
            var tempObject = new(stickerSetMultiCovered)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var messages_DiscussionMessageI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "messages_discussionMessage":
            var tempObject = new(messages_discussionMessage)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var UpdateI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "updateNewMessage":
            var tempObject = new(updateNewMessage)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateMessageID":
            var tempObject = new(updateMessageID)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateDeleteMessages":
            var tempObject = new(updateDeleteMessages)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateUserTyping":
            var tempObject = new(updateUserTyping)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateChatUserTyping":
            var tempObject = new(updateChatUserTyping)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateChatParticipants":
            var tempObject = new(updateChatParticipants)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateUserStatus":
            var tempObject = new(updateUserStatus)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateUserName":
            var tempObject = new(updateUserName)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateUserPhoto":
            var tempObject = new(updateUserPhoto)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateNewEncryptedMessage":
            var tempObject = new(updateNewEncryptedMessage)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateEncryptedChatTyping":
            var tempObject = new(updateEncryptedChatTyping)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateEncryption":
            var tempObject = new(updateEncryption)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateEncryptedMessagesRead":
            var tempObject = new(updateEncryptedMessagesRead)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateChatParticipantAdd":
            var tempObject = new(updateChatParticipantAdd)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateChatParticipantDelete":
            var tempObject = new(updateChatParticipantDelete)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateDcOptions":
            var tempObject = new(updateDcOptions)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateNotifySettings":
            var tempObject = new(updateNotifySettings)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateServiceNotification":
            var tempObject = new(updateServiceNotification)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updatePrivacy":
            var tempObject = new(updatePrivacy)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateUserPhone":
            var tempObject = new(updateUserPhone)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateReadHistoryInbox":
            var tempObject = new(updateReadHistoryInbox)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateReadHistoryOutbox":
            var tempObject = new(updateReadHistoryOutbox)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateWebPage":
            var tempObject = new(updateWebPage)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateReadMessagesContents":
            var tempObject = new(updateReadMessagesContents)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateChannelTooLong":
            var tempObject = new(updateChannelTooLong)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateChannel":
            var tempObject = new(updateChannel)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateNewChannelMessage":
            var tempObject = new(updateNewChannelMessage)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateReadChannelInbox":
            var tempObject = new(updateReadChannelInbox)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateDeleteChannelMessages":
            var tempObject = new(updateDeleteChannelMessages)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateChannelMessageViews":
            var tempObject = new(updateChannelMessageViews)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateChatParticipantAdmin":
            var tempObject = new(updateChatParticipantAdmin)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateNewStickerSet":
            var tempObject = new(updateNewStickerSet)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateStickerSetsOrder":
            var tempObject = new(updateStickerSetsOrder)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateStickerSets":
            var tempObject = new(updateStickerSets)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateSavedGifs":
            var tempObject = new(updateSavedGifs)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateBotInlineQuery":
            var tempObject = new(updateBotInlineQuery)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateBotInlineSend":
            var tempObject = new(updateBotInlineSend)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateEditChannelMessage":
            var tempObject = new(updateEditChannelMessage)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateBotCallbackQuery":
            var tempObject = new(updateBotCallbackQuery)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateEditMessage":
            var tempObject = new(updateEditMessage)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateInlineBotCallbackQuery":
            var tempObject = new(updateInlineBotCallbackQuery)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateReadChannelOutbox":
            var tempObject = new(updateReadChannelOutbox)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateDraftMessage":
            var tempObject = new(updateDraftMessage)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateReadFeaturedStickers":
            var tempObject = new(updateReadFeaturedStickers)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateRecentStickers":
            var tempObject = new(updateRecentStickers)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateConfig":
            var tempObject = new(updateConfig)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updatePtsChanged":
            var tempObject = new(updatePtsChanged)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateChannelWebPage":
            var tempObject = new(updateChannelWebPage)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateDialogPinned":
            var tempObject = new(updateDialogPinned)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updatePinnedDialogs":
            var tempObject = new(updatePinnedDialogs)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateBotWebhookJSON":
            var tempObject = new(updateBotWebhookJSON)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateBotWebhookJSONQuery":
            var tempObject = new(updateBotWebhookJSONQuery)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateBotShippingQuery":
            var tempObject = new(updateBotShippingQuery)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateBotPrecheckoutQuery":
            var tempObject = new(updateBotPrecheckoutQuery)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updatePhoneCall":
            var tempObject = new(updatePhoneCall)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateLangPackTooLong":
            var tempObject = new(updateLangPackTooLong)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateLangPack":
            var tempObject = new(updateLangPack)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateFavedStickers":
            var tempObject = new(updateFavedStickers)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateChannelReadMessagesContents":
            var tempObject = new(updateChannelReadMessagesContents)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateContactsReset":
            var tempObject = new(updateContactsReset)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateChannelAvailableMessages":
            var tempObject = new(updateChannelAvailableMessages)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateDialogUnreadMark":
            var tempObject = new(updateDialogUnreadMark)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateMessagePoll":
            var tempObject = new(updateMessagePoll)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateChatDefaultBannedRights":
            var tempObject = new(updateChatDefaultBannedRights)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateFolderPeers":
            var tempObject = new(updateFolderPeers)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updatePeerSettings":
            var tempObject = new(updatePeerSettings)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updatePeerLocated":
            var tempObject = new(updatePeerLocated)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateNewScheduledMessage":
            var tempObject = new(updateNewScheduledMessage)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateDeleteScheduledMessages":
            var tempObject = new(updateDeleteScheduledMessages)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateTheme":
            var tempObject = new(updateTheme)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateGeoLiveViewed":
            var tempObject = new(updateGeoLiveViewed)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateLoginToken":
            var tempObject = new(updateLoginToken)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateMessagePollVote":
            var tempObject = new(updateMessagePollVote)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateDialogFilter":
            var tempObject = new(updateDialogFilter)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateDialogFilterOrder":
            var tempObject = new(updateDialogFilterOrder)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateDialogFilters":
            var tempObject = new(updateDialogFilters)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updatePhoneCallSignalingData":
            var tempObject = new(updatePhoneCallSignalingData)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateChannelParticipant":
            var tempObject = new(updateChannelParticipant)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateChannelMessageForwards":
            var tempObject = new(updateChannelMessageForwards)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateReadChannelDiscussionInbox":
            var tempObject = new(updateReadChannelDiscussionInbox)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateReadChannelDiscussionOutbox":
            var tempObject = new(updateReadChannelDiscussionOutbox)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updatePeerBlocked":
            var tempObject = new(updatePeerBlocked)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateChannelUserTyping":
            var tempObject = new(updateChannelUserTyping)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updatePinnedMessages":
            var tempObject = new(updatePinnedMessages)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updatePinnedChannelMessages":
            var tempObject = new(updatePinnedChannelMessages)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var TopPeerCategoryPeersI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "topPeerCategoryPeers":
            var tempObject = new(topPeerCategoryPeers)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var auth_SentCodeI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "auth_sentCode":
            var tempObject = new(auth_sentCode)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var ExportedChatInviteI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "chatInviteEmpty":
            var tempObject = new(chatInviteEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "chatInviteExported":
            var tempObject = new(chatInviteExported)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var account_ThemesI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "account_themesNotModified":
            var tempObject = new(account_themesNotModified)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "account_themes":
            var tempObject = new(account_themes)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var help_CountryI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "help_country":
            var tempObject = new(help_country)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var messages_InactiveChatsI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "messages_inactiveChats":
            var tempObject = new(messages_inactiveChats)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var PhoneCallDiscardReasonI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "phoneCallDiscardReasonMissed":
            var tempObject = new(phoneCallDiscardReasonMissed)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "phoneCallDiscardReasonDisconnect":
            var tempObject = new(phoneCallDiscardReasonDisconnect)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "phoneCallDiscardReasonHangup":
            var tempObject = new(phoneCallDiscardReasonHangup)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "phoneCallDiscardReasonBusy":
            var tempObject = new(phoneCallDiscardReasonBusy)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var stats_BroadcastStatsI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "stats_broadcastStats":
            var tempObject = new(stats_broadcastStats)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var account_TmpPasswordI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "account_tmpPassword":
            var tempObject = new(account_tmpPassword)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var InputPaymentCredentialsI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "inputPaymentCredentialsSaved":
            var tempObject = new(inputPaymentCredentialsSaved)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputPaymentCredentials":
            var tempObject = new(inputPaymentCredentials)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputPaymentCredentialsApplePay":
            var tempObject = new(inputPaymentCredentialsApplePay)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputPaymentCredentialsAndroidPay":
            var tempObject = new(inputPaymentCredentialsAndroidPay)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var ThemeSettingsI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "themeSettings":
            var tempObject = new(themeSettings)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var BotInfoI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "botInfo":
            var tempObject = new(botInfo)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var PollAnswerI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "pollAnswer":
            var tempObject = new(pollAnswer)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var DialogI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "dialog":
            var tempObject = new(dialog)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "dialogFolder":
            var tempObject = new(dialogFolder)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var PageListOrderedItemI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "pageListOrderedItemText":
            var tempObject = new(pageListOrderedItemText)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pageListOrderedItemBlocks":
            var tempObject = new(pageListOrderedItemBlocks)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var PaymentSavedCredentialsI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "paymentSavedCredentialsCard":
            var tempObject = new(paymentSavedCredentialsCard)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var KeyboardButtonRowI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "keyboardButtonRow":
            var tempObject = new(keyboardButtonRow)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var InlineBotSwitchPMI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "inlineBotSwitchPM":
            var tempObject = new(inlineBotSwitchPM)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var messages_HighScoresI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "messages_highScores":
            var tempObject = new(messages_highScores)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var messages_AffectedHistoryI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "messages_affectedHistory":
            var tempObject = new(messages_affectedHistory)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var FileLocationI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "fileLocationToBeDeprecated":
            var tempObject = new(fileLocationToBeDeprecated)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var NearestDcI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "nearestDc":
            var tempObject = new(nearestDc)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var InputSingleMediaI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "inputSingleMedia":
            var tempObject = new(inputSingleMedia)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var UserI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "userEmpty":
            var tempObject = new(userEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "user":
            var tempObject = new(user)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var LangPackLanguageI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "langPackLanguage":
            var tempObject = new(langPackLanguage)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var LangPackStringI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "langPackString":
            var tempObject = new(langPackString)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "langPackStringPluralized":
            var tempObject = new(langPackStringPluralized)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "langPackStringDeleted":
            var tempObject = new(langPackStringDeleted)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var WebPageAttributeI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "webPageAttributeTheme":
            var tempObject = new(webPageAttributeTheme)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var NotifyPeerI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "notifyPeer":
            var tempObject = new(notifyPeer)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "notifyUsers":
            var tempObject = new(notifyUsers)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "notifyChats":
            var tempObject = new(notifyChats)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "notifyBroadcasts":
            var tempObject = new(notifyBroadcasts)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var InputDialogPeerI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "inputDialogPeer":
            var tempObject = new(inputDialogPeer)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputDialogPeerFolder":
            var tempObject = new(inputDialogPeerFolder)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var payments_BankCardDataI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "payments_bankCardData":
            var tempObject = new(payments_bankCardData)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var StatsPercentValueI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "statsPercentValue":
            var tempObject = new(statsPercentValue)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var contacts_TopPeersI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "contacts_topPeersNotModified":
            var tempObject = new(contacts_topPeersNotModified)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "contacts_topPeers":
            var tempObject = new(contacts_topPeers)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "contacts_topPeersDisabled":
            var tempObject = new(contacts_topPeersDisabled)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var contacts_BlockedI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "contacts_blocked":
            var tempObject = new(contacts_blocked)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "contacts_blockedSlice":
            var tempObject = new(contacts_blockedSlice)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var DcOptionI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "dcOption":
            var tempObject = new(dcOption)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var SavedContactI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "savedPhoneContact":
            var tempObject = new(savedPhoneContact)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var PageCaptionI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "pageCaption":
            var tempObject = new(pageCaption)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var upload_WebFileI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "upload_webFile":
            var tempObject = new(upload_webFile)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var account_AutoDownloadSettingsI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "account_autoDownloadSettings":
            var tempObject = new(account_autoDownloadSettings)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var messages_VotesListI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "messages_votesList":
            var tempObject = new(messages_votesList)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var messages_StickersI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "messages_stickersNotModified":
            var tempObject = new(messages_stickersNotModified)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messages_stickers":
            var tempObject = new(messages_stickers)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var ChannelMessagesFilterI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "channelMessagesFilterEmpty":
            var tempObject = new(channelMessagesFilterEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelMessagesFilter":
            var tempObject = new(channelMessagesFilter)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var InputPeerNotifySettingsI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "inputPeerNotifySettings":
            var tempObject = new(inputPeerNotifySettings)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var InvoiceI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "invoice":
            var tempObject = new(invoice)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var PhoneConnectionI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "phoneConnection":
            var tempObject = new(phoneConnection)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "phoneConnectionWebrtc":
            var tempObject = new(phoneConnectionWebrtc)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var InputContactI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "inputPhoneContact":
            var tempObject = new(inputPhoneContact)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var messages_SentEncryptedMessageI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "messages_sentEncryptedMessage":
            var tempObject = new(messages_sentEncryptedMessage)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messages_sentEncryptedFile":
            var tempObject = new(messages_sentEncryptedFile)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var channels_AdminLogResultsI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "channels_adminLogResults":
            var tempObject = new(channels_adminLogResults)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var WallPaperSettingsI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "wallPaperSettings":
            var tempObject = new(wallPaperSettings)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var storage_FileTypeI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "storage_fileUnknown":
            var tempObject = new(storage_fileUnknown)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "storage_filePartial":
            var tempObject = new(storage_filePartial)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "storage_fileJpeg":
            var tempObject = new(storage_fileJpeg)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "storage_fileGif":
            var tempObject = new(storage_fileGif)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "storage_filePng":
            var tempObject = new(storage_filePng)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "storage_filePdf":
            var tempObject = new(storage_filePdf)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "storage_fileMp3":
            var tempObject = new(storage_fileMp3)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "storage_fileMov":
            var tempObject = new(storage_fileMov)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "storage_fileMp4":
            var tempObject = new(storage_fileMp4)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "storage_fileWebp":
            var tempObject = new(storage_fileWebp)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var InputThemeI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "inputTheme":
            var tempObject = new(inputTheme)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputThemeSlug":
            var tempObject = new(inputThemeSlug)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var MessageReplyHeaderI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "messageReplyHeader":
            var tempObject = new(messageReplyHeader)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var messages_AffectedMessagesI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "messages_affectedMessages":
            var tempObject = new(messages_affectedMessages)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var LabeledPriceI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "labeledPrice":
            var tempObject = new(labeledPrice)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var contacts_ResolvedPeerI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "contacts_resolvedPeer":
            var tempObject = new(contacts_resolvedPeer)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var messages_PeerDialogsI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "messages_peerDialogs":
            var tempObject = new(messages_peerDialogs)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var MessageRangeI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "messageRange":
            var tempObject = new(messageRange)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var PostAddressI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "postAddress":
            var tempObject = new(postAddress)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var GeoPointI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "geoPointEmpty":
            var tempObject = new(geoPointEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "geoPoint":
            var tempObject = new(geoPoint)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var upload_CdnFileI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "upload_cdnFileReuploadNeeded":
            var tempObject = new(upload_cdnFileReuploadNeeded)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "upload_cdnFile":
            var tempObject = new(upload_cdnFile)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var help_SupportI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "help_support":
            var tempObject = new(help_support)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var PeerBlockedI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "peerBlocked":
            var tempObject = new(peerBlocked)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var InputFolderPeerI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "inputFolderPeer":
            var tempObject = new(inputFolderPeer)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var CdnPublicKeyI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "cdnPublicKey":
            var tempObject = new(cdnPublicKey)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var MessageMediaI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "messageMediaEmpty":
            var tempObject = new(messageMediaEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageMediaPhoto":
            var tempObject = new(messageMediaPhoto)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageMediaGeo":
            var tempObject = new(messageMediaGeo)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageMediaContact":
            var tempObject = new(messageMediaContact)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageMediaUnsupported":
            var tempObject = new(messageMediaUnsupported)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageMediaDocument":
            var tempObject = new(messageMediaDocument)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageMediaWebPage":
            var tempObject = new(messageMediaWebPage)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageMediaVenue":
            var tempObject = new(messageMediaVenue)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageMediaGame":
            var tempObject = new(messageMediaGame)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageMediaInvoice":
            var tempObject = new(messageMediaInvoice)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageMediaGeoLive":
            var tempObject = new(messageMediaGeoLive)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageMediaPoll":
            var tempObject = new(messageMediaPoll)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageMediaDice":
            var tempObject = new(messageMediaDice)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var ChatI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "chatEmpty":
            var tempObject = new(chatEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "chat":
            var tempObject = new(chat)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "chatForbidden":
            var tempObject = new(chatForbidden)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channel":
            var tempObject = new(channel)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelForbidden":
            var tempObject = new(channelForbidden)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var help_RecentMeUrlsI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "help_recentMeUrls":
            var tempObject = new(help_recentMeUrls)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var UserProfilePhotoI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "userProfilePhotoEmpty":
            var tempObject = new(userProfilePhotoEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "userProfilePhoto":
            var tempObject = new(userProfilePhoto)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var InputGeoPointI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "inputGeoPointEmpty":
            var tempObject = new(inputGeoPointEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputGeoPoint":
            var tempObject = new(inputGeoPoint)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var ContactStatusI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "contactStatus":
            var tempObject = new(contactStatus)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var contacts_FoundI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "contacts_found":
            var tempObject = new(contacts_found)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var GlobalPrivacySettingsI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "globalPrivacySettings":
            var tempObject = new(globalPrivacySettings)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var InputPeerI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "inputPeerEmpty":
            var tempObject = new(inputPeerEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputPeerSelf":
            var tempObject = new(inputPeerSelf)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputPeerChat":
            var tempObject = new(inputPeerChat)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputPeerUser":
            var tempObject = new(inputPeerUser)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputPeerChannel":
            var tempObject = new(inputPeerChannel)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputPeerUserFromMessage":
            var tempObject = new(inputPeerUserFromMessage)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputPeerChannelFromMessage":
            var tempObject = new(inputPeerChannelFromMessage)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var DraftMessageI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "draftMessageEmpty":
            var tempObject = new(draftMessageEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "draftMessage":
            var tempObject = new(draftMessage)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var account_SentEmailCodeI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "account_sentEmailCode":
            var tempObject = new(account_sentEmailCode)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var InputBotInlineMessageI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "inputBotInlineMessageMediaAuto":
            var tempObject = new(inputBotInlineMessageMediaAuto)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputBotInlineMessageText":
            var tempObject = new(inputBotInlineMessageText)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputBotInlineMessageMediaGeo":
            var tempObject = new(inputBotInlineMessageMediaGeo)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputBotInlineMessageMediaVenue":
            var tempObject = new(inputBotInlineMessageMediaVenue)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputBotInlineMessageMediaContact":
            var tempObject = new(inputBotInlineMessageMediaContact)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputBotInlineMessageGame":
            var tempObject = new(inputBotInlineMessageGame)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var ChatFullI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "chatFull":
            var tempObject = new(chatFull)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelFull":
            var tempObject = new(channelFull)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var AccountDaysTTLI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "accountDaysTTL":
            var tempObject = new(accountDaysTTL)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var messages_ChatsI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "messages_chats":
            var tempObject = new(messages_chats)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messages_chatsSlice":
            var tempObject = new(messages_chatsSlice)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var RecentMeUrlI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "recentMeUrlUnknown":
            var tempObject = new(recentMeUrlUnknown)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "recentMeUrlUser":
            var tempObject = new(recentMeUrlUser)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "recentMeUrlChat":
            var tempObject = new(recentMeUrlChat)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "recentMeUrlChatInvite":
            var tempObject = new(recentMeUrlChatInvite)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "recentMeUrlStickerSet":
            var tempObject = new(recentMeUrlStickerSet)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var auth_LoginTokenI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "auth_loginToken":
            var tempObject = new(auth_loginToken)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "auth_loginTokenMigrateTo":
            var tempObject = new(auth_loginTokenMigrateTo)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "auth_loginTokenSuccess":
            var tempObject = new(auth_loginTokenSuccess)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var messages_MessageViewsI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "messages_messageViews":
            var tempObject = new(messages_messageViews)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var InputFileLocationI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "inputFileLocation":
            var tempObject = new(inputFileLocation)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputEncryptedFileLocation":
            var tempObject = new(inputEncryptedFileLocation)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputDocumentFileLocation":
            var tempObject = new(inputDocumentFileLocation)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputSecureFileLocation":
            var tempObject = new(inputSecureFileLocation)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputTakeoutFileLocation":
            var tempObject = new(inputTakeoutFileLocation)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputPhotoFileLocation":
            var tempObject = new(inputPhotoFileLocation)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputPhotoLegacyFileLocation":
            var tempObject = new(inputPhotoLegacyFileLocation)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputPeerPhotoFileLocation":
            var tempObject = new(inputPeerPhotoFileLocation)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputStickerSetThumb":
            var tempObject = new(inputStickerSetThumb)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var help_AppUpdateI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "help_appUpdate":
            var tempObject = new(help_appUpdate)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "help_noAppUpdate":
            var tempObject = new(help_noAppUpdate)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var PopularContactI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "popularContact":
            var tempObject = new(popularContact)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var EmojiURLI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "emojiURL":
            var tempObject = new(emojiURL)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var MessagesFilterI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "inputMessagesFilterEmpty":
            var tempObject = new(inputMessagesFilterEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMessagesFilterPhotos":
            var tempObject = new(inputMessagesFilterPhotos)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMessagesFilterVideo":
            var tempObject = new(inputMessagesFilterVideo)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMessagesFilterPhotoVideo":
            var tempObject = new(inputMessagesFilterPhotoVideo)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMessagesFilterDocument":
            var tempObject = new(inputMessagesFilterDocument)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMessagesFilterUrl":
            var tempObject = new(inputMessagesFilterUrl)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMessagesFilterGif":
            var tempObject = new(inputMessagesFilterGif)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMessagesFilterVoice":
            var tempObject = new(inputMessagesFilterVoice)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMessagesFilterMusic":
            var tempObject = new(inputMessagesFilterMusic)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMessagesFilterChatPhotos":
            var tempObject = new(inputMessagesFilterChatPhotos)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMessagesFilterPhoneCalls":
            var tempObject = new(inputMessagesFilterPhoneCalls)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMessagesFilterRoundVoice":
            var tempObject = new(inputMessagesFilterRoundVoice)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMessagesFilterRoundVideo":
            var tempObject = new(inputMessagesFilterRoundVideo)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMessagesFilterMyMentions":
            var tempObject = new(inputMessagesFilterMyMentions)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMessagesFilterGeo":
            var tempObject = new(inputMessagesFilterGeo)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMessagesFilterContacts":
            var tempObject = new(inputMessagesFilterContacts)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMessagesFilterPinned":
            var tempObject = new(inputMessagesFilterPinned)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var CodeSettingsI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "codeSettings":
            var tempObject = new(codeSettings)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var messages_MessageEditDataI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "messages_messageEditData":
            var tempObject = new(messages_messageEditData)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var help_CountriesListI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "help_countriesListNotModified":
            var tempObject = new(help_countriesListNotModified)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "help_countriesList":
            var tempObject = new(help_countriesList)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var MessageRepliesI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "messageReplies":
            var tempObject = new(messageReplies)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var account_AuthorizationFormI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "account_authorizationForm":
            var tempObject = new(account_authorizationForm)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var messages_DhConfigI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "messages_dhConfigNotModified":
            var tempObject = new(messages_dhConfigNotModified)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messages_dhConfig":
            var tempObject = new(messages_dhConfig)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var account_TakeoutI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "account_takeout":
            var tempObject = new(account_takeout)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var UpdatesI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "updatesTooLong":
            var tempObject = new(updatesTooLong)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateShortMessage":
            var tempObject = new(updateShortMessage)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateShortChatMessage":
            var tempObject = new(updateShortChatMessage)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateShort":
            var tempObject = new(updateShort)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updatesCombined":
            var tempObject = new(updatesCombined)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updates":
            var tempObject = new(updates)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateShortSentMessage":
            var tempObject = new(updateShortSentMessage)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var MessageFwdHeaderI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "messageFwdHeader":
            var tempObject = new(messageFwdHeader)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var AuthorizationI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "authorization":
            var tempObject = new(authorization)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var help_TermsOfServiceUpdateI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "help_termsOfServiceUpdateEmpty":
            var tempObject = new(help_termsOfServiceUpdateEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "help_termsOfServiceUpdate":
            var tempObject = new(help_termsOfServiceUpdate)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var PageTableCellI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "pageTableCell":
            var tempObject = new(pageTableCell)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var account_ContentSettingsI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "account_contentSettings":
            var tempObject = new(account_contentSettings)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var account_WebAuthorizationsI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "account_webAuthorizations":
            var tempObject = new(account_webAuthorizations)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var SecureValueHashI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "secureValueHash":
            var tempObject = new(secureValueHash)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var PaymentRequestedInfoI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "paymentRequestedInfo":
            var tempObject = new(paymentRequestedInfo)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var PhoneCallI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "phoneCallEmpty":
            var tempObject = new(phoneCallEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "phoneCallWaiting":
            var tempObject = new(phoneCallWaiting)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "phoneCallRequested":
            var tempObject = new(phoneCallRequested)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "phoneCallAccepted":
            var tempObject = new(phoneCallAccepted)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "phoneCall":
            var tempObject = new(phoneCall)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "phoneCallDiscarded":
            var tempObject = new(phoneCallDiscarded)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var InputPrivacyKeyI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "inputPrivacyKeyStatusTimestamp":
            var tempObject = new(inputPrivacyKeyStatusTimestamp)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputPrivacyKeyChatInvite":
            var tempObject = new(inputPrivacyKeyChatInvite)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputPrivacyKeyPhoneCall":
            var tempObject = new(inputPrivacyKeyPhoneCall)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputPrivacyKeyPhoneP2P":
            var tempObject = new(inputPrivacyKeyPhoneP2P)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputPrivacyKeyForwards":
            var tempObject = new(inputPrivacyKeyForwards)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputPrivacyKeyProfilePhoto":
            var tempObject = new(inputPrivacyKeyProfilePhoto)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputPrivacyKeyPhoneNumber":
            var tempObject = new(inputPrivacyKeyPhoneNumber)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputPrivacyKeyAddedByPhone":
            var tempObject = new(inputPrivacyKeyAddedByPhone)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var MaskCoordsI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "maskCoords":
            var tempObject = new(maskCoords)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var PrivacyRuleI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "privacyValueAllowContacts":
            var tempObject = new(privacyValueAllowContacts)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "privacyValueAllowAll":
            var tempObject = new(privacyValueAllowAll)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "privacyValueAllowUsers":
            var tempObject = new(privacyValueAllowUsers)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "privacyValueDisallowContacts":
            var tempObject = new(privacyValueDisallowContacts)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "privacyValueDisallowAll":
            var tempObject = new(privacyValueDisallowAll)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "privacyValueDisallowUsers":
            var tempObject = new(privacyValueDisallowUsers)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "privacyValueAllowChatParticipants":
            var tempObject = new(privacyValueAllowChatParticipants)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "privacyValueDisallowChatParticipants":
            var tempObject = new(privacyValueDisallowChatParticipants)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var PageBlockI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "pageBlockUnsupported":
            var tempObject = new(pageBlockUnsupported)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pageBlockTitle":
            var tempObject = new(pageBlockTitle)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pageBlockSubtitle":
            var tempObject = new(pageBlockSubtitle)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pageBlockAuthorDate":
            var tempObject = new(pageBlockAuthorDate)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pageBlockHeader":
            var tempObject = new(pageBlockHeader)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pageBlockSubheader":
            var tempObject = new(pageBlockSubheader)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pageBlockParagraph":
            var tempObject = new(pageBlockParagraph)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pageBlockPreformatted":
            var tempObject = new(pageBlockPreformatted)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pageBlockFooter":
            var tempObject = new(pageBlockFooter)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pageBlockDivider":
            var tempObject = new(pageBlockDivider)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pageBlockAnchor":
            var tempObject = new(pageBlockAnchor)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pageBlockList":
            var tempObject = new(pageBlockList)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pageBlockBlockquote":
            var tempObject = new(pageBlockBlockquote)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pageBlockPullquote":
            var tempObject = new(pageBlockPullquote)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pageBlockPhoto":
            var tempObject = new(pageBlockPhoto)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pageBlockVideo":
            var tempObject = new(pageBlockVideo)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pageBlockCover":
            var tempObject = new(pageBlockCover)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pageBlockEmbed":
            var tempObject = new(pageBlockEmbed)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pageBlockEmbedPost":
            var tempObject = new(pageBlockEmbedPost)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pageBlockCollage":
            var tempObject = new(pageBlockCollage)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pageBlockSlideshow":
            var tempObject = new(pageBlockSlideshow)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pageBlockChannel":
            var tempObject = new(pageBlockChannel)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pageBlockAudio":
            var tempObject = new(pageBlockAudio)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pageBlockKicker":
            var tempObject = new(pageBlockKicker)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pageBlockTable":
            var tempObject = new(pageBlockTable)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pageBlockOrderedList":
            var tempObject = new(pageBlockOrderedList)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pageBlockDetails":
            var tempObject = new(pageBlockDetails)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pageBlockRelatedArticles":
            var tempObject = new(pageBlockRelatedArticles)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pageBlockMap":
            var tempObject = new(pageBlockMap)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var ChatPhotoI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "chatPhotoEmpty":
            var tempObject = new(chatPhotoEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "chatPhoto":
            var tempObject = new(chatPhoto)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var contacts_ContactsI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "contacts_contactsNotModified":
            var tempObject = new(contacts_contactsNotModified)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "contacts_contacts":
            var tempObject = new(contacts_contacts)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var EncryptedChatI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "encryptedChatEmpty":
            var tempObject = new(encryptedChatEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "encryptedChatWaiting":
            var tempObject = new(encryptedChatWaiting)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "encryptedChatRequested":
            var tempObject = new(encryptedChatRequested)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "encryptedChat":
            var tempObject = new(encryptedChat)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "encryptedChatDiscarded":
            var tempObject = new(encryptedChatDiscarded)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var messages_ChatFullI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "messages_chatFull":
            var tempObject = new(messages_chatFull)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var ReplyMarkupI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "replyKeyboardHide":
            var tempObject = new(replyKeyboardHide)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "replyKeyboardForceReply":
            var tempObject = new(replyKeyboardForceReply)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "replyKeyboardMarkup":
            var tempObject = new(replyKeyboardMarkup)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "replyInlineMarkup":
            var tempObject = new(replyInlineMarkup)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var StatsURLI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "statsURL":
            var tempObject = new(statsURL)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var StatsGraphI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "statsGraphAsync":
            var tempObject = new(statsGraphAsync)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "statsGraphError":
            var tempObject = new(statsGraphError)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "statsGraph":
            var tempObject = new(statsGraph)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var MessageI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "messageEmpty":
            var tempObject = new(messageEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "message":
            var tempObject = new(message)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageService":
            var tempObject = new(messageService)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var DocumentI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "documentEmpty":
            var tempObject = new(documentEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "document":
            var tempObject = new(document)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var StatsGroupTopInviterI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "statsGroupTopInviter":
            var tempObject = new(statsGroupTopInviter)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var InputAppEventI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "inputAppEvent":
            var tempObject = new(inputAppEvent)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var SecureValueTypeI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "secureValueTypePersonalDetails":
            var tempObject = new(secureValueTypePersonalDetails)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "secureValueTypePassport":
            var tempObject = new(secureValueTypePassport)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "secureValueTypeDriverLicense":
            var tempObject = new(secureValueTypeDriverLicense)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "secureValueTypeIdentityCard":
            var tempObject = new(secureValueTypeIdentityCard)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "secureValueTypeInternalPassport":
            var tempObject = new(secureValueTypeInternalPassport)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "secureValueTypeAddress":
            var tempObject = new(secureValueTypeAddress)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "secureValueTypeUtilityBill":
            var tempObject = new(secureValueTypeUtilityBill)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "secureValueTypeBankStatement":
            var tempObject = new(secureValueTypeBankStatement)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "secureValueTypeRentalAgreement":
            var tempObject = new(secureValueTypeRentalAgreement)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "secureValueTypePassportRegistration":
            var tempObject = new(secureValueTypePassportRegistration)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "secureValueTypeTemporaryRegistration":
            var tempObject = new(secureValueTypeTemporaryRegistration)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "secureValueTypePhone":
            var tempObject = new(secureValueTypePhone)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "secureValueTypeEmail":
            var tempObject = new(secureValueTypeEmail)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var BotInlineResultI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "botInlineResult":
            var tempObject = new(botInlineResult)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "botInlineMediaResult":
            var tempObject = new(botInlineMediaResult)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var SendMessageActionI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "sendMessageTypingAction":
            var tempObject = new(sendMessageTypingAction)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "sendMessageCancelAction":
            var tempObject = new(sendMessageCancelAction)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "sendMessageRecordVideoAction":
            var tempObject = new(sendMessageRecordVideoAction)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "sendMessageUploadVideoAction":
            var tempObject = new(sendMessageUploadVideoAction)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "sendMessageRecordAudioAction":
            var tempObject = new(sendMessageRecordAudioAction)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "sendMessageUploadAudioAction":
            var tempObject = new(sendMessageUploadAudioAction)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "sendMessageUploadPhotoAction":
            var tempObject = new(sendMessageUploadPhotoAction)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "sendMessageUploadDocumentAction":
            var tempObject = new(sendMessageUploadDocumentAction)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "sendMessageGeoLocationAction":
            var tempObject = new(sendMessageGeoLocationAction)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "sendMessageChooseContactAction":
            var tempObject = new(sendMessageChooseContactAction)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "sendMessageGamePlayAction":
            var tempObject = new(sendMessageGamePlayAction)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "sendMessageRecordRoundAction":
            var tempObject = new(sendMessageRecordRoundAction)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "sendMessageUploadRoundAction":
            var tempObject = new(sendMessageUploadRoundAction)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var help_DeepLinkInfoI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "help_deepLinkInfoEmpty":
            var tempObject = new(help_deepLinkInfoEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "help_deepLinkInfo":
            var tempObject = new(help_deepLinkInfo)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var SecureFileI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "secureFileEmpty":
            var tempObject = new(secureFileEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "secureFile":
            var tempObject = new(secureFile)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var InputStickerSetItemI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "inputStickerSetItem":
            var tempObject = new(inputStickerSetItem)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var EmojiKeywordI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "emojiKeyword":
            var tempObject = new(emojiKeyword)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "emojiKeywordDeleted":
            var tempObject = new(emojiKeywordDeleted)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var PeerSettingsI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "peerSettings":
            var tempObject = new(peerSettings)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var ChatBannedRightsI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "chatBannedRights":
            var tempObject = new(chatBannedRights)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var BotInlineMessageI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "botInlineMessageMediaAuto":
            var tempObject = new(botInlineMessageMediaAuto)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "botInlineMessageText":
            var tempObject = new(botInlineMessageText)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "botInlineMessageMediaGeo":
            var tempObject = new(botInlineMessageMediaGeo)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "botInlineMessageMediaVenue":
            var tempObject = new(botInlineMessageMediaVenue)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "botInlineMessageMediaContact":
            var tempObject = new(botInlineMessageMediaContact)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var PeerLocatedI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "peerLocated":
            var tempObject = new(peerLocated)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "peerSelfLocated":
            var tempObject = new(peerSelfLocated)
            self.TlDecode(tempObject)
            obj = tempObject
            return
proc TLDecode*(self: var ScalingSeq[uint8], obj: var ChannelLocationI) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "channelLocationEmpty":
            var tempObject = new(channelLocationEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelLocation":
            var tempObject = new(channelLocation)
            self.TlDecode(tempObject)
            obj = tempObject
            return

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[help_PromoDataI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "help_promoDataEmpty":
            var tempObject = new(help_promoDataEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "help_promoData":
            var tempObject = new(help_promoData)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[stats_MegagroupStatsI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "stats_megagroupStats":
            var tempObject = new(stats_megagroupStats)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[PrivacyKeyI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "privacyKeyStatusTimestamp":
            var tempObject = new(privacyKeyStatusTimestamp)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "privacyKeyChatInvite":
            var tempObject = new(privacyKeyChatInvite)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "privacyKeyPhoneCall":
            var tempObject = new(privacyKeyPhoneCall)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "privacyKeyPhoneP2P":
            var tempObject = new(privacyKeyPhoneP2P)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "privacyKeyForwards":
            var tempObject = new(privacyKeyForwards)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "privacyKeyProfilePhoto":
            var tempObject = new(privacyKeyProfilePhoto)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "privacyKeyPhoneNumber":
            var tempObject = new(privacyKeyPhoneNumber)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "privacyKeyAddedByPhone":
            var tempObject = new(privacyKeyAddedByPhone)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[help_CountryCodeI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "help_countryCode":
            var tempObject = new(help_countryCode)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[WebAuthorizationI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "webAuthorization":
            var tempObject = new(webAuthorization)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[PollI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "poll":
            var tempObject = new(poll)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[DialogPeerI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "dialogPeer":
            var tempObject = new(dialogPeer)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "dialogPeerFolder":
            var tempObject = new(dialogPeerFolder)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[TopPeerCategoryI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "topPeerCategoryBotsPM":
            var tempObject = new(topPeerCategoryBotsPM)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "topPeerCategoryBotsInline":
            var tempObject = new(topPeerCategoryBotsInline)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "topPeerCategoryCorrespondents":
            var tempObject = new(topPeerCategoryCorrespondents)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "topPeerCategoryGroups":
            var tempObject = new(topPeerCategoryGroups)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "topPeerCategoryChannels":
            var tempObject = new(topPeerCategoryChannels)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "topPeerCategoryPhoneCalls":
            var tempObject = new(topPeerCategoryPhoneCalls)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "topPeerCategoryForwardUsers":
            var tempObject = new(topPeerCategoryForwardUsers)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "topPeerCategoryForwardChats":
            var tempObject = new(topPeerCategoryForwardChats)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[help_SupportNameI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "help_supportName":
            var tempObject = new(help_supportName)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[PhotoSizeI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "photoSizeEmpty":
            var tempObject = new(photoSizeEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "photoSize":
            var tempObject = new(photoSize)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "photoCachedSize":
            var tempObject = new(photoCachedSize)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "photoStrippedSize":
            var tempObject = new(photoStrippedSize)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "photoSizeProgressive":
            var tempObject = new(photoSizeProgressive)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[JSONValueI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "jsonNull":
            var tempObject = new(jsonNull)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "jsonBool":
            var tempObject = new(jsonBool)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "jsonNumber":
            var tempObject = new(jsonNumber)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "jsonString":
            var tempObject = new(jsonString)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "jsonArray":
            var tempObject = new(jsonArray)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "jsonObject":
            var tempObject = new(jsonObject)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[messages_ArchivedStickersI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "messages_archivedStickers":
            var tempObject = new(messages_archivedStickers)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[BaseThemeI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "baseThemeClassic":
            var tempObject = new(baseThemeClassic)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "baseThemeDay":
            var tempObject = new(baseThemeDay)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "baseThemeNight":
            var tempObject = new(baseThemeNight)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "baseThemeTinted":
            var tempObject = new(baseThemeTinted)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "baseThemeArctic":
            var tempObject = new(baseThemeArctic)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[DialogFilterI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "dialogFilter":
            var tempObject = new(dialogFilter)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[MessageEntityI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "messageEntityUnknown":
            var tempObject = new(messageEntityUnknown)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageEntityMention":
            var tempObject = new(messageEntityMention)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageEntityHashtag":
            var tempObject = new(messageEntityHashtag)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageEntityBotCommand":
            var tempObject = new(messageEntityBotCommand)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageEntityUrl":
            var tempObject = new(messageEntityUrl)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageEntityEmail":
            var tempObject = new(messageEntityEmail)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageEntityBold":
            var tempObject = new(messageEntityBold)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageEntityItalic":
            var tempObject = new(messageEntityItalic)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageEntityCode":
            var tempObject = new(messageEntityCode)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageEntityPre":
            var tempObject = new(messageEntityPre)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageEntityTextUrl":
            var tempObject = new(messageEntityTextUrl)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageEntityMentionName":
            var tempObject = new(messageEntityMentionName)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMessageEntityMentionName":
            var tempObject = new(inputMessageEntityMentionName)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageEntityPhone":
            var tempObject = new(messageEntityPhone)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageEntityCashtag":
            var tempObject = new(messageEntityCashtag)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageEntityUnderline":
            var tempObject = new(messageEntityUnderline)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageEntityStrike":
            var tempObject = new(messageEntityStrike)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageEntityBlockquote":
            var tempObject = new(messageEntityBlockquote)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageEntityBankCard":
            var tempObject = new(messageEntityBankCard)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[ThemeI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "theme":
            var tempObject = new(theme)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[DialogFilterSuggestedI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "dialogFilterSuggested":
            var tempObject = new(dialogFilterSuggested)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[stats_MessageStatsI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "stats_messageStats":
            var tempObject = new(stats_messageStats)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[payments_PaymentResultI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "payments_paymentResult":
            var tempObject = new(payments_paymentResult)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "payments_paymentVerificationNeeded":
            var tempObject = new(payments_paymentVerificationNeeded)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[StickerPackI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "stickerPack":
            var tempObject = new(stickerPack)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[account_PasswordSettingsI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "account_passwordSettings":
            var tempObject = new(account_passwordSettings)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[CdnConfigI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "cdnConfig":
            var tempObject = new(cdnConfig)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[InputCheckPasswordSRPI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "inputCheckPasswordEmpty":
            var tempObject = new(inputCheckPasswordEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputCheckPasswordSRP":
            var tempObject = new(inputCheckPasswordSRP)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[PollAnswerVotersI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "pollAnswerVoters":
            var tempObject = new(pollAnswerVoters)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[SecureDataI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "secureData":
            var tempObject = new(secureData)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[PageTableRowI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "pageTableRow":
            var tempObject = new(pageTableRow)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[phone_PhoneCallI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "phone_phoneCall":
            var tempObject = new(phone_phoneCall)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[ChatOnlinesI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "chatOnlines":
            var tempObject = new(chatOnlines)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[SecurePlainDataI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "securePlainPhone":
            var tempObject = new(securePlainPhone)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "securePlainEmail":
            var tempObject = new(securePlainEmail)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[InputChatPhotoI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "inputChatPhotoEmpty":
            var tempObject = new(inputChatPhotoEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputChatUploadedPhoto":
            var tempObject = new(inputChatUploadedPhoto)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputChatPhoto":
            var tempObject = new(inputChatPhoto)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[SecureSecretSettingsI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "secureSecretSettings":
            var tempObject = new(secureSecretSettings)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[EmojiKeywordsDifferenceI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "emojiKeywordsDifference":
            var tempObject = new(emojiKeywordsDifference)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[photos_PhotosI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "photos_photos":
            var tempObject = new(photos_photos)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "photos_photosSlice":
            var tempObject = new(photos_photosSlice)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[ChannelParticipantsFilterI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "channelParticipantsRecent":
            var tempObject = new(channelParticipantsRecent)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelParticipantsAdmins":
            var tempObject = new(channelParticipantsAdmins)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelParticipantsKicked":
            var tempObject = new(channelParticipantsKicked)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelParticipantsBots":
            var tempObject = new(channelParticipantsBots)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelParticipantsBanned":
            var tempObject = new(channelParticipantsBanned)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelParticipantsSearch":
            var tempObject = new(channelParticipantsSearch)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelParticipantsContacts":
            var tempObject = new(channelParticipantsContacts)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelParticipantsMentions":
            var tempObject = new(channelParticipantsMentions)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[StatsGroupTopAdminI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "statsGroupTopAdmin":
            var tempObject = new(statsGroupTopAdmin)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[InputBotInlineMessageIDI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "inputBotInlineMessageID":
            var tempObject = new(inputBotInlineMessageID)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[InputPhotoI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "inputPhotoEmpty":
            var tempObject = new(inputPhotoEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputPhoto":
            var tempObject = new(inputPhoto)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[channels_ChannelParticipantI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "channels_channelParticipant":
            var tempObject = new(channels_channelParticipant)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[photos_PhotoI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "photos_photo":
            var tempObject = new(photos_photo)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[EncryptedMessageI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "encryptedMessage":
            var tempObject = new(encryptedMessage)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "encryptedMessageService":
            var tempObject = new(encryptedMessageService)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[DocumentAttributeI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "documentAttributeImageSize":
            var tempObject = new(documentAttributeImageSize)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "documentAttributeAnimated":
            var tempObject = new(documentAttributeAnimated)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "documentAttributeSticker":
            var tempObject = new(documentAttributeSticker)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "documentAttributeVideo":
            var tempObject = new(documentAttributeVideo)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "documentAttributeAudio":
            var tempObject = new(documentAttributeAudio)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "documentAttributeFilename":
            var tempObject = new(documentAttributeFilename)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "documentAttributeHasStickers":
            var tempObject = new(documentAttributeHasStickers)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[InputEncryptedChatI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "inputEncryptedChat":
            var tempObject = new(inputEncryptedChat)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[messages_FeaturedStickersI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "messages_featuredStickersNotModified":
            var tempObject = new(messages_featuredStickersNotModified)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messages_featuredStickers":
            var tempObject = new(messages_featuredStickers)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[payments_SavedInfoI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "payments_savedInfo":
            var tempObject = new(payments_savedInfo)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[PhoneCallProtocolI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "phoneCallProtocol":
            var tempObject = new(phoneCallProtocol)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[ChannelAdminLogEventI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "channelAdminLogEvent":
            var tempObject = new(channelAdminLogEvent)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[KeyboardButtonI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "keyboardButton":
            var tempObject = new(keyboardButton)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "keyboardButtonUrl":
            var tempObject = new(keyboardButtonUrl)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "keyboardButtonCallback":
            var tempObject = new(keyboardButtonCallback)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "keyboardButtonRequestPhone":
            var tempObject = new(keyboardButtonRequestPhone)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "keyboardButtonRequestGeoLocation":
            var tempObject = new(keyboardButtonRequestGeoLocation)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "keyboardButtonSwitchInline":
            var tempObject = new(keyboardButtonSwitchInline)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "keyboardButtonGame":
            var tempObject = new(keyboardButtonGame)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "keyboardButtonBuy":
            var tempObject = new(keyboardButtonBuy)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "keyboardButtonUrlAuth":
            var tempObject = new(keyboardButtonUrlAuth)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputKeyboardButtonUrlAuth":
            var tempObject = new(inputKeyboardButtonUrlAuth)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "keyboardButtonRequestPoll":
            var tempObject = new(keyboardButtonRequestPoll)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[RichTextI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "textEmpty":
            var tempObject = new(textEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "textPlain":
            var tempObject = new(textPlain)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "textBold":
            var tempObject = new(textBold)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "textItalic":
            var tempObject = new(textItalic)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "textUnderline":
            var tempObject = new(textUnderline)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "textStrike":
            var tempObject = new(textStrike)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "textFixed":
            var tempObject = new(textFixed)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "textUrl":
            var tempObject = new(textUrl)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "textEmail":
            var tempObject = new(textEmail)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "textConcat":
            var tempObject = new(textConcat)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "textSubscript":
            var tempObject = new(textSubscript)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "textSuperscript":
            var tempObject = new(textSuperscript)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "textMarked":
            var tempObject = new(textMarked)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "textPhone":
            var tempObject = new(textPhone)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "textImage":
            var tempObject = new(textImage)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "textAnchor":
            var tempObject = new(textAnchor)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[InputMessageI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "inputMessageID":
            var tempObject = new(inputMessageID)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMessageReplyTo":
            var tempObject = new(inputMessageReplyTo)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMessagePinned":
            var tempObject = new(inputMessagePinned)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[InputWebFileLocationI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "inputWebFileLocation":
            var tempObject = new(inputWebFileLocation)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputWebFileGeoPointLocation":
            var tempObject = new(inputWebFileGeoPointLocation)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[messages_AllStickersI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "messages_allStickersNotModified":
            var tempObject = new(messages_allStickersNotModified)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messages_allStickers":
            var tempObject = new(messages_allStickers)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[FileHashI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "fileHash":
            var tempObject = new(fileHash)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[ChatInviteI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "chatInviteAlready":
            var tempObject = new(chatInviteAlready)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "chatInvite":
            var tempObject = new(chatInvite)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "chatInvitePeek":
            var tempObject = new(chatInvitePeek)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[messages_BotResultsI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "messages_botResults":
            var tempObject = new(messages_botResults)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[InputWebDocumentI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "inputWebDocument":
            var tempObject = new(inputWebDocument)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[PageListItemI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "pageListItemText":
            var tempObject = new(pageListItemText)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pageListItemBlocks":
            var tempObject = new(pageListItemBlocks)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[PageRelatedArticleI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "pageRelatedArticle":
            var tempObject = new(pageRelatedArticle)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[help_InviteTextI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "help_inviteText":
            var tempObject = new(help_inviteText)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[messages_SavedGifsI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "messages_savedGifsNotModified":
            var tempObject = new(messages_savedGifsNotModified)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messages_savedGifs":
            var tempObject = new(messages_savedGifs)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[UserStatusI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "userStatusEmpty":
            var tempObject = new(userStatusEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "userStatusOnline":
            var tempObject = new(userStatusOnline)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "userStatusOffline":
            var tempObject = new(userStatusOffline)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "userStatusRecently":
            var tempObject = new(userStatusRecently)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "userStatusLastWeek":
            var tempObject = new(userStatusLastWeek)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "userStatusLastMonth":
            var tempObject = new(userStatusLastMonth)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[ContactI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "contact":
            var tempObject = new(contact)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[InputSecureFileI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "inputSecureFileUploaded":
            var tempObject = new(inputSecureFileUploaded)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputSecureFile":
            var tempObject = new(inputSecureFile)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[auth_PasswordRecoveryI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "auth_passwordRecovery":
            var tempObject = new(auth_passwordRecovery)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[account_WallPapersI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "account_wallPapersNotModified":
            var tempObject = new(account_wallPapersNotModified)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "account_wallPapers":
            var tempObject = new(account_wallPapers)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[StatsDateRangeDaysI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "statsDateRangeDays":
            var tempObject = new(statsDateRangeDays)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[messages_MessagesI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "messages_messages":
            var tempObject = new(messages_messages)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messages_messagesSlice":
            var tempObject = new(messages_messagesSlice)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messages_channelMessages":
            var tempObject = new(messages_channelMessages)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messages_messagesNotModified":
            var tempObject = new(messages_messagesNotModified)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[VideoSizeI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "videoSize":
            var tempObject = new(videoSize)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[messages_BotCallbackAnswerI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "messages_botCallbackAnswer":
            var tempObject = new(messages_botCallbackAnswer)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[auth_CodeTypeI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "auth_codeTypeSms":
            var tempObject = new(auth_codeTypeSms)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "auth_codeTypeCall":
            var tempObject = new(auth_codeTypeCall)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "auth_codeTypeFlashCall":
            var tempObject = new(auth_codeTypeFlashCall)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[InputSecureValueI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "inputSecureValue":
            var tempObject = new(inputSecureValue)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[ConfigI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "config":
            var tempObject = new(config)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[InputWallPaperI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "inputWallPaper":
            var tempObject = new(inputWallPaper)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputWallPaperSlug":
            var tempObject = new(inputWallPaperSlug)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputWallPaperNoFile":
            var tempObject = new(inputWallPaperNoFile)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[upload_FileI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "upload_file":
            var tempObject = new(upload_file)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "upload_fileCdnRedirect":
            var tempObject = new(upload_fileCdnRedirect)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[SecurePasswordKdfAlgoI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "securePasswordKdfAlgoUnknown":
            var tempObject = new(securePasswordKdfAlgoUnknown)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "securePasswordKdfAlgoPBKDF2HMACSHA512iter100000":
            var tempObject = new(securePasswordKdfAlgoPBKDF2HMACSHA512iter100000)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "securePasswordKdfAlgoSHA512":
            var tempObject = new(securePasswordKdfAlgoSHA512)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[MessageUserVoteI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "messageUserVote":
            var tempObject = new(messageUserVote)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageUserVoteInputOption":
            var tempObject = new(messageUserVoteInputOption)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageUserVoteMultiple":
            var tempObject = new(messageUserVoteMultiple)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[messages_FavedStickersI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "messages_favedStickersNotModified":
            var tempObject = new(messages_favedStickersNotModified)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messages_favedStickers":
            var tempObject = new(messages_favedStickers)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[SecureRequiredTypeI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "secureRequiredType":
            var tempObject = new(secureRequiredType)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "secureRequiredTypeOneOf":
            var tempObject = new(secureRequiredTypeOneOf)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[StatsGroupTopPosterI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "statsGroupTopPoster":
            var tempObject = new(statsGroupTopPoster)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[BotCommandI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "botCommand":
            var tempObject = new(botCommand)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[messages_FoundStickerSetsI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "messages_foundStickerSetsNotModified":
            var tempObject = new(messages_foundStickerSetsNotModified)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messages_foundStickerSets":
            var tempObject = new(messages_foundStickerSets)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[SecureCredentialsEncryptedI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "secureCredentialsEncrypted":
            var tempObject = new(secureCredentialsEncrypted)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[channels_ChannelParticipantsI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "channels_channelParticipants":
            var tempObject = new(channels_channelParticipants)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channels_channelParticipantsNotModified":
            var tempObject = new(channels_channelParticipantsNotModified)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[PhotoI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "photoEmpty":
            var tempObject = new(photoEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "photo":
            var tempObject = new(photo)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[ChatParticipantI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "chatParticipant":
            var tempObject = new(chatParticipant)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "chatParticipantCreator":
            var tempObject = new(chatParticipantCreator)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "chatParticipantAdmin":
            var tempObject = new(chatParticipantAdmin)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[JSONObjectValueI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "jsonObjectValue":
            var tempObject = new(jsonObjectValue)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[messages_StickerSetI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "messages_stickerSet":
            var tempObject = new(messages_stickerSet)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[SecureValueErrorI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "secureValueErrorData":
            var tempObject = new(secureValueErrorData)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "secureValueErrorFrontSide":
            var tempObject = new(secureValueErrorFrontSide)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "secureValueErrorReverseSide":
            var tempObject = new(secureValueErrorReverseSide)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "secureValueErrorSelfie":
            var tempObject = new(secureValueErrorSelfie)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "secureValueErrorFile":
            var tempObject = new(secureValueErrorFile)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "secureValueErrorFiles":
            var tempObject = new(secureValueErrorFiles)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "secureValueError":
            var tempObject = new(secureValueError)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "secureValueErrorTranslationFile":
            var tempObject = new(secureValueErrorTranslationFile)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "secureValueErrorTranslationFiles":
            var tempObject = new(secureValueErrorTranslationFiles)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[help_UserInfoI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "help_userInfoEmpty":
            var tempObject = new(help_userInfoEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "help_userInfo":
            var tempObject = new(help_userInfo)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[BankCardOpenUrlI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "bankCardOpenUrl":
            var tempObject = new(bankCardOpenUrl)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[help_PassportConfigI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "help_passportConfigNotModified":
            var tempObject = new(help_passportConfigNotModified)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "help_passportConfig":
            var tempObject = new(help_passportConfig)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[ChatAdminRightsI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "chatAdminRights":
            var tempObject = new(chatAdminRights)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[auth_AuthorizationI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "auth_authorization":
            var tempObject = new(auth_authorization)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "auth_authorizationSignUpRequired":
            var tempObject = new(auth_authorizationSignUpRequired)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[messages_StickerSetInstallResultI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "messages_stickerSetInstallResultSuccess":
            var tempObject = new(messages_stickerSetInstallResultSuccess)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messages_stickerSetInstallResultArchive":
            var tempObject = new(messages_stickerSetInstallResultArchive)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[MessageViewsI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "messageViews":
            var tempObject = new(messageViews)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[InputFileI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "inputFile":
            var tempObject = new(inputFile)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputFileBig":
            var tempObject = new(inputFileBig)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[updates_StateI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "updates_state":
            var tempObject = new(updates_state)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[EncryptedFileI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "encryptedFileEmpty":
            var tempObject = new(encryptedFileEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "encryptedFile":
            var tempObject = new(encryptedFile)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[updates_ChannelDifferenceI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "updates_channelDifferenceEmpty":
            var tempObject = new(updates_channelDifferenceEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updates_channelDifferenceTooLong":
            var tempObject = new(updates_channelDifferenceTooLong)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updates_channelDifference":
            var tempObject = new(updates_channelDifference)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[FolderPeerI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "folderPeer":
            var tempObject = new(folderPeer)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[account_PasswordI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "account_password":
            var tempObject = new(account_password)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[GameI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "game":
            var tempObject = new(game)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[ChatParticipantsI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "chatParticipantsForbidden":
            var tempObject = new(chatParticipantsForbidden)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "chatParticipants":
            var tempObject = new(chatParticipants)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[auth_ExportedAuthorizationI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "auth_exportedAuthorization":
            var tempObject = new(auth_exportedAuthorization)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[InputPhoneCallI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "inputPhoneCall":
            var tempObject = new(inputPhoneCall)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[WebPageI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "webPageEmpty":
            var tempObject = new(webPageEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "webPagePending":
            var tempObject = new(webPagePending)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "webPage":
            var tempObject = new(webPage)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "webPageNotModified":
            var tempObject = new(webPageNotModified)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[messages_RecentStickersI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "messages_recentStickersNotModified":
            var tempObject = new(messages_recentStickersNotModified)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messages_recentStickers":
            var tempObject = new(messages_recentStickers)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[FolderI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "folder":
            var tempObject = new(folder)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[InputUserI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "inputUserEmpty":
            var tempObject = new(inputUserEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputUserSelf":
            var tempObject = new(inputUserSelf)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputUser":
            var tempObject = new(inputUser)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputUserFromMessage":
            var tempObject = new(inputUserFromMessage)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[PeerI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "peerUser":
            var tempObject = new(peerUser)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "peerChat":
            var tempObject = new(peerChat)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "peerChannel":
            var tempObject = new(peerChannel)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[MessageActionI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "messageActionEmpty":
            var tempObject = new(messageActionEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageActionChatCreate":
            var tempObject = new(messageActionChatCreate)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageActionChatEditTitle":
            var tempObject = new(messageActionChatEditTitle)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageActionChatEditPhoto":
            var tempObject = new(messageActionChatEditPhoto)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageActionChatDeletePhoto":
            var tempObject = new(messageActionChatDeletePhoto)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageActionChatAddUser":
            var tempObject = new(messageActionChatAddUser)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageActionChatDeleteUser":
            var tempObject = new(messageActionChatDeleteUser)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageActionChatJoinedByLink":
            var tempObject = new(messageActionChatJoinedByLink)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageActionChannelCreate":
            var tempObject = new(messageActionChannelCreate)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageActionChatMigrateTo":
            var tempObject = new(messageActionChatMigrateTo)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageActionChannelMigrateFrom":
            var tempObject = new(messageActionChannelMigrateFrom)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageActionPinMessage":
            var tempObject = new(messageActionPinMessage)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageActionHistoryClear":
            var tempObject = new(messageActionHistoryClear)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageActionGameScore":
            var tempObject = new(messageActionGameScore)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageActionPaymentSentMe":
            var tempObject = new(messageActionPaymentSentMe)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageActionPaymentSent":
            var tempObject = new(messageActionPaymentSent)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageActionPhoneCall":
            var tempObject = new(messageActionPhoneCall)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageActionScreenshotTaken":
            var tempObject = new(messageActionScreenshotTaken)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageActionCustomAction":
            var tempObject = new(messageActionCustomAction)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageActionBotAllowed":
            var tempObject = new(messageActionBotAllowed)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageActionSecureValuesSentMe":
            var tempObject = new(messageActionSecureValuesSentMe)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageActionSecureValuesSent":
            var tempObject = new(messageActionSecureValuesSent)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageActionContactSignUp":
            var tempObject = new(messageActionContactSignUp)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageActionGeoProximityReached":
            var tempObject = new(messageActionGeoProximityReached)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[updates_DifferenceI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "updates_differenceEmpty":
            var tempObject = new(updates_differenceEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updates_difference":
            var tempObject = new(updates_difference)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updates_differenceSlice":
            var tempObject = new(updates_differenceSlice)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updates_differenceTooLong":
            var tempObject = new(updates_differenceTooLong)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[PasswordKdfAlgoI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "passwordKdfAlgoUnknown":
            var tempObject = new(passwordKdfAlgoUnknown)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow":
            var tempObject = new(passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[AutoDownloadSettingsI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "autoDownloadSettings":
            var tempObject = new(autoDownloadSettings)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[UrlAuthResultI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "urlAuthResultRequest":
            var tempObject = new(urlAuthResultRequest)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "urlAuthResultAccepted":
            var tempObject = new(urlAuthResultAccepted)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "urlAuthResultDefault":
            var tempObject = new(urlAuthResultDefault)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[PageI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "page":
            var tempObject = new(page)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[HighScoreI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "highScore":
            var tempObject = new(highScore)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[InputClientProxyI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "inputClientProxy":
            var tempObject = new(inputClientProxy)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[ReceivedNotifyMessageI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "receivedNotifyMessage":
            var tempObject = new(receivedNotifyMessage)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[InputGameI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "inputGameID":
            var tempObject = new(inputGameID)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputGameShortName":
            var tempObject = new(inputGameShortName)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[payments_PaymentReceiptI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "payments_paymentReceipt":
            var tempObject = new(payments_paymentReceipt)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[TopPeerI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "topPeer":
            var tempObject = new(topPeer)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[ChannelAdminLogEventActionI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "channelAdminLogEventActionChangeTitle":
            var tempObject = new(channelAdminLogEventActionChangeTitle)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelAdminLogEventActionChangeAbout":
            var tempObject = new(channelAdminLogEventActionChangeAbout)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelAdminLogEventActionChangeUsername":
            var tempObject = new(channelAdminLogEventActionChangeUsername)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelAdminLogEventActionChangePhoto":
            var tempObject = new(channelAdminLogEventActionChangePhoto)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelAdminLogEventActionToggleInvites":
            var tempObject = new(channelAdminLogEventActionToggleInvites)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelAdminLogEventActionToggleSignatures":
            var tempObject = new(channelAdminLogEventActionToggleSignatures)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelAdminLogEventActionUpdatePinned":
            var tempObject = new(channelAdminLogEventActionUpdatePinned)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelAdminLogEventActionEditMessage":
            var tempObject = new(channelAdminLogEventActionEditMessage)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelAdminLogEventActionDeleteMessage":
            var tempObject = new(channelAdminLogEventActionDeleteMessage)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelAdminLogEventActionParticipantJoin":
            var tempObject = new(channelAdminLogEventActionParticipantJoin)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelAdminLogEventActionParticipantLeave":
            var tempObject = new(channelAdminLogEventActionParticipantLeave)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelAdminLogEventActionParticipantInvite":
            var tempObject = new(channelAdminLogEventActionParticipantInvite)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelAdminLogEventActionParticipantToggleBan":
            var tempObject = new(channelAdminLogEventActionParticipantToggleBan)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelAdminLogEventActionParticipantToggleAdmin":
            var tempObject = new(channelAdminLogEventActionParticipantToggleAdmin)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelAdminLogEventActionChangeStickerSet":
            var tempObject = new(channelAdminLogEventActionChangeStickerSet)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelAdminLogEventActionTogglePreHistoryHidden":
            var tempObject = new(channelAdminLogEventActionTogglePreHistoryHidden)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelAdminLogEventActionDefaultBannedRights":
            var tempObject = new(channelAdminLogEventActionDefaultBannedRights)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelAdminLogEventActionStopPoll":
            var tempObject = new(channelAdminLogEventActionStopPoll)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelAdminLogEventActionChangeLinkedChat":
            var tempObject = new(channelAdminLogEventActionChangeLinkedChat)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelAdminLogEventActionChangeLocation":
            var tempObject = new(channelAdminLogEventActionChangeLocation)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelAdminLogEventActionToggleSlowMode":
            var tempObject = new(channelAdminLogEventActionToggleSlowMode)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[UserFullI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "userFull":
            var tempObject = new(userFull)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[WebDocumentI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "webDocument":
            var tempObject = new(webDocument)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "webDocumentNoProxy":
            var tempObject = new(webDocumentNoProxy)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[StatsAbsValueAndPrevI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "statsAbsValueAndPrev":
            var tempObject = new(statsAbsValueAndPrev)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[contacts_ImportedContactsI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "contacts_importedContacts":
            var tempObject = new(contacts_importedContacts)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[EmojiLanguageI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "emojiLanguage":
            var tempObject = new(emojiLanguage)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[ReportReasonI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "inputReportReasonSpam":
            var tempObject = new(inputReportReasonSpam)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputReportReasonViolence":
            var tempObject = new(inputReportReasonViolence)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputReportReasonPornography":
            var tempObject = new(inputReportReasonPornography)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputReportReasonChildAbuse":
            var tempObject = new(inputReportReasonChildAbuse)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputReportReasonOther":
            var tempObject = new(inputReportReasonOther)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputReportReasonCopyright":
            var tempObject = new(inputReportReasonCopyright)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputReportReasonGeoIrrelevant":
            var tempObject = new(inputReportReasonGeoIrrelevant)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[account_PasswordInputSettingsI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "account_passwordInputSettings":
            var tempObject = new(account_passwordInputSettings)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[ChannelParticipantI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "channelParticipant":
            var tempObject = new(channelParticipant)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelParticipantSelf":
            var tempObject = new(channelParticipantSelf)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelParticipantCreator":
            var tempObject = new(channelParticipantCreator)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelParticipantAdmin":
            var tempObject = new(channelParticipantAdmin)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelParticipantBanned":
            var tempObject = new(channelParticipantBanned)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelParticipantLeft":
            var tempObject = new(channelParticipantLeft)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[InputStickeredMediaI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "inputStickeredMediaPhoto":
            var tempObject = new(inputStickeredMediaPhoto)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputStickeredMediaDocument":
            var tempObject = new(inputStickeredMediaDocument)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[InputChannelI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "inputChannelEmpty":
            var tempObject = new(inputChannelEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputChannel":
            var tempObject = new(inputChannel)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputChannelFromMessage":
            var tempObject = new(inputChannelFromMessage)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[messages_SearchCounterI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "messages_searchCounter":
            var tempObject = new(messages_searchCounter)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[InputDocumentI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "inputDocumentEmpty":
            var tempObject = new(inputDocumentEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputDocument":
            var tempObject = new(inputDocument)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[InputEncryptedFileI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "inputEncryptedFileEmpty":
            var tempObject = new(inputEncryptedFileEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputEncryptedFileUploaded":
            var tempObject = new(inputEncryptedFileUploaded)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputEncryptedFile":
            var tempObject = new(inputEncryptedFile)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputEncryptedFileBigUploaded":
            var tempObject = new(inputEncryptedFileBigUploaded)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[account_PrivacyRulesI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "account_privacyRules":
            var tempObject = new(account_privacyRules)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[InputThemeSettingsI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "inputThemeSettings":
            var tempObject = new(inputThemeSettings)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[payments_ValidatedRequestedInfoI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "payments_validatedRequestedInfo":
            var tempObject = new(payments_validatedRequestedInfo)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[account_AuthorizationsI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "account_authorizations":
            var tempObject = new(account_authorizations)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[InputPrivacyRuleI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "inputPrivacyValueAllowContacts":
            var tempObject = new(inputPrivacyValueAllowContacts)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputPrivacyValueAllowAll":
            var tempObject = new(inputPrivacyValueAllowAll)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputPrivacyValueAllowUsers":
            var tempObject = new(inputPrivacyValueAllowUsers)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputPrivacyValueDisallowContacts":
            var tempObject = new(inputPrivacyValueDisallowContacts)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputPrivacyValueDisallowAll":
            var tempObject = new(inputPrivacyValueDisallowAll)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputPrivacyValueDisallowUsers":
            var tempObject = new(inputPrivacyValueDisallowUsers)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputPrivacyValueAllowChatParticipants":
            var tempObject = new(inputPrivacyValueAllowChatParticipants)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputPrivacyValueDisallowChatParticipants":
            var tempObject = new(inputPrivacyValueDisallowChatParticipants)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[StickerSetI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "stickerSet":
            var tempObject = new(stickerSet)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[PollResultsI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "pollResults":
            var tempObject = new(pollResults)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[SecureValueI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "secureValue":
            var tempObject = new(secureValue)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[ChannelAdminLogEventsFilterI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "channelAdminLogEventsFilter":
            var tempObject = new(channelAdminLogEventsFilter)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[RestrictionReasonI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "restrictionReason":
            var tempObject = new(restrictionReason)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[InputBotInlineResultI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "inputBotInlineResult":
            var tempObject = new(inputBotInlineResult)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputBotInlineResultPhoto":
            var tempObject = new(inputBotInlineResultPhoto)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputBotInlineResultDocument":
            var tempObject = new(inputBotInlineResultDocument)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputBotInlineResultGame":
            var tempObject = new(inputBotInlineResultGame)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[WallPaperI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "wallPaper":
            var tempObject = new(wallPaper)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "wallPaperNoFile":
            var tempObject = new(wallPaperNoFile)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[ImportedContactI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "importedContact":
            var tempObject = new(importedContact)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[help_TermsOfServiceI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "help_termsOfService":
            var tempObject = new(help_termsOfService)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[DataJSONI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "dataJSON":
            var tempObject = new(dataJSON)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[ShippingOptionI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "shippingOption":
            var tempObject = new(shippingOption)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[InputMediaI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "inputMediaEmpty":
            var tempObject = new(inputMediaEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMediaUploadedPhoto":
            var tempObject = new(inputMediaUploadedPhoto)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMediaPhoto":
            var tempObject = new(inputMediaPhoto)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMediaGeoPoint":
            var tempObject = new(inputMediaGeoPoint)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMediaContact":
            var tempObject = new(inputMediaContact)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMediaUploadedDocument":
            var tempObject = new(inputMediaUploadedDocument)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMediaDocument":
            var tempObject = new(inputMediaDocument)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMediaVenue":
            var tempObject = new(inputMediaVenue)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMediaPhotoExternal":
            var tempObject = new(inputMediaPhotoExternal)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMediaDocumentExternal":
            var tempObject = new(inputMediaDocumentExternal)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMediaGame":
            var tempObject = new(inputMediaGame)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMediaInvoice":
            var tempObject = new(inputMediaInvoice)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMediaGeoLive":
            var tempObject = new(inputMediaGeoLive)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMediaPoll":
            var tempObject = new(inputMediaPoll)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMediaDice":
            var tempObject = new(inputMediaDice)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[ExportedMessageLinkI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "exportedMessageLink":
            var tempObject = new(exportedMessageLink)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[PaymentChargeI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "paymentCharge":
            var tempObject = new(paymentCharge)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[InputNotifyPeerI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "inputNotifyPeer":
            var tempObject = new(inputNotifyPeer)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputNotifyUsers":
            var tempObject = new(inputNotifyUsers)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputNotifyChats":
            var tempObject = new(inputNotifyChats)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputNotifyBroadcasts":
            var tempObject = new(inputNotifyBroadcasts)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[InputStickerSetI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "inputStickerSetEmpty":
            var tempObject = new(inputStickerSetEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputStickerSetID":
            var tempObject = new(inputStickerSetID)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputStickerSetShortName":
            var tempObject = new(inputStickerSetShortName)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputStickerSetAnimatedEmoji":
            var tempObject = new(inputStickerSetAnimatedEmoji)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputStickerSetDice":
            var tempObject = new(inputStickerSetDice)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[payments_PaymentFormI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "payments_paymentForm":
            var tempObject = new(payments_paymentForm)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[LangPackDifferenceI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "langPackDifference":
            var tempObject = new(langPackDifference)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[messages_DialogsI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "messages_dialogs":
            var tempObject = new(messages_dialogs)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messages_dialogsSlice":
            var tempObject = new(messages_dialogsSlice)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messages_dialogsNotModified":
            var tempObject = new(messages_dialogsNotModified)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[MessageInteractionCountersI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "messageInteractionCounters":
            var tempObject = new(messageInteractionCounters)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[auth_SentCodeTypeI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "auth_sentCodeTypeApp":
            var tempObject = new(auth_sentCodeTypeApp)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "auth_sentCodeTypeSms":
            var tempObject = new(auth_sentCodeTypeSms)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "auth_sentCodeTypeCall":
            var tempObject = new(auth_sentCodeTypeCall)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "auth_sentCodeTypeFlashCall":
            var tempObject = new(auth_sentCodeTypeFlashCall)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[PeerNotifySettingsI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "peerNotifySettings":
            var tempObject = new(peerNotifySettings)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[StickerSetCoveredI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "stickerSetCovered":
            var tempObject = new(stickerSetCovered)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "stickerSetMultiCovered":
            var tempObject = new(stickerSetMultiCovered)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[messages_DiscussionMessageI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "messages_discussionMessage":
            var tempObject = new(messages_discussionMessage)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[UpdateI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "updateNewMessage":
            var tempObject = new(updateNewMessage)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateMessageID":
            var tempObject = new(updateMessageID)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateDeleteMessages":
            var tempObject = new(updateDeleteMessages)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateUserTyping":
            var tempObject = new(updateUserTyping)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateChatUserTyping":
            var tempObject = new(updateChatUserTyping)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateChatParticipants":
            var tempObject = new(updateChatParticipants)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateUserStatus":
            var tempObject = new(updateUserStatus)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateUserName":
            var tempObject = new(updateUserName)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateUserPhoto":
            var tempObject = new(updateUserPhoto)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateNewEncryptedMessage":
            var tempObject = new(updateNewEncryptedMessage)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateEncryptedChatTyping":
            var tempObject = new(updateEncryptedChatTyping)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateEncryption":
            var tempObject = new(updateEncryption)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateEncryptedMessagesRead":
            var tempObject = new(updateEncryptedMessagesRead)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateChatParticipantAdd":
            var tempObject = new(updateChatParticipantAdd)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateChatParticipantDelete":
            var tempObject = new(updateChatParticipantDelete)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateDcOptions":
            var tempObject = new(updateDcOptions)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateNotifySettings":
            var tempObject = new(updateNotifySettings)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateServiceNotification":
            var tempObject = new(updateServiceNotification)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updatePrivacy":
            var tempObject = new(updatePrivacy)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateUserPhone":
            var tempObject = new(updateUserPhone)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateReadHistoryInbox":
            var tempObject = new(updateReadHistoryInbox)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateReadHistoryOutbox":
            var tempObject = new(updateReadHistoryOutbox)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateWebPage":
            var tempObject = new(updateWebPage)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateReadMessagesContents":
            var tempObject = new(updateReadMessagesContents)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateChannelTooLong":
            var tempObject = new(updateChannelTooLong)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateChannel":
            var tempObject = new(updateChannel)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateNewChannelMessage":
            var tempObject = new(updateNewChannelMessage)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateReadChannelInbox":
            var tempObject = new(updateReadChannelInbox)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateDeleteChannelMessages":
            var tempObject = new(updateDeleteChannelMessages)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateChannelMessageViews":
            var tempObject = new(updateChannelMessageViews)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateChatParticipantAdmin":
            var tempObject = new(updateChatParticipantAdmin)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateNewStickerSet":
            var tempObject = new(updateNewStickerSet)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateStickerSetsOrder":
            var tempObject = new(updateStickerSetsOrder)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateStickerSets":
            var tempObject = new(updateStickerSets)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateSavedGifs":
            var tempObject = new(updateSavedGifs)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateBotInlineQuery":
            var tempObject = new(updateBotInlineQuery)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateBotInlineSend":
            var tempObject = new(updateBotInlineSend)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateEditChannelMessage":
            var tempObject = new(updateEditChannelMessage)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateBotCallbackQuery":
            var tempObject = new(updateBotCallbackQuery)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateEditMessage":
            var tempObject = new(updateEditMessage)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateInlineBotCallbackQuery":
            var tempObject = new(updateInlineBotCallbackQuery)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateReadChannelOutbox":
            var tempObject = new(updateReadChannelOutbox)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateDraftMessage":
            var tempObject = new(updateDraftMessage)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateReadFeaturedStickers":
            var tempObject = new(updateReadFeaturedStickers)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateRecentStickers":
            var tempObject = new(updateRecentStickers)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateConfig":
            var tempObject = new(updateConfig)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updatePtsChanged":
            var tempObject = new(updatePtsChanged)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateChannelWebPage":
            var tempObject = new(updateChannelWebPage)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateDialogPinned":
            var tempObject = new(updateDialogPinned)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updatePinnedDialogs":
            var tempObject = new(updatePinnedDialogs)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateBotWebhookJSON":
            var tempObject = new(updateBotWebhookJSON)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateBotWebhookJSONQuery":
            var tempObject = new(updateBotWebhookJSONQuery)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateBotShippingQuery":
            var tempObject = new(updateBotShippingQuery)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateBotPrecheckoutQuery":
            var tempObject = new(updateBotPrecheckoutQuery)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updatePhoneCall":
            var tempObject = new(updatePhoneCall)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateLangPackTooLong":
            var tempObject = new(updateLangPackTooLong)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateLangPack":
            var tempObject = new(updateLangPack)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateFavedStickers":
            var tempObject = new(updateFavedStickers)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateChannelReadMessagesContents":
            var tempObject = new(updateChannelReadMessagesContents)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateContactsReset":
            var tempObject = new(updateContactsReset)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateChannelAvailableMessages":
            var tempObject = new(updateChannelAvailableMessages)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateDialogUnreadMark":
            var tempObject = new(updateDialogUnreadMark)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateMessagePoll":
            var tempObject = new(updateMessagePoll)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateChatDefaultBannedRights":
            var tempObject = new(updateChatDefaultBannedRights)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateFolderPeers":
            var tempObject = new(updateFolderPeers)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updatePeerSettings":
            var tempObject = new(updatePeerSettings)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updatePeerLocated":
            var tempObject = new(updatePeerLocated)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateNewScheduledMessage":
            var tempObject = new(updateNewScheduledMessage)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateDeleteScheduledMessages":
            var tempObject = new(updateDeleteScheduledMessages)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateTheme":
            var tempObject = new(updateTheme)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateGeoLiveViewed":
            var tempObject = new(updateGeoLiveViewed)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateLoginToken":
            var tempObject = new(updateLoginToken)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateMessagePollVote":
            var tempObject = new(updateMessagePollVote)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateDialogFilter":
            var tempObject = new(updateDialogFilter)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateDialogFilterOrder":
            var tempObject = new(updateDialogFilterOrder)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateDialogFilters":
            var tempObject = new(updateDialogFilters)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updatePhoneCallSignalingData":
            var tempObject = new(updatePhoneCallSignalingData)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateChannelParticipant":
            var tempObject = new(updateChannelParticipant)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateChannelMessageForwards":
            var tempObject = new(updateChannelMessageForwards)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateReadChannelDiscussionInbox":
            var tempObject = new(updateReadChannelDiscussionInbox)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateReadChannelDiscussionOutbox":
            var tempObject = new(updateReadChannelDiscussionOutbox)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updatePeerBlocked":
            var tempObject = new(updatePeerBlocked)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateChannelUserTyping":
            var tempObject = new(updateChannelUserTyping)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updatePinnedMessages":
            var tempObject = new(updatePinnedMessages)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updatePinnedChannelMessages":
            var tempObject = new(updatePinnedChannelMessages)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[TopPeerCategoryPeersI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "topPeerCategoryPeers":
            var tempObject = new(topPeerCategoryPeers)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[auth_SentCodeI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "auth_sentCode":
            var tempObject = new(auth_sentCode)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[ExportedChatInviteI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "chatInviteEmpty":
            var tempObject = new(chatInviteEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "chatInviteExported":
            var tempObject = new(chatInviteExported)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[account_ThemesI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "account_themesNotModified":
            var tempObject = new(account_themesNotModified)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "account_themes":
            var tempObject = new(account_themes)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[help_CountryI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "help_country":
            var tempObject = new(help_country)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[messages_InactiveChatsI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "messages_inactiveChats":
            var tempObject = new(messages_inactiveChats)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[PhoneCallDiscardReasonI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "phoneCallDiscardReasonMissed":
            var tempObject = new(phoneCallDiscardReasonMissed)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "phoneCallDiscardReasonDisconnect":
            var tempObject = new(phoneCallDiscardReasonDisconnect)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "phoneCallDiscardReasonHangup":
            var tempObject = new(phoneCallDiscardReasonHangup)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "phoneCallDiscardReasonBusy":
            var tempObject = new(phoneCallDiscardReasonBusy)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[stats_BroadcastStatsI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "stats_broadcastStats":
            var tempObject = new(stats_broadcastStats)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[account_TmpPasswordI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "account_tmpPassword":
            var tempObject = new(account_tmpPassword)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[InputPaymentCredentialsI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "inputPaymentCredentialsSaved":
            var tempObject = new(inputPaymentCredentialsSaved)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputPaymentCredentials":
            var tempObject = new(inputPaymentCredentials)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputPaymentCredentialsApplePay":
            var tempObject = new(inputPaymentCredentialsApplePay)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputPaymentCredentialsAndroidPay":
            var tempObject = new(inputPaymentCredentialsAndroidPay)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[ThemeSettingsI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "themeSettings":
            var tempObject = new(themeSettings)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[BotInfoI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "botInfo":
            var tempObject = new(botInfo)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[PollAnswerI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "pollAnswer":
            var tempObject = new(pollAnswer)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[DialogI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "dialog":
            var tempObject = new(dialog)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "dialogFolder":
            var tempObject = new(dialogFolder)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[PageListOrderedItemI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "pageListOrderedItemText":
            var tempObject = new(pageListOrderedItemText)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pageListOrderedItemBlocks":
            var tempObject = new(pageListOrderedItemBlocks)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[PaymentSavedCredentialsI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "paymentSavedCredentialsCard":
            var tempObject = new(paymentSavedCredentialsCard)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[KeyboardButtonRowI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "keyboardButtonRow":
            var tempObject = new(keyboardButtonRow)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[InlineBotSwitchPMI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "inlineBotSwitchPM":
            var tempObject = new(inlineBotSwitchPM)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[messages_HighScoresI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "messages_highScores":
            var tempObject = new(messages_highScores)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[messages_AffectedHistoryI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "messages_affectedHistory":
            var tempObject = new(messages_affectedHistory)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[FileLocationI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "fileLocationToBeDeprecated":
            var tempObject = new(fileLocationToBeDeprecated)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[NearestDcI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "nearestDc":
            var tempObject = new(nearestDc)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[InputSingleMediaI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "inputSingleMedia":
            var tempObject = new(inputSingleMedia)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[UserI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "userEmpty":
            var tempObject = new(userEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "user":
            var tempObject = new(user)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[LangPackLanguageI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "langPackLanguage":
            var tempObject = new(langPackLanguage)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[LangPackStringI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "langPackString":
            var tempObject = new(langPackString)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "langPackStringPluralized":
            var tempObject = new(langPackStringPluralized)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "langPackStringDeleted":
            var tempObject = new(langPackStringDeleted)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[WebPageAttributeI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "webPageAttributeTheme":
            var tempObject = new(webPageAttributeTheme)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[NotifyPeerI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "notifyPeer":
            var tempObject = new(notifyPeer)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "notifyUsers":
            var tempObject = new(notifyUsers)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "notifyChats":
            var tempObject = new(notifyChats)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "notifyBroadcasts":
            var tempObject = new(notifyBroadcasts)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[InputDialogPeerI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "inputDialogPeer":
            var tempObject = new(inputDialogPeer)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputDialogPeerFolder":
            var tempObject = new(inputDialogPeerFolder)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[payments_BankCardDataI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "payments_bankCardData":
            var tempObject = new(payments_bankCardData)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[StatsPercentValueI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "statsPercentValue":
            var tempObject = new(statsPercentValue)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[contacts_TopPeersI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "contacts_topPeersNotModified":
            var tempObject = new(contacts_topPeersNotModified)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "contacts_topPeers":
            var tempObject = new(contacts_topPeers)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "contacts_topPeersDisabled":
            var tempObject = new(contacts_topPeersDisabled)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[contacts_BlockedI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "contacts_blocked":
            var tempObject = new(contacts_blocked)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "contacts_blockedSlice":
            var tempObject = new(contacts_blockedSlice)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[DcOptionI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "dcOption":
            var tempObject = new(dcOption)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[SavedContactI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "savedPhoneContact":
            var tempObject = new(savedPhoneContact)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[PageCaptionI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "pageCaption":
            var tempObject = new(pageCaption)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[upload_WebFileI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "upload_webFile":
            var tempObject = new(upload_webFile)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[account_AutoDownloadSettingsI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "account_autoDownloadSettings":
            var tempObject = new(account_autoDownloadSettings)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[messages_VotesListI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "messages_votesList":
            var tempObject = new(messages_votesList)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[messages_StickersI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "messages_stickersNotModified":
            var tempObject = new(messages_stickersNotModified)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messages_stickers":
            var tempObject = new(messages_stickers)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[ChannelMessagesFilterI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "channelMessagesFilterEmpty":
            var tempObject = new(channelMessagesFilterEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelMessagesFilter":
            var tempObject = new(channelMessagesFilter)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[InputPeerNotifySettingsI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "inputPeerNotifySettings":
            var tempObject = new(inputPeerNotifySettings)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[InvoiceI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "invoice":
            var tempObject = new(invoice)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[PhoneConnectionI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "phoneConnection":
            var tempObject = new(phoneConnection)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "phoneConnectionWebrtc":
            var tempObject = new(phoneConnectionWebrtc)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[InputContactI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "inputPhoneContact":
            var tempObject = new(inputPhoneContact)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[messages_SentEncryptedMessageI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "messages_sentEncryptedMessage":
            var tempObject = new(messages_sentEncryptedMessage)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messages_sentEncryptedFile":
            var tempObject = new(messages_sentEncryptedFile)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[channels_AdminLogResultsI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "channels_adminLogResults":
            var tempObject = new(channels_adminLogResults)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[WallPaperSettingsI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "wallPaperSettings":
            var tempObject = new(wallPaperSettings)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[storage_FileTypeI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "storage_fileUnknown":
            var tempObject = new(storage_fileUnknown)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "storage_filePartial":
            var tempObject = new(storage_filePartial)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "storage_fileJpeg":
            var tempObject = new(storage_fileJpeg)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "storage_fileGif":
            var tempObject = new(storage_fileGif)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "storage_filePng":
            var tempObject = new(storage_filePng)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "storage_filePdf":
            var tempObject = new(storage_filePdf)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "storage_fileMp3":
            var tempObject = new(storage_fileMp3)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "storage_fileMov":
            var tempObject = new(storage_fileMov)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "storage_fileMp4":
            var tempObject = new(storage_fileMp4)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "storage_fileWebp":
            var tempObject = new(storage_fileWebp)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[InputThemeI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "inputTheme":
            var tempObject = new(inputTheme)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputThemeSlug":
            var tempObject = new(inputThemeSlug)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[MessageReplyHeaderI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "messageReplyHeader":
            var tempObject = new(messageReplyHeader)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[messages_AffectedMessagesI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "messages_affectedMessages":
            var tempObject = new(messages_affectedMessages)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[LabeledPriceI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "labeledPrice":
            var tempObject = new(labeledPrice)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[contacts_ResolvedPeerI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "contacts_resolvedPeer":
            var tempObject = new(contacts_resolvedPeer)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[messages_PeerDialogsI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "messages_peerDialogs":
            var tempObject = new(messages_peerDialogs)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[MessageRangeI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "messageRange":
            var tempObject = new(messageRange)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[PostAddressI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "postAddress":
            var tempObject = new(postAddress)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[GeoPointI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "geoPointEmpty":
            var tempObject = new(geoPointEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "geoPoint":
            var tempObject = new(geoPoint)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[upload_CdnFileI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "upload_cdnFileReuploadNeeded":
            var tempObject = new(upload_cdnFileReuploadNeeded)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "upload_cdnFile":
            var tempObject = new(upload_cdnFile)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[help_SupportI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "help_support":
            var tempObject = new(help_support)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[PeerBlockedI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "peerBlocked":
            var tempObject = new(peerBlocked)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[InputFolderPeerI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "inputFolderPeer":
            var tempObject = new(inputFolderPeer)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[CdnPublicKeyI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "cdnPublicKey":
            var tempObject = new(cdnPublicKey)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[MessageMediaI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "messageMediaEmpty":
            var tempObject = new(messageMediaEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageMediaPhoto":
            var tempObject = new(messageMediaPhoto)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageMediaGeo":
            var tempObject = new(messageMediaGeo)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageMediaContact":
            var tempObject = new(messageMediaContact)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageMediaUnsupported":
            var tempObject = new(messageMediaUnsupported)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageMediaDocument":
            var tempObject = new(messageMediaDocument)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageMediaWebPage":
            var tempObject = new(messageMediaWebPage)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageMediaVenue":
            var tempObject = new(messageMediaVenue)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageMediaGame":
            var tempObject = new(messageMediaGame)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageMediaInvoice":
            var tempObject = new(messageMediaInvoice)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageMediaGeoLive":
            var tempObject = new(messageMediaGeoLive)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageMediaPoll":
            var tempObject = new(messageMediaPoll)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageMediaDice":
            var tempObject = new(messageMediaDice)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[ChatI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "chatEmpty":
            var tempObject = new(chatEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "chat":
            var tempObject = new(chat)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "chatForbidden":
            var tempObject = new(chatForbidden)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channel":
            var tempObject = new(channel)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelForbidden":
            var tempObject = new(channelForbidden)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[help_RecentMeUrlsI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "help_recentMeUrls":
            var tempObject = new(help_recentMeUrls)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[UserProfilePhotoI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "userProfilePhotoEmpty":
            var tempObject = new(userProfilePhotoEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "userProfilePhoto":
            var tempObject = new(userProfilePhoto)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[InputGeoPointI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "inputGeoPointEmpty":
            var tempObject = new(inputGeoPointEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputGeoPoint":
            var tempObject = new(inputGeoPoint)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[ContactStatusI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "contactStatus":
            var tempObject = new(contactStatus)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[contacts_FoundI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "contacts_found":
            var tempObject = new(contacts_found)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[GlobalPrivacySettingsI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "globalPrivacySettings":
            var tempObject = new(globalPrivacySettings)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[InputPeerI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "inputPeerEmpty":
            var tempObject = new(inputPeerEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputPeerSelf":
            var tempObject = new(inputPeerSelf)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputPeerChat":
            var tempObject = new(inputPeerChat)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputPeerUser":
            var tempObject = new(inputPeerUser)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputPeerChannel":
            var tempObject = new(inputPeerChannel)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputPeerUserFromMessage":
            var tempObject = new(inputPeerUserFromMessage)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputPeerChannelFromMessage":
            var tempObject = new(inputPeerChannelFromMessage)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[DraftMessageI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "draftMessageEmpty":
            var tempObject = new(draftMessageEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "draftMessage":
            var tempObject = new(draftMessage)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[account_SentEmailCodeI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "account_sentEmailCode":
            var tempObject = new(account_sentEmailCode)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[InputBotInlineMessageI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "inputBotInlineMessageMediaAuto":
            var tempObject = new(inputBotInlineMessageMediaAuto)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputBotInlineMessageText":
            var tempObject = new(inputBotInlineMessageText)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputBotInlineMessageMediaGeo":
            var tempObject = new(inputBotInlineMessageMediaGeo)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputBotInlineMessageMediaVenue":
            var tempObject = new(inputBotInlineMessageMediaVenue)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputBotInlineMessageMediaContact":
            var tempObject = new(inputBotInlineMessageMediaContact)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputBotInlineMessageGame":
            var tempObject = new(inputBotInlineMessageGame)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[ChatFullI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "chatFull":
            var tempObject = new(chatFull)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelFull":
            var tempObject = new(channelFull)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[AccountDaysTTLI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "accountDaysTTL":
            var tempObject = new(accountDaysTTL)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[messages_ChatsI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "messages_chats":
            var tempObject = new(messages_chats)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messages_chatsSlice":
            var tempObject = new(messages_chatsSlice)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[RecentMeUrlI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "recentMeUrlUnknown":
            var tempObject = new(recentMeUrlUnknown)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "recentMeUrlUser":
            var tempObject = new(recentMeUrlUser)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "recentMeUrlChat":
            var tempObject = new(recentMeUrlChat)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "recentMeUrlChatInvite":
            var tempObject = new(recentMeUrlChatInvite)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "recentMeUrlStickerSet":
            var tempObject = new(recentMeUrlStickerSet)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[auth_LoginTokenI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "auth_loginToken":
            var tempObject = new(auth_loginToken)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "auth_loginTokenMigrateTo":
            var tempObject = new(auth_loginTokenMigrateTo)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "auth_loginTokenSuccess":
            var tempObject = new(auth_loginTokenSuccess)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[messages_MessageViewsI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "messages_messageViews":
            var tempObject = new(messages_messageViews)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[InputFileLocationI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "inputFileLocation":
            var tempObject = new(inputFileLocation)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputEncryptedFileLocation":
            var tempObject = new(inputEncryptedFileLocation)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputDocumentFileLocation":
            var tempObject = new(inputDocumentFileLocation)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputSecureFileLocation":
            var tempObject = new(inputSecureFileLocation)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputTakeoutFileLocation":
            var tempObject = new(inputTakeoutFileLocation)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputPhotoFileLocation":
            var tempObject = new(inputPhotoFileLocation)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputPhotoLegacyFileLocation":
            var tempObject = new(inputPhotoLegacyFileLocation)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputPeerPhotoFileLocation":
            var tempObject = new(inputPeerPhotoFileLocation)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputStickerSetThumb":
            var tempObject = new(inputStickerSetThumb)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[help_AppUpdateI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "help_appUpdate":
            var tempObject = new(help_appUpdate)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "help_noAppUpdate":
            var tempObject = new(help_noAppUpdate)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[PopularContactI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "popularContact":
            var tempObject = new(popularContact)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[EmojiURLI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "emojiURL":
            var tempObject = new(emojiURL)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[MessagesFilterI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "inputMessagesFilterEmpty":
            var tempObject = new(inputMessagesFilterEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMessagesFilterPhotos":
            var tempObject = new(inputMessagesFilterPhotos)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMessagesFilterVideo":
            var tempObject = new(inputMessagesFilterVideo)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMessagesFilterPhotoVideo":
            var tempObject = new(inputMessagesFilterPhotoVideo)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMessagesFilterDocument":
            var tempObject = new(inputMessagesFilterDocument)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMessagesFilterUrl":
            var tempObject = new(inputMessagesFilterUrl)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMessagesFilterGif":
            var tempObject = new(inputMessagesFilterGif)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMessagesFilterVoice":
            var tempObject = new(inputMessagesFilterVoice)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMessagesFilterMusic":
            var tempObject = new(inputMessagesFilterMusic)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMessagesFilterChatPhotos":
            var tempObject = new(inputMessagesFilterChatPhotos)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMessagesFilterPhoneCalls":
            var tempObject = new(inputMessagesFilterPhoneCalls)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMessagesFilterRoundVoice":
            var tempObject = new(inputMessagesFilterRoundVoice)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMessagesFilterRoundVideo":
            var tempObject = new(inputMessagesFilterRoundVideo)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMessagesFilterMyMentions":
            var tempObject = new(inputMessagesFilterMyMentions)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMessagesFilterGeo":
            var tempObject = new(inputMessagesFilterGeo)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMessagesFilterContacts":
            var tempObject = new(inputMessagesFilterContacts)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMessagesFilterPinned":
            var tempObject = new(inputMessagesFilterPinned)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[CodeSettingsI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "codeSettings":
            var tempObject = new(codeSettings)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[messages_MessageEditDataI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "messages_messageEditData":
            var tempObject = new(messages_messageEditData)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[help_CountriesListI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "help_countriesListNotModified":
            var tempObject = new(help_countriesListNotModified)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "help_countriesList":
            var tempObject = new(help_countriesList)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[MessageRepliesI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "messageReplies":
            var tempObject = new(messageReplies)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[account_AuthorizationFormI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "account_authorizationForm":
            var tempObject = new(account_authorizationForm)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[messages_DhConfigI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "messages_dhConfigNotModified":
            var tempObject = new(messages_dhConfigNotModified)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messages_dhConfig":
            var tempObject = new(messages_dhConfig)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[account_TakeoutI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "account_takeout":
            var tempObject = new(account_takeout)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[UpdatesI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "updatesTooLong":
            var tempObject = new(updatesTooLong)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateShortMessage":
            var tempObject = new(updateShortMessage)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateShortChatMessage":
            var tempObject = new(updateShortChatMessage)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateShort":
            var tempObject = new(updateShort)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updatesCombined":
            var tempObject = new(updatesCombined)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updates":
            var tempObject = new(updates)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateShortSentMessage":
            var tempObject = new(updateShortSentMessage)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[MessageFwdHeaderI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "messageFwdHeader":
            var tempObject = new(messageFwdHeader)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[AuthorizationI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "authorization":
            var tempObject = new(authorization)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[help_TermsOfServiceUpdateI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "help_termsOfServiceUpdateEmpty":
            var tempObject = new(help_termsOfServiceUpdateEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "help_termsOfServiceUpdate":
            var tempObject = new(help_termsOfServiceUpdate)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[PageTableCellI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "pageTableCell":
            var tempObject = new(pageTableCell)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[account_ContentSettingsI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "account_contentSettings":
            var tempObject = new(account_contentSettings)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[account_WebAuthorizationsI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "account_webAuthorizations":
            var tempObject = new(account_webAuthorizations)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[SecureValueHashI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "secureValueHash":
            var tempObject = new(secureValueHash)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[PaymentRequestedInfoI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "paymentRequestedInfo":
            var tempObject = new(paymentRequestedInfo)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[PhoneCallI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "phoneCallEmpty":
            var tempObject = new(phoneCallEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "phoneCallWaiting":
            var tempObject = new(phoneCallWaiting)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "phoneCallRequested":
            var tempObject = new(phoneCallRequested)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "phoneCallAccepted":
            var tempObject = new(phoneCallAccepted)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "phoneCall":
            var tempObject = new(phoneCall)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "phoneCallDiscarded":
            var tempObject = new(phoneCallDiscarded)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[InputPrivacyKeyI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "inputPrivacyKeyStatusTimestamp":
            var tempObject = new(inputPrivacyKeyStatusTimestamp)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputPrivacyKeyChatInvite":
            var tempObject = new(inputPrivacyKeyChatInvite)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputPrivacyKeyPhoneCall":
            var tempObject = new(inputPrivacyKeyPhoneCall)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputPrivacyKeyPhoneP2P":
            var tempObject = new(inputPrivacyKeyPhoneP2P)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputPrivacyKeyForwards":
            var tempObject = new(inputPrivacyKeyForwards)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputPrivacyKeyProfilePhoto":
            var tempObject = new(inputPrivacyKeyProfilePhoto)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputPrivacyKeyPhoneNumber":
            var tempObject = new(inputPrivacyKeyPhoneNumber)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputPrivacyKeyAddedByPhone":
            var tempObject = new(inputPrivacyKeyAddedByPhone)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[MaskCoordsI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "maskCoords":
            var tempObject = new(maskCoords)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[PrivacyRuleI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "privacyValueAllowContacts":
            var tempObject = new(privacyValueAllowContacts)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "privacyValueAllowAll":
            var tempObject = new(privacyValueAllowAll)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "privacyValueAllowUsers":
            var tempObject = new(privacyValueAllowUsers)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "privacyValueDisallowContacts":
            var tempObject = new(privacyValueDisallowContacts)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "privacyValueDisallowAll":
            var tempObject = new(privacyValueDisallowAll)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "privacyValueDisallowUsers":
            var tempObject = new(privacyValueDisallowUsers)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "privacyValueAllowChatParticipants":
            var tempObject = new(privacyValueAllowChatParticipants)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "privacyValueDisallowChatParticipants":
            var tempObject = new(privacyValueDisallowChatParticipants)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[PageBlockI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "pageBlockUnsupported":
            var tempObject = new(pageBlockUnsupported)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pageBlockTitle":
            var tempObject = new(pageBlockTitle)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pageBlockSubtitle":
            var tempObject = new(pageBlockSubtitle)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pageBlockAuthorDate":
            var tempObject = new(pageBlockAuthorDate)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pageBlockHeader":
            var tempObject = new(pageBlockHeader)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pageBlockSubheader":
            var tempObject = new(pageBlockSubheader)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pageBlockParagraph":
            var tempObject = new(pageBlockParagraph)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pageBlockPreformatted":
            var tempObject = new(pageBlockPreformatted)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pageBlockFooter":
            var tempObject = new(pageBlockFooter)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pageBlockDivider":
            var tempObject = new(pageBlockDivider)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pageBlockAnchor":
            var tempObject = new(pageBlockAnchor)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pageBlockList":
            var tempObject = new(pageBlockList)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pageBlockBlockquote":
            var tempObject = new(pageBlockBlockquote)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pageBlockPullquote":
            var tempObject = new(pageBlockPullquote)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pageBlockPhoto":
            var tempObject = new(pageBlockPhoto)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pageBlockVideo":
            var tempObject = new(pageBlockVideo)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pageBlockCover":
            var tempObject = new(pageBlockCover)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pageBlockEmbed":
            var tempObject = new(pageBlockEmbed)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pageBlockEmbedPost":
            var tempObject = new(pageBlockEmbedPost)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pageBlockCollage":
            var tempObject = new(pageBlockCollage)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pageBlockSlideshow":
            var tempObject = new(pageBlockSlideshow)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pageBlockChannel":
            var tempObject = new(pageBlockChannel)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pageBlockAudio":
            var tempObject = new(pageBlockAudio)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pageBlockKicker":
            var tempObject = new(pageBlockKicker)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pageBlockTable":
            var tempObject = new(pageBlockTable)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pageBlockOrderedList":
            var tempObject = new(pageBlockOrderedList)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pageBlockDetails":
            var tempObject = new(pageBlockDetails)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pageBlockRelatedArticles":
            var tempObject = new(pageBlockRelatedArticles)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pageBlockMap":
            var tempObject = new(pageBlockMap)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[ChatPhotoI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "chatPhotoEmpty":
            var tempObject = new(chatPhotoEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "chatPhoto":
            var tempObject = new(chatPhoto)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[contacts_ContactsI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "contacts_contactsNotModified":
            var tempObject = new(contacts_contactsNotModified)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "contacts_contacts":
            var tempObject = new(contacts_contacts)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[EncryptedChatI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "encryptedChatEmpty":
            var tempObject = new(encryptedChatEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "encryptedChatWaiting":
            var tempObject = new(encryptedChatWaiting)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "encryptedChatRequested":
            var tempObject = new(encryptedChatRequested)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "encryptedChat":
            var tempObject = new(encryptedChat)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "encryptedChatDiscarded":
            var tempObject = new(encryptedChatDiscarded)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[messages_ChatFullI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "messages_chatFull":
            var tempObject = new(messages_chatFull)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[ReplyMarkupI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "replyKeyboardHide":
            var tempObject = new(replyKeyboardHide)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "replyKeyboardForceReply":
            var tempObject = new(replyKeyboardForceReply)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "replyKeyboardMarkup":
            var tempObject = new(replyKeyboardMarkup)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "replyInlineMarkup":
            var tempObject = new(replyInlineMarkup)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[StatsURLI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "statsURL":
            var tempObject = new(statsURL)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[StatsGraphI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "statsGraphAsync":
            var tempObject = new(statsGraphAsync)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "statsGraphError":
            var tempObject = new(statsGraphError)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "statsGraph":
            var tempObject = new(statsGraph)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[MessageI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "messageEmpty":
            var tempObject = new(messageEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "message":
            var tempObject = new(message)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageService":
            var tempObject = new(messageService)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[DocumentI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "documentEmpty":
            var tempObject = new(documentEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "document":
            var tempObject = new(document)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[StatsGroupTopInviterI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "statsGroupTopInviter":
            var tempObject = new(statsGroupTopInviter)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[InputAppEventI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "inputAppEvent":
            var tempObject = new(inputAppEvent)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[SecureValueTypeI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "secureValueTypePersonalDetails":
            var tempObject = new(secureValueTypePersonalDetails)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "secureValueTypePassport":
            var tempObject = new(secureValueTypePassport)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "secureValueTypeDriverLicense":
            var tempObject = new(secureValueTypeDriverLicense)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "secureValueTypeIdentityCard":
            var tempObject = new(secureValueTypeIdentityCard)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "secureValueTypeInternalPassport":
            var tempObject = new(secureValueTypeInternalPassport)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "secureValueTypeAddress":
            var tempObject = new(secureValueTypeAddress)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "secureValueTypeUtilityBill":
            var tempObject = new(secureValueTypeUtilityBill)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "secureValueTypeBankStatement":
            var tempObject = new(secureValueTypeBankStatement)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "secureValueTypeRentalAgreement":
            var tempObject = new(secureValueTypeRentalAgreement)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "secureValueTypePassportRegistration":
            var tempObject = new(secureValueTypePassportRegistration)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "secureValueTypeTemporaryRegistration":
            var tempObject = new(secureValueTypeTemporaryRegistration)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "secureValueTypePhone":
            var tempObject = new(secureValueTypePhone)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "secureValueTypeEmail":
            var tempObject = new(secureValueTypeEmail)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[BotInlineResultI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "botInlineResult":
            var tempObject = new(botInlineResult)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "botInlineMediaResult":
            var tempObject = new(botInlineMediaResult)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[SendMessageActionI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "sendMessageTypingAction":
            var tempObject = new(sendMessageTypingAction)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "sendMessageCancelAction":
            var tempObject = new(sendMessageCancelAction)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "sendMessageRecordVideoAction":
            var tempObject = new(sendMessageRecordVideoAction)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "sendMessageUploadVideoAction":
            var tempObject = new(sendMessageUploadVideoAction)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "sendMessageRecordAudioAction":
            var tempObject = new(sendMessageRecordAudioAction)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "sendMessageUploadAudioAction":
            var tempObject = new(sendMessageUploadAudioAction)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "sendMessageUploadPhotoAction":
            var tempObject = new(sendMessageUploadPhotoAction)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "sendMessageUploadDocumentAction":
            var tempObject = new(sendMessageUploadDocumentAction)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "sendMessageGeoLocationAction":
            var tempObject = new(sendMessageGeoLocationAction)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "sendMessageChooseContactAction":
            var tempObject = new(sendMessageChooseContactAction)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "sendMessageGamePlayAction":
            var tempObject = new(sendMessageGamePlayAction)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "sendMessageRecordRoundAction":
            var tempObject = new(sendMessageRecordRoundAction)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "sendMessageUploadRoundAction":
            var tempObject = new(sendMessageUploadRoundAction)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[help_DeepLinkInfoI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "help_deepLinkInfoEmpty":
            var tempObject = new(help_deepLinkInfoEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "help_deepLinkInfo":
            var tempObject = new(help_deepLinkInfo)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[SecureFileI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "secureFileEmpty":
            var tempObject = new(secureFileEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "secureFile":
            var tempObject = new(secureFile)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[InputStickerSetItemI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "inputStickerSetItem":
            var tempObject = new(inputStickerSetItem)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[EmojiKeywordI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "emojiKeyword":
            var tempObject = new(emojiKeyword)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "emojiKeywordDeleted":
            var tempObject = new(emojiKeywordDeleted)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[PeerSettingsI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "peerSettings":
            var tempObject = new(peerSettings)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[ChatBannedRightsI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "chatBannedRights":
            var tempObject = new(chatBannedRights)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[BotInlineMessageI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "botInlineMessageMediaAuto":
            var tempObject = new(botInlineMessageMediaAuto)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "botInlineMessageText":
            var tempObject = new(botInlineMessageText)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "botInlineMessageMediaGeo":
            var tempObject = new(botInlineMessageMediaGeo)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "botInlineMessageMediaVenue":
            var tempObject = new(botInlineMessageMediaVenue)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "botInlineMessageMediaContact":
            var tempObject = new(botInlineMessageMediaContact)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[PeerLocatedI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "peerLocated":
            var tempObject = new(peerLocated)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "peerSelfLocated":
            var tempObject = new(peerSelfLocated)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: var seq[ChannelLocationI]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "channelLocationEmpty":
            var tempObject = new(channelLocationEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelLocation":
            var tempObject = new(channelLocation)
            self.TlDecode(tempObject)
            obj.add(tempObject)
proc TLDecodeApi*(self: var ScalingSeq[uint8], obj: var TLObject) =  
        var id: int32
        self.TLDecode(addr id)
        case FromID.toTable[id]
        of "help_promoDataEmpty":
            var tempObject = new(help_promoDataEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "help_promoData":
            var tempObject = new(help_promoData)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "stats_megagroupStats":
            var tempObject = new(stats_megagroupStats)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "privacyKeyStatusTimestamp":
            var tempObject = new(privacyKeyStatusTimestamp)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "privacyKeyChatInvite":
            var tempObject = new(privacyKeyChatInvite)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "privacyKeyPhoneCall":
            var tempObject = new(privacyKeyPhoneCall)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "privacyKeyPhoneP2P":
            var tempObject = new(privacyKeyPhoneP2P)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "privacyKeyForwards":
            var tempObject = new(privacyKeyForwards)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "privacyKeyProfilePhoto":
            var tempObject = new(privacyKeyProfilePhoto)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "privacyKeyPhoneNumber":
            var tempObject = new(privacyKeyPhoneNumber)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "privacyKeyAddedByPhone":
            var tempObject = new(privacyKeyAddedByPhone)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "help_countryCode":
            var tempObject = new(help_countryCode)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "webAuthorization":
            var tempObject = new(webAuthorization)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "poll":
            var tempObject = new(poll)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "dialogPeer":
            var tempObject = new(dialogPeer)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "dialogPeerFolder":
            var tempObject = new(dialogPeerFolder)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "topPeerCategoryBotsPM":
            var tempObject = new(topPeerCategoryBotsPM)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "topPeerCategoryBotsInline":
            var tempObject = new(topPeerCategoryBotsInline)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "topPeerCategoryCorrespondents":
            var tempObject = new(topPeerCategoryCorrespondents)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "topPeerCategoryGroups":
            var tempObject = new(topPeerCategoryGroups)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "topPeerCategoryChannels":
            var tempObject = new(topPeerCategoryChannels)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "topPeerCategoryPhoneCalls":
            var tempObject = new(topPeerCategoryPhoneCalls)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "topPeerCategoryForwardUsers":
            var tempObject = new(topPeerCategoryForwardUsers)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "topPeerCategoryForwardChats":
            var tempObject = new(topPeerCategoryForwardChats)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "help_supportName":
            var tempObject = new(help_supportName)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "photoSizeEmpty":
            var tempObject = new(photoSizeEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "photoSize":
            var tempObject = new(photoSize)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "photoCachedSize":
            var tempObject = new(photoCachedSize)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "photoStrippedSize":
            var tempObject = new(photoStrippedSize)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "photoSizeProgressive":
            var tempObject = new(photoSizeProgressive)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "jsonNull":
            var tempObject = new(jsonNull)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "jsonBool":
            var tempObject = new(jsonBool)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "jsonNumber":
            var tempObject = new(jsonNumber)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "jsonString":
            var tempObject = new(jsonString)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "jsonArray":
            var tempObject = new(jsonArray)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "jsonObject":
            var tempObject = new(jsonObject)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messages_archivedStickers":
            var tempObject = new(messages_archivedStickers)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "baseThemeClassic":
            var tempObject = new(baseThemeClassic)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "baseThemeDay":
            var tempObject = new(baseThemeDay)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "baseThemeNight":
            var tempObject = new(baseThemeNight)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "baseThemeTinted":
            var tempObject = new(baseThemeTinted)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "baseThemeArctic":
            var tempObject = new(baseThemeArctic)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "dialogFilter":
            var tempObject = new(dialogFilter)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageEntityUnknown":
            var tempObject = new(messageEntityUnknown)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageEntityMention":
            var tempObject = new(messageEntityMention)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageEntityHashtag":
            var tempObject = new(messageEntityHashtag)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageEntityBotCommand":
            var tempObject = new(messageEntityBotCommand)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageEntityUrl":
            var tempObject = new(messageEntityUrl)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageEntityEmail":
            var tempObject = new(messageEntityEmail)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageEntityBold":
            var tempObject = new(messageEntityBold)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageEntityItalic":
            var tempObject = new(messageEntityItalic)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageEntityCode":
            var tempObject = new(messageEntityCode)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageEntityPre":
            var tempObject = new(messageEntityPre)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageEntityTextUrl":
            var tempObject = new(messageEntityTextUrl)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageEntityMentionName":
            var tempObject = new(messageEntityMentionName)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMessageEntityMentionName":
            var tempObject = new(inputMessageEntityMentionName)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageEntityPhone":
            var tempObject = new(messageEntityPhone)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageEntityCashtag":
            var tempObject = new(messageEntityCashtag)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageEntityUnderline":
            var tempObject = new(messageEntityUnderline)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageEntityStrike":
            var tempObject = new(messageEntityStrike)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageEntityBlockquote":
            var tempObject = new(messageEntityBlockquote)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageEntityBankCard":
            var tempObject = new(messageEntityBankCard)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "theme":
            var tempObject = new(theme)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "dialogFilterSuggested":
            var tempObject = new(dialogFilterSuggested)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "stats_messageStats":
            var tempObject = new(stats_messageStats)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "payments_paymentResult":
            var tempObject = new(payments_paymentResult)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "payments_paymentVerificationNeeded":
            var tempObject = new(payments_paymentVerificationNeeded)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "stickerPack":
            var tempObject = new(stickerPack)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "account_passwordSettings":
            var tempObject = new(account_passwordSettings)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "cdnConfig":
            var tempObject = new(cdnConfig)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputCheckPasswordEmpty":
            var tempObject = new(inputCheckPasswordEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputCheckPasswordSRP":
            var tempObject = new(inputCheckPasswordSRP)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pollAnswerVoters":
            var tempObject = new(pollAnswerVoters)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "secureData":
            var tempObject = new(secureData)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pageTableRow":
            var tempObject = new(pageTableRow)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "phone_phoneCall":
            var tempObject = new(phone_phoneCall)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "chatOnlines":
            var tempObject = new(chatOnlines)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "securePlainPhone":
            var tempObject = new(securePlainPhone)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "securePlainEmail":
            var tempObject = new(securePlainEmail)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputChatPhotoEmpty":
            var tempObject = new(inputChatPhotoEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputChatUploadedPhoto":
            var tempObject = new(inputChatUploadedPhoto)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputChatPhoto":
            var tempObject = new(inputChatPhoto)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "secureSecretSettings":
            var tempObject = new(secureSecretSettings)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "emojiKeywordsDifference":
            var tempObject = new(emojiKeywordsDifference)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "photos_photos":
            var tempObject = new(photos_photos)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "photos_photosSlice":
            var tempObject = new(photos_photosSlice)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelParticipantsRecent":
            var tempObject = new(channelParticipantsRecent)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelParticipantsAdmins":
            var tempObject = new(channelParticipantsAdmins)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelParticipantsKicked":
            var tempObject = new(channelParticipantsKicked)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelParticipantsBots":
            var tempObject = new(channelParticipantsBots)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelParticipantsBanned":
            var tempObject = new(channelParticipantsBanned)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelParticipantsSearch":
            var tempObject = new(channelParticipantsSearch)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelParticipantsContacts":
            var tempObject = new(channelParticipantsContacts)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelParticipantsMentions":
            var tempObject = new(channelParticipantsMentions)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "statsGroupTopAdmin":
            var tempObject = new(statsGroupTopAdmin)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputBotInlineMessageID":
            var tempObject = new(inputBotInlineMessageID)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputPhotoEmpty":
            var tempObject = new(inputPhotoEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputPhoto":
            var tempObject = new(inputPhoto)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channels_channelParticipant":
            var tempObject = new(channels_channelParticipant)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "photos_photo":
            var tempObject = new(photos_photo)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "encryptedMessage":
            var tempObject = new(encryptedMessage)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "encryptedMessageService":
            var tempObject = new(encryptedMessageService)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "documentAttributeImageSize":
            var tempObject = new(documentAttributeImageSize)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "documentAttributeAnimated":
            var tempObject = new(documentAttributeAnimated)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "documentAttributeSticker":
            var tempObject = new(documentAttributeSticker)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "documentAttributeVideo":
            var tempObject = new(documentAttributeVideo)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "documentAttributeAudio":
            var tempObject = new(documentAttributeAudio)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "documentAttributeFilename":
            var tempObject = new(documentAttributeFilename)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "documentAttributeHasStickers":
            var tempObject = new(documentAttributeHasStickers)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputEncryptedChat":
            var tempObject = new(inputEncryptedChat)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messages_featuredStickersNotModified":
            var tempObject = new(messages_featuredStickersNotModified)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messages_featuredStickers":
            var tempObject = new(messages_featuredStickers)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "payments_savedInfo":
            var tempObject = new(payments_savedInfo)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "phoneCallProtocol":
            var tempObject = new(phoneCallProtocol)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelAdminLogEvent":
            var tempObject = new(channelAdminLogEvent)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "keyboardButton":
            var tempObject = new(keyboardButton)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "keyboardButtonUrl":
            var tempObject = new(keyboardButtonUrl)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "keyboardButtonCallback":
            var tempObject = new(keyboardButtonCallback)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "keyboardButtonRequestPhone":
            var tempObject = new(keyboardButtonRequestPhone)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "keyboardButtonRequestGeoLocation":
            var tempObject = new(keyboardButtonRequestGeoLocation)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "keyboardButtonSwitchInline":
            var tempObject = new(keyboardButtonSwitchInline)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "keyboardButtonGame":
            var tempObject = new(keyboardButtonGame)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "keyboardButtonBuy":
            var tempObject = new(keyboardButtonBuy)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "keyboardButtonUrlAuth":
            var tempObject = new(keyboardButtonUrlAuth)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputKeyboardButtonUrlAuth":
            var tempObject = new(inputKeyboardButtonUrlAuth)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "keyboardButtonRequestPoll":
            var tempObject = new(keyboardButtonRequestPoll)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "textEmpty":
            var tempObject = new(textEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "textPlain":
            var tempObject = new(textPlain)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "textBold":
            var tempObject = new(textBold)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "textItalic":
            var tempObject = new(textItalic)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "textUnderline":
            var tempObject = new(textUnderline)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "textStrike":
            var tempObject = new(textStrike)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "textFixed":
            var tempObject = new(textFixed)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "textUrl":
            var tempObject = new(textUrl)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "textEmail":
            var tempObject = new(textEmail)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "textConcat":
            var tempObject = new(textConcat)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "textSubscript":
            var tempObject = new(textSubscript)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "textSuperscript":
            var tempObject = new(textSuperscript)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "textMarked":
            var tempObject = new(textMarked)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "textPhone":
            var tempObject = new(textPhone)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "textImage":
            var tempObject = new(textImage)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "textAnchor":
            var tempObject = new(textAnchor)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMessageID":
            var tempObject = new(inputMessageID)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMessageReplyTo":
            var tempObject = new(inputMessageReplyTo)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMessagePinned":
            var tempObject = new(inputMessagePinned)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputWebFileLocation":
            var tempObject = new(inputWebFileLocation)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputWebFileGeoPointLocation":
            var tempObject = new(inputWebFileGeoPointLocation)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messages_allStickersNotModified":
            var tempObject = new(messages_allStickersNotModified)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messages_allStickers":
            var tempObject = new(messages_allStickers)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "fileHash":
            var tempObject = new(fileHash)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "chatInviteAlready":
            var tempObject = new(chatInviteAlready)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "chatInvite":
            var tempObject = new(chatInvite)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "chatInvitePeek":
            var tempObject = new(chatInvitePeek)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messages_botResults":
            var tempObject = new(messages_botResults)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputWebDocument":
            var tempObject = new(inputWebDocument)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pageListItemText":
            var tempObject = new(pageListItemText)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pageListItemBlocks":
            var tempObject = new(pageListItemBlocks)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pageRelatedArticle":
            var tempObject = new(pageRelatedArticle)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "help_inviteText":
            var tempObject = new(help_inviteText)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messages_savedGifsNotModified":
            var tempObject = new(messages_savedGifsNotModified)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messages_savedGifs":
            var tempObject = new(messages_savedGifs)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "userStatusEmpty":
            var tempObject = new(userStatusEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "userStatusOnline":
            var tempObject = new(userStatusOnline)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "userStatusOffline":
            var tempObject = new(userStatusOffline)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "userStatusRecently":
            var tempObject = new(userStatusRecently)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "userStatusLastWeek":
            var tempObject = new(userStatusLastWeek)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "userStatusLastMonth":
            var tempObject = new(userStatusLastMonth)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "contact":
            var tempObject = new(contact)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputSecureFileUploaded":
            var tempObject = new(inputSecureFileUploaded)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputSecureFile":
            var tempObject = new(inputSecureFile)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "auth_passwordRecovery":
            var tempObject = new(auth_passwordRecovery)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "account_wallPapersNotModified":
            var tempObject = new(account_wallPapersNotModified)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "account_wallPapers":
            var tempObject = new(account_wallPapers)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "statsDateRangeDays":
            var tempObject = new(statsDateRangeDays)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messages_messages":
            var tempObject = new(messages_messages)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messages_messagesSlice":
            var tempObject = new(messages_messagesSlice)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messages_channelMessages":
            var tempObject = new(messages_channelMessages)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messages_messagesNotModified":
            var tempObject = new(messages_messagesNotModified)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "videoSize":
            var tempObject = new(videoSize)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messages_botCallbackAnswer":
            var tempObject = new(messages_botCallbackAnswer)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "auth_codeTypeSms":
            var tempObject = new(auth_codeTypeSms)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "auth_codeTypeCall":
            var tempObject = new(auth_codeTypeCall)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "auth_codeTypeFlashCall":
            var tempObject = new(auth_codeTypeFlashCall)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputSecureValue":
            var tempObject = new(inputSecureValue)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "config":
            var tempObject = new(config)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputWallPaper":
            var tempObject = new(inputWallPaper)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputWallPaperSlug":
            var tempObject = new(inputWallPaperSlug)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputWallPaperNoFile":
            var tempObject = new(inputWallPaperNoFile)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "upload_file":
            var tempObject = new(upload_file)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "upload_fileCdnRedirect":
            var tempObject = new(upload_fileCdnRedirect)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "securePasswordKdfAlgoUnknown":
            var tempObject = new(securePasswordKdfAlgoUnknown)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "securePasswordKdfAlgoPBKDF2HMACSHA512iter100000":
            var tempObject = new(securePasswordKdfAlgoPBKDF2HMACSHA512iter100000)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "securePasswordKdfAlgoSHA512":
            var tempObject = new(securePasswordKdfAlgoSHA512)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageUserVote":
            var tempObject = new(messageUserVote)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageUserVoteInputOption":
            var tempObject = new(messageUserVoteInputOption)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageUserVoteMultiple":
            var tempObject = new(messageUserVoteMultiple)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messages_favedStickersNotModified":
            var tempObject = new(messages_favedStickersNotModified)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messages_favedStickers":
            var tempObject = new(messages_favedStickers)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "secureRequiredType":
            var tempObject = new(secureRequiredType)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "secureRequiredTypeOneOf":
            var tempObject = new(secureRequiredTypeOneOf)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "statsGroupTopPoster":
            var tempObject = new(statsGroupTopPoster)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "botCommand":
            var tempObject = new(botCommand)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messages_foundStickerSetsNotModified":
            var tempObject = new(messages_foundStickerSetsNotModified)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messages_foundStickerSets":
            var tempObject = new(messages_foundStickerSets)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "secureCredentialsEncrypted":
            var tempObject = new(secureCredentialsEncrypted)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channels_channelParticipants":
            var tempObject = new(channels_channelParticipants)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channels_channelParticipantsNotModified":
            var tempObject = new(channels_channelParticipantsNotModified)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "photoEmpty":
            var tempObject = new(photoEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "photo":
            var tempObject = new(photo)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "chatParticipant":
            var tempObject = new(chatParticipant)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "chatParticipantCreator":
            var tempObject = new(chatParticipantCreator)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "chatParticipantAdmin":
            var tempObject = new(chatParticipantAdmin)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "jsonObjectValue":
            var tempObject = new(jsonObjectValue)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messages_stickerSet":
            var tempObject = new(messages_stickerSet)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "secureValueErrorData":
            var tempObject = new(secureValueErrorData)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "secureValueErrorFrontSide":
            var tempObject = new(secureValueErrorFrontSide)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "secureValueErrorReverseSide":
            var tempObject = new(secureValueErrorReverseSide)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "secureValueErrorSelfie":
            var tempObject = new(secureValueErrorSelfie)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "secureValueErrorFile":
            var tempObject = new(secureValueErrorFile)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "secureValueErrorFiles":
            var tempObject = new(secureValueErrorFiles)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "secureValueError":
            var tempObject = new(secureValueError)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "secureValueErrorTranslationFile":
            var tempObject = new(secureValueErrorTranslationFile)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "secureValueErrorTranslationFiles":
            var tempObject = new(secureValueErrorTranslationFiles)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "help_userInfoEmpty":
            var tempObject = new(help_userInfoEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "help_userInfo":
            var tempObject = new(help_userInfo)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "bankCardOpenUrl":
            var tempObject = new(bankCardOpenUrl)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "help_passportConfigNotModified":
            var tempObject = new(help_passportConfigNotModified)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "help_passportConfig":
            var tempObject = new(help_passportConfig)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "chatAdminRights":
            var tempObject = new(chatAdminRights)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "auth_authorization":
            var tempObject = new(auth_authorization)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "auth_authorizationSignUpRequired":
            var tempObject = new(auth_authorizationSignUpRequired)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messages_stickerSetInstallResultSuccess":
            var tempObject = new(messages_stickerSetInstallResultSuccess)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messages_stickerSetInstallResultArchive":
            var tempObject = new(messages_stickerSetInstallResultArchive)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageViews":
            var tempObject = new(messageViews)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputFile":
            var tempObject = new(inputFile)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputFileBig":
            var tempObject = new(inputFileBig)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updates_state":
            var tempObject = new(updates_state)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "encryptedFileEmpty":
            var tempObject = new(encryptedFileEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "encryptedFile":
            var tempObject = new(encryptedFile)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updates_channelDifferenceEmpty":
            var tempObject = new(updates_channelDifferenceEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updates_channelDifferenceTooLong":
            var tempObject = new(updates_channelDifferenceTooLong)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updates_channelDifference":
            var tempObject = new(updates_channelDifference)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "folderPeer":
            var tempObject = new(folderPeer)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "account_password":
            var tempObject = new(account_password)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "game":
            var tempObject = new(game)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "chatParticipantsForbidden":
            var tempObject = new(chatParticipantsForbidden)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "chatParticipants":
            var tempObject = new(chatParticipants)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "auth_exportedAuthorization":
            var tempObject = new(auth_exportedAuthorization)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputPhoneCall":
            var tempObject = new(inputPhoneCall)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "webPageEmpty":
            var tempObject = new(webPageEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "webPagePending":
            var tempObject = new(webPagePending)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "webPage":
            var tempObject = new(webPage)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "webPageNotModified":
            var tempObject = new(webPageNotModified)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messages_recentStickersNotModified":
            var tempObject = new(messages_recentStickersNotModified)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messages_recentStickers":
            var tempObject = new(messages_recentStickers)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "folder":
            var tempObject = new(folder)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputUserEmpty":
            var tempObject = new(inputUserEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputUserSelf":
            var tempObject = new(inputUserSelf)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputUser":
            var tempObject = new(inputUser)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputUserFromMessage":
            var tempObject = new(inputUserFromMessage)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "peerUser":
            var tempObject = new(peerUser)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "peerChat":
            var tempObject = new(peerChat)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "peerChannel":
            var tempObject = new(peerChannel)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageActionEmpty":
            var tempObject = new(messageActionEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageActionChatCreate":
            var tempObject = new(messageActionChatCreate)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageActionChatEditTitle":
            var tempObject = new(messageActionChatEditTitle)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageActionChatEditPhoto":
            var tempObject = new(messageActionChatEditPhoto)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageActionChatDeletePhoto":
            var tempObject = new(messageActionChatDeletePhoto)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageActionChatAddUser":
            var tempObject = new(messageActionChatAddUser)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageActionChatDeleteUser":
            var tempObject = new(messageActionChatDeleteUser)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageActionChatJoinedByLink":
            var tempObject = new(messageActionChatJoinedByLink)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageActionChannelCreate":
            var tempObject = new(messageActionChannelCreate)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageActionChatMigrateTo":
            var tempObject = new(messageActionChatMigrateTo)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageActionChannelMigrateFrom":
            var tempObject = new(messageActionChannelMigrateFrom)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageActionPinMessage":
            var tempObject = new(messageActionPinMessage)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageActionHistoryClear":
            var tempObject = new(messageActionHistoryClear)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageActionGameScore":
            var tempObject = new(messageActionGameScore)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageActionPaymentSentMe":
            var tempObject = new(messageActionPaymentSentMe)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageActionPaymentSent":
            var tempObject = new(messageActionPaymentSent)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageActionPhoneCall":
            var tempObject = new(messageActionPhoneCall)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageActionScreenshotTaken":
            var tempObject = new(messageActionScreenshotTaken)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageActionCustomAction":
            var tempObject = new(messageActionCustomAction)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageActionBotAllowed":
            var tempObject = new(messageActionBotAllowed)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageActionSecureValuesSentMe":
            var tempObject = new(messageActionSecureValuesSentMe)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageActionSecureValuesSent":
            var tempObject = new(messageActionSecureValuesSent)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageActionContactSignUp":
            var tempObject = new(messageActionContactSignUp)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageActionGeoProximityReached":
            var tempObject = new(messageActionGeoProximityReached)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updates_differenceEmpty":
            var tempObject = new(updates_differenceEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updates_difference":
            var tempObject = new(updates_difference)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updates_differenceSlice":
            var tempObject = new(updates_differenceSlice)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updates_differenceTooLong":
            var tempObject = new(updates_differenceTooLong)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "passwordKdfAlgoUnknown":
            var tempObject = new(passwordKdfAlgoUnknown)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow":
            var tempObject = new(passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "autoDownloadSettings":
            var tempObject = new(autoDownloadSettings)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "urlAuthResultRequest":
            var tempObject = new(urlAuthResultRequest)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "urlAuthResultAccepted":
            var tempObject = new(urlAuthResultAccepted)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "urlAuthResultDefault":
            var tempObject = new(urlAuthResultDefault)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "page":
            var tempObject = new(page)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "highScore":
            var tempObject = new(highScore)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputClientProxy":
            var tempObject = new(inputClientProxy)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "receivedNotifyMessage":
            var tempObject = new(receivedNotifyMessage)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputGameID":
            var tempObject = new(inputGameID)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputGameShortName":
            var tempObject = new(inputGameShortName)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "payments_paymentReceipt":
            var tempObject = new(payments_paymentReceipt)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "topPeer":
            var tempObject = new(topPeer)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelAdminLogEventActionChangeTitle":
            var tempObject = new(channelAdminLogEventActionChangeTitle)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelAdminLogEventActionChangeAbout":
            var tempObject = new(channelAdminLogEventActionChangeAbout)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelAdminLogEventActionChangeUsername":
            var tempObject = new(channelAdminLogEventActionChangeUsername)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelAdminLogEventActionChangePhoto":
            var tempObject = new(channelAdminLogEventActionChangePhoto)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelAdminLogEventActionToggleInvites":
            var tempObject = new(channelAdminLogEventActionToggleInvites)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelAdminLogEventActionToggleSignatures":
            var tempObject = new(channelAdminLogEventActionToggleSignatures)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelAdminLogEventActionUpdatePinned":
            var tempObject = new(channelAdminLogEventActionUpdatePinned)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelAdminLogEventActionEditMessage":
            var tempObject = new(channelAdminLogEventActionEditMessage)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelAdminLogEventActionDeleteMessage":
            var tempObject = new(channelAdminLogEventActionDeleteMessage)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelAdminLogEventActionParticipantJoin":
            var tempObject = new(channelAdminLogEventActionParticipantJoin)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelAdminLogEventActionParticipantLeave":
            var tempObject = new(channelAdminLogEventActionParticipantLeave)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelAdminLogEventActionParticipantInvite":
            var tempObject = new(channelAdminLogEventActionParticipantInvite)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelAdminLogEventActionParticipantToggleBan":
            var tempObject = new(channelAdminLogEventActionParticipantToggleBan)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelAdminLogEventActionParticipantToggleAdmin":
            var tempObject = new(channelAdminLogEventActionParticipantToggleAdmin)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelAdminLogEventActionChangeStickerSet":
            var tempObject = new(channelAdminLogEventActionChangeStickerSet)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelAdminLogEventActionTogglePreHistoryHidden":
            var tempObject = new(channelAdminLogEventActionTogglePreHistoryHidden)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelAdminLogEventActionDefaultBannedRights":
            var tempObject = new(channelAdminLogEventActionDefaultBannedRights)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelAdminLogEventActionStopPoll":
            var tempObject = new(channelAdminLogEventActionStopPoll)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelAdminLogEventActionChangeLinkedChat":
            var tempObject = new(channelAdminLogEventActionChangeLinkedChat)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelAdminLogEventActionChangeLocation":
            var tempObject = new(channelAdminLogEventActionChangeLocation)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelAdminLogEventActionToggleSlowMode":
            var tempObject = new(channelAdminLogEventActionToggleSlowMode)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "userFull":
            var tempObject = new(userFull)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "webDocument":
            var tempObject = new(webDocument)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "webDocumentNoProxy":
            var tempObject = new(webDocumentNoProxy)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "statsAbsValueAndPrev":
            var tempObject = new(statsAbsValueAndPrev)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "contacts_importedContacts":
            var tempObject = new(contacts_importedContacts)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "emojiLanguage":
            var tempObject = new(emojiLanguage)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputReportReasonSpam":
            var tempObject = new(inputReportReasonSpam)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputReportReasonViolence":
            var tempObject = new(inputReportReasonViolence)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputReportReasonPornography":
            var tempObject = new(inputReportReasonPornography)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputReportReasonChildAbuse":
            var tempObject = new(inputReportReasonChildAbuse)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputReportReasonOther":
            var tempObject = new(inputReportReasonOther)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputReportReasonCopyright":
            var tempObject = new(inputReportReasonCopyright)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputReportReasonGeoIrrelevant":
            var tempObject = new(inputReportReasonGeoIrrelevant)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "account_passwordInputSettings":
            var tempObject = new(account_passwordInputSettings)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelParticipant":
            var tempObject = new(channelParticipant)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelParticipantSelf":
            var tempObject = new(channelParticipantSelf)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelParticipantCreator":
            var tempObject = new(channelParticipantCreator)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelParticipantAdmin":
            var tempObject = new(channelParticipantAdmin)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelParticipantBanned":
            var tempObject = new(channelParticipantBanned)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelParticipantLeft":
            var tempObject = new(channelParticipantLeft)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputStickeredMediaPhoto":
            var tempObject = new(inputStickeredMediaPhoto)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputStickeredMediaDocument":
            var tempObject = new(inputStickeredMediaDocument)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputChannelEmpty":
            var tempObject = new(inputChannelEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputChannel":
            var tempObject = new(inputChannel)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputChannelFromMessage":
            var tempObject = new(inputChannelFromMessage)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messages_searchCounter":
            var tempObject = new(messages_searchCounter)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputDocumentEmpty":
            var tempObject = new(inputDocumentEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputDocument":
            var tempObject = new(inputDocument)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputEncryptedFileEmpty":
            var tempObject = new(inputEncryptedFileEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputEncryptedFileUploaded":
            var tempObject = new(inputEncryptedFileUploaded)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputEncryptedFile":
            var tempObject = new(inputEncryptedFile)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputEncryptedFileBigUploaded":
            var tempObject = new(inputEncryptedFileBigUploaded)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "account_privacyRules":
            var tempObject = new(account_privacyRules)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputThemeSettings":
            var tempObject = new(inputThemeSettings)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "payments_validatedRequestedInfo":
            var tempObject = new(payments_validatedRequestedInfo)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "account_authorizations":
            var tempObject = new(account_authorizations)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputPrivacyValueAllowContacts":
            var tempObject = new(inputPrivacyValueAllowContacts)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputPrivacyValueAllowAll":
            var tempObject = new(inputPrivacyValueAllowAll)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputPrivacyValueAllowUsers":
            var tempObject = new(inputPrivacyValueAllowUsers)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputPrivacyValueDisallowContacts":
            var tempObject = new(inputPrivacyValueDisallowContacts)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputPrivacyValueDisallowAll":
            var tempObject = new(inputPrivacyValueDisallowAll)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputPrivacyValueDisallowUsers":
            var tempObject = new(inputPrivacyValueDisallowUsers)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputPrivacyValueAllowChatParticipants":
            var tempObject = new(inputPrivacyValueAllowChatParticipants)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputPrivacyValueDisallowChatParticipants":
            var tempObject = new(inputPrivacyValueDisallowChatParticipants)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "stickerSet":
            var tempObject = new(stickerSet)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pollResults":
            var tempObject = new(pollResults)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "secureValue":
            var tempObject = new(secureValue)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelAdminLogEventsFilter":
            var tempObject = new(channelAdminLogEventsFilter)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "restrictionReason":
            var tempObject = new(restrictionReason)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputBotInlineResult":
            var tempObject = new(inputBotInlineResult)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputBotInlineResultPhoto":
            var tempObject = new(inputBotInlineResultPhoto)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputBotInlineResultDocument":
            var tempObject = new(inputBotInlineResultDocument)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputBotInlineResultGame":
            var tempObject = new(inputBotInlineResultGame)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "wallPaper":
            var tempObject = new(wallPaper)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "wallPaperNoFile":
            var tempObject = new(wallPaperNoFile)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "importedContact":
            var tempObject = new(importedContact)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "help_termsOfService":
            var tempObject = new(help_termsOfService)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "dataJSON":
            var tempObject = new(dataJSON)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "shippingOption":
            var tempObject = new(shippingOption)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMediaEmpty":
            var tempObject = new(inputMediaEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMediaUploadedPhoto":
            var tempObject = new(inputMediaUploadedPhoto)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMediaPhoto":
            var tempObject = new(inputMediaPhoto)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMediaGeoPoint":
            var tempObject = new(inputMediaGeoPoint)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMediaContact":
            var tempObject = new(inputMediaContact)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMediaUploadedDocument":
            var tempObject = new(inputMediaUploadedDocument)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMediaDocument":
            var tempObject = new(inputMediaDocument)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMediaVenue":
            var tempObject = new(inputMediaVenue)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMediaPhotoExternal":
            var tempObject = new(inputMediaPhotoExternal)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMediaDocumentExternal":
            var tempObject = new(inputMediaDocumentExternal)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMediaGame":
            var tempObject = new(inputMediaGame)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMediaInvoice":
            var tempObject = new(inputMediaInvoice)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMediaGeoLive":
            var tempObject = new(inputMediaGeoLive)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMediaPoll":
            var tempObject = new(inputMediaPoll)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMediaDice":
            var tempObject = new(inputMediaDice)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "exportedMessageLink":
            var tempObject = new(exportedMessageLink)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "paymentCharge":
            var tempObject = new(paymentCharge)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputNotifyPeer":
            var tempObject = new(inputNotifyPeer)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputNotifyUsers":
            var tempObject = new(inputNotifyUsers)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputNotifyChats":
            var tempObject = new(inputNotifyChats)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputNotifyBroadcasts":
            var tempObject = new(inputNotifyBroadcasts)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputStickerSetEmpty":
            var tempObject = new(inputStickerSetEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputStickerSetID":
            var tempObject = new(inputStickerSetID)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputStickerSetShortName":
            var tempObject = new(inputStickerSetShortName)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputStickerSetAnimatedEmoji":
            var tempObject = new(inputStickerSetAnimatedEmoji)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputStickerSetDice":
            var tempObject = new(inputStickerSetDice)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "payments_paymentForm":
            var tempObject = new(payments_paymentForm)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "langPackDifference":
            var tempObject = new(langPackDifference)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messages_dialogs":
            var tempObject = new(messages_dialogs)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messages_dialogsSlice":
            var tempObject = new(messages_dialogsSlice)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messages_dialogsNotModified":
            var tempObject = new(messages_dialogsNotModified)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageInteractionCounters":
            var tempObject = new(messageInteractionCounters)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "auth_sentCodeTypeApp":
            var tempObject = new(auth_sentCodeTypeApp)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "auth_sentCodeTypeSms":
            var tempObject = new(auth_sentCodeTypeSms)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "auth_sentCodeTypeCall":
            var tempObject = new(auth_sentCodeTypeCall)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "auth_sentCodeTypeFlashCall":
            var tempObject = new(auth_sentCodeTypeFlashCall)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "peerNotifySettings":
            var tempObject = new(peerNotifySettings)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "stickerSetCovered":
            var tempObject = new(stickerSetCovered)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "stickerSetMultiCovered":
            var tempObject = new(stickerSetMultiCovered)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messages_discussionMessage":
            var tempObject = new(messages_discussionMessage)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateNewMessage":
            var tempObject = new(updateNewMessage)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateMessageID":
            var tempObject = new(updateMessageID)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateDeleteMessages":
            var tempObject = new(updateDeleteMessages)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateUserTyping":
            var tempObject = new(updateUserTyping)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateChatUserTyping":
            var tempObject = new(updateChatUserTyping)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateChatParticipants":
            var tempObject = new(updateChatParticipants)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateUserStatus":
            var tempObject = new(updateUserStatus)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateUserName":
            var tempObject = new(updateUserName)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateUserPhoto":
            var tempObject = new(updateUserPhoto)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateNewEncryptedMessage":
            var tempObject = new(updateNewEncryptedMessage)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateEncryptedChatTyping":
            var tempObject = new(updateEncryptedChatTyping)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateEncryption":
            var tempObject = new(updateEncryption)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateEncryptedMessagesRead":
            var tempObject = new(updateEncryptedMessagesRead)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateChatParticipantAdd":
            var tempObject = new(updateChatParticipantAdd)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateChatParticipantDelete":
            var tempObject = new(updateChatParticipantDelete)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateDcOptions":
            var tempObject = new(updateDcOptions)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateNotifySettings":
            var tempObject = new(updateNotifySettings)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateServiceNotification":
            var tempObject = new(updateServiceNotification)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updatePrivacy":
            var tempObject = new(updatePrivacy)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateUserPhone":
            var tempObject = new(updateUserPhone)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateReadHistoryInbox":
            var tempObject = new(updateReadHistoryInbox)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateReadHistoryOutbox":
            var tempObject = new(updateReadHistoryOutbox)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateWebPage":
            var tempObject = new(updateWebPage)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateReadMessagesContents":
            var tempObject = new(updateReadMessagesContents)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateChannelTooLong":
            var tempObject = new(updateChannelTooLong)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateChannel":
            var tempObject = new(updateChannel)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateNewChannelMessage":
            var tempObject = new(updateNewChannelMessage)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateReadChannelInbox":
            var tempObject = new(updateReadChannelInbox)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateDeleteChannelMessages":
            var tempObject = new(updateDeleteChannelMessages)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateChannelMessageViews":
            var tempObject = new(updateChannelMessageViews)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateChatParticipantAdmin":
            var tempObject = new(updateChatParticipantAdmin)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateNewStickerSet":
            var tempObject = new(updateNewStickerSet)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateStickerSetsOrder":
            var tempObject = new(updateStickerSetsOrder)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateStickerSets":
            var tempObject = new(updateStickerSets)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateSavedGifs":
            var tempObject = new(updateSavedGifs)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateBotInlineQuery":
            var tempObject = new(updateBotInlineQuery)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateBotInlineSend":
            var tempObject = new(updateBotInlineSend)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateEditChannelMessage":
            var tempObject = new(updateEditChannelMessage)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateBotCallbackQuery":
            var tempObject = new(updateBotCallbackQuery)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateEditMessage":
            var tempObject = new(updateEditMessage)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateInlineBotCallbackQuery":
            var tempObject = new(updateInlineBotCallbackQuery)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateReadChannelOutbox":
            var tempObject = new(updateReadChannelOutbox)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateDraftMessage":
            var tempObject = new(updateDraftMessage)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateReadFeaturedStickers":
            var tempObject = new(updateReadFeaturedStickers)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateRecentStickers":
            var tempObject = new(updateRecentStickers)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateConfig":
            var tempObject = new(updateConfig)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updatePtsChanged":
            var tempObject = new(updatePtsChanged)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateChannelWebPage":
            var tempObject = new(updateChannelWebPage)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateDialogPinned":
            var tempObject = new(updateDialogPinned)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updatePinnedDialogs":
            var tempObject = new(updatePinnedDialogs)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateBotWebhookJSON":
            var tempObject = new(updateBotWebhookJSON)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateBotWebhookJSONQuery":
            var tempObject = new(updateBotWebhookJSONQuery)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateBotShippingQuery":
            var tempObject = new(updateBotShippingQuery)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateBotPrecheckoutQuery":
            var tempObject = new(updateBotPrecheckoutQuery)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updatePhoneCall":
            var tempObject = new(updatePhoneCall)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateLangPackTooLong":
            var tempObject = new(updateLangPackTooLong)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateLangPack":
            var tempObject = new(updateLangPack)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateFavedStickers":
            var tempObject = new(updateFavedStickers)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateChannelReadMessagesContents":
            var tempObject = new(updateChannelReadMessagesContents)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateContactsReset":
            var tempObject = new(updateContactsReset)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateChannelAvailableMessages":
            var tempObject = new(updateChannelAvailableMessages)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateDialogUnreadMark":
            var tempObject = new(updateDialogUnreadMark)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateMessagePoll":
            var tempObject = new(updateMessagePoll)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateChatDefaultBannedRights":
            var tempObject = new(updateChatDefaultBannedRights)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateFolderPeers":
            var tempObject = new(updateFolderPeers)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updatePeerSettings":
            var tempObject = new(updatePeerSettings)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updatePeerLocated":
            var tempObject = new(updatePeerLocated)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateNewScheduledMessage":
            var tempObject = new(updateNewScheduledMessage)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateDeleteScheduledMessages":
            var tempObject = new(updateDeleteScheduledMessages)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateTheme":
            var tempObject = new(updateTheme)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateGeoLiveViewed":
            var tempObject = new(updateGeoLiveViewed)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateLoginToken":
            var tempObject = new(updateLoginToken)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateMessagePollVote":
            var tempObject = new(updateMessagePollVote)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateDialogFilter":
            var tempObject = new(updateDialogFilter)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateDialogFilterOrder":
            var tempObject = new(updateDialogFilterOrder)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateDialogFilters":
            var tempObject = new(updateDialogFilters)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updatePhoneCallSignalingData":
            var tempObject = new(updatePhoneCallSignalingData)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateChannelParticipant":
            var tempObject = new(updateChannelParticipant)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateChannelMessageForwards":
            var tempObject = new(updateChannelMessageForwards)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateReadChannelDiscussionInbox":
            var tempObject = new(updateReadChannelDiscussionInbox)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateReadChannelDiscussionOutbox":
            var tempObject = new(updateReadChannelDiscussionOutbox)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updatePeerBlocked":
            var tempObject = new(updatePeerBlocked)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateChannelUserTyping":
            var tempObject = new(updateChannelUserTyping)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updatePinnedMessages":
            var tempObject = new(updatePinnedMessages)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updatePinnedChannelMessages":
            var tempObject = new(updatePinnedChannelMessages)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "topPeerCategoryPeers":
            var tempObject = new(topPeerCategoryPeers)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "auth_sentCode":
            var tempObject = new(auth_sentCode)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "chatInviteEmpty":
            var tempObject = new(chatInviteEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "chatInviteExported":
            var tempObject = new(chatInviteExported)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "account_themesNotModified":
            var tempObject = new(account_themesNotModified)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "account_themes":
            var tempObject = new(account_themes)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "help_country":
            var tempObject = new(help_country)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messages_inactiveChats":
            var tempObject = new(messages_inactiveChats)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "phoneCallDiscardReasonMissed":
            var tempObject = new(phoneCallDiscardReasonMissed)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "phoneCallDiscardReasonDisconnect":
            var tempObject = new(phoneCallDiscardReasonDisconnect)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "phoneCallDiscardReasonHangup":
            var tempObject = new(phoneCallDiscardReasonHangup)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "phoneCallDiscardReasonBusy":
            var tempObject = new(phoneCallDiscardReasonBusy)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "stats_broadcastStats":
            var tempObject = new(stats_broadcastStats)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "account_tmpPassword":
            var tempObject = new(account_tmpPassword)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputPaymentCredentialsSaved":
            var tempObject = new(inputPaymentCredentialsSaved)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputPaymentCredentials":
            var tempObject = new(inputPaymentCredentials)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputPaymentCredentialsApplePay":
            var tempObject = new(inputPaymentCredentialsApplePay)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputPaymentCredentialsAndroidPay":
            var tempObject = new(inputPaymentCredentialsAndroidPay)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "themeSettings":
            var tempObject = new(themeSettings)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "botInfo":
            var tempObject = new(botInfo)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pollAnswer":
            var tempObject = new(pollAnswer)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "dialog":
            var tempObject = new(dialog)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "dialogFolder":
            var tempObject = new(dialogFolder)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pageListOrderedItemText":
            var tempObject = new(pageListOrderedItemText)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pageListOrderedItemBlocks":
            var tempObject = new(pageListOrderedItemBlocks)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "paymentSavedCredentialsCard":
            var tempObject = new(paymentSavedCredentialsCard)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "keyboardButtonRow":
            var tempObject = new(keyboardButtonRow)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inlineBotSwitchPM":
            var tempObject = new(inlineBotSwitchPM)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messages_highScores":
            var tempObject = new(messages_highScores)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messages_affectedHistory":
            var tempObject = new(messages_affectedHistory)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "fileLocationToBeDeprecated":
            var tempObject = new(fileLocationToBeDeprecated)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "nearestDc":
            var tempObject = new(nearestDc)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputSingleMedia":
            var tempObject = new(inputSingleMedia)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "userEmpty":
            var tempObject = new(userEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "user":
            var tempObject = new(user)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "langPackLanguage":
            var tempObject = new(langPackLanguage)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "langPackString":
            var tempObject = new(langPackString)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "langPackStringPluralized":
            var tempObject = new(langPackStringPluralized)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "langPackStringDeleted":
            var tempObject = new(langPackStringDeleted)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "webPageAttributeTheme":
            var tempObject = new(webPageAttributeTheme)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "notifyPeer":
            var tempObject = new(notifyPeer)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "notifyUsers":
            var tempObject = new(notifyUsers)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "notifyChats":
            var tempObject = new(notifyChats)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "notifyBroadcasts":
            var tempObject = new(notifyBroadcasts)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputDialogPeer":
            var tempObject = new(inputDialogPeer)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputDialogPeerFolder":
            var tempObject = new(inputDialogPeerFolder)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "payments_bankCardData":
            var tempObject = new(payments_bankCardData)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "statsPercentValue":
            var tempObject = new(statsPercentValue)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "contacts_topPeersNotModified":
            var tempObject = new(contacts_topPeersNotModified)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "contacts_topPeers":
            var tempObject = new(contacts_topPeers)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "contacts_topPeersDisabled":
            var tempObject = new(contacts_topPeersDisabled)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "contacts_blocked":
            var tempObject = new(contacts_blocked)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "contacts_blockedSlice":
            var tempObject = new(contacts_blockedSlice)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "dcOption":
            var tempObject = new(dcOption)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "savedPhoneContact":
            var tempObject = new(savedPhoneContact)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pageCaption":
            var tempObject = new(pageCaption)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "upload_webFile":
            var tempObject = new(upload_webFile)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "account_autoDownloadSettings":
            var tempObject = new(account_autoDownloadSettings)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messages_votesList":
            var tempObject = new(messages_votesList)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messages_stickersNotModified":
            var tempObject = new(messages_stickersNotModified)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messages_stickers":
            var tempObject = new(messages_stickers)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelMessagesFilterEmpty":
            var tempObject = new(channelMessagesFilterEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelMessagesFilter":
            var tempObject = new(channelMessagesFilter)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputPeerNotifySettings":
            var tempObject = new(inputPeerNotifySettings)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "invoice":
            var tempObject = new(invoice)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "phoneConnection":
            var tempObject = new(phoneConnection)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "phoneConnectionWebrtc":
            var tempObject = new(phoneConnectionWebrtc)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputPhoneContact":
            var tempObject = new(inputPhoneContact)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messages_sentEncryptedMessage":
            var tempObject = new(messages_sentEncryptedMessage)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messages_sentEncryptedFile":
            var tempObject = new(messages_sentEncryptedFile)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channels_adminLogResults":
            var tempObject = new(channels_adminLogResults)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "wallPaperSettings":
            var tempObject = new(wallPaperSettings)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "storage_fileUnknown":
            var tempObject = new(storage_fileUnknown)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "storage_filePartial":
            var tempObject = new(storage_filePartial)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "storage_fileJpeg":
            var tempObject = new(storage_fileJpeg)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "storage_fileGif":
            var tempObject = new(storage_fileGif)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "storage_filePng":
            var tempObject = new(storage_filePng)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "storage_filePdf":
            var tempObject = new(storage_filePdf)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "storage_fileMp3":
            var tempObject = new(storage_fileMp3)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "storage_fileMov":
            var tempObject = new(storage_fileMov)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "storage_fileMp4":
            var tempObject = new(storage_fileMp4)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "storage_fileWebp":
            var tempObject = new(storage_fileWebp)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputTheme":
            var tempObject = new(inputTheme)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputThemeSlug":
            var tempObject = new(inputThemeSlug)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageReplyHeader":
            var tempObject = new(messageReplyHeader)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messages_affectedMessages":
            var tempObject = new(messages_affectedMessages)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "labeledPrice":
            var tempObject = new(labeledPrice)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "contacts_resolvedPeer":
            var tempObject = new(contacts_resolvedPeer)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messages_peerDialogs":
            var tempObject = new(messages_peerDialogs)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageRange":
            var tempObject = new(messageRange)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "postAddress":
            var tempObject = new(postAddress)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "geoPointEmpty":
            var tempObject = new(geoPointEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "geoPoint":
            var tempObject = new(geoPoint)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "upload_cdnFileReuploadNeeded":
            var tempObject = new(upload_cdnFileReuploadNeeded)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "upload_cdnFile":
            var tempObject = new(upload_cdnFile)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "help_support":
            var tempObject = new(help_support)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "peerBlocked":
            var tempObject = new(peerBlocked)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputFolderPeer":
            var tempObject = new(inputFolderPeer)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "cdnPublicKey":
            var tempObject = new(cdnPublicKey)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageMediaEmpty":
            var tempObject = new(messageMediaEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageMediaPhoto":
            var tempObject = new(messageMediaPhoto)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageMediaGeo":
            var tempObject = new(messageMediaGeo)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageMediaContact":
            var tempObject = new(messageMediaContact)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageMediaUnsupported":
            var tempObject = new(messageMediaUnsupported)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageMediaDocument":
            var tempObject = new(messageMediaDocument)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageMediaWebPage":
            var tempObject = new(messageMediaWebPage)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageMediaVenue":
            var tempObject = new(messageMediaVenue)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageMediaGame":
            var tempObject = new(messageMediaGame)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageMediaInvoice":
            var tempObject = new(messageMediaInvoice)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageMediaGeoLive":
            var tempObject = new(messageMediaGeoLive)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageMediaPoll":
            var tempObject = new(messageMediaPoll)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageMediaDice":
            var tempObject = new(messageMediaDice)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "chatEmpty":
            var tempObject = new(chatEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "chat":
            var tempObject = new(chat)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "chatForbidden":
            var tempObject = new(chatForbidden)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channel":
            var tempObject = new(channel)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelForbidden":
            var tempObject = new(channelForbidden)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "help_recentMeUrls":
            var tempObject = new(help_recentMeUrls)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "userProfilePhotoEmpty":
            var tempObject = new(userProfilePhotoEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "userProfilePhoto":
            var tempObject = new(userProfilePhoto)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputGeoPointEmpty":
            var tempObject = new(inputGeoPointEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputGeoPoint":
            var tempObject = new(inputGeoPoint)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "contactStatus":
            var tempObject = new(contactStatus)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "contacts_found":
            var tempObject = new(contacts_found)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "globalPrivacySettings":
            var tempObject = new(globalPrivacySettings)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputPeerEmpty":
            var tempObject = new(inputPeerEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputPeerSelf":
            var tempObject = new(inputPeerSelf)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputPeerChat":
            var tempObject = new(inputPeerChat)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputPeerUser":
            var tempObject = new(inputPeerUser)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputPeerChannel":
            var tempObject = new(inputPeerChannel)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputPeerUserFromMessage":
            var tempObject = new(inputPeerUserFromMessage)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputPeerChannelFromMessage":
            var tempObject = new(inputPeerChannelFromMessage)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "draftMessageEmpty":
            var tempObject = new(draftMessageEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "draftMessage":
            var tempObject = new(draftMessage)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "account_sentEmailCode":
            var tempObject = new(account_sentEmailCode)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputBotInlineMessageMediaAuto":
            var tempObject = new(inputBotInlineMessageMediaAuto)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputBotInlineMessageText":
            var tempObject = new(inputBotInlineMessageText)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputBotInlineMessageMediaGeo":
            var tempObject = new(inputBotInlineMessageMediaGeo)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputBotInlineMessageMediaVenue":
            var tempObject = new(inputBotInlineMessageMediaVenue)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputBotInlineMessageMediaContact":
            var tempObject = new(inputBotInlineMessageMediaContact)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputBotInlineMessageGame":
            var tempObject = new(inputBotInlineMessageGame)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "chatFull":
            var tempObject = new(chatFull)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelFull":
            var tempObject = new(channelFull)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "accountDaysTTL":
            var tempObject = new(accountDaysTTL)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messages_chats":
            var tempObject = new(messages_chats)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messages_chatsSlice":
            var tempObject = new(messages_chatsSlice)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "recentMeUrlUnknown":
            var tempObject = new(recentMeUrlUnknown)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "recentMeUrlUser":
            var tempObject = new(recentMeUrlUser)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "recentMeUrlChat":
            var tempObject = new(recentMeUrlChat)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "recentMeUrlChatInvite":
            var tempObject = new(recentMeUrlChatInvite)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "recentMeUrlStickerSet":
            var tempObject = new(recentMeUrlStickerSet)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "auth_loginToken":
            var tempObject = new(auth_loginToken)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "auth_loginTokenMigrateTo":
            var tempObject = new(auth_loginTokenMigrateTo)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "auth_loginTokenSuccess":
            var tempObject = new(auth_loginTokenSuccess)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messages_messageViews":
            var tempObject = new(messages_messageViews)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputFileLocation":
            var tempObject = new(inputFileLocation)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputEncryptedFileLocation":
            var tempObject = new(inputEncryptedFileLocation)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputDocumentFileLocation":
            var tempObject = new(inputDocumentFileLocation)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputSecureFileLocation":
            var tempObject = new(inputSecureFileLocation)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputTakeoutFileLocation":
            var tempObject = new(inputTakeoutFileLocation)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputPhotoFileLocation":
            var tempObject = new(inputPhotoFileLocation)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputPhotoLegacyFileLocation":
            var tempObject = new(inputPhotoLegacyFileLocation)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputPeerPhotoFileLocation":
            var tempObject = new(inputPeerPhotoFileLocation)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputStickerSetThumb":
            var tempObject = new(inputStickerSetThumb)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "help_appUpdate":
            var tempObject = new(help_appUpdate)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "help_noAppUpdate":
            var tempObject = new(help_noAppUpdate)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "popularContact":
            var tempObject = new(popularContact)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "emojiURL":
            var tempObject = new(emojiURL)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMessagesFilterEmpty":
            var tempObject = new(inputMessagesFilterEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMessagesFilterPhotos":
            var tempObject = new(inputMessagesFilterPhotos)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMessagesFilterVideo":
            var tempObject = new(inputMessagesFilterVideo)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMessagesFilterPhotoVideo":
            var tempObject = new(inputMessagesFilterPhotoVideo)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMessagesFilterDocument":
            var tempObject = new(inputMessagesFilterDocument)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMessagesFilterUrl":
            var tempObject = new(inputMessagesFilterUrl)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMessagesFilterGif":
            var tempObject = new(inputMessagesFilterGif)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMessagesFilterVoice":
            var tempObject = new(inputMessagesFilterVoice)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMessagesFilterMusic":
            var tempObject = new(inputMessagesFilterMusic)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMessagesFilterChatPhotos":
            var tempObject = new(inputMessagesFilterChatPhotos)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMessagesFilterPhoneCalls":
            var tempObject = new(inputMessagesFilterPhoneCalls)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMessagesFilterRoundVoice":
            var tempObject = new(inputMessagesFilterRoundVoice)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMessagesFilterRoundVideo":
            var tempObject = new(inputMessagesFilterRoundVideo)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMessagesFilterMyMentions":
            var tempObject = new(inputMessagesFilterMyMentions)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMessagesFilterGeo":
            var tempObject = new(inputMessagesFilterGeo)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMessagesFilterContacts":
            var tempObject = new(inputMessagesFilterContacts)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputMessagesFilterPinned":
            var tempObject = new(inputMessagesFilterPinned)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "codeSettings":
            var tempObject = new(codeSettings)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messages_messageEditData":
            var tempObject = new(messages_messageEditData)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "help_countriesListNotModified":
            var tempObject = new(help_countriesListNotModified)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "help_countriesList":
            var tempObject = new(help_countriesList)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageReplies":
            var tempObject = new(messageReplies)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "account_authorizationForm":
            var tempObject = new(account_authorizationForm)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messages_dhConfigNotModified":
            var tempObject = new(messages_dhConfigNotModified)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messages_dhConfig":
            var tempObject = new(messages_dhConfig)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "account_takeout":
            var tempObject = new(account_takeout)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updatesTooLong":
            var tempObject = new(updatesTooLong)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateShortMessage":
            var tempObject = new(updateShortMessage)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateShortChatMessage":
            var tempObject = new(updateShortChatMessage)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateShort":
            var tempObject = new(updateShort)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updatesCombined":
            var tempObject = new(updatesCombined)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updates":
            var tempObject = new(updates)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "updateShortSentMessage":
            var tempObject = new(updateShortSentMessage)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageFwdHeader":
            var tempObject = new(messageFwdHeader)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "authorization":
            var tempObject = new(authorization)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "help_termsOfServiceUpdateEmpty":
            var tempObject = new(help_termsOfServiceUpdateEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "help_termsOfServiceUpdate":
            var tempObject = new(help_termsOfServiceUpdate)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pageTableCell":
            var tempObject = new(pageTableCell)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "account_contentSettings":
            var tempObject = new(account_contentSettings)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "account_webAuthorizations":
            var tempObject = new(account_webAuthorizations)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "secureValueHash":
            var tempObject = new(secureValueHash)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "paymentRequestedInfo":
            var tempObject = new(paymentRequestedInfo)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "phoneCallEmpty":
            var tempObject = new(phoneCallEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "phoneCallWaiting":
            var tempObject = new(phoneCallWaiting)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "phoneCallRequested":
            var tempObject = new(phoneCallRequested)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "phoneCallAccepted":
            var tempObject = new(phoneCallAccepted)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "phoneCall":
            var tempObject = new(phoneCall)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "phoneCallDiscarded":
            var tempObject = new(phoneCallDiscarded)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputPrivacyKeyStatusTimestamp":
            var tempObject = new(inputPrivacyKeyStatusTimestamp)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputPrivacyKeyChatInvite":
            var tempObject = new(inputPrivacyKeyChatInvite)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputPrivacyKeyPhoneCall":
            var tempObject = new(inputPrivacyKeyPhoneCall)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputPrivacyKeyPhoneP2P":
            var tempObject = new(inputPrivacyKeyPhoneP2P)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputPrivacyKeyForwards":
            var tempObject = new(inputPrivacyKeyForwards)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputPrivacyKeyProfilePhoto":
            var tempObject = new(inputPrivacyKeyProfilePhoto)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputPrivacyKeyPhoneNumber":
            var tempObject = new(inputPrivacyKeyPhoneNumber)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputPrivacyKeyAddedByPhone":
            var tempObject = new(inputPrivacyKeyAddedByPhone)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "maskCoords":
            var tempObject = new(maskCoords)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "privacyValueAllowContacts":
            var tempObject = new(privacyValueAllowContacts)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "privacyValueAllowAll":
            var tempObject = new(privacyValueAllowAll)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "privacyValueAllowUsers":
            var tempObject = new(privacyValueAllowUsers)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "privacyValueDisallowContacts":
            var tempObject = new(privacyValueDisallowContacts)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "privacyValueDisallowAll":
            var tempObject = new(privacyValueDisallowAll)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "privacyValueDisallowUsers":
            var tempObject = new(privacyValueDisallowUsers)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "privacyValueAllowChatParticipants":
            var tempObject = new(privacyValueAllowChatParticipants)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "privacyValueDisallowChatParticipants":
            var tempObject = new(privacyValueDisallowChatParticipants)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pageBlockUnsupported":
            var tempObject = new(pageBlockUnsupported)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pageBlockTitle":
            var tempObject = new(pageBlockTitle)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pageBlockSubtitle":
            var tempObject = new(pageBlockSubtitle)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pageBlockAuthorDate":
            var tempObject = new(pageBlockAuthorDate)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pageBlockHeader":
            var tempObject = new(pageBlockHeader)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pageBlockSubheader":
            var tempObject = new(pageBlockSubheader)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pageBlockParagraph":
            var tempObject = new(pageBlockParagraph)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pageBlockPreformatted":
            var tempObject = new(pageBlockPreformatted)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pageBlockFooter":
            var tempObject = new(pageBlockFooter)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pageBlockDivider":
            var tempObject = new(pageBlockDivider)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pageBlockAnchor":
            var tempObject = new(pageBlockAnchor)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pageBlockList":
            var tempObject = new(pageBlockList)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pageBlockBlockquote":
            var tempObject = new(pageBlockBlockquote)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pageBlockPullquote":
            var tempObject = new(pageBlockPullquote)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pageBlockPhoto":
            var tempObject = new(pageBlockPhoto)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pageBlockVideo":
            var tempObject = new(pageBlockVideo)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pageBlockCover":
            var tempObject = new(pageBlockCover)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pageBlockEmbed":
            var tempObject = new(pageBlockEmbed)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pageBlockEmbedPost":
            var tempObject = new(pageBlockEmbedPost)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pageBlockCollage":
            var tempObject = new(pageBlockCollage)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pageBlockSlideshow":
            var tempObject = new(pageBlockSlideshow)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pageBlockChannel":
            var tempObject = new(pageBlockChannel)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pageBlockAudio":
            var tempObject = new(pageBlockAudio)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pageBlockKicker":
            var tempObject = new(pageBlockKicker)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pageBlockTable":
            var tempObject = new(pageBlockTable)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pageBlockOrderedList":
            var tempObject = new(pageBlockOrderedList)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pageBlockDetails":
            var tempObject = new(pageBlockDetails)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pageBlockRelatedArticles":
            var tempObject = new(pageBlockRelatedArticles)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "pageBlockMap":
            var tempObject = new(pageBlockMap)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "chatPhotoEmpty":
            var tempObject = new(chatPhotoEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "chatPhoto":
            var tempObject = new(chatPhoto)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "contacts_contactsNotModified":
            var tempObject = new(contacts_contactsNotModified)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "contacts_contacts":
            var tempObject = new(contacts_contacts)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "encryptedChatEmpty":
            var tempObject = new(encryptedChatEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "encryptedChatWaiting":
            var tempObject = new(encryptedChatWaiting)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "encryptedChatRequested":
            var tempObject = new(encryptedChatRequested)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "encryptedChat":
            var tempObject = new(encryptedChat)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "encryptedChatDiscarded":
            var tempObject = new(encryptedChatDiscarded)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messages_chatFull":
            var tempObject = new(messages_chatFull)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "replyKeyboardHide":
            var tempObject = new(replyKeyboardHide)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "replyKeyboardForceReply":
            var tempObject = new(replyKeyboardForceReply)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "replyKeyboardMarkup":
            var tempObject = new(replyKeyboardMarkup)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "replyInlineMarkup":
            var tempObject = new(replyInlineMarkup)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "statsURL":
            var tempObject = new(statsURL)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "statsGraphAsync":
            var tempObject = new(statsGraphAsync)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "statsGraphError":
            var tempObject = new(statsGraphError)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "statsGraph":
            var tempObject = new(statsGraph)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageEmpty":
            var tempObject = new(messageEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "message":
            var tempObject = new(message)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "messageService":
            var tempObject = new(messageService)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "documentEmpty":
            var tempObject = new(documentEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "document":
            var tempObject = new(document)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "statsGroupTopInviter":
            var tempObject = new(statsGroupTopInviter)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputAppEvent":
            var tempObject = new(inputAppEvent)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "secureValueTypePersonalDetails":
            var tempObject = new(secureValueTypePersonalDetails)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "secureValueTypePassport":
            var tempObject = new(secureValueTypePassport)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "secureValueTypeDriverLicense":
            var tempObject = new(secureValueTypeDriverLicense)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "secureValueTypeIdentityCard":
            var tempObject = new(secureValueTypeIdentityCard)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "secureValueTypeInternalPassport":
            var tempObject = new(secureValueTypeInternalPassport)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "secureValueTypeAddress":
            var tempObject = new(secureValueTypeAddress)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "secureValueTypeUtilityBill":
            var tempObject = new(secureValueTypeUtilityBill)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "secureValueTypeBankStatement":
            var tempObject = new(secureValueTypeBankStatement)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "secureValueTypeRentalAgreement":
            var tempObject = new(secureValueTypeRentalAgreement)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "secureValueTypePassportRegistration":
            var tempObject = new(secureValueTypePassportRegistration)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "secureValueTypeTemporaryRegistration":
            var tempObject = new(secureValueTypeTemporaryRegistration)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "secureValueTypePhone":
            var tempObject = new(secureValueTypePhone)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "secureValueTypeEmail":
            var tempObject = new(secureValueTypeEmail)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "botInlineResult":
            var tempObject = new(botInlineResult)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "botInlineMediaResult":
            var tempObject = new(botInlineMediaResult)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "sendMessageTypingAction":
            var tempObject = new(sendMessageTypingAction)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "sendMessageCancelAction":
            var tempObject = new(sendMessageCancelAction)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "sendMessageRecordVideoAction":
            var tempObject = new(sendMessageRecordVideoAction)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "sendMessageUploadVideoAction":
            var tempObject = new(sendMessageUploadVideoAction)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "sendMessageRecordAudioAction":
            var tempObject = new(sendMessageRecordAudioAction)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "sendMessageUploadAudioAction":
            var tempObject = new(sendMessageUploadAudioAction)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "sendMessageUploadPhotoAction":
            var tempObject = new(sendMessageUploadPhotoAction)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "sendMessageUploadDocumentAction":
            var tempObject = new(sendMessageUploadDocumentAction)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "sendMessageGeoLocationAction":
            var tempObject = new(sendMessageGeoLocationAction)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "sendMessageChooseContactAction":
            var tempObject = new(sendMessageChooseContactAction)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "sendMessageGamePlayAction":
            var tempObject = new(sendMessageGamePlayAction)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "sendMessageRecordRoundAction":
            var tempObject = new(sendMessageRecordRoundAction)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "sendMessageUploadRoundAction":
            var tempObject = new(sendMessageUploadRoundAction)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "help_deepLinkInfoEmpty":
            var tempObject = new(help_deepLinkInfoEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "help_deepLinkInfo":
            var tempObject = new(help_deepLinkInfo)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "secureFileEmpty":
            var tempObject = new(secureFileEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "secureFile":
            var tempObject = new(secureFile)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "inputStickerSetItem":
            var tempObject = new(inputStickerSetItem)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "emojiKeyword":
            var tempObject = new(emojiKeyword)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "emojiKeywordDeleted":
            var tempObject = new(emojiKeywordDeleted)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "peerSettings":
            var tempObject = new(peerSettings)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "chatBannedRights":
            var tempObject = new(chatBannedRights)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "botInlineMessageMediaAuto":
            var tempObject = new(botInlineMessageMediaAuto)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "botInlineMessageText":
            var tempObject = new(botInlineMessageText)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "botInlineMessageMediaGeo":
            var tempObject = new(botInlineMessageMediaGeo)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "botInlineMessageMediaVenue":
            var tempObject = new(botInlineMessageMediaVenue)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "botInlineMessageMediaContact":
            var tempObject = new(botInlineMessageMediaContact)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "peerLocated":
            var tempObject = new(peerLocated)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "peerSelfLocated":
            var tempObject = new(peerSelfLocated)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelLocationEmpty":
            var tempObject = new(channelLocationEmpty)
            self.TlDecode(tempObject)
            obj = tempObject
            return
        of "channelLocation":
            var tempObject = new(channelLocation)
            self.TlDecode(tempObject)
            obj = tempObject
            return

proc TLDecodeApi*(self: var ScalingSeq[uint8], obj: var seq[TLObject]) =
    var id: int32
    self.TLDecode(addr id)
    if id != 481674261:
        raise newException(Exception, "Type is not Vector")
    var lenght: int32
    self.TLDecode(addr lenght)
    for i in countup(1, lenght):
        var id: int32
        self.TLDecode(addr id)
        if FromID.toTable[id] == "help_promoDataEmpty":
            var tempObject = new(help_promoDataEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "help_promoData":
            var tempObject = new(help_promoData)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "stats_megagroupStats":
            var tempObject = new(stats_megagroupStats)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "privacyKeyStatusTimestamp":
            var tempObject = new(privacyKeyStatusTimestamp)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "privacyKeyChatInvite":
            var tempObject = new(privacyKeyChatInvite)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "privacyKeyPhoneCall":
            var tempObject = new(privacyKeyPhoneCall)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "privacyKeyPhoneP2P":
            var tempObject = new(privacyKeyPhoneP2P)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "privacyKeyForwards":
            var tempObject = new(privacyKeyForwards)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "privacyKeyProfilePhoto":
            var tempObject = new(privacyKeyProfilePhoto)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "privacyKeyPhoneNumber":
            var tempObject = new(privacyKeyPhoneNumber)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "privacyKeyAddedByPhone":
            var tempObject = new(privacyKeyAddedByPhone)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "help_countryCode":
            var tempObject = new(help_countryCode)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "webAuthorization":
            var tempObject = new(webAuthorization)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "poll":
            var tempObject = new(poll)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "dialogPeer":
            var tempObject = new(dialogPeer)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "dialogPeerFolder":
            var tempObject = new(dialogPeerFolder)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "topPeerCategoryBotsPM":
            var tempObject = new(topPeerCategoryBotsPM)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "topPeerCategoryBotsInline":
            var tempObject = new(topPeerCategoryBotsInline)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "topPeerCategoryCorrespondents":
            var tempObject = new(topPeerCategoryCorrespondents)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "topPeerCategoryGroups":
            var tempObject = new(topPeerCategoryGroups)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "topPeerCategoryChannels":
            var tempObject = new(topPeerCategoryChannels)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "topPeerCategoryPhoneCalls":
            var tempObject = new(topPeerCategoryPhoneCalls)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "topPeerCategoryForwardUsers":
            var tempObject = new(topPeerCategoryForwardUsers)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "topPeerCategoryForwardChats":
            var tempObject = new(topPeerCategoryForwardChats)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "help_supportName":
            var tempObject = new(help_supportName)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "photoSizeEmpty":
            var tempObject = new(photoSizeEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "photoSize":
            var tempObject = new(photoSize)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "photoCachedSize":
            var tempObject = new(photoCachedSize)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "photoStrippedSize":
            var tempObject = new(photoStrippedSize)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "photoSizeProgressive":
            var tempObject = new(photoSizeProgressive)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "jsonNull":
            var tempObject = new(jsonNull)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "jsonBool":
            var tempObject = new(jsonBool)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "jsonNumber":
            var tempObject = new(jsonNumber)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "jsonString":
            var tempObject = new(jsonString)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "jsonArray":
            var tempObject = new(jsonArray)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "jsonObject":
            var tempObject = new(jsonObject)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messages_archivedStickers":
            var tempObject = new(messages_archivedStickers)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "baseThemeClassic":
            var tempObject = new(baseThemeClassic)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "baseThemeDay":
            var tempObject = new(baseThemeDay)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "baseThemeNight":
            var tempObject = new(baseThemeNight)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "baseThemeTinted":
            var tempObject = new(baseThemeTinted)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "baseThemeArctic":
            var tempObject = new(baseThemeArctic)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "dialogFilter":
            var tempObject = new(dialogFilter)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageEntityUnknown":
            var tempObject = new(messageEntityUnknown)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageEntityMention":
            var tempObject = new(messageEntityMention)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageEntityHashtag":
            var tempObject = new(messageEntityHashtag)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageEntityBotCommand":
            var tempObject = new(messageEntityBotCommand)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageEntityUrl":
            var tempObject = new(messageEntityUrl)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageEntityEmail":
            var tempObject = new(messageEntityEmail)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageEntityBold":
            var tempObject = new(messageEntityBold)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageEntityItalic":
            var tempObject = new(messageEntityItalic)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageEntityCode":
            var tempObject = new(messageEntityCode)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageEntityPre":
            var tempObject = new(messageEntityPre)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageEntityTextUrl":
            var tempObject = new(messageEntityTextUrl)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageEntityMentionName":
            var tempObject = new(messageEntityMentionName)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMessageEntityMentionName":
            var tempObject = new(inputMessageEntityMentionName)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageEntityPhone":
            var tempObject = new(messageEntityPhone)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageEntityCashtag":
            var tempObject = new(messageEntityCashtag)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageEntityUnderline":
            var tempObject = new(messageEntityUnderline)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageEntityStrike":
            var tempObject = new(messageEntityStrike)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageEntityBlockquote":
            var tempObject = new(messageEntityBlockquote)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageEntityBankCard":
            var tempObject = new(messageEntityBankCard)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "theme":
            var tempObject = new(theme)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "dialogFilterSuggested":
            var tempObject = new(dialogFilterSuggested)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "stats_messageStats":
            var tempObject = new(stats_messageStats)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "payments_paymentResult":
            var tempObject = new(payments_paymentResult)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "payments_paymentVerificationNeeded":
            var tempObject = new(payments_paymentVerificationNeeded)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "stickerPack":
            var tempObject = new(stickerPack)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "account_passwordSettings":
            var tempObject = new(account_passwordSettings)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "cdnConfig":
            var tempObject = new(cdnConfig)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputCheckPasswordEmpty":
            var tempObject = new(inputCheckPasswordEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputCheckPasswordSRP":
            var tempObject = new(inputCheckPasswordSRP)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pollAnswerVoters":
            var tempObject = new(pollAnswerVoters)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "secureData":
            var tempObject = new(secureData)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pageTableRow":
            var tempObject = new(pageTableRow)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "phone_phoneCall":
            var tempObject = new(phone_phoneCall)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "chatOnlines":
            var tempObject = new(chatOnlines)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "securePlainPhone":
            var tempObject = new(securePlainPhone)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "securePlainEmail":
            var tempObject = new(securePlainEmail)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputChatPhotoEmpty":
            var tempObject = new(inputChatPhotoEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputChatUploadedPhoto":
            var tempObject = new(inputChatUploadedPhoto)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputChatPhoto":
            var tempObject = new(inputChatPhoto)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "secureSecretSettings":
            var tempObject = new(secureSecretSettings)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "emojiKeywordsDifference":
            var tempObject = new(emojiKeywordsDifference)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "photos_photos":
            var tempObject = new(photos_photos)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "photos_photosSlice":
            var tempObject = new(photos_photosSlice)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelParticipantsRecent":
            var tempObject = new(channelParticipantsRecent)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelParticipantsAdmins":
            var tempObject = new(channelParticipantsAdmins)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelParticipantsKicked":
            var tempObject = new(channelParticipantsKicked)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelParticipantsBots":
            var tempObject = new(channelParticipantsBots)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelParticipantsBanned":
            var tempObject = new(channelParticipantsBanned)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelParticipantsSearch":
            var tempObject = new(channelParticipantsSearch)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelParticipantsContacts":
            var tempObject = new(channelParticipantsContacts)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelParticipantsMentions":
            var tempObject = new(channelParticipantsMentions)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "statsGroupTopAdmin":
            var tempObject = new(statsGroupTopAdmin)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputBotInlineMessageID":
            var tempObject = new(inputBotInlineMessageID)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputPhotoEmpty":
            var tempObject = new(inputPhotoEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputPhoto":
            var tempObject = new(inputPhoto)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channels_channelParticipant":
            var tempObject = new(channels_channelParticipant)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "photos_photo":
            var tempObject = new(photos_photo)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "encryptedMessage":
            var tempObject = new(encryptedMessage)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "encryptedMessageService":
            var tempObject = new(encryptedMessageService)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "documentAttributeImageSize":
            var tempObject = new(documentAttributeImageSize)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "documentAttributeAnimated":
            var tempObject = new(documentAttributeAnimated)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "documentAttributeSticker":
            var tempObject = new(documentAttributeSticker)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "documentAttributeVideo":
            var tempObject = new(documentAttributeVideo)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "documentAttributeAudio":
            var tempObject = new(documentAttributeAudio)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "documentAttributeFilename":
            var tempObject = new(documentAttributeFilename)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "documentAttributeHasStickers":
            var tempObject = new(documentAttributeHasStickers)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputEncryptedChat":
            var tempObject = new(inputEncryptedChat)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messages_featuredStickersNotModified":
            var tempObject = new(messages_featuredStickersNotModified)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messages_featuredStickers":
            var tempObject = new(messages_featuredStickers)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "payments_savedInfo":
            var tempObject = new(payments_savedInfo)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "phoneCallProtocol":
            var tempObject = new(phoneCallProtocol)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelAdminLogEvent":
            var tempObject = new(channelAdminLogEvent)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "keyboardButton":
            var tempObject = new(keyboardButton)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "keyboardButtonUrl":
            var tempObject = new(keyboardButtonUrl)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "keyboardButtonCallback":
            var tempObject = new(keyboardButtonCallback)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "keyboardButtonRequestPhone":
            var tempObject = new(keyboardButtonRequestPhone)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "keyboardButtonRequestGeoLocation":
            var tempObject = new(keyboardButtonRequestGeoLocation)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "keyboardButtonSwitchInline":
            var tempObject = new(keyboardButtonSwitchInline)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "keyboardButtonGame":
            var tempObject = new(keyboardButtonGame)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "keyboardButtonBuy":
            var tempObject = new(keyboardButtonBuy)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "keyboardButtonUrlAuth":
            var tempObject = new(keyboardButtonUrlAuth)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputKeyboardButtonUrlAuth":
            var tempObject = new(inputKeyboardButtonUrlAuth)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "keyboardButtonRequestPoll":
            var tempObject = new(keyboardButtonRequestPoll)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "textEmpty":
            var tempObject = new(textEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "textPlain":
            var tempObject = new(textPlain)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "textBold":
            var tempObject = new(textBold)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "textItalic":
            var tempObject = new(textItalic)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "textUnderline":
            var tempObject = new(textUnderline)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "textStrike":
            var tempObject = new(textStrike)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "textFixed":
            var tempObject = new(textFixed)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "textUrl":
            var tempObject = new(textUrl)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "textEmail":
            var tempObject = new(textEmail)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "textConcat":
            var tempObject = new(textConcat)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "textSubscript":
            var tempObject = new(textSubscript)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "textSuperscript":
            var tempObject = new(textSuperscript)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "textMarked":
            var tempObject = new(textMarked)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "textPhone":
            var tempObject = new(textPhone)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "textImage":
            var tempObject = new(textImage)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "textAnchor":
            var tempObject = new(textAnchor)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMessageID":
            var tempObject = new(inputMessageID)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMessageReplyTo":
            var tempObject = new(inputMessageReplyTo)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMessagePinned":
            var tempObject = new(inputMessagePinned)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputWebFileLocation":
            var tempObject = new(inputWebFileLocation)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputWebFileGeoPointLocation":
            var tempObject = new(inputWebFileGeoPointLocation)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messages_allStickersNotModified":
            var tempObject = new(messages_allStickersNotModified)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messages_allStickers":
            var tempObject = new(messages_allStickers)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "fileHash":
            var tempObject = new(fileHash)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "chatInviteAlready":
            var tempObject = new(chatInviteAlready)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "chatInvite":
            var tempObject = new(chatInvite)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "chatInvitePeek":
            var tempObject = new(chatInvitePeek)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messages_botResults":
            var tempObject = new(messages_botResults)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputWebDocument":
            var tempObject = new(inputWebDocument)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pageListItemText":
            var tempObject = new(pageListItemText)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pageListItemBlocks":
            var tempObject = new(pageListItemBlocks)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pageRelatedArticle":
            var tempObject = new(pageRelatedArticle)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "help_inviteText":
            var tempObject = new(help_inviteText)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messages_savedGifsNotModified":
            var tempObject = new(messages_savedGifsNotModified)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messages_savedGifs":
            var tempObject = new(messages_savedGifs)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "userStatusEmpty":
            var tempObject = new(userStatusEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "userStatusOnline":
            var tempObject = new(userStatusOnline)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "userStatusOffline":
            var tempObject = new(userStatusOffline)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "userStatusRecently":
            var tempObject = new(userStatusRecently)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "userStatusLastWeek":
            var tempObject = new(userStatusLastWeek)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "userStatusLastMonth":
            var tempObject = new(userStatusLastMonth)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "contact":
            var tempObject = new(contact)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputSecureFileUploaded":
            var tempObject = new(inputSecureFileUploaded)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputSecureFile":
            var tempObject = new(inputSecureFile)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "auth_passwordRecovery":
            var tempObject = new(auth_passwordRecovery)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "account_wallPapersNotModified":
            var tempObject = new(account_wallPapersNotModified)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "account_wallPapers":
            var tempObject = new(account_wallPapers)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "statsDateRangeDays":
            var tempObject = new(statsDateRangeDays)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messages_messages":
            var tempObject = new(messages_messages)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messages_messagesSlice":
            var tempObject = new(messages_messagesSlice)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messages_channelMessages":
            var tempObject = new(messages_channelMessages)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messages_messagesNotModified":
            var tempObject = new(messages_messagesNotModified)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "videoSize":
            var tempObject = new(videoSize)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messages_botCallbackAnswer":
            var tempObject = new(messages_botCallbackAnswer)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "auth_codeTypeSms":
            var tempObject = new(auth_codeTypeSms)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "auth_codeTypeCall":
            var tempObject = new(auth_codeTypeCall)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "auth_codeTypeFlashCall":
            var tempObject = new(auth_codeTypeFlashCall)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputSecureValue":
            var tempObject = new(inputSecureValue)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "config":
            var tempObject = new(config)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputWallPaper":
            var tempObject = new(inputWallPaper)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputWallPaperSlug":
            var tempObject = new(inputWallPaperSlug)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputWallPaperNoFile":
            var tempObject = new(inputWallPaperNoFile)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "upload_file":
            var tempObject = new(upload_file)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "upload_fileCdnRedirect":
            var tempObject = new(upload_fileCdnRedirect)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "securePasswordKdfAlgoUnknown":
            var tempObject = new(securePasswordKdfAlgoUnknown)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "securePasswordKdfAlgoPBKDF2HMACSHA512iter100000":
            var tempObject = new(securePasswordKdfAlgoPBKDF2HMACSHA512iter100000)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "securePasswordKdfAlgoSHA512":
            var tempObject = new(securePasswordKdfAlgoSHA512)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageUserVote":
            var tempObject = new(messageUserVote)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageUserVoteInputOption":
            var tempObject = new(messageUserVoteInputOption)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageUserVoteMultiple":
            var tempObject = new(messageUserVoteMultiple)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messages_favedStickersNotModified":
            var tempObject = new(messages_favedStickersNotModified)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messages_favedStickers":
            var tempObject = new(messages_favedStickers)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "secureRequiredType":
            var tempObject = new(secureRequiredType)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "secureRequiredTypeOneOf":
            var tempObject = new(secureRequiredTypeOneOf)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "statsGroupTopPoster":
            var tempObject = new(statsGroupTopPoster)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "botCommand":
            var tempObject = new(botCommand)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messages_foundStickerSetsNotModified":
            var tempObject = new(messages_foundStickerSetsNotModified)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messages_foundStickerSets":
            var tempObject = new(messages_foundStickerSets)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "secureCredentialsEncrypted":
            var tempObject = new(secureCredentialsEncrypted)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channels_channelParticipants":
            var tempObject = new(channels_channelParticipants)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channels_channelParticipantsNotModified":
            var tempObject = new(channels_channelParticipantsNotModified)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "photoEmpty":
            var tempObject = new(photoEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "photo":
            var tempObject = new(photo)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "chatParticipant":
            var tempObject = new(chatParticipant)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "chatParticipantCreator":
            var tempObject = new(chatParticipantCreator)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "chatParticipantAdmin":
            var tempObject = new(chatParticipantAdmin)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "jsonObjectValue":
            var tempObject = new(jsonObjectValue)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messages_stickerSet":
            var tempObject = new(messages_stickerSet)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "secureValueErrorData":
            var tempObject = new(secureValueErrorData)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "secureValueErrorFrontSide":
            var tempObject = new(secureValueErrorFrontSide)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "secureValueErrorReverseSide":
            var tempObject = new(secureValueErrorReverseSide)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "secureValueErrorSelfie":
            var tempObject = new(secureValueErrorSelfie)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "secureValueErrorFile":
            var tempObject = new(secureValueErrorFile)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "secureValueErrorFiles":
            var tempObject = new(secureValueErrorFiles)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "secureValueError":
            var tempObject = new(secureValueError)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "secureValueErrorTranslationFile":
            var tempObject = new(secureValueErrorTranslationFile)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "secureValueErrorTranslationFiles":
            var tempObject = new(secureValueErrorTranslationFiles)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "help_userInfoEmpty":
            var tempObject = new(help_userInfoEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "help_userInfo":
            var tempObject = new(help_userInfo)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "bankCardOpenUrl":
            var tempObject = new(bankCardOpenUrl)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "help_passportConfigNotModified":
            var tempObject = new(help_passportConfigNotModified)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "help_passportConfig":
            var tempObject = new(help_passportConfig)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "chatAdminRights":
            var tempObject = new(chatAdminRights)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "auth_authorization":
            var tempObject = new(auth_authorization)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "auth_authorizationSignUpRequired":
            var tempObject = new(auth_authorizationSignUpRequired)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messages_stickerSetInstallResultSuccess":
            var tempObject = new(messages_stickerSetInstallResultSuccess)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messages_stickerSetInstallResultArchive":
            var tempObject = new(messages_stickerSetInstallResultArchive)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageViews":
            var tempObject = new(messageViews)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputFile":
            var tempObject = new(inputFile)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputFileBig":
            var tempObject = new(inputFileBig)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updates_state":
            var tempObject = new(updates_state)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "encryptedFileEmpty":
            var tempObject = new(encryptedFileEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "encryptedFile":
            var tempObject = new(encryptedFile)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updates_channelDifferenceEmpty":
            var tempObject = new(updates_channelDifferenceEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updates_channelDifferenceTooLong":
            var tempObject = new(updates_channelDifferenceTooLong)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updates_channelDifference":
            var tempObject = new(updates_channelDifference)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "folderPeer":
            var tempObject = new(folderPeer)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "account_password":
            var tempObject = new(account_password)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "game":
            var tempObject = new(game)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "chatParticipantsForbidden":
            var tempObject = new(chatParticipantsForbidden)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "chatParticipants":
            var tempObject = new(chatParticipants)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "auth_exportedAuthorization":
            var tempObject = new(auth_exportedAuthorization)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputPhoneCall":
            var tempObject = new(inputPhoneCall)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "webPageEmpty":
            var tempObject = new(webPageEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "webPagePending":
            var tempObject = new(webPagePending)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "webPage":
            var tempObject = new(webPage)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "webPageNotModified":
            var tempObject = new(webPageNotModified)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messages_recentStickersNotModified":
            var tempObject = new(messages_recentStickersNotModified)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messages_recentStickers":
            var tempObject = new(messages_recentStickers)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "folder":
            var tempObject = new(folder)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputUserEmpty":
            var tempObject = new(inputUserEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputUserSelf":
            var tempObject = new(inputUserSelf)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputUser":
            var tempObject = new(inputUser)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputUserFromMessage":
            var tempObject = new(inputUserFromMessage)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "peerUser":
            var tempObject = new(peerUser)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "peerChat":
            var tempObject = new(peerChat)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "peerChannel":
            var tempObject = new(peerChannel)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageActionEmpty":
            var tempObject = new(messageActionEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageActionChatCreate":
            var tempObject = new(messageActionChatCreate)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageActionChatEditTitle":
            var tempObject = new(messageActionChatEditTitle)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageActionChatEditPhoto":
            var tempObject = new(messageActionChatEditPhoto)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageActionChatDeletePhoto":
            var tempObject = new(messageActionChatDeletePhoto)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageActionChatAddUser":
            var tempObject = new(messageActionChatAddUser)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageActionChatDeleteUser":
            var tempObject = new(messageActionChatDeleteUser)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageActionChatJoinedByLink":
            var tempObject = new(messageActionChatJoinedByLink)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageActionChannelCreate":
            var tempObject = new(messageActionChannelCreate)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageActionChatMigrateTo":
            var tempObject = new(messageActionChatMigrateTo)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageActionChannelMigrateFrom":
            var tempObject = new(messageActionChannelMigrateFrom)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageActionPinMessage":
            var tempObject = new(messageActionPinMessage)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageActionHistoryClear":
            var tempObject = new(messageActionHistoryClear)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageActionGameScore":
            var tempObject = new(messageActionGameScore)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageActionPaymentSentMe":
            var tempObject = new(messageActionPaymentSentMe)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageActionPaymentSent":
            var tempObject = new(messageActionPaymentSent)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageActionPhoneCall":
            var tempObject = new(messageActionPhoneCall)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageActionScreenshotTaken":
            var tempObject = new(messageActionScreenshotTaken)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageActionCustomAction":
            var tempObject = new(messageActionCustomAction)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageActionBotAllowed":
            var tempObject = new(messageActionBotAllowed)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageActionSecureValuesSentMe":
            var tempObject = new(messageActionSecureValuesSentMe)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageActionSecureValuesSent":
            var tempObject = new(messageActionSecureValuesSent)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageActionContactSignUp":
            var tempObject = new(messageActionContactSignUp)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageActionGeoProximityReached":
            var tempObject = new(messageActionGeoProximityReached)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updates_differenceEmpty":
            var tempObject = new(updates_differenceEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updates_difference":
            var tempObject = new(updates_difference)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updates_differenceSlice":
            var tempObject = new(updates_differenceSlice)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updates_differenceTooLong":
            var tempObject = new(updates_differenceTooLong)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "passwordKdfAlgoUnknown":
            var tempObject = new(passwordKdfAlgoUnknown)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow":
            var tempObject = new(passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "autoDownloadSettings":
            var tempObject = new(autoDownloadSettings)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "urlAuthResultRequest":
            var tempObject = new(urlAuthResultRequest)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "urlAuthResultAccepted":
            var tempObject = new(urlAuthResultAccepted)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "urlAuthResultDefault":
            var tempObject = new(urlAuthResultDefault)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "page":
            var tempObject = new(page)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "highScore":
            var tempObject = new(highScore)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputClientProxy":
            var tempObject = new(inputClientProxy)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "receivedNotifyMessage":
            var tempObject = new(receivedNotifyMessage)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputGameID":
            var tempObject = new(inputGameID)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputGameShortName":
            var tempObject = new(inputGameShortName)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "payments_paymentReceipt":
            var tempObject = new(payments_paymentReceipt)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "topPeer":
            var tempObject = new(topPeer)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelAdminLogEventActionChangeTitle":
            var tempObject = new(channelAdminLogEventActionChangeTitle)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelAdminLogEventActionChangeAbout":
            var tempObject = new(channelAdminLogEventActionChangeAbout)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelAdminLogEventActionChangeUsername":
            var tempObject = new(channelAdminLogEventActionChangeUsername)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelAdminLogEventActionChangePhoto":
            var tempObject = new(channelAdminLogEventActionChangePhoto)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelAdminLogEventActionToggleInvites":
            var tempObject = new(channelAdminLogEventActionToggleInvites)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelAdminLogEventActionToggleSignatures":
            var tempObject = new(channelAdminLogEventActionToggleSignatures)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelAdminLogEventActionUpdatePinned":
            var tempObject = new(channelAdminLogEventActionUpdatePinned)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelAdminLogEventActionEditMessage":
            var tempObject = new(channelAdminLogEventActionEditMessage)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelAdminLogEventActionDeleteMessage":
            var tempObject = new(channelAdminLogEventActionDeleteMessage)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelAdminLogEventActionParticipantJoin":
            var tempObject = new(channelAdminLogEventActionParticipantJoin)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelAdminLogEventActionParticipantLeave":
            var tempObject = new(channelAdminLogEventActionParticipantLeave)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelAdminLogEventActionParticipantInvite":
            var tempObject = new(channelAdminLogEventActionParticipantInvite)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelAdminLogEventActionParticipantToggleBan":
            var tempObject = new(channelAdminLogEventActionParticipantToggleBan)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelAdminLogEventActionParticipantToggleAdmin":
            var tempObject = new(channelAdminLogEventActionParticipantToggleAdmin)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelAdminLogEventActionChangeStickerSet":
            var tempObject = new(channelAdminLogEventActionChangeStickerSet)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelAdminLogEventActionTogglePreHistoryHidden":
            var tempObject = new(channelAdminLogEventActionTogglePreHistoryHidden)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelAdminLogEventActionDefaultBannedRights":
            var tempObject = new(channelAdminLogEventActionDefaultBannedRights)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelAdminLogEventActionStopPoll":
            var tempObject = new(channelAdminLogEventActionStopPoll)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelAdminLogEventActionChangeLinkedChat":
            var tempObject = new(channelAdminLogEventActionChangeLinkedChat)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelAdminLogEventActionChangeLocation":
            var tempObject = new(channelAdminLogEventActionChangeLocation)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelAdminLogEventActionToggleSlowMode":
            var tempObject = new(channelAdminLogEventActionToggleSlowMode)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "userFull":
            var tempObject = new(userFull)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "webDocument":
            var tempObject = new(webDocument)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "webDocumentNoProxy":
            var tempObject = new(webDocumentNoProxy)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "statsAbsValueAndPrev":
            var tempObject = new(statsAbsValueAndPrev)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "contacts_importedContacts":
            var tempObject = new(contacts_importedContacts)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "emojiLanguage":
            var tempObject = new(emojiLanguage)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputReportReasonSpam":
            var tempObject = new(inputReportReasonSpam)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputReportReasonViolence":
            var tempObject = new(inputReportReasonViolence)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputReportReasonPornography":
            var tempObject = new(inputReportReasonPornography)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputReportReasonChildAbuse":
            var tempObject = new(inputReportReasonChildAbuse)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputReportReasonOther":
            var tempObject = new(inputReportReasonOther)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputReportReasonCopyright":
            var tempObject = new(inputReportReasonCopyright)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputReportReasonGeoIrrelevant":
            var tempObject = new(inputReportReasonGeoIrrelevant)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "account_passwordInputSettings":
            var tempObject = new(account_passwordInputSettings)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelParticipant":
            var tempObject = new(channelParticipant)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelParticipantSelf":
            var tempObject = new(channelParticipantSelf)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelParticipantCreator":
            var tempObject = new(channelParticipantCreator)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelParticipantAdmin":
            var tempObject = new(channelParticipantAdmin)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelParticipantBanned":
            var tempObject = new(channelParticipantBanned)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelParticipantLeft":
            var tempObject = new(channelParticipantLeft)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputStickeredMediaPhoto":
            var tempObject = new(inputStickeredMediaPhoto)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputStickeredMediaDocument":
            var tempObject = new(inputStickeredMediaDocument)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputChannelEmpty":
            var tempObject = new(inputChannelEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputChannel":
            var tempObject = new(inputChannel)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputChannelFromMessage":
            var tempObject = new(inputChannelFromMessage)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messages_searchCounter":
            var tempObject = new(messages_searchCounter)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputDocumentEmpty":
            var tempObject = new(inputDocumentEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputDocument":
            var tempObject = new(inputDocument)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputEncryptedFileEmpty":
            var tempObject = new(inputEncryptedFileEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputEncryptedFileUploaded":
            var tempObject = new(inputEncryptedFileUploaded)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputEncryptedFile":
            var tempObject = new(inputEncryptedFile)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputEncryptedFileBigUploaded":
            var tempObject = new(inputEncryptedFileBigUploaded)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "account_privacyRules":
            var tempObject = new(account_privacyRules)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputThemeSettings":
            var tempObject = new(inputThemeSettings)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "payments_validatedRequestedInfo":
            var tempObject = new(payments_validatedRequestedInfo)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "account_authorizations":
            var tempObject = new(account_authorizations)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputPrivacyValueAllowContacts":
            var tempObject = new(inputPrivacyValueAllowContacts)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputPrivacyValueAllowAll":
            var tempObject = new(inputPrivacyValueAllowAll)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputPrivacyValueAllowUsers":
            var tempObject = new(inputPrivacyValueAllowUsers)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputPrivacyValueDisallowContacts":
            var tempObject = new(inputPrivacyValueDisallowContacts)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputPrivacyValueDisallowAll":
            var tempObject = new(inputPrivacyValueDisallowAll)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputPrivacyValueDisallowUsers":
            var tempObject = new(inputPrivacyValueDisallowUsers)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputPrivacyValueAllowChatParticipants":
            var tempObject = new(inputPrivacyValueAllowChatParticipants)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputPrivacyValueDisallowChatParticipants":
            var tempObject = new(inputPrivacyValueDisallowChatParticipants)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "stickerSet":
            var tempObject = new(stickerSet)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pollResults":
            var tempObject = new(pollResults)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "secureValue":
            var tempObject = new(secureValue)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelAdminLogEventsFilter":
            var tempObject = new(channelAdminLogEventsFilter)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "restrictionReason":
            var tempObject = new(restrictionReason)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputBotInlineResult":
            var tempObject = new(inputBotInlineResult)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputBotInlineResultPhoto":
            var tempObject = new(inputBotInlineResultPhoto)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputBotInlineResultDocument":
            var tempObject = new(inputBotInlineResultDocument)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputBotInlineResultGame":
            var tempObject = new(inputBotInlineResultGame)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "wallPaper":
            var tempObject = new(wallPaper)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "wallPaperNoFile":
            var tempObject = new(wallPaperNoFile)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "importedContact":
            var tempObject = new(importedContact)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "help_termsOfService":
            var tempObject = new(help_termsOfService)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "dataJSON":
            var tempObject = new(dataJSON)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "shippingOption":
            var tempObject = new(shippingOption)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMediaEmpty":
            var tempObject = new(inputMediaEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMediaUploadedPhoto":
            var tempObject = new(inputMediaUploadedPhoto)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMediaPhoto":
            var tempObject = new(inputMediaPhoto)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMediaGeoPoint":
            var tempObject = new(inputMediaGeoPoint)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMediaContact":
            var tempObject = new(inputMediaContact)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMediaUploadedDocument":
            var tempObject = new(inputMediaUploadedDocument)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMediaDocument":
            var tempObject = new(inputMediaDocument)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMediaVenue":
            var tempObject = new(inputMediaVenue)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMediaPhotoExternal":
            var tempObject = new(inputMediaPhotoExternal)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMediaDocumentExternal":
            var tempObject = new(inputMediaDocumentExternal)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMediaGame":
            var tempObject = new(inputMediaGame)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMediaInvoice":
            var tempObject = new(inputMediaInvoice)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMediaGeoLive":
            var tempObject = new(inputMediaGeoLive)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMediaPoll":
            var tempObject = new(inputMediaPoll)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMediaDice":
            var tempObject = new(inputMediaDice)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "exportedMessageLink":
            var tempObject = new(exportedMessageLink)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "paymentCharge":
            var tempObject = new(paymentCharge)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputNotifyPeer":
            var tempObject = new(inputNotifyPeer)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputNotifyUsers":
            var tempObject = new(inputNotifyUsers)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputNotifyChats":
            var tempObject = new(inputNotifyChats)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputNotifyBroadcasts":
            var tempObject = new(inputNotifyBroadcasts)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputStickerSetEmpty":
            var tempObject = new(inputStickerSetEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputStickerSetID":
            var tempObject = new(inputStickerSetID)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputStickerSetShortName":
            var tempObject = new(inputStickerSetShortName)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputStickerSetAnimatedEmoji":
            var tempObject = new(inputStickerSetAnimatedEmoji)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputStickerSetDice":
            var tempObject = new(inputStickerSetDice)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "payments_paymentForm":
            var tempObject = new(payments_paymentForm)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "langPackDifference":
            var tempObject = new(langPackDifference)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messages_dialogs":
            var tempObject = new(messages_dialogs)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messages_dialogsSlice":
            var tempObject = new(messages_dialogsSlice)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messages_dialogsNotModified":
            var tempObject = new(messages_dialogsNotModified)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageInteractionCounters":
            var tempObject = new(messageInteractionCounters)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "auth_sentCodeTypeApp":
            var tempObject = new(auth_sentCodeTypeApp)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "auth_sentCodeTypeSms":
            var tempObject = new(auth_sentCodeTypeSms)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "auth_sentCodeTypeCall":
            var tempObject = new(auth_sentCodeTypeCall)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "auth_sentCodeTypeFlashCall":
            var tempObject = new(auth_sentCodeTypeFlashCall)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "peerNotifySettings":
            var tempObject = new(peerNotifySettings)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "stickerSetCovered":
            var tempObject = new(stickerSetCovered)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "stickerSetMultiCovered":
            var tempObject = new(stickerSetMultiCovered)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messages_discussionMessage":
            var tempObject = new(messages_discussionMessage)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateNewMessage":
            var tempObject = new(updateNewMessage)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateMessageID":
            var tempObject = new(updateMessageID)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateDeleteMessages":
            var tempObject = new(updateDeleteMessages)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateUserTyping":
            var tempObject = new(updateUserTyping)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateChatUserTyping":
            var tempObject = new(updateChatUserTyping)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateChatParticipants":
            var tempObject = new(updateChatParticipants)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateUserStatus":
            var tempObject = new(updateUserStatus)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateUserName":
            var tempObject = new(updateUserName)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateUserPhoto":
            var tempObject = new(updateUserPhoto)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateNewEncryptedMessage":
            var tempObject = new(updateNewEncryptedMessage)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateEncryptedChatTyping":
            var tempObject = new(updateEncryptedChatTyping)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateEncryption":
            var tempObject = new(updateEncryption)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateEncryptedMessagesRead":
            var tempObject = new(updateEncryptedMessagesRead)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateChatParticipantAdd":
            var tempObject = new(updateChatParticipantAdd)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateChatParticipantDelete":
            var tempObject = new(updateChatParticipantDelete)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateDcOptions":
            var tempObject = new(updateDcOptions)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateNotifySettings":
            var tempObject = new(updateNotifySettings)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateServiceNotification":
            var tempObject = new(updateServiceNotification)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updatePrivacy":
            var tempObject = new(updatePrivacy)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateUserPhone":
            var tempObject = new(updateUserPhone)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateReadHistoryInbox":
            var tempObject = new(updateReadHistoryInbox)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateReadHistoryOutbox":
            var tempObject = new(updateReadHistoryOutbox)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateWebPage":
            var tempObject = new(updateWebPage)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateReadMessagesContents":
            var tempObject = new(updateReadMessagesContents)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateChannelTooLong":
            var tempObject = new(updateChannelTooLong)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateChannel":
            var tempObject = new(updateChannel)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateNewChannelMessage":
            var tempObject = new(updateNewChannelMessage)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateReadChannelInbox":
            var tempObject = new(updateReadChannelInbox)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateDeleteChannelMessages":
            var tempObject = new(updateDeleteChannelMessages)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateChannelMessageViews":
            var tempObject = new(updateChannelMessageViews)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateChatParticipantAdmin":
            var tempObject = new(updateChatParticipantAdmin)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateNewStickerSet":
            var tempObject = new(updateNewStickerSet)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateStickerSetsOrder":
            var tempObject = new(updateStickerSetsOrder)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateStickerSets":
            var tempObject = new(updateStickerSets)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateSavedGifs":
            var tempObject = new(updateSavedGifs)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateBotInlineQuery":
            var tempObject = new(updateBotInlineQuery)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateBotInlineSend":
            var tempObject = new(updateBotInlineSend)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateEditChannelMessage":
            var tempObject = new(updateEditChannelMessage)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateBotCallbackQuery":
            var tempObject = new(updateBotCallbackQuery)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateEditMessage":
            var tempObject = new(updateEditMessage)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateInlineBotCallbackQuery":
            var tempObject = new(updateInlineBotCallbackQuery)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateReadChannelOutbox":
            var tempObject = new(updateReadChannelOutbox)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateDraftMessage":
            var tempObject = new(updateDraftMessage)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateReadFeaturedStickers":
            var tempObject = new(updateReadFeaturedStickers)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateRecentStickers":
            var tempObject = new(updateRecentStickers)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateConfig":
            var tempObject = new(updateConfig)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updatePtsChanged":
            var tempObject = new(updatePtsChanged)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateChannelWebPage":
            var tempObject = new(updateChannelWebPage)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateDialogPinned":
            var tempObject = new(updateDialogPinned)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updatePinnedDialogs":
            var tempObject = new(updatePinnedDialogs)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateBotWebhookJSON":
            var tempObject = new(updateBotWebhookJSON)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateBotWebhookJSONQuery":
            var tempObject = new(updateBotWebhookJSONQuery)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateBotShippingQuery":
            var tempObject = new(updateBotShippingQuery)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateBotPrecheckoutQuery":
            var tempObject = new(updateBotPrecheckoutQuery)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updatePhoneCall":
            var tempObject = new(updatePhoneCall)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateLangPackTooLong":
            var tempObject = new(updateLangPackTooLong)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateLangPack":
            var tempObject = new(updateLangPack)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateFavedStickers":
            var tempObject = new(updateFavedStickers)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateChannelReadMessagesContents":
            var tempObject = new(updateChannelReadMessagesContents)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateContactsReset":
            var tempObject = new(updateContactsReset)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateChannelAvailableMessages":
            var tempObject = new(updateChannelAvailableMessages)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateDialogUnreadMark":
            var tempObject = new(updateDialogUnreadMark)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateMessagePoll":
            var tempObject = new(updateMessagePoll)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateChatDefaultBannedRights":
            var tempObject = new(updateChatDefaultBannedRights)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateFolderPeers":
            var tempObject = new(updateFolderPeers)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updatePeerSettings":
            var tempObject = new(updatePeerSettings)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updatePeerLocated":
            var tempObject = new(updatePeerLocated)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateNewScheduledMessage":
            var tempObject = new(updateNewScheduledMessage)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateDeleteScheduledMessages":
            var tempObject = new(updateDeleteScheduledMessages)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateTheme":
            var tempObject = new(updateTheme)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateGeoLiveViewed":
            var tempObject = new(updateGeoLiveViewed)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateLoginToken":
            var tempObject = new(updateLoginToken)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateMessagePollVote":
            var tempObject = new(updateMessagePollVote)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateDialogFilter":
            var tempObject = new(updateDialogFilter)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateDialogFilterOrder":
            var tempObject = new(updateDialogFilterOrder)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateDialogFilters":
            var tempObject = new(updateDialogFilters)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updatePhoneCallSignalingData":
            var tempObject = new(updatePhoneCallSignalingData)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateChannelParticipant":
            var tempObject = new(updateChannelParticipant)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateChannelMessageForwards":
            var tempObject = new(updateChannelMessageForwards)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateReadChannelDiscussionInbox":
            var tempObject = new(updateReadChannelDiscussionInbox)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateReadChannelDiscussionOutbox":
            var tempObject = new(updateReadChannelDiscussionOutbox)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updatePeerBlocked":
            var tempObject = new(updatePeerBlocked)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateChannelUserTyping":
            var tempObject = new(updateChannelUserTyping)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updatePinnedMessages":
            var tempObject = new(updatePinnedMessages)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updatePinnedChannelMessages":
            var tempObject = new(updatePinnedChannelMessages)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "topPeerCategoryPeers":
            var tempObject = new(topPeerCategoryPeers)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "auth_sentCode":
            var tempObject = new(auth_sentCode)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "chatInviteEmpty":
            var tempObject = new(chatInviteEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "chatInviteExported":
            var tempObject = new(chatInviteExported)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "account_themesNotModified":
            var tempObject = new(account_themesNotModified)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "account_themes":
            var tempObject = new(account_themes)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "help_country":
            var tempObject = new(help_country)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messages_inactiveChats":
            var tempObject = new(messages_inactiveChats)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "phoneCallDiscardReasonMissed":
            var tempObject = new(phoneCallDiscardReasonMissed)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "phoneCallDiscardReasonDisconnect":
            var tempObject = new(phoneCallDiscardReasonDisconnect)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "phoneCallDiscardReasonHangup":
            var tempObject = new(phoneCallDiscardReasonHangup)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "phoneCallDiscardReasonBusy":
            var tempObject = new(phoneCallDiscardReasonBusy)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "stats_broadcastStats":
            var tempObject = new(stats_broadcastStats)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "account_tmpPassword":
            var tempObject = new(account_tmpPassword)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputPaymentCredentialsSaved":
            var tempObject = new(inputPaymentCredentialsSaved)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputPaymentCredentials":
            var tempObject = new(inputPaymentCredentials)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputPaymentCredentialsApplePay":
            var tempObject = new(inputPaymentCredentialsApplePay)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputPaymentCredentialsAndroidPay":
            var tempObject = new(inputPaymentCredentialsAndroidPay)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "themeSettings":
            var tempObject = new(themeSettings)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "botInfo":
            var tempObject = new(botInfo)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pollAnswer":
            var tempObject = new(pollAnswer)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "dialog":
            var tempObject = new(dialog)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "dialogFolder":
            var tempObject = new(dialogFolder)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pageListOrderedItemText":
            var tempObject = new(pageListOrderedItemText)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pageListOrderedItemBlocks":
            var tempObject = new(pageListOrderedItemBlocks)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "paymentSavedCredentialsCard":
            var tempObject = new(paymentSavedCredentialsCard)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "keyboardButtonRow":
            var tempObject = new(keyboardButtonRow)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inlineBotSwitchPM":
            var tempObject = new(inlineBotSwitchPM)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messages_highScores":
            var tempObject = new(messages_highScores)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messages_affectedHistory":
            var tempObject = new(messages_affectedHistory)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "fileLocationToBeDeprecated":
            var tempObject = new(fileLocationToBeDeprecated)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "nearestDc":
            var tempObject = new(nearestDc)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputSingleMedia":
            var tempObject = new(inputSingleMedia)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "userEmpty":
            var tempObject = new(userEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "user":
            var tempObject = new(user)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "langPackLanguage":
            var tempObject = new(langPackLanguage)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "langPackString":
            var tempObject = new(langPackString)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "langPackStringPluralized":
            var tempObject = new(langPackStringPluralized)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "langPackStringDeleted":
            var tempObject = new(langPackStringDeleted)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "webPageAttributeTheme":
            var tempObject = new(webPageAttributeTheme)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "notifyPeer":
            var tempObject = new(notifyPeer)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "notifyUsers":
            var tempObject = new(notifyUsers)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "notifyChats":
            var tempObject = new(notifyChats)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "notifyBroadcasts":
            var tempObject = new(notifyBroadcasts)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputDialogPeer":
            var tempObject = new(inputDialogPeer)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputDialogPeerFolder":
            var tempObject = new(inputDialogPeerFolder)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "payments_bankCardData":
            var tempObject = new(payments_bankCardData)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "statsPercentValue":
            var tempObject = new(statsPercentValue)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "contacts_topPeersNotModified":
            var tempObject = new(contacts_topPeersNotModified)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "contacts_topPeers":
            var tempObject = new(contacts_topPeers)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "contacts_topPeersDisabled":
            var tempObject = new(contacts_topPeersDisabled)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "contacts_blocked":
            var tempObject = new(contacts_blocked)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "contacts_blockedSlice":
            var tempObject = new(contacts_blockedSlice)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "dcOption":
            var tempObject = new(dcOption)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "savedPhoneContact":
            var tempObject = new(savedPhoneContact)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pageCaption":
            var tempObject = new(pageCaption)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "upload_webFile":
            var tempObject = new(upload_webFile)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "account_autoDownloadSettings":
            var tempObject = new(account_autoDownloadSettings)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messages_votesList":
            var tempObject = new(messages_votesList)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messages_stickersNotModified":
            var tempObject = new(messages_stickersNotModified)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messages_stickers":
            var tempObject = new(messages_stickers)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelMessagesFilterEmpty":
            var tempObject = new(channelMessagesFilterEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelMessagesFilter":
            var tempObject = new(channelMessagesFilter)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputPeerNotifySettings":
            var tempObject = new(inputPeerNotifySettings)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "invoice":
            var tempObject = new(invoice)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "phoneConnection":
            var tempObject = new(phoneConnection)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "phoneConnectionWebrtc":
            var tempObject = new(phoneConnectionWebrtc)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputPhoneContact":
            var tempObject = new(inputPhoneContact)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messages_sentEncryptedMessage":
            var tempObject = new(messages_sentEncryptedMessage)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messages_sentEncryptedFile":
            var tempObject = new(messages_sentEncryptedFile)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channels_adminLogResults":
            var tempObject = new(channels_adminLogResults)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "wallPaperSettings":
            var tempObject = new(wallPaperSettings)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "storage_fileUnknown":
            var tempObject = new(storage_fileUnknown)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "storage_filePartial":
            var tempObject = new(storage_filePartial)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "storage_fileJpeg":
            var tempObject = new(storage_fileJpeg)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "storage_fileGif":
            var tempObject = new(storage_fileGif)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "storage_filePng":
            var tempObject = new(storage_filePng)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "storage_filePdf":
            var tempObject = new(storage_filePdf)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "storage_fileMp3":
            var tempObject = new(storage_fileMp3)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "storage_fileMov":
            var tempObject = new(storage_fileMov)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "storage_fileMp4":
            var tempObject = new(storage_fileMp4)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "storage_fileWebp":
            var tempObject = new(storage_fileWebp)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputTheme":
            var tempObject = new(inputTheme)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputThemeSlug":
            var tempObject = new(inputThemeSlug)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageReplyHeader":
            var tempObject = new(messageReplyHeader)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messages_affectedMessages":
            var tempObject = new(messages_affectedMessages)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "labeledPrice":
            var tempObject = new(labeledPrice)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "contacts_resolvedPeer":
            var tempObject = new(contacts_resolvedPeer)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messages_peerDialogs":
            var tempObject = new(messages_peerDialogs)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageRange":
            var tempObject = new(messageRange)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "postAddress":
            var tempObject = new(postAddress)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "geoPointEmpty":
            var tempObject = new(geoPointEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "geoPoint":
            var tempObject = new(geoPoint)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "upload_cdnFileReuploadNeeded":
            var tempObject = new(upload_cdnFileReuploadNeeded)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "upload_cdnFile":
            var tempObject = new(upload_cdnFile)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "help_support":
            var tempObject = new(help_support)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "peerBlocked":
            var tempObject = new(peerBlocked)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputFolderPeer":
            var tempObject = new(inputFolderPeer)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "cdnPublicKey":
            var tempObject = new(cdnPublicKey)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageMediaEmpty":
            var tempObject = new(messageMediaEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageMediaPhoto":
            var tempObject = new(messageMediaPhoto)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageMediaGeo":
            var tempObject = new(messageMediaGeo)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageMediaContact":
            var tempObject = new(messageMediaContact)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageMediaUnsupported":
            var tempObject = new(messageMediaUnsupported)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageMediaDocument":
            var tempObject = new(messageMediaDocument)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageMediaWebPage":
            var tempObject = new(messageMediaWebPage)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageMediaVenue":
            var tempObject = new(messageMediaVenue)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageMediaGame":
            var tempObject = new(messageMediaGame)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageMediaInvoice":
            var tempObject = new(messageMediaInvoice)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageMediaGeoLive":
            var tempObject = new(messageMediaGeoLive)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageMediaPoll":
            var tempObject = new(messageMediaPoll)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageMediaDice":
            var tempObject = new(messageMediaDice)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "chatEmpty":
            var tempObject = new(chatEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "chat":
            var tempObject = new(chat)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "chatForbidden":
            var tempObject = new(chatForbidden)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channel":
            var tempObject = new(channel)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelForbidden":
            var tempObject = new(channelForbidden)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "help_recentMeUrls":
            var tempObject = new(help_recentMeUrls)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "userProfilePhotoEmpty":
            var tempObject = new(userProfilePhotoEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "userProfilePhoto":
            var tempObject = new(userProfilePhoto)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputGeoPointEmpty":
            var tempObject = new(inputGeoPointEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputGeoPoint":
            var tempObject = new(inputGeoPoint)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "contactStatus":
            var tempObject = new(contactStatus)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "contacts_found":
            var tempObject = new(contacts_found)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "globalPrivacySettings":
            var tempObject = new(globalPrivacySettings)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputPeerEmpty":
            var tempObject = new(inputPeerEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputPeerSelf":
            var tempObject = new(inputPeerSelf)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputPeerChat":
            var tempObject = new(inputPeerChat)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputPeerUser":
            var tempObject = new(inputPeerUser)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputPeerChannel":
            var tempObject = new(inputPeerChannel)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputPeerUserFromMessage":
            var tempObject = new(inputPeerUserFromMessage)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputPeerChannelFromMessage":
            var tempObject = new(inputPeerChannelFromMessage)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "draftMessageEmpty":
            var tempObject = new(draftMessageEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "draftMessage":
            var tempObject = new(draftMessage)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "account_sentEmailCode":
            var tempObject = new(account_sentEmailCode)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputBotInlineMessageMediaAuto":
            var tempObject = new(inputBotInlineMessageMediaAuto)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputBotInlineMessageText":
            var tempObject = new(inputBotInlineMessageText)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputBotInlineMessageMediaGeo":
            var tempObject = new(inputBotInlineMessageMediaGeo)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputBotInlineMessageMediaVenue":
            var tempObject = new(inputBotInlineMessageMediaVenue)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputBotInlineMessageMediaContact":
            var tempObject = new(inputBotInlineMessageMediaContact)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputBotInlineMessageGame":
            var tempObject = new(inputBotInlineMessageGame)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "chatFull":
            var tempObject = new(chatFull)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelFull":
            var tempObject = new(channelFull)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "accountDaysTTL":
            var tempObject = new(accountDaysTTL)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messages_chats":
            var tempObject = new(messages_chats)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messages_chatsSlice":
            var tempObject = new(messages_chatsSlice)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "recentMeUrlUnknown":
            var tempObject = new(recentMeUrlUnknown)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "recentMeUrlUser":
            var tempObject = new(recentMeUrlUser)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "recentMeUrlChat":
            var tempObject = new(recentMeUrlChat)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "recentMeUrlChatInvite":
            var tempObject = new(recentMeUrlChatInvite)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "recentMeUrlStickerSet":
            var tempObject = new(recentMeUrlStickerSet)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "auth_loginToken":
            var tempObject = new(auth_loginToken)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "auth_loginTokenMigrateTo":
            var tempObject = new(auth_loginTokenMigrateTo)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "auth_loginTokenSuccess":
            var tempObject = new(auth_loginTokenSuccess)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messages_messageViews":
            var tempObject = new(messages_messageViews)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputFileLocation":
            var tempObject = new(inputFileLocation)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputEncryptedFileLocation":
            var tempObject = new(inputEncryptedFileLocation)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputDocumentFileLocation":
            var tempObject = new(inputDocumentFileLocation)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputSecureFileLocation":
            var tempObject = new(inputSecureFileLocation)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputTakeoutFileLocation":
            var tempObject = new(inputTakeoutFileLocation)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputPhotoFileLocation":
            var tempObject = new(inputPhotoFileLocation)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputPhotoLegacyFileLocation":
            var tempObject = new(inputPhotoLegacyFileLocation)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputPeerPhotoFileLocation":
            var tempObject = new(inputPeerPhotoFileLocation)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputStickerSetThumb":
            var tempObject = new(inputStickerSetThumb)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "help_appUpdate":
            var tempObject = new(help_appUpdate)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "help_noAppUpdate":
            var tempObject = new(help_noAppUpdate)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "popularContact":
            var tempObject = new(popularContact)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "emojiURL":
            var tempObject = new(emojiURL)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMessagesFilterEmpty":
            var tempObject = new(inputMessagesFilterEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMessagesFilterPhotos":
            var tempObject = new(inputMessagesFilterPhotos)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMessagesFilterVideo":
            var tempObject = new(inputMessagesFilterVideo)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMessagesFilterPhotoVideo":
            var tempObject = new(inputMessagesFilterPhotoVideo)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMessagesFilterDocument":
            var tempObject = new(inputMessagesFilterDocument)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMessagesFilterUrl":
            var tempObject = new(inputMessagesFilterUrl)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMessagesFilterGif":
            var tempObject = new(inputMessagesFilterGif)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMessagesFilterVoice":
            var tempObject = new(inputMessagesFilterVoice)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMessagesFilterMusic":
            var tempObject = new(inputMessagesFilterMusic)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMessagesFilterChatPhotos":
            var tempObject = new(inputMessagesFilterChatPhotos)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMessagesFilterPhoneCalls":
            var tempObject = new(inputMessagesFilterPhoneCalls)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMessagesFilterRoundVoice":
            var tempObject = new(inputMessagesFilterRoundVoice)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMessagesFilterRoundVideo":
            var tempObject = new(inputMessagesFilterRoundVideo)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMessagesFilterMyMentions":
            var tempObject = new(inputMessagesFilterMyMentions)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMessagesFilterGeo":
            var tempObject = new(inputMessagesFilterGeo)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMessagesFilterContacts":
            var tempObject = new(inputMessagesFilterContacts)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputMessagesFilterPinned":
            var tempObject = new(inputMessagesFilterPinned)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "codeSettings":
            var tempObject = new(codeSettings)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messages_messageEditData":
            var tempObject = new(messages_messageEditData)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "help_countriesListNotModified":
            var tempObject = new(help_countriesListNotModified)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "help_countriesList":
            var tempObject = new(help_countriesList)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageReplies":
            var tempObject = new(messageReplies)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "account_authorizationForm":
            var tempObject = new(account_authorizationForm)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messages_dhConfigNotModified":
            var tempObject = new(messages_dhConfigNotModified)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messages_dhConfig":
            var tempObject = new(messages_dhConfig)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "account_takeout":
            var tempObject = new(account_takeout)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updatesTooLong":
            var tempObject = new(updatesTooLong)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateShortMessage":
            var tempObject = new(updateShortMessage)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateShortChatMessage":
            var tempObject = new(updateShortChatMessage)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateShort":
            var tempObject = new(updateShort)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updatesCombined":
            var tempObject = new(updatesCombined)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updates":
            var tempObject = new(updates)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "updateShortSentMessage":
            var tempObject = new(updateShortSentMessage)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageFwdHeader":
            var tempObject = new(messageFwdHeader)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "authorization":
            var tempObject = new(authorization)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "help_termsOfServiceUpdateEmpty":
            var tempObject = new(help_termsOfServiceUpdateEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "help_termsOfServiceUpdate":
            var tempObject = new(help_termsOfServiceUpdate)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pageTableCell":
            var tempObject = new(pageTableCell)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "account_contentSettings":
            var tempObject = new(account_contentSettings)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "account_webAuthorizations":
            var tempObject = new(account_webAuthorizations)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "secureValueHash":
            var tempObject = new(secureValueHash)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "paymentRequestedInfo":
            var tempObject = new(paymentRequestedInfo)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "phoneCallEmpty":
            var tempObject = new(phoneCallEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "phoneCallWaiting":
            var tempObject = new(phoneCallWaiting)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "phoneCallRequested":
            var tempObject = new(phoneCallRequested)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "phoneCallAccepted":
            var tempObject = new(phoneCallAccepted)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "phoneCall":
            var tempObject = new(phoneCall)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "phoneCallDiscarded":
            var tempObject = new(phoneCallDiscarded)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputPrivacyKeyStatusTimestamp":
            var tempObject = new(inputPrivacyKeyStatusTimestamp)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputPrivacyKeyChatInvite":
            var tempObject = new(inputPrivacyKeyChatInvite)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputPrivacyKeyPhoneCall":
            var tempObject = new(inputPrivacyKeyPhoneCall)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputPrivacyKeyPhoneP2P":
            var tempObject = new(inputPrivacyKeyPhoneP2P)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputPrivacyKeyForwards":
            var tempObject = new(inputPrivacyKeyForwards)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputPrivacyKeyProfilePhoto":
            var tempObject = new(inputPrivacyKeyProfilePhoto)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputPrivacyKeyPhoneNumber":
            var tempObject = new(inputPrivacyKeyPhoneNumber)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputPrivacyKeyAddedByPhone":
            var tempObject = new(inputPrivacyKeyAddedByPhone)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "maskCoords":
            var tempObject = new(maskCoords)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "privacyValueAllowContacts":
            var tempObject = new(privacyValueAllowContacts)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "privacyValueAllowAll":
            var tempObject = new(privacyValueAllowAll)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "privacyValueAllowUsers":
            var tempObject = new(privacyValueAllowUsers)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "privacyValueDisallowContacts":
            var tempObject = new(privacyValueDisallowContacts)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "privacyValueDisallowAll":
            var tempObject = new(privacyValueDisallowAll)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "privacyValueDisallowUsers":
            var tempObject = new(privacyValueDisallowUsers)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "privacyValueAllowChatParticipants":
            var tempObject = new(privacyValueAllowChatParticipants)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "privacyValueDisallowChatParticipants":
            var tempObject = new(privacyValueDisallowChatParticipants)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pageBlockUnsupported":
            var tempObject = new(pageBlockUnsupported)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pageBlockTitle":
            var tempObject = new(pageBlockTitle)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pageBlockSubtitle":
            var tempObject = new(pageBlockSubtitle)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pageBlockAuthorDate":
            var tempObject = new(pageBlockAuthorDate)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pageBlockHeader":
            var tempObject = new(pageBlockHeader)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pageBlockSubheader":
            var tempObject = new(pageBlockSubheader)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pageBlockParagraph":
            var tempObject = new(pageBlockParagraph)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pageBlockPreformatted":
            var tempObject = new(pageBlockPreformatted)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pageBlockFooter":
            var tempObject = new(pageBlockFooter)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pageBlockDivider":
            var tempObject = new(pageBlockDivider)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pageBlockAnchor":
            var tempObject = new(pageBlockAnchor)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pageBlockList":
            var tempObject = new(pageBlockList)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pageBlockBlockquote":
            var tempObject = new(pageBlockBlockquote)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pageBlockPullquote":
            var tempObject = new(pageBlockPullquote)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pageBlockPhoto":
            var tempObject = new(pageBlockPhoto)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pageBlockVideo":
            var tempObject = new(pageBlockVideo)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pageBlockCover":
            var tempObject = new(pageBlockCover)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pageBlockEmbed":
            var tempObject = new(pageBlockEmbed)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pageBlockEmbedPost":
            var tempObject = new(pageBlockEmbedPost)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pageBlockCollage":
            var tempObject = new(pageBlockCollage)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pageBlockSlideshow":
            var tempObject = new(pageBlockSlideshow)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pageBlockChannel":
            var tempObject = new(pageBlockChannel)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pageBlockAudio":
            var tempObject = new(pageBlockAudio)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pageBlockKicker":
            var tempObject = new(pageBlockKicker)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pageBlockTable":
            var tempObject = new(pageBlockTable)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pageBlockOrderedList":
            var tempObject = new(pageBlockOrderedList)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pageBlockDetails":
            var tempObject = new(pageBlockDetails)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pageBlockRelatedArticles":
            var tempObject = new(pageBlockRelatedArticles)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "pageBlockMap":
            var tempObject = new(pageBlockMap)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "chatPhotoEmpty":
            var tempObject = new(chatPhotoEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "chatPhoto":
            var tempObject = new(chatPhoto)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "contacts_contactsNotModified":
            var tempObject = new(contacts_contactsNotModified)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "contacts_contacts":
            var tempObject = new(contacts_contacts)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "encryptedChatEmpty":
            var tempObject = new(encryptedChatEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "encryptedChatWaiting":
            var tempObject = new(encryptedChatWaiting)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "encryptedChatRequested":
            var tempObject = new(encryptedChatRequested)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "encryptedChat":
            var tempObject = new(encryptedChat)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "encryptedChatDiscarded":
            var tempObject = new(encryptedChatDiscarded)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messages_chatFull":
            var tempObject = new(messages_chatFull)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "replyKeyboardHide":
            var tempObject = new(replyKeyboardHide)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "replyKeyboardForceReply":
            var tempObject = new(replyKeyboardForceReply)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "replyKeyboardMarkup":
            var tempObject = new(replyKeyboardMarkup)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "replyInlineMarkup":
            var tempObject = new(replyInlineMarkup)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "statsURL":
            var tempObject = new(statsURL)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "statsGraphAsync":
            var tempObject = new(statsGraphAsync)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "statsGraphError":
            var tempObject = new(statsGraphError)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "statsGraph":
            var tempObject = new(statsGraph)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageEmpty":
            var tempObject = new(messageEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "message":
            var tempObject = new(message)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "messageService":
            var tempObject = new(messageService)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "documentEmpty":
            var tempObject = new(documentEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "document":
            var tempObject = new(document)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "statsGroupTopInviter":
            var tempObject = new(statsGroupTopInviter)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputAppEvent":
            var tempObject = new(inputAppEvent)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "secureValueTypePersonalDetails":
            var tempObject = new(secureValueTypePersonalDetails)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "secureValueTypePassport":
            var tempObject = new(secureValueTypePassport)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "secureValueTypeDriverLicense":
            var tempObject = new(secureValueTypeDriverLicense)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "secureValueTypeIdentityCard":
            var tempObject = new(secureValueTypeIdentityCard)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "secureValueTypeInternalPassport":
            var tempObject = new(secureValueTypeInternalPassport)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "secureValueTypeAddress":
            var tempObject = new(secureValueTypeAddress)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "secureValueTypeUtilityBill":
            var tempObject = new(secureValueTypeUtilityBill)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "secureValueTypeBankStatement":
            var tempObject = new(secureValueTypeBankStatement)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "secureValueTypeRentalAgreement":
            var tempObject = new(secureValueTypeRentalAgreement)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "secureValueTypePassportRegistration":
            var tempObject = new(secureValueTypePassportRegistration)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "secureValueTypeTemporaryRegistration":
            var tempObject = new(secureValueTypeTemporaryRegistration)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "secureValueTypePhone":
            var tempObject = new(secureValueTypePhone)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "secureValueTypeEmail":
            var tempObject = new(secureValueTypeEmail)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "botInlineResult":
            var tempObject = new(botInlineResult)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "botInlineMediaResult":
            var tempObject = new(botInlineMediaResult)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "sendMessageTypingAction":
            var tempObject = new(sendMessageTypingAction)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "sendMessageCancelAction":
            var tempObject = new(sendMessageCancelAction)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "sendMessageRecordVideoAction":
            var tempObject = new(sendMessageRecordVideoAction)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "sendMessageUploadVideoAction":
            var tempObject = new(sendMessageUploadVideoAction)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "sendMessageRecordAudioAction":
            var tempObject = new(sendMessageRecordAudioAction)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "sendMessageUploadAudioAction":
            var tempObject = new(sendMessageUploadAudioAction)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "sendMessageUploadPhotoAction":
            var tempObject = new(sendMessageUploadPhotoAction)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "sendMessageUploadDocumentAction":
            var tempObject = new(sendMessageUploadDocumentAction)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "sendMessageGeoLocationAction":
            var tempObject = new(sendMessageGeoLocationAction)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "sendMessageChooseContactAction":
            var tempObject = new(sendMessageChooseContactAction)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "sendMessageGamePlayAction":
            var tempObject = new(sendMessageGamePlayAction)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "sendMessageRecordRoundAction":
            var tempObject = new(sendMessageRecordRoundAction)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "sendMessageUploadRoundAction":
            var tempObject = new(sendMessageUploadRoundAction)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "help_deepLinkInfoEmpty":
            var tempObject = new(help_deepLinkInfoEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "help_deepLinkInfo":
            var tempObject = new(help_deepLinkInfo)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "secureFileEmpty":
            var tempObject = new(secureFileEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "secureFile":
            var tempObject = new(secureFile)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "inputStickerSetItem":
            var tempObject = new(inputStickerSetItem)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "emojiKeyword":
            var tempObject = new(emojiKeyword)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "emojiKeywordDeleted":
            var tempObject = new(emojiKeywordDeleted)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "peerSettings":
            var tempObject = new(peerSettings)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "chatBannedRights":
            var tempObject = new(chatBannedRights)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "botInlineMessageMediaAuto":
            var tempObject = new(botInlineMessageMediaAuto)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "botInlineMessageText":
            var tempObject = new(botInlineMessageText)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "botInlineMessageMediaGeo":
            var tempObject = new(botInlineMessageMediaGeo)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "botInlineMessageMediaVenue":
            var tempObject = new(botInlineMessageMediaVenue)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "botInlineMessageMediaContact":
            var tempObject = new(botInlineMessageMediaContact)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "peerLocated":
            var tempObject = new(peerLocated)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "peerSelfLocated":
            var tempObject = new(peerSelfLocated)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelLocationEmpty":
            var tempObject = new(channelLocationEmpty)
            self.TlDecode(tempObject)
            obj.add(tempObject)
        if FromID.toTable[id] == "channelLocation":
            var tempObject = new(channelLocation)
            self.TlDecode(tempObject)
            obj.add(tempObject)

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPeerEmpty) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPeerSelf) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPeerChat) = 
    self.TLDecode(addr obj.chat_id)

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPeerUser) = 
    self.TLDecode(addr obj.user_id)
    self.TLDecode(addr obj.access_hash)

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPeerChannel) = 
    self.TLDecode(addr obj.channel_id)
    self.TLDecode(addr obj.access_hash)

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPeerUserFromMessage) = 
    self.TLDecode(obj.peer)
    self.TLDecode(addr obj.msg_id)
    self.TLDecode(addr obj.user_id)

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPeerChannelFromMessage) = 
    self.TLDecode(obj.peer)
    self.TLDecode(addr obj.msg_id)
    self.TLDecode(addr obj.channel_id)

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputUserEmpty) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputUserSelf) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputUser) = 
    self.TLDecode(addr obj.user_id)
    self.TLDecode(addr obj.access_hash)

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputUserFromMessage) = 
    self.TLDecode(obj.peer)
    self.TLDecode(addr obj.msg_id)
    self.TLDecode(addr obj.user_id)

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPhoneContact) = 
    self.TLDecode(addr obj.client_id)
    obj.phone = cast[string](self.TLDecode())
    obj.first_name = cast[string](self.TLDecode())
    obj.last_name = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputFile) = 
    self.TLDecode(addr obj.id)
    self.TLDecode(addr obj.parts)
    obj.name = cast[string](self.TLDecode())
    obj.md5_checksum = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputFileBig) = 
    self.TLDecode(addr obj.id)
    self.TLDecode(addr obj.parts)
    obj.name = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMediaEmpty) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMediaUploadedPhoto) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(obj.file)
    if (obj.flags and (1 shl 0)) != 0:

        var tempInputDocumentI: seq[InputDocumentI]
        self.TLDecode(tempInputDocumentI)
        obj.stickers = some(tempInputDocumentI)

    if (obj.flags and (1 shl 1)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.ttl_seconds = some(tempint32)


proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMediaPhoto) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(obj.id)
    if (obj.flags and (1 shl 0)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.ttl_seconds = some(tempint32)


proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMediaGeoPoint) = 
    self.TLDecode(obj.geo_point)

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMediaContact) = 
    obj.phone_number = cast[string](self.TLDecode())
    obj.first_name = cast[string](self.TLDecode())
    obj.last_name = cast[string](self.TLDecode())
    obj.vcard = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMediaUploadedDocument) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(obj.file)
    if (obj.flags and (1 shl 2)) != 0:

        var tempInputFileI: InputFileI
        self.TLDecode(tempInputFileI)
        obj.thumb = some(tempInputFileI)

    obj.mime_type = cast[string](self.TLDecode())
    self.TLDecode(obj.attributes)
    if (obj.flags and (1 shl 0)) != 0:

        var tempInputDocumentI: seq[InputDocumentI]
        self.TLDecode(tempInputDocumentI)
        obj.stickers = some(tempInputDocumentI)

    if (obj.flags and (1 shl 1)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.ttl_seconds = some(tempint32)


proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMediaDocument) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(obj.id)
    if (obj.flags and (1 shl 0)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.ttl_seconds = some(tempint32)


proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMediaVenue) = 
    self.TLDecode(obj.geo_point)
    obj.title = cast[string](self.TLDecode())
    obj.address = cast[string](self.TLDecode())
    obj.provider = cast[string](self.TLDecode())
    obj.venue_id = cast[string](self.TLDecode())
    obj.venue_type = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMediaPhotoExternal) = 
    self.TLDecode(addr obj.flags)
    obj.url = cast[string](self.TLDecode())
    if (obj.flags and (1 shl 0)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.ttl_seconds = some(tempint32)


proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMediaDocumentExternal) = 
    self.TLDecode(addr obj.flags)
    obj.url = cast[string](self.TLDecode())
    if (obj.flags and (1 shl 0)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.ttl_seconds = some(tempint32)


proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMediaGame) = 
    self.TLDecode(obj.id)

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMediaInvoice) = 
    self.TLDecode(addr obj.flags)
    obj.title = cast[string](self.TLDecode())
    obj.description = cast[string](self.TLDecode())
    if (obj.flags and (1 shl 0)) != 0:

        var tempInputWebDocumentI: InputWebDocumentI
        self.TLDecode(tempInputWebDocumentI)
        obj.photo = some(tempInputWebDocumentI)

    self.TLDecode(obj.invoice)
    obj.payload = self.TLDecode()
    obj.provider = cast[string](self.TLDecode())
    self.TLDecode(obj.provider_data)
    obj.start_param = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMediaGeoLive) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(obj.geo_point)
    if (obj.flags and (1 shl 2)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.heading = some(tempint32)

    if (obj.flags and (1 shl 1)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.period = some(tempint32)

    if (obj.flags and (1 shl 3)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.proximity_notification_radius = some(tempint32)


proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMediaPoll) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(obj.poll)
    if (obj.flags and (1 shl 0)) != 0:

        obj.correct_answers = some(self.TLDecodeSeq())

    if (obj.flags and (1 shl 1)) != 0:

        obj.solution = some(cast[string](self.TLDecode()))

    if (obj.flags and (1 shl 1)) != 0:

        var tempMessageEntityI: seq[MessageEntityI]
        self.TLDecode(tempMessageEntityI)
        obj.solution_entities = some(tempMessageEntityI)


proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMediaDice) = 
    obj.emoticon = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputChatPhotoEmpty) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputChatUploadedPhoto) = 
    self.TLDecode(addr obj.flags)
    if (obj.flags and (1 shl 0)) != 0:

        var tempInputFileI: InputFileI
        self.TLDecode(tempInputFileI)
        obj.file = some(tempInputFileI)

    if (obj.flags and (1 shl 1)) != 0:

        var tempInputFileI: InputFileI
        self.TLDecode(tempInputFileI)
        obj.video = some(tempInputFileI)

    if (obj.flags and (1 shl 2)) != 0:

        var tempfloat64: float64 = 0
        self.TLDecode(addr tempfloat64)
        obj.video_start_ts = some(tempfloat64)


proc TLDecode*(self: var ScalingSeq[uint8], obj: inputChatPhoto) = 
    self.TLDecode(obj.id)

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputGeoPointEmpty) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputGeoPoint) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(addr obj.lat)
    self.TLDecode(addr obj.long)
    if (obj.flags and (1 shl 0)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.accuracy_radius = some(tempint32)


proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPhotoEmpty) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPhoto) = 
    self.TLDecode(addr obj.id)
    self.TLDecode(addr obj.access_hash)
    obj.file_reference = self.TLDecode()

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputFileLocation) = 
    self.TLDecode(addr obj.volume_id)
    self.TLDecode(addr obj.local_id)
    self.TLDecode(addr obj.secret)
    obj.file_reference = self.TLDecode()

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputEncryptedFileLocation) = 
    self.TLDecode(addr obj.id)
    self.TLDecode(addr obj.access_hash)

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputDocumentFileLocation) = 
    self.TLDecode(addr obj.id)
    self.TLDecode(addr obj.access_hash)
    obj.file_reference = self.TLDecode()
    obj.thumb_size = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputSecureFileLocation) = 
    self.TLDecode(addr obj.id)
    self.TLDecode(addr obj.access_hash)

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputTakeoutFileLocation) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPhotoFileLocation) = 
    self.TLDecode(addr obj.id)
    self.TLDecode(addr obj.access_hash)
    obj.file_reference = self.TLDecode()
    obj.thumb_size = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPhotoLegacyFileLocation) = 
    self.TLDecode(addr obj.id)
    self.TLDecode(addr obj.access_hash)
    obj.file_reference = self.TLDecode()
    self.TLDecode(addr obj.volume_id)
    self.TLDecode(addr obj.local_id)
    self.TLDecode(addr obj.secret)

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPeerPhotoFileLocation) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(obj.peer)
    self.TLDecode(addr obj.volume_id)
    self.TLDecode(addr obj.local_id)

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputStickerSetThumb) = 
    self.TLDecode(obj.stickerset)
    self.TLDecode(addr obj.volume_id)
    self.TLDecode(addr obj.local_id)

proc TLDecode*(self: var ScalingSeq[uint8], obj: peerUser) = 
    self.TLDecode(addr obj.user_id)

proc TLDecode*(self: var ScalingSeq[uint8], obj: peerChat) = 
    self.TLDecode(addr obj.chat_id)

proc TLDecode*(self: var ScalingSeq[uint8], obj: peerChannel) = 
    self.TLDecode(addr obj.channel_id)

proc TLDecode*(self: var ScalingSeq[uint8], obj: storage_fileUnknown) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: storage_filePartial) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: storage_fileJpeg) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: storage_fileGif) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: storage_filePng) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: storage_filePdf) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: storage_fileMp3) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: storage_fileMov) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: storage_fileMp4) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: storage_fileWebp) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: userEmpty) = 
    self.TLDecode(addr obj.id)

proc TLDecode*(self: var ScalingSeq[uint8], obj: user) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(addr obj.id)
    if (obj.flags and (1 shl 0)) != 0:

        var tempint64: int64 = 0
        self.TLDecode(addr tempint64)
        obj.access_hash = some(tempint64)

    if (obj.flags and (1 shl 1)) != 0:

        obj.first_name = some(cast[string](self.TLDecode()))

    if (obj.flags and (1 shl 2)) != 0:

        obj.last_name = some(cast[string](self.TLDecode()))

    if (obj.flags and (1 shl 3)) != 0:

        obj.username = some(cast[string](self.TLDecode()))

    if (obj.flags and (1 shl 4)) != 0:

        obj.phone = some(cast[string](self.TLDecode()))

    if (obj.flags and (1 shl 5)) != 0:

        var tempUserProfilePhotoI: UserProfilePhotoI
        self.TLDecode(tempUserProfilePhotoI)
        obj.photo = some(tempUserProfilePhotoI)

    if (obj.flags and (1 shl 6)) != 0:

        var tempUserStatusI: UserStatusI
        self.TLDecode(tempUserStatusI)
        obj.status = some(tempUserStatusI)

    if (obj.flags and (1 shl 14)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.bot_info_version = some(tempint32)

    if (obj.flags and (1 shl 18)) != 0:

        var tempRestrictionReasonI: seq[RestrictionReasonI]
        self.TLDecode(tempRestrictionReasonI)
        obj.restriction_reason = some(tempRestrictionReasonI)

    if (obj.flags and (1 shl 19)) != 0:

        obj.bot_inline_placeholder = some(cast[string](self.TLDecode()))

    if (obj.flags and (1 shl 22)) != 0:

        obj.lang_code = some(cast[string](self.TLDecode()))


proc TLDecode*(self: var ScalingSeq[uint8], obj: userProfilePhotoEmpty) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: userProfilePhoto) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(addr obj.photo_id)
    self.TLDecode(obj.photo_small)
    self.TLDecode(obj.photo_big)
    self.TLDecode(addr obj.dc_id)

proc TLDecode*(self: var ScalingSeq[uint8], obj: userStatusEmpty) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: userStatusOnline) = 
    self.TLDecode(addr obj.expires)

proc TLDecode*(self: var ScalingSeq[uint8], obj: userStatusOffline) = 
    self.TLDecode(addr obj.was_online)

proc TLDecode*(self: var ScalingSeq[uint8], obj: userStatusRecently) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: userStatusLastWeek) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: userStatusLastMonth) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: chatEmpty) = 
    self.TLDecode(addr obj.id)

proc TLDecode*(self: var ScalingSeq[uint8], obj: chat) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(addr obj.id)
    obj.title = cast[string](self.TLDecode())
    self.TLDecode(obj.photo)
    self.TLDecode(addr obj.participants_count)
    self.TLDecode(addr obj.date)
    self.TLDecode(addr obj.version)
    if (obj.flags and (1 shl 6)) != 0:

        var tempInputChannelI: InputChannelI
        self.TLDecode(tempInputChannelI)
        obj.migrated_to = some(tempInputChannelI)

    if (obj.flags and (1 shl 14)) != 0:

        var tempChatAdminRightsI: ChatAdminRightsI
        self.TLDecode(tempChatAdminRightsI)
        obj.admin_rights = some(tempChatAdminRightsI)

    if (obj.flags and (1 shl 18)) != 0:

        var tempChatBannedRightsI: ChatBannedRightsI
        self.TLDecode(tempChatBannedRightsI)
        obj.default_banned_rights = some(tempChatBannedRightsI)


proc TLDecode*(self: var ScalingSeq[uint8], obj: chatForbidden) = 
    self.TLDecode(addr obj.id)
    obj.title = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: channel) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(addr obj.id)
    if (obj.flags and (1 shl 13)) != 0:

        var tempint64: int64 = 0
        self.TLDecode(addr tempint64)
        obj.access_hash = some(tempint64)

    obj.title = cast[string](self.TLDecode())
    if (obj.flags and (1 shl 6)) != 0:

        obj.username = some(cast[string](self.TLDecode()))

    self.TLDecode(obj.photo)
    self.TLDecode(addr obj.date)
    self.TLDecode(addr obj.version)
    if (obj.flags and (1 shl 9)) != 0:

        var tempRestrictionReasonI: seq[RestrictionReasonI]
        self.TLDecode(tempRestrictionReasonI)
        obj.restriction_reason = some(tempRestrictionReasonI)

    if (obj.flags and (1 shl 14)) != 0:

        var tempChatAdminRightsI: ChatAdminRightsI
        self.TLDecode(tempChatAdminRightsI)
        obj.admin_rights = some(tempChatAdminRightsI)

    if (obj.flags and (1 shl 15)) != 0:

        var tempChatBannedRightsI: ChatBannedRightsI
        self.TLDecode(tempChatBannedRightsI)
        obj.banned_rights = some(tempChatBannedRightsI)

    if (obj.flags and (1 shl 18)) != 0:

        var tempChatBannedRightsI: ChatBannedRightsI
        self.TLDecode(tempChatBannedRightsI)
        obj.default_banned_rights = some(tempChatBannedRightsI)

    if (obj.flags and (1 shl 17)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.participants_count = some(tempint32)


proc TLDecode*(self: var ScalingSeq[uint8], obj: channelForbidden) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(addr obj.id)
    self.TLDecode(addr obj.access_hash)
    obj.title = cast[string](self.TLDecode())
    if (obj.flags and (1 shl 16)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.until_date = some(tempint32)


proc TLDecode*(self: var ScalingSeq[uint8], obj: chatFull) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(addr obj.id)
    obj.about = cast[string](self.TLDecode())
    self.TLDecode(obj.participants)
    if (obj.flags and (1 shl 2)) != 0:

        var tempPhotoI: PhotoI
        self.TLDecode(tempPhotoI)
        obj.chat_photo = some(tempPhotoI)

    self.TLDecode(obj.notify_settings)
    self.TLDecode(obj.exported_invite)
    if (obj.flags and (1 shl 3)) != 0:

        var tempBotInfoI: seq[BotInfoI]
        self.TLDecode(tempBotInfoI)
        obj.bot_info = some(tempBotInfoI)

    if (obj.flags and (1 shl 6)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.pinned_msg_id = some(tempint32)

    if (obj.flags and (1 shl 11)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.folder_id = some(tempint32)


proc TLDecode*(self: var ScalingSeq[uint8], obj: channelFull) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(addr obj.id)
    obj.about = cast[string](self.TLDecode())
    if (obj.flags and (1 shl 0)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.participants_count = some(tempint32)

    if (obj.flags and (1 shl 1)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.admins_count = some(tempint32)

    if (obj.flags and (1 shl 2)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.kicked_count = some(tempint32)

    if (obj.flags and (1 shl 2)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.banned_count = some(tempint32)

    if (obj.flags and (1 shl 13)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.online_count = some(tempint32)

    self.TLDecode(addr obj.read_inbox_max_id)
    self.TLDecode(addr obj.read_outbox_max_id)
    self.TLDecode(addr obj.unread_count)
    self.TLDecode(obj.chat_photo)
    self.TLDecode(obj.notify_settings)
    self.TLDecode(obj.exported_invite)
    self.TLDecode(obj.bot_info)
    if (obj.flags and (1 shl 4)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.migrated_from_chat_id = some(tempint32)

    if (obj.flags and (1 shl 4)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.migrated_from_max_id = some(tempint32)

    if (obj.flags and (1 shl 5)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.pinned_msg_id = some(tempint32)

    if (obj.flags and (1 shl 8)) != 0:

        var tempStickerSetI: StickerSetI
        self.TLDecode(tempStickerSetI)
        obj.stickerset = some(tempStickerSetI)

    if (obj.flags and (1 shl 9)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.available_min_id = some(tempint32)

    if (obj.flags and (1 shl 11)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.folder_id = some(tempint32)

    if (obj.flags and (1 shl 14)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.linked_chat_id = some(tempint32)

    if (obj.flags and (1 shl 15)) != 0:

        var tempChannelLocationI: ChannelLocationI
        self.TLDecode(tempChannelLocationI)
        obj.location = some(tempChannelLocationI)

    if (obj.flags and (1 shl 17)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.slowmode_seconds = some(tempint32)

    if (obj.flags and (1 shl 18)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.slowmode_next_send_date = some(tempint32)

    if (obj.flags and (1 shl 12)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.stats_dc = some(tempint32)

    self.TLDecode(addr obj.pts)

proc TLDecode*(self: var ScalingSeq[uint8], obj: chatParticipant) = 
    self.TLDecode(addr obj.user_id)
    self.TLDecode(addr obj.inviter_id)
    self.TLDecode(addr obj.date)

proc TLDecode*(self: var ScalingSeq[uint8], obj: chatParticipantCreator) = 
    self.TLDecode(addr obj.user_id)

proc TLDecode*(self: var ScalingSeq[uint8], obj: chatParticipantAdmin) = 
    self.TLDecode(addr obj.user_id)
    self.TLDecode(addr obj.inviter_id)
    self.TLDecode(addr obj.date)

proc TLDecode*(self: var ScalingSeq[uint8], obj: chatParticipantsForbidden) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(addr obj.chat_id)
    if (obj.flags and (1 shl 0)) != 0:

        var tempChatParticipantI: ChatParticipantI
        self.TLDecode(tempChatParticipantI)
        obj.self_participant = some(tempChatParticipantI)


proc TLDecode*(self: var ScalingSeq[uint8], obj: chatParticipants) = 
    self.TLDecode(addr obj.chat_id)
    self.TLDecode(obj.participants)
    self.TLDecode(addr obj.version)

proc TLDecode*(self: var ScalingSeq[uint8], obj: chatPhotoEmpty) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: chatPhoto) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(obj.photo_small)
    self.TLDecode(obj.photo_big)
    self.TLDecode(addr obj.dc_id)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageEmpty) = 
    self.TLDecode(addr obj.id)

proc TLDecode*(self: var ScalingSeq[uint8], obj: message) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(addr obj.id)
    if (obj.flags and (1 shl 8)) != 0:

        var tempPeerI: PeerI
        self.TLDecode(tempPeerI)
        obj.from_id = some(tempPeerI)

    self.TLDecode(obj.peer_id)
    if (obj.flags and (1 shl 2)) != 0:

        var tempMessageFwdHeaderI: MessageFwdHeaderI
        self.TLDecode(tempMessageFwdHeaderI)
        obj.fwd_from = some(tempMessageFwdHeaderI)

    if (obj.flags and (1 shl 11)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.via_bot_id = some(tempint32)

    if (obj.flags and (1 shl 3)) != 0:

        var tempMessageReplyHeaderI: MessageReplyHeaderI
        self.TLDecode(tempMessageReplyHeaderI)
        obj.reply_to = some(tempMessageReplyHeaderI)

    self.TLDecode(addr obj.date)
    obj.message = cast[string](self.TLDecode())
    if (obj.flags and (1 shl 9)) != 0:

        var tempMessageMediaI: MessageMediaI
        self.TLDecode(tempMessageMediaI)
        obj.media = some(tempMessageMediaI)

    if (obj.flags and (1 shl 6)) != 0:

        var tempReplyMarkupI: ReplyMarkupI
        self.TLDecode(tempReplyMarkupI)
        obj.reply_markup = some(tempReplyMarkupI)

    if (obj.flags and (1 shl 7)) != 0:

        var tempMessageEntityI: seq[MessageEntityI]
        self.TLDecode(tempMessageEntityI)
        obj.entities = some(tempMessageEntityI)

    if (obj.flags and (1 shl 10)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.views = some(tempint32)

    if (obj.flags and (1 shl 10)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.forwards = some(tempint32)

    if (obj.flags and (1 shl 23)) != 0:

        var tempMessageRepliesI: MessageRepliesI
        self.TLDecode(tempMessageRepliesI)
        obj.replies = some(tempMessageRepliesI)

    if (obj.flags and (1 shl 15)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.edit_date = some(tempint32)

    if (obj.flags and (1 shl 16)) != 0:

        obj.post_author = some(cast[string](self.TLDecode()))

    if (obj.flags and (1 shl 17)) != 0:

        var tempint64: int64 = 0
        self.TLDecode(addr tempint64)
        obj.grouped_id = some(tempint64)

    if (obj.flags and (1 shl 22)) != 0:

        var tempRestrictionReasonI: seq[RestrictionReasonI]
        self.TLDecode(tempRestrictionReasonI)
        obj.restriction_reason = some(tempRestrictionReasonI)


proc TLDecode*(self: var ScalingSeq[uint8], obj: messageService) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(addr obj.id)
    if (obj.flags and (1 shl 8)) != 0:

        var tempPeerI: PeerI
        self.TLDecode(tempPeerI)
        obj.from_id = some(tempPeerI)

    self.TLDecode(obj.peer_id)
    if (obj.flags and (1 shl 3)) != 0:

        var tempMessageReplyHeaderI: MessageReplyHeaderI
        self.TLDecode(tempMessageReplyHeaderI)
        obj.reply_to = some(tempMessageReplyHeaderI)

    self.TLDecode(addr obj.date)
    self.TLDecode(obj.action)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageMediaEmpty) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageMediaPhoto) = 
    self.TLDecode(addr obj.flags)
    if (obj.flags and (1 shl 0)) != 0:

        var tempPhotoI: PhotoI
        self.TLDecode(tempPhotoI)
        obj.photo = some(tempPhotoI)

    if (obj.flags and (1 shl 2)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.ttl_seconds = some(tempint32)


proc TLDecode*(self: var ScalingSeq[uint8], obj: messageMediaGeo) = 
    self.TLDecode(obj.geo)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageMediaContact) = 
    obj.phone_number = cast[string](self.TLDecode())
    obj.first_name = cast[string](self.TLDecode())
    obj.last_name = cast[string](self.TLDecode())
    obj.vcard = cast[string](self.TLDecode())
    self.TLDecode(addr obj.user_id)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageMediaUnsupported) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageMediaDocument) = 
    self.TLDecode(addr obj.flags)
    if (obj.flags and (1 shl 0)) != 0:

        var tempDocumentI: DocumentI
        self.TLDecode(tempDocumentI)
        obj.document = some(tempDocumentI)

    if (obj.flags and (1 shl 2)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.ttl_seconds = some(tempint32)


proc TLDecode*(self: var ScalingSeq[uint8], obj: messageMediaWebPage) = 
    self.TLDecode(obj.webpage)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageMediaVenue) = 
    self.TLDecode(obj.geo)
    obj.title = cast[string](self.TLDecode())
    obj.address = cast[string](self.TLDecode())
    obj.provider = cast[string](self.TLDecode())
    obj.venue_id = cast[string](self.TLDecode())
    obj.venue_type = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageMediaGame) = 
    self.TLDecode(obj.game)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageMediaInvoice) = 
    self.TLDecode(addr obj.flags)
    obj.title = cast[string](self.TLDecode())
    obj.description = cast[string](self.TLDecode())
    if (obj.flags and (1 shl 0)) != 0:

        var tempWebDocumentI: WebDocumentI
        self.TLDecode(tempWebDocumentI)
        obj.photo = some(tempWebDocumentI)

    if (obj.flags and (1 shl 2)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.receipt_msg_id = some(tempint32)

    obj.currency = cast[string](self.TLDecode())
    self.TLDecode(addr obj.total_amount)
    obj.start_param = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageMediaGeoLive) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(obj.geo)
    if (obj.flags and (1 shl 0)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.heading = some(tempint32)

    self.TLDecode(addr obj.period)
    if (obj.flags and (1 shl 1)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.proximity_notification_radius = some(tempint32)


proc TLDecode*(self: var ScalingSeq[uint8], obj: messageMediaPoll) = 
    self.TLDecode(obj.poll)
    self.TLDecode(obj.results)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageMediaDice) = 
    self.TLDecode(addr obj.value)
    obj.emoticon = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageActionEmpty) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageActionChatCreate) = 
    obj.title = cast[string](self.TLDecode())
    self.TLDecode(obj.users)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageActionChatEditTitle) = 
    obj.title = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageActionChatEditPhoto) = 
    self.TLDecode(obj.photo)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageActionChatDeletePhoto) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageActionChatAddUser) = 
    self.TLDecode(obj.users)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageActionChatDeleteUser) = 
    self.TLDecode(addr obj.user_id)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageActionChatJoinedByLink) = 
    self.TLDecode(addr obj.inviter_id)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageActionChannelCreate) = 
    obj.title = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageActionChatMigrateTo) = 
    self.TLDecode(addr obj.channel_id)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageActionChannelMigrateFrom) = 
    obj.title = cast[string](self.TLDecode())
    self.TLDecode(addr obj.chat_id)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageActionPinMessage) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageActionHistoryClear) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageActionGameScore) = 
    self.TLDecode(addr obj.game_id)
    self.TLDecode(addr obj.score)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageActionPaymentSentMe) = 
    self.TLDecode(addr obj.flags)
    obj.currency = cast[string](self.TLDecode())
    self.TLDecode(addr obj.total_amount)
    obj.payload = self.TLDecode()
    if (obj.flags and (1 shl 0)) != 0:

        var tempPaymentRequestedInfoI: PaymentRequestedInfoI
        self.TLDecode(tempPaymentRequestedInfoI)
        obj.info = some(tempPaymentRequestedInfoI)

    if (obj.flags and (1 shl 1)) != 0:

        obj.shipping_option_id = some(cast[string](self.TLDecode()))

    self.TLDecode(obj.charge)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageActionPaymentSent) = 
    obj.currency = cast[string](self.TLDecode())
    self.TLDecode(addr obj.total_amount)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageActionPhoneCall) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(addr obj.call_id)
    if (obj.flags and (1 shl 0)) != 0:

        var tempPhoneCallDiscardReasonI: PhoneCallDiscardReasonI
        self.TLDecode(tempPhoneCallDiscardReasonI)
        obj.reason = some(tempPhoneCallDiscardReasonI)

    if (obj.flags and (1 shl 1)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.duration = some(tempint32)


proc TLDecode*(self: var ScalingSeq[uint8], obj: messageActionScreenshotTaken) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageActionCustomAction) = 
    obj.message = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageActionBotAllowed) = 
    obj.domain = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageActionSecureValuesSentMe) = 
    self.TLDecode(obj.values)
    self.TLDecode(obj.credentials)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageActionSecureValuesSent) = 
    self.TLDecode(obj.types)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageActionContactSignUp) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageActionGeoProximityReached) = 
    self.TLDecode(obj.from_id)
    self.TLDecode(obj.to_id)
    self.TLDecode(addr obj.distance)

proc TLDecode*(self: var ScalingSeq[uint8], obj: dialog) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(obj.peer)
    self.TLDecode(addr obj.top_message)
    self.TLDecode(addr obj.read_inbox_max_id)
    self.TLDecode(addr obj.read_outbox_max_id)
    self.TLDecode(addr obj.unread_count)
    self.TLDecode(addr obj.unread_mentions_count)
    self.TLDecode(obj.notify_settings)
    if (obj.flags and (1 shl 0)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.pts = some(tempint32)

    if (obj.flags and (1 shl 1)) != 0:

        var tempDraftMessageI: DraftMessageI
        self.TLDecode(tempDraftMessageI)
        obj.draft = some(tempDraftMessageI)

    if (obj.flags and (1 shl 4)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.folder_id = some(tempint32)


proc TLDecode*(self: var ScalingSeq[uint8], obj: dialogFolder) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(obj.folder)
    self.TLDecode(obj.peer)
    self.TLDecode(addr obj.top_message)
    self.TLDecode(addr obj.unread_muted_peers_count)
    self.TLDecode(addr obj.unread_unmuted_peers_count)
    self.TLDecode(addr obj.unread_muted_messages_count)
    self.TLDecode(addr obj.unread_unmuted_messages_count)

proc TLDecode*(self: var ScalingSeq[uint8], obj: photoEmpty) = 
    self.TLDecode(addr obj.id)

proc TLDecode*(self: var ScalingSeq[uint8], obj: photo) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(addr obj.id)
    self.TLDecode(addr obj.access_hash)
    obj.file_reference = self.TLDecode()
    self.TLDecode(addr obj.date)
    self.TLDecode(obj.sizes)
    if (obj.flags and (1 shl 1)) != 0:

        var tempVideoSizeI: seq[VideoSizeI]
        self.TLDecode(tempVideoSizeI)
        obj.video_sizes = some(tempVideoSizeI)

    self.TLDecode(addr obj.dc_id)

proc TLDecode*(self: var ScalingSeq[uint8], obj: photoSizeEmpty) = 
    obj.typeof = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: photoSize) = 
    obj.typeof = cast[string](self.TLDecode())
    self.TLDecode(obj.location)
    self.TLDecode(addr obj.w)
    self.TLDecode(addr obj.h)
    self.TLDecode(addr obj.size)

proc TLDecode*(self: var ScalingSeq[uint8], obj: photoCachedSize) = 
    obj.typeof = cast[string](self.TLDecode())
    self.TLDecode(obj.location)
    self.TLDecode(addr obj.w)
    self.TLDecode(addr obj.h)
    obj.bytes = self.TLDecode()

proc TLDecode*(self: var ScalingSeq[uint8], obj: photoStrippedSize) = 
    obj.typeof = cast[string](self.TLDecode())
    obj.bytes = self.TLDecode()

proc TLDecode*(self: var ScalingSeq[uint8], obj: photoSizeProgressive) = 
    obj.typeof = cast[string](self.TLDecode())
    self.TLDecode(obj.location)
    self.TLDecode(addr obj.w)
    self.TLDecode(addr obj.h)
    self.TLDecode(obj.sizes)

proc TLDecode*(self: var ScalingSeq[uint8], obj: geoPointEmpty) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: geoPoint) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(addr obj.long)
    self.TLDecode(addr obj.lat)
    self.TLDecode(addr obj.access_hash)
    if (obj.flags and (1 shl 0)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.accuracy_radius = some(tempint32)


proc TLDecode*(self: var ScalingSeq[uint8], obj: auth_sentCode) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(obj.typeof)
    obj.phone_code_hash = cast[string](self.TLDecode())
    if (obj.flags and (1 shl 1)) != 0:

        var tempauth_CodeTypeI: auth_CodeTypeI
        self.TLDecode(tempauth_CodeTypeI)
        obj.next_type = some(tempauth_CodeTypeI)

    if (obj.flags and (1 shl 2)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.timeout = some(tempint32)


proc TLDecode*(self: var ScalingSeq[uint8], obj: auth_authorization) = 
    self.TLDecode(addr obj.flags)
    if (obj.flags and (1 shl 0)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.tmp_sessions = some(tempint32)

    self.TLDecode(obj.user)

proc TLDecode*(self: var ScalingSeq[uint8], obj: auth_authorizationSignUpRequired) = 
    self.TLDecode(addr obj.flags)
    if (obj.flags and (1 shl 0)) != 0:

        var temphelp_TermsOfServiceI: help_TermsOfServiceI
        self.TLDecode(temphelp_TermsOfServiceI)
        obj.terms_of_service = some(temphelp_TermsOfServiceI)


proc TLDecode*(self: var ScalingSeq[uint8], obj: auth_exportedAuthorization) = 
    self.TLDecode(addr obj.id)
    obj.bytes = self.TLDecode()

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputNotifyPeer) = 
    self.TLDecode(obj.peer)

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputNotifyUsers) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputNotifyChats) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputNotifyBroadcasts) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPeerNotifySettings) = 
    self.TLDecode(addr obj.flags)
    if (obj.flags and (1 shl 0)) != 0:

        var tempbool: bool
        self.TLDecode(tempbool)
        obj.show_previews = some(tempbool)

    if (obj.flags and (1 shl 1)) != 0:

        var tempbool: bool
        self.TLDecode(tempbool)
        obj.silent = some(tempbool)

    if (obj.flags and (1 shl 2)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.mute_until = some(tempint32)

    if (obj.flags and (1 shl 3)) != 0:

        obj.sound = some(cast[string](self.TLDecode()))


proc TLDecode*(self: var ScalingSeq[uint8], obj: peerNotifySettings) = 
    self.TLDecode(addr obj.flags)
    if (obj.flags and (1 shl 0)) != 0:

        var tempbool: bool
        self.TLDecode(tempbool)
        obj.show_previews = some(tempbool)

    if (obj.flags and (1 shl 1)) != 0:

        var tempbool: bool
        self.TLDecode(tempbool)
        obj.silent = some(tempbool)

    if (obj.flags and (1 shl 2)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.mute_until = some(tempint32)

    if (obj.flags and (1 shl 3)) != 0:

        obj.sound = some(cast[string](self.TLDecode()))


proc TLDecode*(self: var ScalingSeq[uint8], obj: peerSettings) = 
    self.TLDecode(addr obj.flags)
    if (obj.flags and (1 shl 6)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.geo_distance = some(tempint32)


proc TLDecode*(self: var ScalingSeq[uint8], obj: wallPaper) = 
    self.TLDecode(addr obj.id)
    self.TLDecode(addr obj.flags)
    self.TLDecode(addr obj.access_hash)
    obj.slug = cast[string](self.TLDecode())
    self.TLDecode(obj.document)
    if (obj.flags and (1 shl 2)) != 0:

        var tempWallPaperSettingsI: WallPaperSettingsI
        self.TLDecode(tempWallPaperSettingsI)
        obj.settings = some(tempWallPaperSettingsI)


proc TLDecode*(self: var ScalingSeq[uint8], obj: wallPaperNoFile) = 
    self.TLDecode(addr obj.flags)
    if (obj.flags and (1 shl 2)) != 0:

        var tempWallPaperSettingsI: WallPaperSettingsI
        self.TLDecode(tempWallPaperSettingsI)
        obj.settings = some(tempWallPaperSettingsI)


proc TLDecode*(self: var ScalingSeq[uint8], obj: inputReportReasonSpam) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputReportReasonViolence) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputReportReasonPornography) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputReportReasonChildAbuse) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputReportReasonOther) = 
    obj.text = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputReportReasonCopyright) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputReportReasonGeoIrrelevant) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: userFull) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(obj.user)
    if (obj.flags and (1 shl 1)) != 0:

        obj.about = some(cast[string](self.TLDecode()))

    self.TLDecode(obj.settings)
    if (obj.flags and (1 shl 2)) != 0:

        var tempPhotoI: PhotoI
        self.TLDecode(tempPhotoI)
        obj.profile_photo = some(tempPhotoI)

    self.TLDecode(obj.notify_settings)
    if (obj.flags and (1 shl 3)) != 0:

        var tempBotInfoI: BotInfoI
        self.TLDecode(tempBotInfoI)
        obj.bot_info = some(tempBotInfoI)

    if (obj.flags and (1 shl 6)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.pinned_msg_id = some(tempint32)

    self.TLDecode(addr obj.common_chats_count)
    if (obj.flags and (1 shl 11)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.folder_id = some(tempint32)


proc TLDecode*(self: var ScalingSeq[uint8], obj: contact) = 
    self.TLDecode(addr obj.user_id)
    self.TLDecode(obj.mutual)

proc TLDecode*(self: var ScalingSeq[uint8], obj: importedContact) = 
    self.TLDecode(addr obj.user_id)
    self.TLDecode(addr obj.client_id)

proc TLDecode*(self: var ScalingSeq[uint8], obj: contactStatus) = 
    self.TLDecode(addr obj.user_id)
    self.TLDecode(obj.status)

proc TLDecode*(self: var ScalingSeq[uint8], obj: contacts_contactsNotModified) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: contacts_contacts) = 
    self.TLDecode(obj.contacts)
    self.TLDecode(addr obj.saved_count)
    self.TLDecode(obj.users)

proc TLDecode*(self: var ScalingSeq[uint8], obj: contacts_importedContacts) = 
    self.TLDecode(obj.imported)
    self.TLDecode(obj.popular_invites)
    self.TLDecode(obj.retry_contacts)
    self.TLDecode(obj.users)

proc TLDecode*(self: var ScalingSeq[uint8], obj: contacts_blocked) = 
    self.TLDecode(obj.blocked)
    self.TLDecode(obj.chats)
    self.TLDecode(obj.users)

proc TLDecode*(self: var ScalingSeq[uint8], obj: contacts_blockedSlice) = 
    self.TLDecode(addr obj.count)
    self.TLDecode(obj.blocked)
    self.TLDecode(obj.chats)
    self.TLDecode(obj.users)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_dialogs) = 
    self.TLDecode(obj.dialogs)
    self.TLDecode(obj.messages)
    self.TLDecode(obj.chats)
    self.TLDecode(obj.users)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_dialogsSlice) = 
    self.TLDecode(addr obj.count)
    self.TLDecode(obj.dialogs)
    self.TLDecode(obj.messages)
    self.TLDecode(obj.chats)
    self.TLDecode(obj.users)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_dialogsNotModified) = 
    self.TLDecode(addr obj.count)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_messages) = 
    self.TLDecode(obj.messages)
    self.TLDecode(obj.chats)
    self.TLDecode(obj.users)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_messagesSlice) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(addr obj.count)
    if (obj.flags and (1 shl 0)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.next_rate = some(tempint32)

    if (obj.flags and (1 shl 2)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.offset_id_offset = some(tempint32)

    self.TLDecode(obj.messages)
    self.TLDecode(obj.chats)
    self.TLDecode(obj.users)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_channelMessages) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(addr obj.pts)
    self.TLDecode(addr obj.count)
    if (obj.flags and (1 shl 2)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.offset_id_offset = some(tempint32)

    self.TLDecode(obj.messages)
    self.TLDecode(obj.chats)
    self.TLDecode(obj.users)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_messagesNotModified) = 
    self.TLDecode(addr obj.count)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_chats) = 
    self.TLDecode(obj.chats)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_chatsSlice) = 
    self.TLDecode(addr obj.count)
    self.TLDecode(obj.chats)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_chatFull) = 
    self.TLDecode(obj.full_chat)
    self.TLDecode(obj.chats)
    self.TLDecode(obj.users)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_affectedHistory) = 
    self.TLDecode(addr obj.pts)
    self.TLDecode(addr obj.pts_count)
    self.TLDecode(addr obj.offset)

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMessagesFilterEmpty) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMessagesFilterPhotos) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMessagesFilterVideo) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMessagesFilterPhotoVideo) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMessagesFilterDocument) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMessagesFilterUrl) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMessagesFilterGif) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMessagesFilterVoice) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMessagesFilterMusic) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMessagesFilterChatPhotos) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMessagesFilterPhoneCalls) = 
    self.TLDecode(addr obj.flags)

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMessagesFilterRoundVoice) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMessagesFilterRoundVideo) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMessagesFilterMyMentions) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMessagesFilterGeo) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMessagesFilterContacts) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMessagesFilterPinned) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateNewMessage) = 
    self.TLDecode(obj.message)
    self.TLDecode(addr obj.pts)
    self.TLDecode(addr obj.pts_count)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateMessageID) = 
    self.TLDecode(addr obj.id)
    self.TLDecode(addr obj.random_id)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateDeleteMessages) = 
    self.TLDecode(obj.messages)
    self.TLDecode(addr obj.pts)
    self.TLDecode(addr obj.pts_count)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateUserTyping) = 
    self.TLDecode(addr obj.user_id)
    self.TLDecode(obj.action)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateChatUserTyping) = 
    self.TLDecode(addr obj.chat_id)
    self.TLDecode(addr obj.user_id)
    self.TLDecode(obj.action)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateChatParticipants) = 
    self.TLDecode(obj.participants)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateUserStatus) = 
    self.TLDecode(addr obj.user_id)
    self.TLDecode(obj.status)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateUserName) = 
    self.TLDecode(addr obj.user_id)
    obj.first_name = cast[string](self.TLDecode())
    obj.last_name = cast[string](self.TLDecode())
    obj.username = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateUserPhoto) = 
    self.TLDecode(addr obj.user_id)
    self.TLDecode(addr obj.date)
    self.TLDecode(obj.photo)
    self.TLDecode(obj.previous)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateNewEncryptedMessage) = 
    self.TLDecode(obj.message)
    self.TLDecode(addr obj.qts)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateEncryptedChatTyping) = 
    self.TLDecode(addr obj.chat_id)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateEncryption) = 
    self.TLDecode(obj.chat)
    self.TLDecode(addr obj.date)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateEncryptedMessagesRead) = 
    self.TLDecode(addr obj.chat_id)
    self.TLDecode(addr obj.max_date)
    self.TLDecode(addr obj.date)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateChatParticipantAdd) = 
    self.TLDecode(addr obj.chat_id)
    self.TLDecode(addr obj.user_id)
    self.TLDecode(addr obj.inviter_id)
    self.TLDecode(addr obj.date)
    self.TLDecode(addr obj.version)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateChatParticipantDelete) = 
    self.TLDecode(addr obj.chat_id)
    self.TLDecode(addr obj.user_id)
    self.TLDecode(addr obj.version)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateDcOptions) = 
    self.TLDecode(obj.dc_options)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateNotifySettings) = 
    self.TLDecode(obj.peer)
    self.TLDecode(obj.notify_settings)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateServiceNotification) = 
    self.TLDecode(addr obj.flags)
    if (obj.flags and (1 shl 1)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.inbox_date = some(tempint32)

    obj.typeof = cast[string](self.TLDecode())
    obj.message = cast[string](self.TLDecode())
    self.TLDecode(obj.media)
    self.TLDecode(obj.entities)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updatePrivacy) = 
    self.TLDecode(obj.key)
    self.TLDecode(obj.rules)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateUserPhone) = 
    self.TLDecode(addr obj.user_id)
    obj.phone = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateReadHistoryInbox) = 
    self.TLDecode(addr obj.flags)
    if (obj.flags and (1 shl 0)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.folder_id = some(tempint32)

    self.TLDecode(obj.peer)
    self.TLDecode(addr obj.max_id)
    self.TLDecode(addr obj.still_unread_count)
    self.TLDecode(addr obj.pts)
    self.TLDecode(addr obj.pts_count)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateReadHistoryOutbox) = 
    self.TLDecode(obj.peer)
    self.TLDecode(addr obj.max_id)
    self.TLDecode(addr obj.pts)
    self.TLDecode(addr obj.pts_count)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateWebPage) = 
    self.TLDecode(obj.webpage)
    self.TLDecode(addr obj.pts)
    self.TLDecode(addr obj.pts_count)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateReadMessagesContents) = 
    self.TLDecode(obj.messages)
    self.TLDecode(addr obj.pts)
    self.TLDecode(addr obj.pts_count)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateChannelTooLong) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(addr obj.channel_id)
    if (obj.flags and (1 shl 0)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.pts = some(tempint32)


proc TLDecode*(self: var ScalingSeq[uint8], obj: updateChannel) = 
    self.TLDecode(addr obj.channel_id)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateNewChannelMessage) = 
    self.TLDecode(obj.message)
    self.TLDecode(addr obj.pts)
    self.TLDecode(addr obj.pts_count)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateReadChannelInbox) = 
    self.TLDecode(addr obj.flags)
    if (obj.flags and (1 shl 0)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.folder_id = some(tempint32)

    self.TLDecode(addr obj.channel_id)
    self.TLDecode(addr obj.max_id)
    self.TLDecode(addr obj.still_unread_count)
    self.TLDecode(addr obj.pts)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateDeleteChannelMessages) = 
    self.TLDecode(addr obj.channel_id)
    self.TLDecode(obj.messages)
    self.TLDecode(addr obj.pts)
    self.TLDecode(addr obj.pts_count)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateChannelMessageViews) = 
    self.TLDecode(addr obj.channel_id)
    self.TLDecode(addr obj.id)
    self.TLDecode(addr obj.views)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateChatParticipantAdmin) = 
    self.TLDecode(addr obj.chat_id)
    self.TLDecode(addr obj.user_id)
    self.TLDecode(obj.is_admin)
    self.TLDecode(addr obj.version)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateNewStickerSet) = 
    self.TLDecode(obj.stickerset)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateStickerSetsOrder) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(obj.order)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateStickerSets) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateSavedGifs) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateBotInlineQuery) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(addr obj.query_id)
    self.TLDecode(addr obj.user_id)
    obj.query = cast[string](self.TLDecode())
    if (obj.flags and (1 shl 0)) != 0:

        var tempGeoPointI: GeoPointI
        self.TLDecode(tempGeoPointI)
        obj.geo = some(tempGeoPointI)

    obj.offset = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateBotInlineSend) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(addr obj.user_id)
    obj.query = cast[string](self.TLDecode())
    if (obj.flags and (1 shl 0)) != 0:

        var tempGeoPointI: GeoPointI
        self.TLDecode(tempGeoPointI)
        obj.geo = some(tempGeoPointI)

    obj.id = cast[string](self.TLDecode())
    if (obj.flags and (1 shl 1)) != 0:

        var tempInputBotInlineMessageIDI: InputBotInlineMessageIDI
        self.TLDecode(tempInputBotInlineMessageIDI)
        obj.msg_id = some(tempInputBotInlineMessageIDI)


proc TLDecode*(self: var ScalingSeq[uint8], obj: updateEditChannelMessage) = 
    self.TLDecode(obj.message)
    self.TLDecode(addr obj.pts)
    self.TLDecode(addr obj.pts_count)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateBotCallbackQuery) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(addr obj.query_id)
    self.TLDecode(addr obj.user_id)
    self.TLDecode(obj.peer)
    self.TLDecode(addr obj.msg_id)
    self.TLDecode(addr obj.chat_instance)
    if (obj.flags and (1 shl 0)) != 0:

        obj.data = some(self.TLDecode())

    if (obj.flags and (1 shl 1)) != 0:

        obj.game_short_name = some(cast[string](self.TLDecode()))


proc TLDecode*(self: var ScalingSeq[uint8], obj: updateEditMessage) = 
    self.TLDecode(obj.message)
    self.TLDecode(addr obj.pts)
    self.TLDecode(addr obj.pts_count)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateInlineBotCallbackQuery) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(addr obj.query_id)
    self.TLDecode(addr obj.user_id)
    self.TLDecode(obj.msg_id)
    self.TLDecode(addr obj.chat_instance)
    if (obj.flags and (1 shl 0)) != 0:

        obj.data = some(self.TLDecode())

    if (obj.flags and (1 shl 1)) != 0:

        obj.game_short_name = some(cast[string](self.TLDecode()))


proc TLDecode*(self: var ScalingSeq[uint8], obj: updateReadChannelOutbox) = 
    self.TLDecode(addr obj.channel_id)
    self.TLDecode(addr obj.max_id)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateDraftMessage) = 
    self.TLDecode(obj.peer)
    self.TLDecode(obj.draft)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateReadFeaturedStickers) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateRecentStickers) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateConfig) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: updatePtsChanged) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateChannelWebPage) = 
    self.TLDecode(addr obj.channel_id)
    self.TLDecode(obj.webpage)
    self.TLDecode(addr obj.pts)
    self.TLDecode(addr obj.pts_count)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateDialogPinned) = 
    self.TLDecode(addr obj.flags)
    if (obj.flags and (1 shl 1)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.folder_id = some(tempint32)

    self.TLDecode(obj.peer)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updatePinnedDialogs) = 
    self.TLDecode(addr obj.flags)
    if (obj.flags and (1 shl 1)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.folder_id = some(tempint32)

    if (obj.flags and (1 shl 0)) != 0:

        var tempDialogPeerI: seq[DialogPeerI]
        self.TLDecode(tempDialogPeerI)
        obj.order = some(tempDialogPeerI)


proc TLDecode*(self: var ScalingSeq[uint8], obj: updateBotWebhookJSON) = 
    self.TLDecode(obj.data)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateBotWebhookJSONQuery) = 
    self.TLDecode(addr obj.query_id)
    self.TLDecode(obj.data)
    self.TLDecode(addr obj.timeout)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateBotShippingQuery) = 
    self.TLDecode(addr obj.query_id)
    self.TLDecode(addr obj.user_id)
    obj.payload = self.TLDecode()
    self.TLDecode(obj.shipping_address)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateBotPrecheckoutQuery) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(addr obj.query_id)
    self.TLDecode(addr obj.user_id)
    obj.payload = self.TLDecode()
    if (obj.flags and (1 shl 0)) != 0:

        var tempPaymentRequestedInfoI: PaymentRequestedInfoI
        self.TLDecode(tempPaymentRequestedInfoI)
        obj.info = some(tempPaymentRequestedInfoI)

    if (obj.flags and (1 shl 1)) != 0:

        obj.shipping_option_id = some(cast[string](self.TLDecode()))

    obj.currency = cast[string](self.TLDecode())
    self.TLDecode(addr obj.total_amount)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updatePhoneCall) = 
    self.TLDecode(obj.phone_call)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateLangPackTooLong) = 
    obj.lang_code = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateLangPack) = 
    self.TLDecode(obj.difference)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateFavedStickers) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateChannelReadMessagesContents) = 
    self.TLDecode(addr obj.channel_id)
    self.TLDecode(obj.messages)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateContactsReset) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateChannelAvailableMessages) = 
    self.TLDecode(addr obj.channel_id)
    self.TLDecode(addr obj.available_min_id)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateDialogUnreadMark) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(obj.peer)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateMessagePoll) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(addr obj.poll_id)
    if (obj.flags and (1 shl 0)) != 0:

        var tempPollI: PollI
        self.TLDecode(tempPollI)
        obj.poll = some(tempPollI)

    self.TLDecode(obj.results)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateChatDefaultBannedRights) = 
    self.TLDecode(obj.peer)
    self.TLDecode(obj.default_banned_rights)
    self.TLDecode(addr obj.version)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateFolderPeers) = 
    self.TLDecode(obj.folder_peers)
    self.TLDecode(addr obj.pts)
    self.TLDecode(addr obj.pts_count)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updatePeerSettings) = 
    self.TLDecode(obj.peer)
    self.TLDecode(obj.settings)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updatePeerLocated) = 
    self.TLDecode(obj.peers)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateNewScheduledMessage) = 
    self.TLDecode(obj.message)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateDeleteScheduledMessages) = 
    self.TLDecode(obj.peer)
    self.TLDecode(obj.messages)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateTheme) = 
    self.TLDecode(obj.theme)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateGeoLiveViewed) = 
    self.TLDecode(obj.peer)
    self.TLDecode(addr obj.msg_id)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateLoginToken) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateMessagePollVote) = 
    self.TLDecode(addr obj.poll_id)
    self.TLDecode(addr obj.user_id)
    obj.options = self.TLDecodeSeq()

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateDialogFilter) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(addr obj.id)
    if (obj.flags and (1 shl 0)) != 0:

        var tempDialogFilterI: DialogFilterI
        self.TLDecode(tempDialogFilterI)
        obj.filter = some(tempDialogFilterI)


proc TLDecode*(self: var ScalingSeq[uint8], obj: updateDialogFilterOrder) = 
    self.TLDecode(obj.order)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateDialogFilters) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: updatePhoneCallSignalingData) = 
    self.TLDecode(addr obj.phone_call_id)
    obj.data = self.TLDecode()

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateChannelParticipant) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(addr obj.channel_id)
    self.TLDecode(addr obj.date)
    self.TLDecode(addr obj.user_id)
    if (obj.flags and (1 shl 0)) != 0:

        var tempChannelParticipantI: ChannelParticipantI
        self.TLDecode(tempChannelParticipantI)
        obj.prev_participant = some(tempChannelParticipantI)

    if (obj.flags and (1 shl 1)) != 0:

        var tempChannelParticipantI: ChannelParticipantI
        self.TLDecode(tempChannelParticipantI)
        obj.new_participant = some(tempChannelParticipantI)

    self.TLDecode(addr obj.qts)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateChannelMessageForwards) = 
    self.TLDecode(addr obj.channel_id)
    self.TLDecode(addr obj.id)
    self.TLDecode(addr obj.forwards)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateReadChannelDiscussionInbox) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(addr obj.channel_id)
    self.TLDecode(addr obj.top_msg_id)
    self.TLDecode(addr obj.read_max_id)
    if (obj.flags and (1 shl 0)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.broadcast_id = some(tempint32)

    if (obj.flags and (1 shl 0)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.broadcast_post = some(tempint32)


proc TLDecode*(self: var ScalingSeq[uint8], obj: updateReadChannelDiscussionOutbox) = 
    self.TLDecode(addr obj.channel_id)
    self.TLDecode(addr obj.top_msg_id)
    self.TLDecode(addr obj.read_max_id)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updatePeerBlocked) = 
    self.TLDecode(obj.peer_id)
    self.TLDecode(obj.blocked)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateChannelUserTyping) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(addr obj.channel_id)
    if (obj.flags and (1 shl 0)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.top_msg_id = some(tempint32)

    self.TLDecode(addr obj.user_id)
    self.TLDecode(obj.action)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updatePinnedMessages) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(obj.peer)
    self.TLDecode(obj.messages)
    self.TLDecode(addr obj.pts)
    self.TLDecode(addr obj.pts_count)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updatePinnedChannelMessages) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(addr obj.channel_id)
    self.TLDecode(obj.messages)
    self.TLDecode(addr obj.pts)
    self.TLDecode(addr obj.pts_count)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updates_state) = 
    self.TLDecode(addr obj.pts)
    self.TLDecode(addr obj.qts)
    self.TLDecode(addr obj.date)
    self.TLDecode(addr obj.seq)
    self.TLDecode(addr obj.unread_count)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updates_differenceEmpty) = 
    self.TLDecode(addr obj.date)
    self.TLDecode(addr obj.seq)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updates_difference) = 
    self.TLDecode(obj.new_messages)
    self.TLDecode(obj.new_encrypted_messages)
    self.TLDecode(obj.other_updates)
    self.TLDecode(obj.chats)
    self.TLDecode(obj.users)
    self.TLDecode(obj.state)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updates_differenceSlice) = 
    self.TLDecode(obj.new_messages)
    self.TLDecode(obj.new_encrypted_messages)
    self.TLDecode(obj.other_updates)
    self.TLDecode(obj.chats)
    self.TLDecode(obj.users)
    self.TLDecode(obj.intermediate_state)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updates_differenceTooLong) = 
    self.TLDecode(addr obj.pts)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updatesTooLong) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateShortMessage) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(addr obj.id)
    self.TLDecode(addr obj.user_id)
    obj.message = cast[string](self.TLDecode())
    self.TLDecode(addr obj.pts)
    self.TLDecode(addr obj.pts_count)
    self.TLDecode(addr obj.date)
    if (obj.flags and (1 shl 2)) != 0:

        var tempMessageFwdHeaderI: MessageFwdHeaderI
        self.TLDecode(tempMessageFwdHeaderI)
        obj.fwd_from = some(tempMessageFwdHeaderI)

    if (obj.flags and (1 shl 11)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.via_bot_id = some(tempint32)

    if (obj.flags and (1 shl 3)) != 0:

        var tempMessageReplyHeaderI: MessageReplyHeaderI
        self.TLDecode(tempMessageReplyHeaderI)
        obj.reply_to = some(tempMessageReplyHeaderI)

    if (obj.flags and (1 shl 7)) != 0:

        var tempMessageEntityI: seq[MessageEntityI]
        self.TLDecode(tempMessageEntityI)
        obj.entities = some(tempMessageEntityI)


proc TLDecode*(self: var ScalingSeq[uint8], obj: updateShortChatMessage) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(addr obj.id)
    self.TLDecode(addr obj.from_id)
    self.TLDecode(addr obj.chat_id)
    obj.message = cast[string](self.TLDecode())
    self.TLDecode(addr obj.pts)
    self.TLDecode(addr obj.pts_count)
    self.TLDecode(addr obj.date)
    if (obj.flags and (1 shl 2)) != 0:

        var tempMessageFwdHeaderI: MessageFwdHeaderI
        self.TLDecode(tempMessageFwdHeaderI)
        obj.fwd_from = some(tempMessageFwdHeaderI)

    if (obj.flags and (1 shl 11)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.via_bot_id = some(tempint32)

    if (obj.flags and (1 shl 3)) != 0:

        var tempMessageReplyHeaderI: MessageReplyHeaderI
        self.TLDecode(tempMessageReplyHeaderI)
        obj.reply_to = some(tempMessageReplyHeaderI)

    if (obj.flags and (1 shl 7)) != 0:

        var tempMessageEntityI: seq[MessageEntityI]
        self.TLDecode(tempMessageEntityI)
        obj.entities = some(tempMessageEntityI)


proc TLDecode*(self: var ScalingSeq[uint8], obj: updateShort) = 
    self.TLDecode(obj.update)
    self.TLDecode(addr obj.date)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updatesCombined) = 
    self.TLDecode(obj.updates)
    self.TLDecode(obj.users)
    self.TLDecode(obj.chats)
    self.TLDecode(addr obj.date)
    self.TLDecode(addr obj.seq_start)
    self.TLDecode(addr obj.seq)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updates) = 
    self.TLDecode(obj.updates)
    self.TLDecode(obj.users)
    self.TLDecode(obj.chats)
    self.TLDecode(addr obj.date)
    self.TLDecode(addr obj.seq)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updateShortSentMessage) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(addr obj.id)
    self.TLDecode(addr obj.pts)
    self.TLDecode(addr obj.pts_count)
    self.TLDecode(addr obj.date)
    if (obj.flags and (1 shl 9)) != 0:

        var tempMessageMediaI: MessageMediaI
        self.TLDecode(tempMessageMediaI)
        obj.media = some(tempMessageMediaI)

    if (obj.flags and (1 shl 7)) != 0:

        var tempMessageEntityI: seq[MessageEntityI]
        self.TLDecode(tempMessageEntityI)
        obj.entities = some(tempMessageEntityI)


proc TLDecode*(self: var ScalingSeq[uint8], obj: photos_photos) = 
    self.TLDecode(obj.photos)
    self.TLDecode(obj.users)

proc TLDecode*(self: var ScalingSeq[uint8], obj: photos_photosSlice) = 
    self.TLDecode(addr obj.count)
    self.TLDecode(obj.photos)
    self.TLDecode(obj.users)

proc TLDecode*(self: var ScalingSeq[uint8], obj: photos_photo) = 
    self.TLDecode(obj.photo)
    self.TLDecode(obj.users)

proc TLDecode*(self: var ScalingSeq[uint8], obj: upload_file) = 
    self.TLDecode(obj.typeof)
    self.TLDecode(addr obj.mtime)
    obj.bytes = self.TLDecode()

proc TLDecode*(self: var ScalingSeq[uint8], obj: upload_fileCdnRedirect) = 
    self.TLDecode(addr obj.dc_id)
    obj.file_token = self.TLDecode()
    obj.encryption_key = self.TLDecode()
    obj.encryption_iv = self.TLDecode()
    self.TLDecode(obj.file_hashes)

proc TLDecode*(self: var ScalingSeq[uint8], obj: dcOption) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(addr obj.id)
    obj.ip_address = cast[string](self.TLDecode())
    self.TLDecode(addr obj.port)
    if (obj.flags and (1 shl 10)) != 0:

        obj.secret = some(self.TLDecode())


proc TLDecode*(self: var ScalingSeq[uint8], obj: config) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(addr obj.date)
    self.TLDecode(addr obj.expires)
    self.TLDecode(obj.test_mode)
    self.TLDecode(addr obj.this_dc)
    self.TLDecode(obj.dc_options)
    obj.dc_txt_domain_name = cast[string](self.TLDecode())
    self.TLDecode(addr obj.chat_size_max)
    self.TLDecode(addr obj.megagroup_size_max)
    self.TLDecode(addr obj.forwarded_count_max)
    self.TLDecode(addr obj.online_update_period_ms)
    self.TLDecode(addr obj.offline_blur_timeout_ms)
    self.TLDecode(addr obj.offline_idle_timeout_ms)
    self.TLDecode(addr obj.online_cloud_timeout_ms)
    self.TLDecode(addr obj.notify_cloud_delay_ms)
    self.TLDecode(addr obj.notify_default_delay_ms)
    self.TLDecode(addr obj.push_chat_period_ms)
    self.TLDecode(addr obj.push_chat_limit)
    self.TLDecode(addr obj.saved_gifs_limit)
    self.TLDecode(addr obj.edit_time_limit)
    self.TLDecode(addr obj.revoke_time_limit)
    self.TLDecode(addr obj.revoke_pm_time_limit)
    self.TLDecode(addr obj.rating_e_decay)
    self.TLDecode(addr obj.stickers_recent_limit)
    self.TLDecode(addr obj.stickers_faved_limit)
    self.TLDecode(addr obj.channels_read_media_period)
    if (obj.flags and (1 shl 0)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.tmp_sessions = some(tempint32)

    self.TLDecode(addr obj.pinned_dialogs_count_max)
    self.TLDecode(addr obj.pinned_infolder_count_max)
    self.TLDecode(addr obj.call_receive_timeout_ms)
    self.TLDecode(addr obj.call_ring_timeout_ms)
    self.TLDecode(addr obj.call_connect_timeout_ms)
    self.TLDecode(addr obj.call_packet_timeout_ms)
    obj.me_url_prefix = cast[string](self.TLDecode())
    if (obj.flags and (1 shl 7)) != 0:

        obj.autoupdate_url_prefix = some(cast[string](self.TLDecode()))

    if (obj.flags and (1 shl 9)) != 0:

        obj.gif_search_username = some(cast[string](self.TLDecode()))

    if (obj.flags and (1 shl 10)) != 0:

        obj.venue_search_username = some(cast[string](self.TLDecode()))

    if (obj.flags and (1 shl 11)) != 0:

        obj.img_search_username = some(cast[string](self.TLDecode()))

    if (obj.flags and (1 shl 12)) != 0:

        obj.static_maps_provider = some(cast[string](self.TLDecode()))

    self.TLDecode(addr obj.caption_length_max)
    self.TLDecode(addr obj.message_length_max)
    self.TLDecode(addr obj.webfile_dc_id)
    if (obj.flags and (1 shl 2)) != 0:

        obj.suggested_lang_code = some(cast[string](self.TLDecode()))

    if (obj.flags and (1 shl 2)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.lang_pack_version = some(tempint32)

    if (obj.flags and (1 shl 2)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.base_lang_pack_version = some(tempint32)


proc TLDecode*(self: var ScalingSeq[uint8], obj: nearestDc) = 
    obj.country = cast[string](self.TLDecode())
    self.TLDecode(addr obj.this_dc)
    self.TLDecode(addr obj.nearest_dc)

proc TLDecode*(self: var ScalingSeq[uint8], obj: help_appUpdate) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(addr obj.id)
    obj.version = cast[string](self.TLDecode())
    obj.text = cast[string](self.TLDecode())
    self.TLDecode(obj.entities)
    if (obj.flags and (1 shl 1)) != 0:

        var tempDocumentI: DocumentI
        self.TLDecode(tempDocumentI)
        obj.document = some(tempDocumentI)

    if (obj.flags and (1 shl 2)) != 0:

        obj.url = some(cast[string](self.TLDecode()))


proc TLDecode*(self: var ScalingSeq[uint8], obj: help_noAppUpdate) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: help_inviteText) = 
    obj.message = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: encryptedChatEmpty) = 
    self.TLDecode(addr obj.id)

proc TLDecode*(self: var ScalingSeq[uint8], obj: encryptedChatWaiting) = 
    self.TLDecode(addr obj.id)
    self.TLDecode(addr obj.access_hash)
    self.TLDecode(addr obj.date)
    self.TLDecode(addr obj.admin_id)
    self.TLDecode(addr obj.participant_id)

proc TLDecode*(self: var ScalingSeq[uint8], obj: encryptedChatRequested) = 
    self.TLDecode(addr obj.flags)
    if (obj.flags and (1 shl 0)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.folder_id = some(tempint32)

    self.TLDecode(addr obj.id)
    self.TLDecode(addr obj.access_hash)
    self.TLDecode(addr obj.date)
    self.TLDecode(addr obj.admin_id)
    self.TLDecode(addr obj.participant_id)
    obj.g_a = self.TLDecode()

proc TLDecode*(self: var ScalingSeq[uint8], obj: encryptedChat) = 
    self.TLDecode(addr obj.id)
    self.TLDecode(addr obj.access_hash)
    self.TLDecode(addr obj.date)
    self.TLDecode(addr obj.admin_id)
    self.TLDecode(addr obj.participant_id)
    obj.g_a_or_b = self.TLDecode()
    self.TLDecode(addr obj.key_fingerprint)

proc TLDecode*(self: var ScalingSeq[uint8], obj: encryptedChatDiscarded) = 
    self.TLDecode(addr obj.id)

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputEncryptedChat) = 
    self.TLDecode(addr obj.chat_id)
    self.TLDecode(addr obj.access_hash)

proc TLDecode*(self: var ScalingSeq[uint8], obj: encryptedFileEmpty) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: encryptedFile) = 
    self.TLDecode(addr obj.id)
    self.TLDecode(addr obj.access_hash)
    self.TLDecode(addr obj.size)
    self.TLDecode(addr obj.dc_id)
    self.TLDecode(addr obj.key_fingerprint)

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputEncryptedFileEmpty) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputEncryptedFileUploaded) = 
    self.TLDecode(addr obj.id)
    self.TLDecode(addr obj.parts)
    obj.md5_checksum = cast[string](self.TLDecode())
    self.TLDecode(addr obj.key_fingerprint)

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputEncryptedFile) = 
    self.TLDecode(addr obj.id)
    self.TLDecode(addr obj.access_hash)

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputEncryptedFileBigUploaded) = 
    self.TLDecode(addr obj.id)
    self.TLDecode(addr obj.parts)
    self.TLDecode(addr obj.key_fingerprint)

proc TLDecode*(self: var ScalingSeq[uint8], obj: encryptedMessage) = 
    self.TLDecode(addr obj.random_id)
    self.TLDecode(addr obj.chat_id)
    self.TLDecode(addr obj.date)
    obj.bytes = self.TLDecode()
    self.TLDecode(obj.file)

proc TLDecode*(self: var ScalingSeq[uint8], obj: encryptedMessageService) = 
    self.TLDecode(addr obj.random_id)
    self.TLDecode(addr obj.chat_id)
    self.TLDecode(addr obj.date)
    obj.bytes = self.TLDecode()

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_dhConfigNotModified) = 
    obj.random = self.TLDecode()

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_dhConfig) = 
    self.TLDecode(addr obj.g)
    obj.p = self.TLDecode()
    self.TLDecode(addr obj.version)
    obj.random = self.TLDecode()

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_sentEncryptedMessage) = 
    self.TLDecode(addr obj.date)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_sentEncryptedFile) = 
    self.TLDecode(addr obj.date)
    self.TLDecode(obj.file)

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputDocumentEmpty) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputDocument) = 
    self.TLDecode(addr obj.id)
    self.TLDecode(addr obj.access_hash)
    obj.file_reference = self.TLDecode()

proc TLDecode*(self: var ScalingSeq[uint8], obj: documentEmpty) = 
    self.TLDecode(addr obj.id)

proc TLDecode*(self: var ScalingSeq[uint8], obj: document) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(addr obj.id)
    self.TLDecode(addr obj.access_hash)
    obj.file_reference = self.TLDecode()
    self.TLDecode(addr obj.date)
    obj.mime_type = cast[string](self.TLDecode())
    self.TLDecode(addr obj.size)
    if (obj.flags and (1 shl 0)) != 0:

        var tempPhotoSizeI: seq[PhotoSizeI]
        self.TLDecode(tempPhotoSizeI)
        obj.thumbs = some(tempPhotoSizeI)

    if (obj.flags and (1 shl 1)) != 0:

        var tempVideoSizeI: seq[VideoSizeI]
        self.TLDecode(tempVideoSizeI)
        obj.video_thumbs = some(tempVideoSizeI)

    self.TLDecode(addr obj.dc_id)
    self.TLDecode(obj.attributes)

proc TLDecode*(self: var ScalingSeq[uint8], obj: help_support) = 
    obj.phone_number = cast[string](self.TLDecode())
    self.TLDecode(obj.user)

proc TLDecode*(self: var ScalingSeq[uint8], obj: notifyPeer) = 
    self.TLDecode(obj.peer)

proc TLDecode*(self: var ScalingSeq[uint8], obj: notifyUsers) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: notifyChats) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: notifyBroadcasts) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: sendMessageTypingAction) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: sendMessageCancelAction) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: sendMessageRecordVideoAction) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: sendMessageUploadVideoAction) = 
    self.TLDecode(addr obj.progress)

proc TLDecode*(self: var ScalingSeq[uint8], obj: sendMessageRecordAudioAction) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: sendMessageUploadAudioAction) = 
    self.TLDecode(addr obj.progress)

proc TLDecode*(self: var ScalingSeq[uint8], obj: sendMessageUploadPhotoAction) = 
    self.TLDecode(addr obj.progress)

proc TLDecode*(self: var ScalingSeq[uint8], obj: sendMessageUploadDocumentAction) = 
    self.TLDecode(addr obj.progress)

proc TLDecode*(self: var ScalingSeq[uint8], obj: sendMessageGeoLocationAction) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: sendMessageChooseContactAction) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: sendMessageGamePlayAction) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: sendMessageRecordRoundAction) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: sendMessageUploadRoundAction) = 
    self.TLDecode(addr obj.progress)

proc TLDecode*(self: var ScalingSeq[uint8], obj: contacts_found) = 
    self.TLDecode(obj.my_results)
    self.TLDecode(obj.results)
    self.TLDecode(obj.chats)
    self.TLDecode(obj.users)

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPrivacyKeyStatusTimestamp) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPrivacyKeyChatInvite) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPrivacyKeyPhoneCall) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPrivacyKeyPhoneP2P) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPrivacyKeyForwards) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPrivacyKeyProfilePhoto) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPrivacyKeyPhoneNumber) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPrivacyKeyAddedByPhone) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: privacyKeyStatusTimestamp) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: privacyKeyChatInvite) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: privacyKeyPhoneCall) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: privacyKeyPhoneP2P) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: privacyKeyForwards) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: privacyKeyProfilePhoto) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: privacyKeyPhoneNumber) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: privacyKeyAddedByPhone) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPrivacyValueAllowContacts) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPrivacyValueAllowAll) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPrivacyValueAllowUsers) = 
    self.TLDecode(obj.users)

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPrivacyValueDisallowContacts) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPrivacyValueDisallowAll) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPrivacyValueDisallowUsers) = 
    self.TLDecode(obj.users)

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPrivacyValueAllowChatParticipants) = 
    self.TLDecode(obj.chats)

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPrivacyValueDisallowChatParticipants) = 
    self.TLDecode(obj.chats)

proc TLDecode*(self: var ScalingSeq[uint8], obj: privacyValueAllowContacts) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: privacyValueAllowAll) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: privacyValueAllowUsers) = 
    self.TLDecode(obj.users)

proc TLDecode*(self: var ScalingSeq[uint8], obj: privacyValueDisallowContacts) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: privacyValueDisallowAll) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: privacyValueDisallowUsers) = 
    self.TLDecode(obj.users)

proc TLDecode*(self: var ScalingSeq[uint8], obj: privacyValueAllowChatParticipants) = 
    self.TLDecode(obj.chats)

proc TLDecode*(self: var ScalingSeq[uint8], obj: privacyValueDisallowChatParticipants) = 
    self.TLDecode(obj.chats)

proc TLDecode*(self: var ScalingSeq[uint8], obj: account_privacyRules) = 
    self.TLDecode(obj.rules)
    self.TLDecode(obj.chats)
    self.TLDecode(obj.users)

proc TLDecode*(self: var ScalingSeq[uint8], obj: accountDaysTTL) = 
    self.TLDecode(addr obj.days)

proc TLDecode*(self: var ScalingSeq[uint8], obj: documentAttributeImageSize) = 
    self.TLDecode(addr obj.w)
    self.TLDecode(addr obj.h)

proc TLDecode*(self: var ScalingSeq[uint8], obj: documentAttributeAnimated) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: documentAttributeSticker) = 
    self.TLDecode(addr obj.flags)
    obj.alt = cast[string](self.TLDecode())
    self.TLDecode(obj.stickerset)
    if (obj.flags and (1 shl 0)) != 0:

        var tempMaskCoordsI: MaskCoordsI
        self.TLDecode(tempMaskCoordsI)
        obj.mask_coords = some(tempMaskCoordsI)


proc TLDecode*(self: var ScalingSeq[uint8], obj: documentAttributeVideo) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(addr obj.duration)
    self.TLDecode(addr obj.w)
    self.TLDecode(addr obj.h)

proc TLDecode*(self: var ScalingSeq[uint8], obj: documentAttributeAudio) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(addr obj.duration)
    if (obj.flags and (1 shl 0)) != 0:

        obj.title = some(cast[string](self.TLDecode()))

    if (obj.flags and (1 shl 1)) != 0:

        obj.performer = some(cast[string](self.TLDecode()))

    if (obj.flags and (1 shl 2)) != 0:

        obj.waveform = some(self.TLDecode())


proc TLDecode*(self: var ScalingSeq[uint8], obj: documentAttributeFilename) = 
    obj.file_name = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: documentAttributeHasStickers) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_stickersNotModified) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_stickers) = 
    self.TLDecode(addr obj.hash)
    self.TLDecode(obj.stickers)

proc TLDecode*(self: var ScalingSeq[uint8], obj: stickerPack) = 
    obj.emoticon = cast[string](self.TLDecode())
    self.TLDecode(obj.documents)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_allStickersNotModified) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_allStickers) = 
    self.TLDecode(addr obj.hash)
    self.TLDecode(obj.sets)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_affectedMessages) = 
    self.TLDecode(addr obj.pts)
    self.TLDecode(addr obj.pts_count)

proc TLDecode*(self: var ScalingSeq[uint8], obj: webPageEmpty) = 
    self.TLDecode(addr obj.id)

proc TLDecode*(self: var ScalingSeq[uint8], obj: webPagePending) = 
    self.TLDecode(addr obj.id)
    self.TLDecode(addr obj.date)

proc TLDecode*(self: var ScalingSeq[uint8], obj: webPage) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(addr obj.id)
    obj.url = cast[string](self.TLDecode())
    obj.display_url = cast[string](self.TLDecode())
    self.TLDecode(addr obj.hash)
    if (obj.flags and (1 shl 0)) != 0:

        obj.typeof = some(cast[string](self.TLDecode()))

    if (obj.flags and (1 shl 1)) != 0:

        obj.site_name = some(cast[string](self.TLDecode()))

    if (obj.flags and (1 shl 2)) != 0:

        obj.title = some(cast[string](self.TLDecode()))

    if (obj.flags and (1 shl 3)) != 0:

        obj.description = some(cast[string](self.TLDecode()))

    if (obj.flags and (1 shl 4)) != 0:

        var tempPhotoI: PhotoI
        self.TLDecode(tempPhotoI)
        obj.photo = some(tempPhotoI)

    if (obj.flags and (1 shl 5)) != 0:

        obj.embed_url = some(cast[string](self.TLDecode()))

    if (obj.flags and (1 shl 5)) != 0:

        obj.embed_type = some(cast[string](self.TLDecode()))

    if (obj.flags and (1 shl 6)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.embed_width = some(tempint32)

    if (obj.flags and (1 shl 6)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.embed_height = some(tempint32)

    if (obj.flags and (1 shl 7)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.duration = some(tempint32)

    if (obj.flags and (1 shl 8)) != 0:

        obj.author = some(cast[string](self.TLDecode()))

    if (obj.flags and (1 shl 9)) != 0:

        var tempDocumentI: DocumentI
        self.TLDecode(tempDocumentI)
        obj.document = some(tempDocumentI)

    if (obj.flags and (1 shl 10)) != 0:

        var tempPageI: PageI
        self.TLDecode(tempPageI)
        obj.cached_page = some(tempPageI)

    if (obj.flags and (1 shl 12)) != 0:

        var tempWebPageAttributeI: seq[WebPageAttributeI]
        self.TLDecode(tempWebPageAttributeI)
        obj.attributes = some(tempWebPageAttributeI)


proc TLDecode*(self: var ScalingSeq[uint8], obj: webPageNotModified) = 
    self.TLDecode(addr obj.flags)
    if (obj.flags and (1 shl 0)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.cached_page_views = some(tempint32)


proc TLDecode*(self: var ScalingSeq[uint8], obj: authorization) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(addr obj.hash)
    obj.device_model = cast[string](self.TLDecode())
    obj.platform = cast[string](self.TLDecode())
    obj.system_version = cast[string](self.TLDecode())
    self.TLDecode(addr obj.api_id)
    obj.app_name = cast[string](self.TLDecode())
    obj.app_version = cast[string](self.TLDecode())
    self.TLDecode(addr obj.date_created)
    self.TLDecode(addr obj.date_active)
    obj.ip = cast[string](self.TLDecode())
    obj.country = cast[string](self.TLDecode())
    obj.region = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: account_authorizations) = 
    self.TLDecode(obj.authorizations)

proc TLDecode*(self: var ScalingSeq[uint8], obj: account_password) = 
    self.TLDecode(addr obj.flags)
    if (obj.flags and (1 shl 2)) != 0:

        var tempPasswordKdfAlgoI: PasswordKdfAlgoI
        self.TLDecode(tempPasswordKdfAlgoI)
        obj.current_algo = some(tempPasswordKdfAlgoI)

    if (obj.flags and (1 shl 2)) != 0:

        obj.srp_B = some(self.TLDecode())

    if (obj.flags and (1 shl 2)) != 0:

        var tempint64: int64 = 0
        self.TLDecode(addr tempint64)
        obj.srp_id = some(tempint64)

    if (obj.flags and (1 shl 3)) != 0:

        obj.hint = some(cast[string](self.TLDecode()))

    if (obj.flags and (1 shl 4)) != 0:

        obj.email_unconfirmed_pattern = some(cast[string](self.TLDecode()))

    self.TLDecode(obj.new_algo)
    self.TLDecode(obj.new_secure_algo)
    obj.secure_random = self.TLDecode()

proc TLDecode*(self: var ScalingSeq[uint8], obj: account_passwordSettings) = 
    self.TLDecode(addr obj.flags)
    if (obj.flags and (1 shl 0)) != 0:

        obj.email = some(cast[string](self.TLDecode()))

    if (obj.flags and (1 shl 1)) != 0:

        var tempSecureSecretSettingsI: SecureSecretSettingsI
        self.TLDecode(tempSecureSecretSettingsI)
        obj.secure_settings = some(tempSecureSecretSettingsI)


proc TLDecode*(self: var ScalingSeq[uint8], obj: account_passwordInputSettings) = 
    self.TLDecode(addr obj.flags)
    if (obj.flags and (1 shl 0)) != 0:

        var tempPasswordKdfAlgoI: PasswordKdfAlgoI
        self.TLDecode(tempPasswordKdfAlgoI)
        obj.new_algo = some(tempPasswordKdfAlgoI)

    if (obj.flags and (1 shl 0)) != 0:

        obj.new_password_hash = some(self.TLDecode())

    if (obj.flags and (1 shl 0)) != 0:

        obj.hint = some(cast[string](self.TLDecode()))

    if (obj.flags and (1 shl 1)) != 0:

        obj.email = some(cast[string](self.TLDecode()))

    if (obj.flags and (1 shl 2)) != 0:

        var tempSecureSecretSettingsI: SecureSecretSettingsI
        self.TLDecode(tempSecureSecretSettingsI)
        obj.new_secure_settings = some(tempSecureSecretSettingsI)


proc TLDecode*(self: var ScalingSeq[uint8], obj: auth_passwordRecovery) = 
    obj.email_pattern = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: receivedNotifyMessage) = 
    self.TLDecode(addr obj.id)
    self.TLDecode(addr obj.flags)

proc TLDecode*(self: var ScalingSeq[uint8], obj: chatInviteEmpty) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: chatInviteExported) = 
    obj.link = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: chatInviteAlready) = 
    self.TLDecode(obj.chat)

proc TLDecode*(self: var ScalingSeq[uint8], obj: chatInvite) = 
    self.TLDecode(addr obj.flags)
    obj.title = cast[string](self.TLDecode())
    self.TLDecode(obj.photo)
    self.TLDecode(addr obj.participants_count)
    if (obj.flags and (1 shl 4)) != 0:

        var tempUserI: seq[UserI]
        self.TLDecode(tempUserI)
        obj.participants = some(tempUserI)


proc TLDecode*(self: var ScalingSeq[uint8], obj: chatInvitePeek) = 
    self.TLDecode(obj.chat)
    self.TLDecode(addr obj.expires)

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputStickerSetEmpty) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputStickerSetID) = 
    self.TLDecode(addr obj.id)
    self.TLDecode(addr obj.access_hash)

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputStickerSetShortName) = 
    obj.short_name = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputStickerSetAnimatedEmoji) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputStickerSetDice) = 
    obj.emoticon = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: stickerSet) = 
    self.TLDecode(addr obj.flags)
    if (obj.flags and (1 shl 0)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.installed_date = some(tempint32)

    self.TLDecode(addr obj.id)
    self.TLDecode(addr obj.access_hash)
    obj.title = cast[string](self.TLDecode())
    obj.short_name = cast[string](self.TLDecode())
    if (obj.flags and (1 shl 4)) != 0:

        var tempPhotoSizeI: PhotoSizeI
        self.TLDecode(tempPhotoSizeI)
        obj.thumb = some(tempPhotoSizeI)

    if (obj.flags and (1 shl 4)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.thumb_dc_id = some(tempint32)

    self.TLDecode(addr obj.count)
    self.TLDecode(addr obj.hash)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_stickerSet) = 
    self.TLDecode(obj.set)
    self.TLDecode(obj.packs)
    self.TLDecode(obj.documents)

proc TLDecode*(self: var ScalingSeq[uint8], obj: botCommand) = 
    obj.command = cast[string](self.TLDecode())
    obj.description = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: botInfo) = 
    self.TLDecode(addr obj.user_id)
    obj.description = cast[string](self.TLDecode())
    self.TLDecode(obj.commands)

proc TLDecode*(self: var ScalingSeq[uint8], obj: keyboardButton) = 
    obj.text = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: keyboardButtonUrl) = 
    obj.text = cast[string](self.TLDecode())
    obj.url = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: keyboardButtonCallback) = 
    self.TLDecode(addr obj.flags)
    obj.text = cast[string](self.TLDecode())
    obj.data = self.TLDecode()

proc TLDecode*(self: var ScalingSeq[uint8], obj: keyboardButtonRequestPhone) = 
    obj.text = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: keyboardButtonRequestGeoLocation) = 
    obj.text = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: keyboardButtonSwitchInline) = 
    self.TLDecode(addr obj.flags)
    obj.text = cast[string](self.TLDecode())
    obj.query = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: keyboardButtonGame) = 
    obj.text = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: keyboardButtonBuy) = 
    obj.text = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: keyboardButtonUrlAuth) = 
    self.TLDecode(addr obj.flags)
    obj.text = cast[string](self.TLDecode())
    if (obj.flags and (1 shl 0)) != 0:

        obj.fwd_text = some(cast[string](self.TLDecode()))

    obj.url = cast[string](self.TLDecode())
    self.TLDecode(addr obj.button_id)

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputKeyboardButtonUrlAuth) = 
    self.TLDecode(addr obj.flags)
    obj.text = cast[string](self.TLDecode())
    if (obj.flags and (1 shl 1)) != 0:

        obj.fwd_text = some(cast[string](self.TLDecode()))

    obj.url = cast[string](self.TLDecode())
    self.TLDecode(obj.bot)

proc TLDecode*(self: var ScalingSeq[uint8], obj: keyboardButtonRequestPoll) = 
    self.TLDecode(addr obj.flags)
    if (obj.flags and (1 shl 0)) != 0:

        var tempbool: bool
        self.TLDecode(tempbool)
        obj.quiz = some(tempbool)

    obj.text = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: keyboardButtonRow) = 
    self.TLDecode(obj.buttons)

proc TLDecode*(self: var ScalingSeq[uint8], obj: replyKeyboardHide) = 
    self.TLDecode(addr obj.flags)

proc TLDecode*(self: var ScalingSeq[uint8], obj: replyKeyboardForceReply) = 
    self.TLDecode(addr obj.flags)

proc TLDecode*(self: var ScalingSeq[uint8], obj: replyKeyboardMarkup) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(obj.rows)

proc TLDecode*(self: var ScalingSeq[uint8], obj: replyInlineMarkup) = 
    self.TLDecode(obj.rows)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageEntityUnknown) = 
    self.TLDecode(addr obj.offset)
    self.TLDecode(addr obj.length)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageEntityMention) = 
    self.TLDecode(addr obj.offset)
    self.TLDecode(addr obj.length)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageEntityHashtag) = 
    self.TLDecode(addr obj.offset)
    self.TLDecode(addr obj.length)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageEntityBotCommand) = 
    self.TLDecode(addr obj.offset)
    self.TLDecode(addr obj.length)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageEntityUrl) = 
    self.TLDecode(addr obj.offset)
    self.TLDecode(addr obj.length)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageEntityEmail) = 
    self.TLDecode(addr obj.offset)
    self.TLDecode(addr obj.length)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageEntityBold) = 
    self.TLDecode(addr obj.offset)
    self.TLDecode(addr obj.length)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageEntityItalic) = 
    self.TLDecode(addr obj.offset)
    self.TLDecode(addr obj.length)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageEntityCode) = 
    self.TLDecode(addr obj.offset)
    self.TLDecode(addr obj.length)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageEntityPre) = 
    self.TLDecode(addr obj.offset)
    self.TLDecode(addr obj.length)
    obj.language = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageEntityTextUrl) = 
    self.TLDecode(addr obj.offset)
    self.TLDecode(addr obj.length)
    obj.url = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageEntityMentionName) = 
    self.TLDecode(addr obj.offset)
    self.TLDecode(addr obj.length)
    self.TLDecode(addr obj.user_id)

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMessageEntityMentionName) = 
    self.TLDecode(addr obj.offset)
    self.TLDecode(addr obj.length)
    self.TLDecode(obj.user_id)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageEntityPhone) = 
    self.TLDecode(addr obj.offset)
    self.TLDecode(addr obj.length)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageEntityCashtag) = 
    self.TLDecode(addr obj.offset)
    self.TLDecode(addr obj.length)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageEntityUnderline) = 
    self.TLDecode(addr obj.offset)
    self.TLDecode(addr obj.length)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageEntityStrike) = 
    self.TLDecode(addr obj.offset)
    self.TLDecode(addr obj.length)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageEntityBlockquote) = 
    self.TLDecode(addr obj.offset)
    self.TLDecode(addr obj.length)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageEntityBankCard) = 
    self.TLDecode(addr obj.offset)
    self.TLDecode(addr obj.length)

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputChannelEmpty) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputChannel) = 
    self.TLDecode(addr obj.channel_id)
    self.TLDecode(addr obj.access_hash)

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputChannelFromMessage) = 
    self.TLDecode(obj.peer)
    self.TLDecode(addr obj.msg_id)
    self.TLDecode(addr obj.channel_id)

proc TLDecode*(self: var ScalingSeq[uint8], obj: contacts_resolvedPeer) = 
    self.TLDecode(obj.peer)
    self.TLDecode(obj.chats)
    self.TLDecode(obj.users)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageRange) = 
    self.TLDecode(addr obj.min_id)
    self.TLDecode(addr obj.max_id)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updates_channelDifferenceEmpty) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(addr obj.pts)
    if (obj.flags and (1 shl 1)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.timeout = some(tempint32)


proc TLDecode*(self: var ScalingSeq[uint8], obj: updates_channelDifferenceTooLong) = 
    self.TLDecode(addr obj.flags)
    if (obj.flags and (1 shl 1)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.timeout = some(tempint32)

    self.TLDecode(obj.dialog)
    self.TLDecode(obj.messages)
    self.TLDecode(obj.chats)
    self.TLDecode(obj.users)

proc TLDecode*(self: var ScalingSeq[uint8], obj: updates_channelDifference) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(addr obj.pts)
    if (obj.flags and (1 shl 1)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.timeout = some(tempint32)

    self.TLDecode(obj.new_messages)
    self.TLDecode(obj.other_updates)
    self.TLDecode(obj.chats)
    self.TLDecode(obj.users)

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelMessagesFilterEmpty) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelMessagesFilter) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(obj.ranges)

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelParticipant) = 
    self.TLDecode(addr obj.user_id)
    self.TLDecode(addr obj.date)

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelParticipantSelf) = 
    self.TLDecode(addr obj.user_id)
    self.TLDecode(addr obj.inviter_id)
    self.TLDecode(addr obj.date)

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelParticipantCreator) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(addr obj.user_id)
    self.TLDecode(obj.admin_rights)
    if (obj.flags and (1 shl 0)) != 0:

        obj.rank = some(cast[string](self.TLDecode()))


proc TLDecode*(self: var ScalingSeq[uint8], obj: channelParticipantAdmin) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(addr obj.user_id)
    if (obj.flags and (1 shl 1)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.inviter_id = some(tempint32)

    self.TLDecode(addr obj.promoted_by)
    self.TLDecode(addr obj.date)
    self.TLDecode(obj.admin_rights)
    if (obj.flags and (1 shl 2)) != 0:

        obj.rank = some(cast[string](self.TLDecode()))


proc TLDecode*(self: var ScalingSeq[uint8], obj: channelParticipantBanned) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(addr obj.user_id)
    self.TLDecode(addr obj.kicked_by)
    self.TLDecode(addr obj.date)
    self.TLDecode(obj.banned_rights)

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelParticipantLeft) = 
    self.TLDecode(addr obj.user_id)

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelParticipantsRecent) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelParticipantsAdmins) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelParticipantsKicked) = 
    obj.q = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelParticipantsBots) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelParticipantsBanned) = 
    obj.q = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelParticipantsSearch) = 
    obj.q = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelParticipantsContacts) = 
    obj.q = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelParticipantsMentions) = 
    self.TLDecode(addr obj.flags)
    if (obj.flags and (1 shl 0)) != 0:

        obj.q = some(cast[string](self.TLDecode()))

    if (obj.flags and (1 shl 1)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.top_msg_id = some(tempint32)


proc TLDecode*(self: var ScalingSeq[uint8], obj: channels_channelParticipants) = 
    self.TLDecode(addr obj.count)
    self.TLDecode(obj.participants)
    self.TLDecode(obj.users)

proc TLDecode*(self: var ScalingSeq[uint8], obj: channels_channelParticipantsNotModified) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: channels_channelParticipant) = 
    self.TLDecode(obj.participant)
    self.TLDecode(obj.users)

proc TLDecode*(self: var ScalingSeq[uint8], obj: help_termsOfService) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(obj.id)
    obj.text = cast[string](self.TLDecode())
    self.TLDecode(obj.entities)
    if (obj.flags and (1 shl 1)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.min_age_confirm = some(tempint32)


proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_savedGifsNotModified) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_savedGifs) = 
    self.TLDecode(addr obj.hash)
    self.TLDecode(obj.gifs)

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputBotInlineMessageMediaAuto) = 
    self.TLDecode(addr obj.flags)
    obj.message = cast[string](self.TLDecode())
    if (obj.flags and (1 shl 1)) != 0:

        var tempMessageEntityI: seq[MessageEntityI]
        self.TLDecode(tempMessageEntityI)
        obj.entities = some(tempMessageEntityI)

    if (obj.flags and (1 shl 2)) != 0:

        var tempReplyMarkupI: ReplyMarkupI
        self.TLDecode(tempReplyMarkupI)
        obj.reply_markup = some(tempReplyMarkupI)


proc TLDecode*(self: var ScalingSeq[uint8], obj: inputBotInlineMessageText) = 
    self.TLDecode(addr obj.flags)
    obj.message = cast[string](self.TLDecode())
    if (obj.flags and (1 shl 1)) != 0:

        var tempMessageEntityI: seq[MessageEntityI]
        self.TLDecode(tempMessageEntityI)
        obj.entities = some(tempMessageEntityI)

    if (obj.flags and (1 shl 2)) != 0:

        var tempReplyMarkupI: ReplyMarkupI
        self.TLDecode(tempReplyMarkupI)
        obj.reply_markup = some(tempReplyMarkupI)


proc TLDecode*(self: var ScalingSeq[uint8], obj: inputBotInlineMessageMediaGeo) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(obj.geo_point)
    if (obj.flags and (1 shl 0)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.heading = some(tempint32)

    if (obj.flags and (1 shl 1)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.period = some(tempint32)

    if (obj.flags and (1 shl 3)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.proximity_notification_radius = some(tempint32)

    if (obj.flags and (1 shl 2)) != 0:

        var tempReplyMarkupI: ReplyMarkupI
        self.TLDecode(tempReplyMarkupI)
        obj.reply_markup = some(tempReplyMarkupI)


proc TLDecode*(self: var ScalingSeq[uint8], obj: inputBotInlineMessageMediaVenue) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(obj.geo_point)
    obj.title = cast[string](self.TLDecode())
    obj.address = cast[string](self.TLDecode())
    obj.provider = cast[string](self.TLDecode())
    obj.venue_id = cast[string](self.TLDecode())
    obj.venue_type = cast[string](self.TLDecode())
    if (obj.flags and (1 shl 2)) != 0:

        var tempReplyMarkupI: ReplyMarkupI
        self.TLDecode(tempReplyMarkupI)
        obj.reply_markup = some(tempReplyMarkupI)


proc TLDecode*(self: var ScalingSeq[uint8], obj: inputBotInlineMessageMediaContact) = 
    self.TLDecode(addr obj.flags)
    obj.phone_number = cast[string](self.TLDecode())
    obj.first_name = cast[string](self.TLDecode())
    obj.last_name = cast[string](self.TLDecode())
    obj.vcard = cast[string](self.TLDecode())
    if (obj.flags and (1 shl 2)) != 0:

        var tempReplyMarkupI: ReplyMarkupI
        self.TLDecode(tempReplyMarkupI)
        obj.reply_markup = some(tempReplyMarkupI)


proc TLDecode*(self: var ScalingSeq[uint8], obj: inputBotInlineMessageGame) = 
    self.TLDecode(addr obj.flags)
    if (obj.flags and (1 shl 2)) != 0:

        var tempReplyMarkupI: ReplyMarkupI
        self.TLDecode(tempReplyMarkupI)
        obj.reply_markup = some(tempReplyMarkupI)


proc TLDecode*(self: var ScalingSeq[uint8], obj: inputBotInlineResult) = 
    self.TLDecode(addr obj.flags)
    obj.id = cast[string](self.TLDecode())
    obj.typeof = cast[string](self.TLDecode())
    if (obj.flags and (1 shl 1)) != 0:

        obj.title = some(cast[string](self.TLDecode()))

    if (obj.flags and (1 shl 2)) != 0:

        obj.description = some(cast[string](self.TLDecode()))

    if (obj.flags and (1 shl 3)) != 0:

        obj.url = some(cast[string](self.TLDecode()))

    if (obj.flags and (1 shl 4)) != 0:

        var tempInputWebDocumentI: InputWebDocumentI
        self.TLDecode(tempInputWebDocumentI)
        obj.thumb = some(tempInputWebDocumentI)

    if (obj.flags and (1 shl 5)) != 0:

        var tempInputWebDocumentI: InputWebDocumentI
        self.TLDecode(tempInputWebDocumentI)
        obj.content = some(tempInputWebDocumentI)

    self.TLDecode(obj.send_message)

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputBotInlineResultPhoto) = 
    obj.id = cast[string](self.TLDecode())
    obj.typeof = cast[string](self.TLDecode())
    self.TLDecode(obj.photo)
    self.TLDecode(obj.send_message)

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputBotInlineResultDocument) = 
    self.TLDecode(addr obj.flags)
    obj.id = cast[string](self.TLDecode())
    obj.typeof = cast[string](self.TLDecode())
    if (obj.flags and (1 shl 1)) != 0:

        obj.title = some(cast[string](self.TLDecode()))

    if (obj.flags and (1 shl 2)) != 0:

        obj.description = some(cast[string](self.TLDecode()))

    self.TLDecode(obj.document)
    self.TLDecode(obj.send_message)

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputBotInlineResultGame) = 
    obj.id = cast[string](self.TLDecode())
    obj.short_name = cast[string](self.TLDecode())
    self.TLDecode(obj.send_message)

proc TLDecode*(self: var ScalingSeq[uint8], obj: botInlineMessageMediaAuto) = 
    self.TLDecode(addr obj.flags)
    obj.message = cast[string](self.TLDecode())
    if (obj.flags and (1 shl 1)) != 0:

        var tempMessageEntityI: seq[MessageEntityI]
        self.TLDecode(tempMessageEntityI)
        obj.entities = some(tempMessageEntityI)

    if (obj.flags and (1 shl 2)) != 0:

        var tempReplyMarkupI: ReplyMarkupI
        self.TLDecode(tempReplyMarkupI)
        obj.reply_markup = some(tempReplyMarkupI)


proc TLDecode*(self: var ScalingSeq[uint8], obj: botInlineMessageText) = 
    self.TLDecode(addr obj.flags)
    obj.message = cast[string](self.TLDecode())
    if (obj.flags and (1 shl 1)) != 0:

        var tempMessageEntityI: seq[MessageEntityI]
        self.TLDecode(tempMessageEntityI)
        obj.entities = some(tempMessageEntityI)

    if (obj.flags and (1 shl 2)) != 0:

        var tempReplyMarkupI: ReplyMarkupI
        self.TLDecode(tempReplyMarkupI)
        obj.reply_markup = some(tempReplyMarkupI)


proc TLDecode*(self: var ScalingSeq[uint8], obj: botInlineMessageMediaGeo) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(obj.geo)
    if (obj.flags and (1 shl 0)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.heading = some(tempint32)

    if (obj.flags and (1 shl 1)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.period = some(tempint32)

    if (obj.flags and (1 shl 3)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.proximity_notification_radius = some(tempint32)

    if (obj.flags and (1 shl 2)) != 0:

        var tempReplyMarkupI: ReplyMarkupI
        self.TLDecode(tempReplyMarkupI)
        obj.reply_markup = some(tempReplyMarkupI)


proc TLDecode*(self: var ScalingSeq[uint8], obj: botInlineMessageMediaVenue) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(obj.geo)
    obj.title = cast[string](self.TLDecode())
    obj.address = cast[string](self.TLDecode())
    obj.provider = cast[string](self.TLDecode())
    obj.venue_id = cast[string](self.TLDecode())
    obj.venue_type = cast[string](self.TLDecode())
    if (obj.flags and (1 shl 2)) != 0:

        var tempReplyMarkupI: ReplyMarkupI
        self.TLDecode(tempReplyMarkupI)
        obj.reply_markup = some(tempReplyMarkupI)


proc TLDecode*(self: var ScalingSeq[uint8], obj: botInlineMessageMediaContact) = 
    self.TLDecode(addr obj.flags)
    obj.phone_number = cast[string](self.TLDecode())
    obj.first_name = cast[string](self.TLDecode())
    obj.last_name = cast[string](self.TLDecode())
    obj.vcard = cast[string](self.TLDecode())
    if (obj.flags and (1 shl 2)) != 0:

        var tempReplyMarkupI: ReplyMarkupI
        self.TLDecode(tempReplyMarkupI)
        obj.reply_markup = some(tempReplyMarkupI)


proc TLDecode*(self: var ScalingSeq[uint8], obj: botInlineResult) = 
    self.TLDecode(addr obj.flags)
    obj.id = cast[string](self.TLDecode())
    obj.typeof = cast[string](self.TLDecode())
    if (obj.flags and (1 shl 1)) != 0:

        obj.title = some(cast[string](self.TLDecode()))

    if (obj.flags and (1 shl 2)) != 0:

        obj.description = some(cast[string](self.TLDecode()))

    if (obj.flags and (1 shl 3)) != 0:

        obj.url = some(cast[string](self.TLDecode()))

    if (obj.flags and (1 shl 4)) != 0:

        var tempWebDocumentI: WebDocumentI
        self.TLDecode(tempWebDocumentI)
        obj.thumb = some(tempWebDocumentI)

    if (obj.flags and (1 shl 5)) != 0:

        var tempWebDocumentI: WebDocumentI
        self.TLDecode(tempWebDocumentI)
        obj.content = some(tempWebDocumentI)

    self.TLDecode(obj.send_message)

proc TLDecode*(self: var ScalingSeq[uint8], obj: botInlineMediaResult) = 
    self.TLDecode(addr obj.flags)
    obj.id = cast[string](self.TLDecode())
    obj.typeof = cast[string](self.TLDecode())
    if (obj.flags and (1 shl 0)) != 0:

        var tempPhotoI: PhotoI
        self.TLDecode(tempPhotoI)
        obj.photo = some(tempPhotoI)

    if (obj.flags and (1 shl 1)) != 0:

        var tempDocumentI: DocumentI
        self.TLDecode(tempDocumentI)
        obj.document = some(tempDocumentI)

    if (obj.flags and (1 shl 2)) != 0:

        obj.title = some(cast[string](self.TLDecode()))

    if (obj.flags and (1 shl 3)) != 0:

        obj.description = some(cast[string](self.TLDecode()))

    self.TLDecode(obj.send_message)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_botResults) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(addr obj.query_id)
    if (obj.flags and (1 shl 1)) != 0:

        obj.next_offset = some(cast[string](self.TLDecode()))

    if (obj.flags and (1 shl 2)) != 0:

        var tempInlineBotSwitchPMI: InlineBotSwitchPMI
        self.TLDecode(tempInlineBotSwitchPMI)
        obj.switch_pm = some(tempInlineBotSwitchPMI)

    self.TLDecode(obj.results)
    self.TLDecode(addr obj.cache_time)
    self.TLDecode(obj.users)

proc TLDecode*(self: var ScalingSeq[uint8], obj: exportedMessageLink) = 
    obj.link = cast[string](self.TLDecode())
    obj.html = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageFwdHeader) = 
    self.TLDecode(addr obj.flags)
    if (obj.flags and (1 shl 0)) != 0:

        var tempPeerI: PeerI
        self.TLDecode(tempPeerI)
        obj.from_id = some(tempPeerI)

    if (obj.flags and (1 shl 5)) != 0:

        obj.from_name = some(cast[string](self.TLDecode()))

    self.TLDecode(addr obj.date)
    if (obj.flags and (1 shl 2)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.channel_post = some(tempint32)

    if (obj.flags and (1 shl 3)) != 0:

        obj.post_author = some(cast[string](self.TLDecode()))

    if (obj.flags and (1 shl 4)) != 0:

        var tempPeerI: PeerI
        self.TLDecode(tempPeerI)
        obj.saved_from_peer = some(tempPeerI)

    if (obj.flags and (1 shl 4)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.saved_from_msg_id = some(tempint32)

    if (obj.flags and (1 shl 6)) != 0:

        obj.psa_type = some(cast[string](self.TLDecode()))


proc TLDecode*(self: var ScalingSeq[uint8], obj: auth_codeTypeSms) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: auth_codeTypeCall) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: auth_codeTypeFlashCall) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: auth_sentCodeTypeApp) = 
    self.TLDecode(addr obj.length)

proc TLDecode*(self: var ScalingSeq[uint8], obj: auth_sentCodeTypeSms) = 
    self.TLDecode(addr obj.length)

proc TLDecode*(self: var ScalingSeq[uint8], obj: auth_sentCodeTypeCall) = 
    self.TLDecode(addr obj.length)

proc TLDecode*(self: var ScalingSeq[uint8], obj: auth_sentCodeTypeFlashCall) = 
    obj.pattern = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_botCallbackAnswer) = 
    self.TLDecode(addr obj.flags)
    if (obj.flags and (1 shl 0)) != 0:

        obj.message = some(cast[string](self.TLDecode()))

    if (obj.flags and (1 shl 2)) != 0:

        obj.url = some(cast[string](self.TLDecode()))

    self.TLDecode(addr obj.cache_time)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_messageEditData) = 
    self.TLDecode(addr obj.flags)

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputBotInlineMessageID) = 
    self.TLDecode(addr obj.dc_id)
    self.TLDecode(addr obj.id)
    self.TLDecode(addr obj.access_hash)

proc TLDecode*(self: var ScalingSeq[uint8], obj: inlineBotSwitchPM) = 
    obj.text = cast[string](self.TLDecode())
    obj.start_param = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_peerDialogs) = 
    self.TLDecode(obj.dialogs)
    self.TLDecode(obj.messages)
    self.TLDecode(obj.chats)
    self.TLDecode(obj.users)
    self.TLDecode(obj.state)

proc TLDecode*(self: var ScalingSeq[uint8], obj: topPeer) = 
    self.TLDecode(obj.peer)
    self.TLDecode(addr obj.rating)

proc TLDecode*(self: var ScalingSeq[uint8], obj: topPeerCategoryBotsPM) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: topPeerCategoryBotsInline) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: topPeerCategoryCorrespondents) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: topPeerCategoryGroups) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: topPeerCategoryChannels) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: topPeerCategoryPhoneCalls) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: topPeerCategoryForwardUsers) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: topPeerCategoryForwardChats) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: topPeerCategoryPeers) = 
    self.TLDecode(obj.category)
    self.TLDecode(addr obj.count)
    self.TLDecode(obj.peers)

proc TLDecode*(self: var ScalingSeq[uint8], obj: contacts_topPeersNotModified) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: contacts_topPeers) = 
    self.TLDecode(obj.categories)
    self.TLDecode(obj.chats)
    self.TLDecode(obj.users)

proc TLDecode*(self: var ScalingSeq[uint8], obj: contacts_topPeersDisabled) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: draftMessageEmpty) = 
    self.TLDecode(addr obj.flags)
    if (obj.flags and (1 shl 0)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.date = some(tempint32)


proc TLDecode*(self: var ScalingSeq[uint8], obj: draftMessage) = 
    self.TLDecode(addr obj.flags)
    if (obj.flags and (1 shl 0)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.reply_to_msg_id = some(tempint32)

    obj.message = cast[string](self.TLDecode())
    if (obj.flags and (1 shl 3)) != 0:

        var tempMessageEntityI: seq[MessageEntityI]
        self.TLDecode(tempMessageEntityI)
        obj.entities = some(tempMessageEntityI)

    self.TLDecode(addr obj.date)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_featuredStickersNotModified) = 
    self.TLDecode(addr obj.count)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_featuredStickers) = 
    self.TLDecode(addr obj.hash)
    self.TLDecode(addr obj.count)
    self.TLDecode(obj.sets)
    self.TLDecode(obj.unread)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_recentStickersNotModified) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_recentStickers) = 
    self.TLDecode(addr obj.hash)
    self.TLDecode(obj.packs)
    self.TLDecode(obj.stickers)
    self.TLDecode(obj.dates)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_archivedStickers) = 
    self.TLDecode(addr obj.count)
    self.TLDecode(obj.sets)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_stickerSetInstallResultSuccess) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_stickerSetInstallResultArchive) = 
    self.TLDecode(obj.sets)

proc TLDecode*(self: var ScalingSeq[uint8], obj: stickerSetCovered) = 
    self.TLDecode(obj.set)
    self.TLDecode(obj.cover)

proc TLDecode*(self: var ScalingSeq[uint8], obj: stickerSetMultiCovered) = 
    self.TLDecode(obj.set)
    self.TLDecode(obj.covers)

proc TLDecode*(self: var ScalingSeq[uint8], obj: maskCoords) = 
    self.TLDecode(addr obj.n)
    self.TLDecode(addr obj.x)
    self.TLDecode(addr obj.y)
    self.TLDecode(addr obj.zoom)

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputStickeredMediaPhoto) = 
    self.TLDecode(obj.id)

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputStickeredMediaDocument) = 
    self.TLDecode(obj.id)

proc TLDecode*(self: var ScalingSeq[uint8], obj: game) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(addr obj.id)
    self.TLDecode(addr obj.access_hash)
    obj.short_name = cast[string](self.TLDecode())
    obj.title = cast[string](self.TLDecode())
    obj.description = cast[string](self.TLDecode())
    self.TLDecode(obj.photo)
    if (obj.flags and (1 shl 0)) != 0:

        var tempDocumentI: DocumentI
        self.TLDecode(tempDocumentI)
        obj.document = some(tempDocumentI)


proc TLDecode*(self: var ScalingSeq[uint8], obj: inputGameID) = 
    self.TLDecode(addr obj.id)
    self.TLDecode(addr obj.access_hash)

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputGameShortName) = 
    self.TLDecode(obj.bot_id)
    obj.short_name = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: highScore) = 
    self.TLDecode(addr obj.pos)
    self.TLDecode(addr obj.user_id)
    self.TLDecode(addr obj.score)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_highScores) = 
    self.TLDecode(obj.scores)
    self.TLDecode(obj.users)

proc TLDecode*(self: var ScalingSeq[uint8], obj: textEmpty) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: textPlain) = 
    obj.text = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: textBold) = 
    self.TLDecode(obj.text)

proc TLDecode*(self: var ScalingSeq[uint8], obj: textItalic) = 
    self.TLDecode(obj.text)

proc TLDecode*(self: var ScalingSeq[uint8], obj: textUnderline) = 
    self.TLDecode(obj.text)

proc TLDecode*(self: var ScalingSeq[uint8], obj: textStrike) = 
    self.TLDecode(obj.text)

proc TLDecode*(self: var ScalingSeq[uint8], obj: textFixed) = 
    self.TLDecode(obj.text)

proc TLDecode*(self: var ScalingSeq[uint8], obj: textUrl) = 
    self.TLDecode(obj.text)
    obj.url = cast[string](self.TLDecode())
    self.TLDecode(addr obj.webpage_id)

proc TLDecode*(self: var ScalingSeq[uint8], obj: textEmail) = 
    self.TLDecode(obj.text)
    obj.email = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: textConcat) = 
    self.TLDecode(obj.texts)

proc TLDecode*(self: var ScalingSeq[uint8], obj: textSubscript) = 
    self.TLDecode(obj.text)

proc TLDecode*(self: var ScalingSeq[uint8], obj: textSuperscript) = 
    self.TLDecode(obj.text)

proc TLDecode*(self: var ScalingSeq[uint8], obj: textMarked) = 
    self.TLDecode(obj.text)

proc TLDecode*(self: var ScalingSeq[uint8], obj: textPhone) = 
    self.TLDecode(obj.text)
    obj.phone = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: textImage) = 
    self.TLDecode(addr obj.document_id)
    self.TLDecode(addr obj.w)
    self.TLDecode(addr obj.h)

proc TLDecode*(self: var ScalingSeq[uint8], obj: textAnchor) = 
    self.TLDecode(obj.text)
    obj.name = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageBlockUnsupported) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageBlockTitle) = 
    self.TLDecode(obj.text)

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageBlockSubtitle) = 
    self.TLDecode(obj.text)

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageBlockAuthorDate) = 
    self.TLDecode(obj.author)
    self.TLDecode(addr obj.published_date)

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageBlockHeader) = 
    self.TLDecode(obj.text)

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageBlockSubheader) = 
    self.TLDecode(obj.text)

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageBlockParagraph) = 
    self.TLDecode(obj.text)

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageBlockPreformatted) = 
    self.TLDecode(obj.text)
    obj.language = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageBlockFooter) = 
    self.TLDecode(obj.text)

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageBlockDivider) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageBlockAnchor) = 
    obj.name = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageBlockList) = 
    self.TLDecode(obj.items)

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageBlockBlockquote) = 
    self.TLDecode(obj.text)
    self.TLDecode(obj.caption)

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageBlockPullquote) = 
    self.TLDecode(obj.text)
    self.TLDecode(obj.caption)

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageBlockPhoto) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(addr obj.photo_id)
    self.TLDecode(obj.caption)
    if (obj.flags and (1 shl 0)) != 0:

        obj.url = some(cast[string](self.TLDecode()))

    if (obj.flags and (1 shl 0)) != 0:

        var tempint64: int64 = 0
        self.TLDecode(addr tempint64)
        obj.webpage_id = some(tempint64)


proc TLDecode*(self: var ScalingSeq[uint8], obj: pageBlockVideo) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(addr obj.video_id)
    self.TLDecode(obj.caption)

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageBlockCover) = 
    self.TLDecode(obj.cover)

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageBlockEmbed) = 
    self.TLDecode(addr obj.flags)
    if (obj.flags and (1 shl 1)) != 0:

        obj.url = some(cast[string](self.TLDecode()))

    if (obj.flags and (1 shl 2)) != 0:

        obj.html = some(cast[string](self.TLDecode()))

    if (obj.flags and (1 shl 4)) != 0:

        var tempint64: int64 = 0
        self.TLDecode(addr tempint64)
        obj.poster_photo_id = some(tempint64)

    if (obj.flags and (1 shl 5)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.w = some(tempint32)

    if (obj.flags and (1 shl 5)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.h = some(tempint32)

    self.TLDecode(obj.caption)

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageBlockEmbedPost) = 
    obj.url = cast[string](self.TLDecode())
    self.TLDecode(addr obj.webpage_id)
    self.TLDecode(addr obj.author_photo_id)
    obj.author = cast[string](self.TLDecode())
    self.TLDecode(addr obj.date)
    self.TLDecode(obj.blocks)
    self.TLDecode(obj.caption)

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageBlockCollage) = 
    self.TLDecode(obj.items)
    self.TLDecode(obj.caption)

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageBlockSlideshow) = 
    self.TLDecode(obj.items)
    self.TLDecode(obj.caption)

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageBlockChannel) = 
    self.TLDecode(obj.channel)

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageBlockAudio) = 
    self.TLDecode(addr obj.audio_id)
    self.TLDecode(obj.caption)

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageBlockKicker) = 
    self.TLDecode(obj.text)

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageBlockTable) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(obj.title)
    self.TLDecode(obj.rows)

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageBlockOrderedList) = 
    self.TLDecode(obj.items)

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageBlockDetails) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(obj.blocks)
    self.TLDecode(obj.title)

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageBlockRelatedArticles) = 
    self.TLDecode(obj.title)
    self.TLDecode(obj.articles)

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageBlockMap) = 
    self.TLDecode(obj.geo)
    self.TLDecode(addr obj.zoom)
    self.TLDecode(addr obj.w)
    self.TLDecode(addr obj.h)
    self.TLDecode(obj.caption)

proc TLDecode*(self: var ScalingSeq[uint8], obj: phoneCallDiscardReasonMissed) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: phoneCallDiscardReasonDisconnect) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: phoneCallDiscardReasonHangup) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: phoneCallDiscardReasonBusy) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: dataJSON) = 
    obj.data = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: labeledPrice) = 
    obj.label = cast[string](self.TLDecode())
    self.TLDecode(addr obj.amount)

proc TLDecode*(self: var ScalingSeq[uint8], obj: invoice) = 
    self.TLDecode(addr obj.flags)
    obj.currency = cast[string](self.TLDecode())
    self.TLDecode(obj.prices)

proc TLDecode*(self: var ScalingSeq[uint8], obj: paymentCharge) = 
    obj.id = cast[string](self.TLDecode())
    obj.provider_charge_id = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: postAddress) = 
    obj.street_line1 = cast[string](self.TLDecode())
    obj.street_line2 = cast[string](self.TLDecode())
    obj.city = cast[string](self.TLDecode())
    obj.state = cast[string](self.TLDecode())
    obj.country_iso2 = cast[string](self.TLDecode())
    obj.post_code = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: paymentRequestedInfo) = 
    self.TLDecode(addr obj.flags)
    if (obj.flags and (1 shl 0)) != 0:

        obj.name = some(cast[string](self.TLDecode()))

    if (obj.flags and (1 shl 1)) != 0:

        obj.phone = some(cast[string](self.TLDecode()))

    if (obj.flags and (1 shl 2)) != 0:

        obj.email = some(cast[string](self.TLDecode()))

    if (obj.flags and (1 shl 3)) != 0:

        var tempPostAddressI: PostAddressI
        self.TLDecode(tempPostAddressI)
        obj.shipping_address = some(tempPostAddressI)


proc TLDecode*(self: var ScalingSeq[uint8], obj: paymentSavedCredentialsCard) = 
    obj.id = cast[string](self.TLDecode())
    obj.title = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: webDocument) = 
    obj.url = cast[string](self.TLDecode())
    self.TLDecode(addr obj.access_hash)
    self.TLDecode(addr obj.size)
    obj.mime_type = cast[string](self.TLDecode())
    self.TLDecode(obj.attributes)

proc TLDecode*(self: var ScalingSeq[uint8], obj: webDocumentNoProxy) = 
    obj.url = cast[string](self.TLDecode())
    self.TLDecode(addr obj.size)
    obj.mime_type = cast[string](self.TLDecode())
    self.TLDecode(obj.attributes)

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputWebDocument) = 
    obj.url = cast[string](self.TLDecode())
    self.TLDecode(addr obj.size)
    obj.mime_type = cast[string](self.TLDecode())
    self.TLDecode(obj.attributes)

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputWebFileLocation) = 
    obj.url = cast[string](self.TLDecode())
    self.TLDecode(addr obj.access_hash)

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputWebFileGeoPointLocation) = 
    self.TLDecode(obj.geo_point)
    self.TLDecode(addr obj.access_hash)
    self.TLDecode(addr obj.w)
    self.TLDecode(addr obj.h)
    self.TLDecode(addr obj.zoom)
    self.TLDecode(addr obj.scale)

proc TLDecode*(self: var ScalingSeq[uint8], obj: upload_webFile) = 
    self.TLDecode(addr obj.size)
    obj.mime_type = cast[string](self.TLDecode())
    self.TLDecode(obj.file_type)
    self.TLDecode(addr obj.mtime)
    obj.bytes = self.TLDecode()

proc TLDecode*(self: var ScalingSeq[uint8], obj: payments_paymentForm) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(addr obj.bot_id)
    self.TLDecode(obj.invoice)
    self.TLDecode(addr obj.provider_id)
    obj.url = cast[string](self.TLDecode())
    if (obj.flags and (1 shl 4)) != 0:

        obj.native_provider = some(cast[string](self.TLDecode()))

    if (obj.flags and (1 shl 4)) != 0:

        var tempDataJSONI: DataJSONI
        self.TLDecode(tempDataJSONI)
        obj.native_params = some(tempDataJSONI)

    if (obj.flags and (1 shl 0)) != 0:

        var tempPaymentRequestedInfoI: PaymentRequestedInfoI
        self.TLDecode(tempPaymentRequestedInfoI)
        obj.saved_info = some(tempPaymentRequestedInfoI)

    if (obj.flags and (1 shl 1)) != 0:

        var tempPaymentSavedCredentialsI: PaymentSavedCredentialsI
        self.TLDecode(tempPaymentSavedCredentialsI)
        obj.saved_credentials = some(tempPaymentSavedCredentialsI)

    self.TLDecode(obj.users)

proc TLDecode*(self: var ScalingSeq[uint8], obj: payments_validatedRequestedInfo) = 
    self.TLDecode(addr obj.flags)
    if (obj.flags and (1 shl 0)) != 0:

        obj.id = some(cast[string](self.TLDecode()))

    if (obj.flags and (1 shl 1)) != 0:

        var tempShippingOptionI: seq[ShippingOptionI]
        self.TLDecode(tempShippingOptionI)
        obj.shipping_options = some(tempShippingOptionI)


proc TLDecode*(self: var ScalingSeq[uint8], obj: payments_paymentResult) = 
    self.TLDecode(obj.updates)

proc TLDecode*(self: var ScalingSeq[uint8], obj: payments_paymentVerificationNeeded) = 
    obj.url = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: payments_paymentReceipt) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(addr obj.date)
    self.TLDecode(addr obj.bot_id)
    self.TLDecode(obj.invoice)
    self.TLDecode(addr obj.provider_id)
    if (obj.flags and (1 shl 0)) != 0:

        var tempPaymentRequestedInfoI: PaymentRequestedInfoI
        self.TLDecode(tempPaymentRequestedInfoI)
        obj.info = some(tempPaymentRequestedInfoI)

    if (obj.flags and (1 shl 1)) != 0:

        var tempShippingOptionI: ShippingOptionI
        self.TLDecode(tempShippingOptionI)
        obj.shipping = some(tempShippingOptionI)

    obj.currency = cast[string](self.TLDecode())
    self.TLDecode(addr obj.total_amount)
    obj.credentials_title = cast[string](self.TLDecode())
    self.TLDecode(obj.users)

proc TLDecode*(self: var ScalingSeq[uint8], obj: payments_savedInfo) = 
    self.TLDecode(addr obj.flags)
    if (obj.flags and (1 shl 0)) != 0:

        var tempPaymentRequestedInfoI: PaymentRequestedInfoI
        self.TLDecode(tempPaymentRequestedInfoI)
        obj.saved_info = some(tempPaymentRequestedInfoI)


proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPaymentCredentialsSaved) = 
    obj.id = cast[string](self.TLDecode())
    obj.tmp_password = self.TLDecode()

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPaymentCredentials) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(obj.data)

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPaymentCredentialsApplePay) = 
    self.TLDecode(obj.payment_data)

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPaymentCredentialsAndroidPay) = 
    self.TLDecode(obj.payment_token)
    obj.google_transaction_id = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: account_tmpPassword) = 
    obj.tmp_password = self.TLDecode()
    self.TLDecode(addr obj.valid_until)

proc TLDecode*(self: var ScalingSeq[uint8], obj: shippingOption) = 
    obj.id = cast[string](self.TLDecode())
    obj.title = cast[string](self.TLDecode())
    self.TLDecode(obj.prices)

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputStickerSetItem) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(obj.document)
    obj.emoji = cast[string](self.TLDecode())
    if (obj.flags and (1 shl 0)) != 0:

        var tempMaskCoordsI: MaskCoordsI
        self.TLDecode(tempMaskCoordsI)
        obj.mask_coords = some(tempMaskCoordsI)


proc TLDecode*(self: var ScalingSeq[uint8], obj: inputPhoneCall) = 
    self.TLDecode(addr obj.id)
    self.TLDecode(addr obj.access_hash)

proc TLDecode*(self: var ScalingSeq[uint8], obj: phoneCallEmpty) = 
    self.TLDecode(addr obj.id)

proc TLDecode*(self: var ScalingSeq[uint8], obj: phoneCallWaiting) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(addr obj.id)
    self.TLDecode(addr obj.access_hash)
    self.TLDecode(addr obj.date)
    self.TLDecode(addr obj.admin_id)
    self.TLDecode(addr obj.participant_id)
    self.TLDecode(obj.protocol)
    if (obj.flags and (1 shl 0)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.receive_date = some(tempint32)


proc TLDecode*(self: var ScalingSeq[uint8], obj: phoneCallRequested) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(addr obj.id)
    self.TLDecode(addr obj.access_hash)
    self.TLDecode(addr obj.date)
    self.TLDecode(addr obj.admin_id)
    self.TLDecode(addr obj.participant_id)
    obj.g_a_hash = self.TLDecode()
    self.TLDecode(obj.protocol)

proc TLDecode*(self: var ScalingSeq[uint8], obj: phoneCallAccepted) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(addr obj.id)
    self.TLDecode(addr obj.access_hash)
    self.TLDecode(addr obj.date)
    self.TLDecode(addr obj.admin_id)
    self.TLDecode(addr obj.participant_id)
    obj.g_b = self.TLDecode()
    self.TLDecode(obj.protocol)

proc TLDecode*(self: var ScalingSeq[uint8], obj: phoneCall) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(addr obj.id)
    self.TLDecode(addr obj.access_hash)
    self.TLDecode(addr obj.date)
    self.TLDecode(addr obj.admin_id)
    self.TLDecode(addr obj.participant_id)
    obj.g_a_or_b = self.TLDecode()
    self.TLDecode(addr obj.key_fingerprint)
    self.TLDecode(obj.protocol)
    self.TLDecode(obj.connections)
    self.TLDecode(addr obj.start_date)

proc TLDecode*(self: var ScalingSeq[uint8], obj: phoneCallDiscarded) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(addr obj.id)
    if (obj.flags and (1 shl 0)) != 0:

        var tempPhoneCallDiscardReasonI: PhoneCallDiscardReasonI
        self.TLDecode(tempPhoneCallDiscardReasonI)
        obj.reason = some(tempPhoneCallDiscardReasonI)

    if (obj.flags and (1 shl 1)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.duration = some(tempint32)


proc TLDecode*(self: var ScalingSeq[uint8], obj: phoneConnection) = 
    self.TLDecode(addr obj.id)
    obj.ip = cast[string](self.TLDecode())
    obj.ipv6 = cast[string](self.TLDecode())
    self.TLDecode(addr obj.port)
    obj.peer_tag = self.TLDecode()

proc TLDecode*(self: var ScalingSeq[uint8], obj: phoneConnectionWebrtc) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(addr obj.id)
    obj.ip = cast[string](self.TLDecode())
    obj.ipv6 = cast[string](self.TLDecode())
    self.TLDecode(addr obj.port)
    obj.username = cast[string](self.TLDecode())
    obj.password = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: phoneCallProtocol) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(addr obj.min_layer)
    self.TLDecode(addr obj.max_layer)
    obj.library_versions = cast[seq[string]](self.TLDecodeSeq())

proc TLDecode*(self: var ScalingSeq[uint8], obj: phone_phoneCall) = 
    self.TLDecode(obj.phone_call)
    self.TLDecode(obj.users)

proc TLDecode*(self: var ScalingSeq[uint8], obj: upload_cdnFileReuploadNeeded) = 
    obj.request_token = self.TLDecode()

proc TLDecode*(self: var ScalingSeq[uint8], obj: upload_cdnFile) = 
    obj.bytes = self.TLDecode()

proc TLDecode*(self: var ScalingSeq[uint8], obj: cdnPublicKey) = 
    self.TLDecode(addr obj.dc_id)
    obj.public_key = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: cdnConfig) = 
    self.TLDecode(obj.public_keys)

proc TLDecode*(self: var ScalingSeq[uint8], obj: langPackString) = 
    obj.key = cast[string](self.TLDecode())
    obj.value = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: langPackStringPluralized) = 
    self.TLDecode(addr obj.flags)
    obj.key = cast[string](self.TLDecode())
    if (obj.flags and (1 shl 0)) != 0:

        obj.zero_value = some(cast[string](self.TLDecode()))

    if (obj.flags and (1 shl 1)) != 0:

        obj.one_value = some(cast[string](self.TLDecode()))

    if (obj.flags and (1 shl 2)) != 0:

        obj.two_value = some(cast[string](self.TLDecode()))

    if (obj.flags and (1 shl 3)) != 0:

        obj.few_value = some(cast[string](self.TLDecode()))

    if (obj.flags and (1 shl 4)) != 0:

        obj.many_value = some(cast[string](self.TLDecode()))

    obj.other_value = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: langPackStringDeleted) = 
    obj.key = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: langPackDifference) = 
    obj.lang_code = cast[string](self.TLDecode())
    self.TLDecode(addr obj.from_version)
    self.TLDecode(addr obj.version)
    self.TLDecode(obj.strings)

proc TLDecode*(self: var ScalingSeq[uint8], obj: langPackLanguage) = 
    self.TLDecode(addr obj.flags)
    obj.name = cast[string](self.TLDecode())
    obj.native_name = cast[string](self.TLDecode())
    obj.lang_code = cast[string](self.TLDecode())
    if (obj.flags and (1 shl 1)) != 0:

        obj.base_lang_code = some(cast[string](self.TLDecode()))

    obj.plural_code = cast[string](self.TLDecode())
    self.TLDecode(addr obj.strings_count)
    self.TLDecode(addr obj.translated_count)
    obj.translations_url = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelAdminLogEventActionChangeTitle) = 
    obj.prev_value = cast[string](self.TLDecode())
    obj.new_value = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelAdminLogEventActionChangeAbout) = 
    obj.prev_value = cast[string](self.TLDecode())
    obj.new_value = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelAdminLogEventActionChangeUsername) = 
    obj.prev_value = cast[string](self.TLDecode())
    obj.new_value = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelAdminLogEventActionChangePhoto) = 
    self.TLDecode(obj.prev_photo)
    self.TLDecode(obj.new_photo)

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelAdminLogEventActionToggleInvites) = 
    self.TLDecode(obj.new_value)

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelAdminLogEventActionToggleSignatures) = 
    self.TLDecode(obj.new_value)

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelAdminLogEventActionUpdatePinned) = 
    self.TLDecode(obj.message)

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelAdminLogEventActionEditMessage) = 
    self.TLDecode(obj.prev_message)
    self.TLDecode(obj.new_message)

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelAdminLogEventActionDeleteMessage) = 
    self.TLDecode(obj.message)

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelAdminLogEventActionParticipantJoin) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelAdminLogEventActionParticipantLeave) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelAdminLogEventActionParticipantInvite) = 
    self.TLDecode(obj.participant)

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelAdminLogEventActionParticipantToggleBan) = 
    self.TLDecode(obj.prev_participant)
    self.TLDecode(obj.new_participant)

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelAdminLogEventActionParticipantToggleAdmin) = 
    self.TLDecode(obj.prev_participant)
    self.TLDecode(obj.new_participant)

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelAdminLogEventActionChangeStickerSet) = 
    self.TLDecode(obj.prev_stickerset)
    self.TLDecode(obj.new_stickerset)

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelAdminLogEventActionTogglePreHistoryHidden) = 
    self.TLDecode(obj.new_value)

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelAdminLogEventActionDefaultBannedRights) = 
    self.TLDecode(obj.prev_banned_rights)
    self.TLDecode(obj.new_banned_rights)

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelAdminLogEventActionStopPoll) = 
    self.TLDecode(obj.message)

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelAdminLogEventActionChangeLinkedChat) = 
    self.TLDecode(addr obj.prev_value)
    self.TLDecode(addr obj.new_value)

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelAdminLogEventActionChangeLocation) = 
    self.TLDecode(obj.prev_value)
    self.TLDecode(obj.new_value)

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelAdminLogEventActionToggleSlowMode) = 
    self.TLDecode(addr obj.prev_value)
    self.TLDecode(addr obj.new_value)

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelAdminLogEvent) = 
    self.TLDecode(addr obj.id)
    self.TLDecode(addr obj.date)
    self.TLDecode(addr obj.user_id)
    self.TLDecode(obj.action)

proc TLDecode*(self: var ScalingSeq[uint8], obj: channels_adminLogResults) = 
    self.TLDecode(obj.events)
    self.TLDecode(obj.chats)
    self.TLDecode(obj.users)

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelAdminLogEventsFilter) = 
    self.TLDecode(addr obj.flags)

proc TLDecode*(self: var ScalingSeq[uint8], obj: popularContact) = 
    self.TLDecode(addr obj.client_id)
    self.TLDecode(addr obj.importers)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_favedStickersNotModified) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_favedStickers) = 
    self.TLDecode(addr obj.hash)
    self.TLDecode(obj.packs)
    self.TLDecode(obj.stickers)

proc TLDecode*(self: var ScalingSeq[uint8], obj: recentMeUrlUnknown) = 
    obj.url = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: recentMeUrlUser) = 
    obj.url = cast[string](self.TLDecode())
    self.TLDecode(addr obj.user_id)

proc TLDecode*(self: var ScalingSeq[uint8], obj: recentMeUrlChat) = 
    obj.url = cast[string](self.TLDecode())
    self.TLDecode(addr obj.chat_id)

proc TLDecode*(self: var ScalingSeq[uint8], obj: recentMeUrlChatInvite) = 
    obj.url = cast[string](self.TLDecode())
    self.TLDecode(obj.chat_invite)

proc TLDecode*(self: var ScalingSeq[uint8], obj: recentMeUrlStickerSet) = 
    obj.url = cast[string](self.TLDecode())
    self.TLDecode(obj.set)

proc TLDecode*(self: var ScalingSeq[uint8], obj: help_recentMeUrls) = 
    self.TLDecode(obj.urls)
    self.TLDecode(obj.chats)
    self.TLDecode(obj.users)

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputSingleMedia) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(obj.media)
    self.TLDecode(addr obj.random_id)
    obj.message = cast[string](self.TLDecode())
    if (obj.flags and (1 shl 0)) != 0:

        var tempMessageEntityI: seq[MessageEntityI]
        self.TLDecode(tempMessageEntityI)
        obj.entities = some(tempMessageEntityI)


proc TLDecode*(self: var ScalingSeq[uint8], obj: webAuthorization) = 
    self.TLDecode(addr obj.hash)
    self.TLDecode(addr obj.bot_id)
    obj.domain = cast[string](self.TLDecode())
    obj.browser = cast[string](self.TLDecode())
    obj.platform = cast[string](self.TLDecode())
    self.TLDecode(addr obj.date_created)
    self.TLDecode(addr obj.date_active)
    obj.ip = cast[string](self.TLDecode())
    obj.region = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: account_webAuthorizations) = 
    self.TLDecode(obj.authorizations)
    self.TLDecode(obj.users)

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMessageID) = 
    self.TLDecode(addr obj.id)

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMessageReplyTo) = 
    self.TLDecode(addr obj.id)

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputMessagePinned) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputDialogPeer) = 
    self.TLDecode(obj.peer)

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputDialogPeerFolder) = 
    self.TLDecode(addr obj.folder_id)

proc TLDecode*(self: var ScalingSeq[uint8], obj: dialogPeer) = 
    self.TLDecode(obj.peer)

proc TLDecode*(self: var ScalingSeq[uint8], obj: dialogPeerFolder) = 
    self.TLDecode(addr obj.folder_id)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_foundStickerSetsNotModified) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_foundStickerSets) = 
    self.TLDecode(addr obj.hash)
    self.TLDecode(obj.sets)

proc TLDecode*(self: var ScalingSeq[uint8], obj: fileHash) = 
    self.TLDecode(addr obj.offset)
    self.TLDecode(addr obj.limit)
    obj.hash = self.TLDecode()

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputClientProxy) = 
    obj.address = cast[string](self.TLDecode())
    self.TLDecode(addr obj.port)

proc TLDecode*(self: var ScalingSeq[uint8], obj: help_termsOfServiceUpdateEmpty) = 
    self.TLDecode(addr obj.expires)

proc TLDecode*(self: var ScalingSeq[uint8], obj: help_termsOfServiceUpdate) = 
    self.TLDecode(addr obj.expires)
    self.TLDecode(obj.terms_of_service)

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputSecureFileUploaded) = 
    self.TLDecode(addr obj.id)
    self.TLDecode(addr obj.parts)
    obj.md5_checksum = cast[string](self.TLDecode())
    obj.file_hash = self.TLDecode()
    obj.secret = self.TLDecode()

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputSecureFile) = 
    self.TLDecode(addr obj.id)
    self.TLDecode(addr obj.access_hash)

proc TLDecode*(self: var ScalingSeq[uint8], obj: secureFileEmpty) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: secureFile) = 
    self.TLDecode(addr obj.id)
    self.TLDecode(addr obj.access_hash)
    self.TLDecode(addr obj.size)
    self.TLDecode(addr obj.dc_id)
    self.TLDecode(addr obj.date)
    obj.file_hash = self.TLDecode()
    obj.secret = self.TLDecode()

proc TLDecode*(self: var ScalingSeq[uint8], obj: secureData) = 
    obj.data = self.TLDecode()
    obj.data_hash = self.TLDecode()
    obj.secret = self.TLDecode()

proc TLDecode*(self: var ScalingSeq[uint8], obj: securePlainPhone) = 
    obj.phone = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: securePlainEmail) = 
    obj.email = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: secureValueTypePersonalDetails) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: secureValueTypePassport) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: secureValueTypeDriverLicense) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: secureValueTypeIdentityCard) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: secureValueTypeInternalPassport) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: secureValueTypeAddress) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: secureValueTypeUtilityBill) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: secureValueTypeBankStatement) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: secureValueTypeRentalAgreement) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: secureValueTypePassportRegistration) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: secureValueTypeTemporaryRegistration) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: secureValueTypePhone) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: secureValueTypeEmail) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: secureValue) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(obj.typeof)
    if (obj.flags and (1 shl 0)) != 0:

        var tempSecureDataI: SecureDataI
        self.TLDecode(tempSecureDataI)
        obj.data = some(tempSecureDataI)

    if (obj.flags and (1 shl 1)) != 0:

        var tempSecureFileI: SecureFileI
        self.TLDecode(tempSecureFileI)
        obj.front_side = some(tempSecureFileI)

    if (obj.flags and (1 shl 2)) != 0:

        var tempSecureFileI: SecureFileI
        self.TLDecode(tempSecureFileI)
        obj.reverse_side = some(tempSecureFileI)

    if (obj.flags and (1 shl 3)) != 0:

        var tempSecureFileI: SecureFileI
        self.TLDecode(tempSecureFileI)
        obj.selfie = some(tempSecureFileI)

    if (obj.flags and (1 shl 6)) != 0:

        var tempSecureFileI: seq[SecureFileI]
        self.TLDecode(tempSecureFileI)
        obj.translation = some(tempSecureFileI)

    if (obj.flags and (1 shl 4)) != 0:

        var tempSecureFileI: seq[SecureFileI]
        self.TLDecode(tempSecureFileI)
        obj.files = some(tempSecureFileI)

    if (obj.flags and (1 shl 5)) != 0:

        var tempSecurePlainDataI: SecurePlainDataI
        self.TLDecode(tempSecurePlainDataI)
        obj.plain_data = some(tempSecurePlainDataI)

    obj.hash = self.TLDecode()

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputSecureValue) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(obj.typeof)
    if (obj.flags and (1 shl 0)) != 0:

        var tempSecureDataI: SecureDataI
        self.TLDecode(tempSecureDataI)
        obj.data = some(tempSecureDataI)

    if (obj.flags and (1 shl 1)) != 0:

        var tempInputSecureFileI: InputSecureFileI
        self.TLDecode(tempInputSecureFileI)
        obj.front_side = some(tempInputSecureFileI)

    if (obj.flags and (1 shl 2)) != 0:

        var tempInputSecureFileI: InputSecureFileI
        self.TLDecode(tempInputSecureFileI)
        obj.reverse_side = some(tempInputSecureFileI)

    if (obj.flags and (1 shl 3)) != 0:

        var tempInputSecureFileI: InputSecureFileI
        self.TLDecode(tempInputSecureFileI)
        obj.selfie = some(tempInputSecureFileI)

    if (obj.flags and (1 shl 6)) != 0:

        var tempInputSecureFileI: seq[InputSecureFileI]
        self.TLDecode(tempInputSecureFileI)
        obj.translation = some(tempInputSecureFileI)

    if (obj.flags and (1 shl 4)) != 0:

        var tempInputSecureFileI: seq[InputSecureFileI]
        self.TLDecode(tempInputSecureFileI)
        obj.files = some(tempInputSecureFileI)

    if (obj.flags and (1 shl 5)) != 0:

        var tempSecurePlainDataI: SecurePlainDataI
        self.TLDecode(tempSecurePlainDataI)
        obj.plain_data = some(tempSecurePlainDataI)


proc TLDecode*(self: var ScalingSeq[uint8], obj: secureValueHash) = 
    self.TLDecode(obj.typeof)
    obj.hash = self.TLDecode()

proc TLDecode*(self: var ScalingSeq[uint8], obj: secureValueErrorData) = 
    self.TLDecode(obj.typeof)
    obj.data_hash = self.TLDecode()
    obj.field = cast[string](self.TLDecode())
    obj.text = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: secureValueErrorFrontSide) = 
    self.TLDecode(obj.typeof)
    obj.file_hash = self.TLDecode()
    obj.text = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: secureValueErrorReverseSide) = 
    self.TLDecode(obj.typeof)
    obj.file_hash = self.TLDecode()
    obj.text = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: secureValueErrorSelfie) = 
    self.TLDecode(obj.typeof)
    obj.file_hash = self.TLDecode()
    obj.text = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: secureValueErrorFile) = 
    self.TLDecode(obj.typeof)
    obj.file_hash = self.TLDecode()
    obj.text = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: secureValueErrorFiles) = 
    self.TLDecode(obj.typeof)
    obj.file_hash = self.TLDecodeSeq()
    obj.text = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: secureValueError) = 
    self.TLDecode(obj.typeof)
    obj.hash = self.TLDecode()
    obj.text = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: secureValueErrorTranslationFile) = 
    self.TLDecode(obj.typeof)
    obj.file_hash = self.TLDecode()
    obj.text = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: secureValueErrorTranslationFiles) = 
    self.TLDecode(obj.typeof)
    obj.file_hash = self.TLDecodeSeq()
    obj.text = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: secureCredentialsEncrypted) = 
    obj.data = self.TLDecode()
    obj.hash = self.TLDecode()
    obj.secret = self.TLDecode()

proc TLDecode*(self: var ScalingSeq[uint8], obj: account_authorizationForm) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(obj.required_types)
    self.TLDecode(obj.values)
    self.TLDecode(obj.errors)
    self.TLDecode(obj.users)
    if (obj.flags and (1 shl 0)) != 0:

        obj.privacy_policy_url = some(cast[string](self.TLDecode()))


proc TLDecode*(self: var ScalingSeq[uint8], obj: account_sentEmailCode) = 
    obj.email_pattern = cast[string](self.TLDecode())
    self.TLDecode(addr obj.length)

proc TLDecode*(self: var ScalingSeq[uint8], obj: help_deepLinkInfoEmpty) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: help_deepLinkInfo) = 
    self.TLDecode(addr obj.flags)
    obj.message = cast[string](self.TLDecode())
    if (obj.flags and (1 shl 1)) != 0:

        var tempMessageEntityI: seq[MessageEntityI]
        self.TLDecode(tempMessageEntityI)
        obj.entities = some(tempMessageEntityI)


proc TLDecode*(self: var ScalingSeq[uint8], obj: savedPhoneContact) = 
    obj.phone = cast[string](self.TLDecode())
    obj.first_name = cast[string](self.TLDecode())
    obj.last_name = cast[string](self.TLDecode())
    self.TLDecode(addr obj.date)

proc TLDecode*(self: var ScalingSeq[uint8], obj: account_takeout) = 
    self.TLDecode(addr obj.id)

proc TLDecode*(self: var ScalingSeq[uint8], obj: passwordKdfAlgoUnknown) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow) = 
    obj.salt1 = self.TLDecode()
    obj.salt2 = self.TLDecode()
    self.TLDecode(addr obj.g)
    obj.p = self.TLDecode()

proc TLDecode*(self: var ScalingSeq[uint8], obj: securePasswordKdfAlgoUnknown) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: securePasswordKdfAlgoPBKDF2HMACSHA512iter100000) = 
    obj.salt = self.TLDecode()

proc TLDecode*(self: var ScalingSeq[uint8], obj: securePasswordKdfAlgoSHA512) = 
    obj.salt = self.TLDecode()

proc TLDecode*(self: var ScalingSeq[uint8], obj: secureSecretSettings) = 
    self.TLDecode(obj.secure_algo)
    obj.secure_secret = self.TLDecode()
    self.TLDecode(addr obj.secure_secret_id)

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputCheckPasswordEmpty) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputCheckPasswordSRP) = 
    self.TLDecode(addr obj.srp_id)
    obj.A = self.TLDecode()
    obj.M1 = self.TLDecode()

proc TLDecode*(self: var ScalingSeq[uint8], obj: secureRequiredType) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(obj.typeof)

proc TLDecode*(self: var ScalingSeq[uint8], obj: secureRequiredTypeOneOf) = 
    self.TLDecode(obj.types)

proc TLDecode*(self: var ScalingSeq[uint8], obj: help_passportConfigNotModified) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: help_passportConfig) = 
    self.TLDecode(addr obj.hash)
    self.TLDecode(obj.countries_langs)

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputAppEvent) = 
    self.TLDecode(addr obj.time)
    obj.typeof = cast[string](self.TLDecode())
    self.TLDecode(addr obj.peer)
    self.TLDecode(obj.data)

proc TLDecode*(self: var ScalingSeq[uint8], obj: jsonObjectValue) = 
    obj.key = cast[string](self.TLDecode())
    self.TLDecode(obj.value)

proc TLDecode*(self: var ScalingSeq[uint8], obj: jsonNull) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: jsonBool) = 
    self.TLDecode(obj.value)

proc TLDecode*(self: var ScalingSeq[uint8], obj: jsonNumber) = 
    self.TLDecode(addr obj.value)

proc TLDecode*(self: var ScalingSeq[uint8], obj: jsonString) = 
    obj.value = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: jsonArray) = 
    self.TLDecode(obj.value)

proc TLDecode*(self: var ScalingSeq[uint8], obj: jsonObject) = 
    self.TLDecode(obj.value)

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageTableCell) = 
    self.TLDecode(addr obj.flags)
    if (obj.flags and (1 shl 7)) != 0:

        var tempRichTextI: RichTextI
        self.TLDecode(tempRichTextI)
        obj.text = some(tempRichTextI)

    if (obj.flags and (1 shl 1)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.colspan = some(tempint32)

    if (obj.flags and (1 shl 2)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.rowspan = some(tempint32)


proc TLDecode*(self: var ScalingSeq[uint8], obj: pageTableRow) = 
    self.TLDecode(obj.cells)

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageCaption) = 
    self.TLDecode(obj.text)
    self.TLDecode(obj.credit)

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageListItemText) = 
    self.TLDecode(obj.text)

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageListItemBlocks) = 
    self.TLDecode(obj.blocks)

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageListOrderedItemText) = 
    obj.num = cast[string](self.TLDecode())
    self.TLDecode(obj.text)

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageListOrderedItemBlocks) = 
    obj.num = cast[string](self.TLDecode())
    self.TLDecode(obj.blocks)

proc TLDecode*(self: var ScalingSeq[uint8], obj: pageRelatedArticle) = 
    self.TLDecode(addr obj.flags)
    obj.url = cast[string](self.TLDecode())
    self.TLDecode(addr obj.webpage_id)
    if (obj.flags and (1 shl 0)) != 0:

        obj.title = some(cast[string](self.TLDecode()))

    if (obj.flags and (1 shl 1)) != 0:

        obj.description = some(cast[string](self.TLDecode()))

    if (obj.flags and (1 shl 2)) != 0:

        var tempint64: int64 = 0
        self.TLDecode(addr tempint64)
        obj.photo_id = some(tempint64)

    if (obj.flags and (1 shl 3)) != 0:

        obj.author = some(cast[string](self.TLDecode()))

    if (obj.flags and (1 shl 4)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.published_date = some(tempint32)


proc TLDecode*(self: var ScalingSeq[uint8], obj: page) = 
    self.TLDecode(addr obj.flags)
    obj.url = cast[string](self.TLDecode())
    self.TLDecode(obj.blocks)
    self.TLDecode(obj.photos)
    self.TLDecode(obj.documents)
    if (obj.flags and (1 shl 3)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.views = some(tempint32)


proc TLDecode*(self: var ScalingSeq[uint8], obj: help_supportName) = 
    obj.name = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: help_userInfoEmpty) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: help_userInfo) = 
    obj.message = cast[string](self.TLDecode())
    self.TLDecode(obj.entities)
    obj.author = cast[string](self.TLDecode())
    self.TLDecode(addr obj.date)

proc TLDecode*(self: var ScalingSeq[uint8], obj: pollAnswer) = 
    obj.text = cast[string](self.TLDecode())
    obj.option = self.TLDecode()

proc TLDecode*(self: var ScalingSeq[uint8], obj: poll) = 
    self.TLDecode(addr obj.id)
    self.TLDecode(addr obj.flags)
    obj.question = cast[string](self.TLDecode())
    self.TLDecode(obj.answers)
    if (obj.flags and (1 shl 4)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.close_period = some(tempint32)

    if (obj.flags and (1 shl 5)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.close_date = some(tempint32)


proc TLDecode*(self: var ScalingSeq[uint8], obj: pollAnswerVoters) = 
    self.TLDecode(addr obj.flags)
    obj.option = self.TLDecode()
    self.TLDecode(addr obj.voters)

proc TLDecode*(self: var ScalingSeq[uint8], obj: pollResults) = 
    self.TLDecode(addr obj.flags)
    if (obj.flags and (1 shl 1)) != 0:

        var tempPollAnswerVotersI: seq[PollAnswerVotersI]
        self.TLDecode(tempPollAnswerVotersI)
        obj.results = some(tempPollAnswerVotersI)

    if (obj.flags and (1 shl 2)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.total_voters = some(tempint32)

    if (obj.flags and (1 shl 3)) != 0:

        var tempint32: seq[int32]
        self.TLDecode(tempint32)
        obj.recent_voters = some(tempint32)

    if (obj.flags and (1 shl 4)) != 0:

        obj.solution = some(cast[string](self.TLDecode()))

    if (obj.flags and (1 shl 4)) != 0:

        var tempMessageEntityI: seq[MessageEntityI]
        self.TLDecode(tempMessageEntityI)
        obj.solution_entities = some(tempMessageEntityI)


proc TLDecode*(self: var ScalingSeq[uint8], obj: chatOnlines) = 
    self.TLDecode(addr obj.onlines)

proc TLDecode*(self: var ScalingSeq[uint8], obj: statsURL) = 
    obj.url = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: chatAdminRights) = 
    self.TLDecode(addr obj.flags)

proc TLDecode*(self: var ScalingSeq[uint8], obj: chatBannedRights) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(addr obj.until_date)

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputWallPaper) = 
    self.TLDecode(addr obj.id)
    self.TLDecode(addr obj.access_hash)

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputWallPaperSlug) = 
    obj.slug = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputWallPaperNoFile) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: account_wallPapersNotModified) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: account_wallPapers) = 
    self.TLDecode(addr obj.hash)
    self.TLDecode(obj.wallpapers)

proc TLDecode*(self: var ScalingSeq[uint8], obj: codeSettings) = 
    self.TLDecode(addr obj.flags)

proc TLDecode*(self: var ScalingSeq[uint8], obj: wallPaperSettings) = 
    self.TLDecode(addr obj.flags)
    if (obj.flags and (1 shl 0)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.background_color = some(tempint32)

    if (obj.flags and (1 shl 4)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.second_background_color = some(tempint32)

    if (obj.flags and (1 shl 3)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.intensity = some(tempint32)

    if (obj.flags and (1 shl 4)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.rotation = some(tempint32)


proc TLDecode*(self: var ScalingSeq[uint8], obj: autoDownloadSettings) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(addr obj.photo_size_max)
    self.TLDecode(addr obj.video_size_max)
    self.TLDecode(addr obj.file_size_max)
    self.TLDecode(addr obj.video_upload_maxbitrate)

proc TLDecode*(self: var ScalingSeq[uint8], obj: account_autoDownloadSettings) = 
    self.TLDecode(obj.low)
    self.TLDecode(obj.medium)
    self.TLDecode(obj.high)

proc TLDecode*(self: var ScalingSeq[uint8], obj: emojiKeyword) = 
    obj.keyword = cast[string](self.TLDecode())
    obj.emoticons = cast[seq[string]](self.TLDecodeSeq())

proc TLDecode*(self: var ScalingSeq[uint8], obj: emojiKeywordDeleted) = 
    obj.keyword = cast[string](self.TLDecode())
    obj.emoticons = cast[seq[string]](self.TLDecodeSeq())

proc TLDecode*(self: var ScalingSeq[uint8], obj: emojiKeywordsDifference) = 
    obj.lang_code = cast[string](self.TLDecode())
    self.TLDecode(addr obj.from_version)
    self.TLDecode(addr obj.version)
    self.TLDecode(obj.keywords)

proc TLDecode*(self: var ScalingSeq[uint8], obj: emojiURL) = 
    obj.url = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: emojiLanguage) = 
    obj.lang_code = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: fileLocationToBeDeprecated) = 
    self.TLDecode(addr obj.volume_id)
    self.TLDecode(addr obj.local_id)

proc TLDecode*(self: var ScalingSeq[uint8], obj: folder) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(addr obj.id)
    obj.title = cast[string](self.TLDecode())
    if (obj.flags and (1 shl 3)) != 0:

        var tempChatPhotoI: ChatPhotoI
        self.TLDecode(tempChatPhotoI)
        obj.photo = some(tempChatPhotoI)


proc TLDecode*(self: var ScalingSeq[uint8], obj: inputFolderPeer) = 
    self.TLDecode(obj.peer)
    self.TLDecode(addr obj.folder_id)

proc TLDecode*(self: var ScalingSeq[uint8], obj: folderPeer) = 
    self.TLDecode(obj.peer)
    self.TLDecode(addr obj.folder_id)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_searchCounter) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(obj.filter)
    self.TLDecode(addr obj.count)

proc TLDecode*(self: var ScalingSeq[uint8], obj: urlAuthResultRequest) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(obj.bot)
    obj.domain = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: urlAuthResultAccepted) = 
    obj.url = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: urlAuthResultDefault) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelLocationEmpty) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: channelLocation) = 
    self.TLDecode(obj.geo_point)
    obj.address = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: peerLocated) = 
    self.TLDecode(obj.peer)
    self.TLDecode(addr obj.expires)
    self.TLDecode(addr obj.distance)

proc TLDecode*(self: var ScalingSeq[uint8], obj: peerSelfLocated) = 
    self.TLDecode(addr obj.expires)

proc TLDecode*(self: var ScalingSeq[uint8], obj: restrictionReason) = 
    obj.platform = cast[string](self.TLDecode())
    obj.reason = cast[string](self.TLDecode())
    obj.text = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputTheme) = 
    self.TLDecode(addr obj.id)
    self.TLDecode(addr obj.access_hash)

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputThemeSlug) = 
    obj.slug = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: theme) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(addr obj.id)
    self.TLDecode(addr obj.access_hash)
    obj.slug = cast[string](self.TLDecode())
    obj.title = cast[string](self.TLDecode())
    if (obj.flags and (1 shl 2)) != 0:

        var tempDocumentI: DocumentI
        self.TLDecode(tempDocumentI)
        obj.document = some(tempDocumentI)

    if (obj.flags and (1 shl 3)) != 0:

        var tempThemeSettingsI: ThemeSettingsI
        self.TLDecode(tempThemeSettingsI)
        obj.settings = some(tempThemeSettingsI)

    self.TLDecode(addr obj.installs_count)

proc TLDecode*(self: var ScalingSeq[uint8], obj: account_themesNotModified) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: account_themes) = 
    self.TLDecode(addr obj.hash)
    self.TLDecode(obj.themes)

proc TLDecode*(self: var ScalingSeq[uint8], obj: auth_loginToken) = 
    self.TLDecode(addr obj.expires)
    obj.token = self.TLDecode()

proc TLDecode*(self: var ScalingSeq[uint8], obj: auth_loginTokenMigrateTo) = 
    self.TLDecode(addr obj.dc_id)
    obj.token = self.TLDecode()

proc TLDecode*(self: var ScalingSeq[uint8], obj: auth_loginTokenSuccess) = 
    self.TLDecode(obj.authorization)

proc TLDecode*(self: var ScalingSeq[uint8], obj: account_contentSettings) = 
    self.TLDecode(addr obj.flags)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_inactiveChats) = 
    self.TLDecode(obj.dates)
    self.TLDecode(obj.chats)
    self.TLDecode(obj.users)

proc TLDecode*(self: var ScalingSeq[uint8], obj: baseThemeClassic) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: baseThemeDay) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: baseThemeNight) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: baseThemeTinted) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: baseThemeArctic) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: inputThemeSettings) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(obj.base_theme)
    self.TLDecode(addr obj.accent_color)
    if (obj.flags and (1 shl 0)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.message_top_color = some(tempint32)

    if (obj.flags and (1 shl 0)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.message_bottom_color = some(tempint32)

    if (obj.flags and (1 shl 1)) != 0:

        var tempInputWallPaperI: InputWallPaperI
        self.TLDecode(tempInputWallPaperI)
        obj.wallpaper = some(tempInputWallPaperI)

    if (obj.flags and (1 shl 1)) != 0:

        var tempWallPaperSettingsI: WallPaperSettingsI
        self.TLDecode(tempWallPaperSettingsI)
        obj.wallpaper_settings = some(tempWallPaperSettingsI)


proc TLDecode*(self: var ScalingSeq[uint8], obj: themeSettings) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(obj.base_theme)
    self.TLDecode(addr obj.accent_color)
    if (obj.flags and (1 shl 0)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.message_top_color = some(tempint32)

    if (obj.flags and (1 shl 0)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.message_bottom_color = some(tempint32)

    if (obj.flags and (1 shl 1)) != 0:

        var tempWallPaperI: WallPaperI
        self.TLDecode(tempWallPaperI)
        obj.wallpaper = some(tempWallPaperI)


proc TLDecode*(self: var ScalingSeq[uint8], obj: webPageAttributeTheme) = 
    self.TLDecode(addr obj.flags)
    if (obj.flags and (1 shl 0)) != 0:

        var tempDocumentI: seq[DocumentI]
        self.TLDecode(tempDocumentI)
        obj.documents = some(tempDocumentI)

    if (obj.flags and (1 shl 1)) != 0:

        var tempThemeSettingsI: ThemeSettingsI
        self.TLDecode(tempThemeSettingsI)
        obj.settings = some(tempThemeSettingsI)


proc TLDecode*(self: var ScalingSeq[uint8], obj: messageUserVote) = 
    self.TLDecode(addr obj.user_id)
    obj.option = self.TLDecode()
    self.TLDecode(addr obj.date)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageUserVoteInputOption) = 
    self.TLDecode(addr obj.user_id)
    self.TLDecode(addr obj.date)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageUserVoteMultiple) = 
    self.TLDecode(addr obj.user_id)
    obj.options = self.TLDecodeSeq()
    self.TLDecode(addr obj.date)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_votesList) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(addr obj.count)
    self.TLDecode(obj.votes)
    self.TLDecode(obj.users)
    if (obj.flags and (1 shl 0)) != 0:

        obj.next_offset = some(cast[string](self.TLDecode()))


proc TLDecode*(self: var ScalingSeq[uint8], obj: bankCardOpenUrl) = 
    obj.url = cast[string](self.TLDecode())
    obj.name = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: payments_bankCardData) = 
    obj.title = cast[string](self.TLDecode())
    self.TLDecode(obj.open_urls)

proc TLDecode*(self: var ScalingSeq[uint8], obj: dialogFilter) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(addr obj.id)
    obj.title = cast[string](self.TLDecode())
    if (obj.flags and (1 shl 25)) != 0:

        obj.emoticon = some(cast[string](self.TLDecode()))

    self.TLDecode(obj.pinned_peers)
    self.TLDecode(obj.include_peers)
    self.TLDecode(obj.exclude_peers)

proc TLDecode*(self: var ScalingSeq[uint8], obj: dialogFilterSuggested) = 
    self.TLDecode(obj.filter)
    obj.description = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: statsDateRangeDays) = 
    self.TLDecode(addr obj.min_date)
    self.TLDecode(addr obj.max_date)

proc TLDecode*(self: var ScalingSeq[uint8], obj: statsAbsValueAndPrev) = 
    self.TLDecode(addr obj.current)
    self.TLDecode(addr obj.previous)

proc TLDecode*(self: var ScalingSeq[uint8], obj: statsPercentValue) = 
    self.TLDecode(addr obj.part)
    self.TLDecode(addr obj.total)

proc TLDecode*(self: var ScalingSeq[uint8], obj: statsGraphAsync) = 
    obj.token = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: statsGraphError) = 
    obj.error = cast[string](self.TLDecode())

proc TLDecode*(self: var ScalingSeq[uint8], obj: statsGraph) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(obj.json)
    if (obj.flags and (1 shl 0)) != 0:

        obj.zoom_token = some(cast[string](self.TLDecode()))


proc TLDecode*(self: var ScalingSeq[uint8], obj: messageInteractionCounters) = 
    self.TLDecode(addr obj.msg_id)
    self.TLDecode(addr obj.views)
    self.TLDecode(addr obj.forwards)

proc TLDecode*(self: var ScalingSeq[uint8], obj: stats_broadcastStats) = 
    self.TLDecode(obj.period)
    self.TLDecode(obj.followers)
    self.TLDecode(obj.views_per_post)
    self.TLDecode(obj.shares_per_post)
    self.TLDecode(obj.enabled_notifications)
    self.TLDecode(obj.growth_graph)
    self.TLDecode(obj.followers_graph)
    self.TLDecode(obj.mute_graph)
    self.TLDecode(obj.top_hours_graph)
    self.TLDecode(obj.interactions_graph)
    self.TLDecode(obj.iv_interactions_graph)
    self.TLDecode(obj.views_by_source_graph)
    self.TLDecode(obj.new_followers_by_source_graph)
    self.TLDecode(obj.languages_graph)
    self.TLDecode(obj.recent_message_interactions)

proc TLDecode*(self: var ScalingSeq[uint8], obj: help_promoDataEmpty) = 
    self.TLDecode(addr obj.expires)

proc TLDecode*(self: var ScalingSeq[uint8], obj: help_promoData) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(addr obj.expires)
    self.TLDecode(obj.peer)
    self.TLDecode(obj.chats)
    self.TLDecode(obj.users)
    if (obj.flags and (1 shl 1)) != 0:

        obj.psa_type = some(cast[string](self.TLDecode()))

    if (obj.flags and (1 shl 2)) != 0:

        obj.psa_message = some(cast[string](self.TLDecode()))


proc TLDecode*(self: var ScalingSeq[uint8], obj: videoSize) = 
    self.TLDecode(addr obj.flags)
    obj.typeof = cast[string](self.TLDecode())
    self.TLDecode(obj.location)
    self.TLDecode(addr obj.w)
    self.TLDecode(addr obj.h)
    self.TLDecode(addr obj.size)
    if (obj.flags and (1 shl 0)) != 0:

        var tempfloat64: float64 = 0
        self.TLDecode(addr tempfloat64)
        obj.video_start_ts = some(tempfloat64)


proc TLDecode*(self: var ScalingSeq[uint8], obj: statsGroupTopPoster) = 
    self.TLDecode(addr obj.user_id)
    self.TLDecode(addr obj.messages)
    self.TLDecode(addr obj.avg_chars)

proc TLDecode*(self: var ScalingSeq[uint8], obj: statsGroupTopAdmin) = 
    self.TLDecode(addr obj.user_id)
    self.TLDecode(addr obj.deleted)
    self.TLDecode(addr obj.kicked)
    self.TLDecode(addr obj.banned)

proc TLDecode*(self: var ScalingSeq[uint8], obj: statsGroupTopInviter) = 
    self.TLDecode(addr obj.user_id)
    self.TLDecode(addr obj.invitations)

proc TLDecode*(self: var ScalingSeq[uint8], obj: stats_megagroupStats) = 
    self.TLDecode(obj.period)
    self.TLDecode(obj.members)
    self.TLDecode(obj.messages)
    self.TLDecode(obj.viewers)
    self.TLDecode(obj.posters)
    self.TLDecode(obj.growth_graph)
    self.TLDecode(obj.members_graph)
    self.TLDecode(obj.new_members_by_source_graph)
    self.TLDecode(obj.languages_graph)
    self.TLDecode(obj.messages_graph)
    self.TLDecode(obj.actions_graph)
    self.TLDecode(obj.top_hours_graph)
    self.TLDecode(obj.weekdays_graph)
    self.TLDecode(obj.top_posters)
    self.TLDecode(obj.top_admins)
    self.TLDecode(obj.top_inviters)
    self.TLDecode(obj.users)

proc TLDecode*(self: var ScalingSeq[uint8], obj: globalPrivacySettings) = 
    self.TLDecode(addr obj.flags)
    if (obj.flags and (1 shl 0)) != 0:

        var tempbool: bool
        self.TLDecode(tempbool)
        obj.archive_and_mute_new_noncontact_peers = some(tempbool)


proc TLDecode*(self: var ScalingSeq[uint8], obj: help_countryCode) = 
    self.TLDecode(addr obj.flags)
    obj.country_code = cast[string](self.TLDecode())
    if (obj.flags and (1 shl 0)) != 0:

        obj.prefixes = some(cast[seq[string]](self.TLDecodeSeq()))
        #self.TLDecode(tempstring)

    if (obj.flags and (1 shl 1)) != 0:

        #self.TLDecode(tempstring)
        obj.patterns = some(cast[seq[string]](self.TLDecodeSeq()))



proc TLDecode*(self: var ScalingSeq[uint8], obj: help_country) = 
    self.TLDecode(addr obj.flags)
    obj.iso2 = cast[string](self.TLDecode())
    obj.default_name = cast[string](self.TLDecode())
    if (obj.flags and (1 shl 1)) != 0:

        obj.name = some(cast[string](self.TLDecode()))

    self.TLDecode(obj.country_codes)

proc TLDecode*(self: var ScalingSeq[uint8], obj: help_countriesListNotModified) = discard

proc TLDecode*(self: var ScalingSeq[uint8], obj: help_countriesList) = 
    self.TLDecode(obj.countries)
    self.TLDecode(addr obj.hash)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageViews) = 
    self.TLDecode(addr obj.flags)
    if (obj.flags and (1 shl 0)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.views = some(tempint32)

    if (obj.flags and (1 shl 1)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.forwards = some(tempint32)

    if (obj.flags and (1 shl 2)) != 0:

        var tempMessageRepliesI: MessageRepliesI
        self.TLDecode(tempMessageRepliesI)
        obj.replies = some(tempMessageRepliesI)


proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_messageViews) = 
    self.TLDecode(obj.views)
    self.TLDecode(obj.chats)
    self.TLDecode(obj.users)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messages_discussionMessage) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(obj.messages)
    if (obj.flags and (1 shl 0)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.max_id = some(tempint32)

    if (obj.flags and (1 shl 1)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.read_inbox_max_id = some(tempint32)

    if (obj.flags and (1 shl 2)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.read_outbox_max_id = some(tempint32)

    self.TLDecode(obj.chats)
    self.TLDecode(obj.users)

proc TLDecode*(self: var ScalingSeq[uint8], obj: messageReplyHeader) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(addr obj.reply_to_msg_id)
    if (obj.flags and (1 shl 0)) != 0:

        var tempPeerI: PeerI
        self.TLDecode(tempPeerI)
        obj.reply_to_peer_id = some(tempPeerI)

    if (obj.flags and (1 shl 1)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.reply_to_top_id = some(tempint32)


proc TLDecode*(self: var ScalingSeq[uint8], obj: messageReplies) = 
    self.TLDecode(addr obj.flags)
    self.TLDecode(addr obj.replies)
    self.TLDecode(addr obj.replies_pts)
    if (obj.flags and (1 shl 1)) != 0:

        var tempPeerI: seq[PeerI]
        self.TLDecode(tempPeerI)
        obj.recent_repliers = some(tempPeerI)

    if (obj.flags and (1 shl 0)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.channel_id = some(tempint32)

    if (obj.flags and (1 shl 2)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.max_id = some(tempint32)

    if (obj.flags and (1 shl 3)) != 0:

        var tempint32: int32 = 0
        self.TLDecode(addr tempint32)
        obj.read_max_id = some(tempint32)


proc TLDecode*(self: var ScalingSeq[uint8], obj: peerBlocked) = 
    self.TLDecode(obj.peer_id)
    self.TLDecode(addr obj.date)

proc TLDecode*(self: var ScalingSeq[uint8], obj: stats_messageStats) = 
    self.TLDecode(obj.views_graph)


type
    TLFunction* = ref object of TL

    invokeAfterMsg* = ref object of TLFunction
        msg_id*: int64
        query*: TLFunction

    invokeAfterMsgs* = ref object of TLFunction
        msg_ids*: seq[int64]
        query*: TLFunction

    initConnection* = ref object of TLFunction
        flags*: int32
        api_id*: int32
        device_model*: string
        system_version*: string
        app_version*: string
        system_lang_code*: string
        lang_pack*: string
        lang_code*: string
        proxy*: Option[InputClientProxyI]
        params*: Option[JSONValueI]
        query*: TLFunction

    invokeWithLayer* = ref object of TLFunction
        layer*: int32
        query*: TLFunction

    invokeWithoutUpdates* = ref object of TLFunction
        query*: TLFunction

    invokeWithMessagesRange* = ref object of TLFunction
        range*: MessageRangeI
        query*: TLFunction

    invokeWithTakeout* = ref object of TLFunction
        takeout_id*: int64
        query*: TLFunction

    auth_sendCode* = ref object of TLFunction
        phone_number*: string
        api_id*: int32
        api_hash*: string
        settings*: CodeSettingsI

    auth_signUp* = ref object of TLFunction
        phone_number*: string
        phone_code_hash*: string
        first_name*: string
        last_name*: string

    auth_signIn* = ref object of TLFunction
        phone_number*: string
        phone_code_hash*: string
        phone_code*: string

    auth_logOut* = ref object of TLFunction

    auth_resetAuthorizations* = ref object of TLFunction

    auth_exportAuthorization* = ref object of TLFunction
        dc_id*: int32

    auth_importAuthorization* = ref object of TLFunction
        id*: int32
        bytes*: seq[uint8]

    auth_bindTempAuthKey* = ref object of TLFunction
        perm_auth_key_id*: int64
        nonce*: int64
        expires_at*: int32
        encrypted_message*: seq[uint8]

    auth_importBotAuthorization* = ref object of TLFunction
        flags*: int32
        api_id*: int32
        api_hash*: string
        bot_auth_token*: string

    auth_checkPassword* = ref object of TLFunction
        password*: InputCheckPasswordSRPI

    auth_requestPasswordRecovery* = ref object of TLFunction

    auth_recoverPassword* = ref object of TLFunction
        code*: string

    auth_resendCode* = ref object of TLFunction
        phone_number*: string
        phone_code_hash*: string

    auth_cancelCode* = ref object of TLFunction
        phone_number*: string
        phone_code_hash*: string

    auth_dropTempAuthKeys* = ref object of TLFunction
        except_auth_keys*: seq[int64]

    auth_exportLoginToken* = ref object of TLFunction
        api_id*: int32
        api_hash*: string
        except_ids*: seq[int32]

    auth_importLoginToken* = ref object of TLFunction
        token*: seq[uint8]

    auth_acceptLoginToken* = ref object of TLFunction
        token*: seq[uint8]

    account_registerDevice* = ref object of TLFunction
        flags*: int32
        no_muted*: bool
        token_type*: int32
        token*: string
        app_sandbox*: bool
        secret*: seq[uint8]
        other_uids*: seq[int32]

    account_unregisterDevice* = ref object of TLFunction
        token_type*: int32
        token*: string
        other_uids*: seq[int32]

    account_updateNotifySettings* = ref object of TLFunction
        peer*: InputNotifyPeerI
        settings*: InputPeerNotifySettingsI

    account_getNotifySettings* = ref object of TLFunction
        peer*: InputNotifyPeerI

    account_resetNotifySettings* = ref object of TLFunction

    account_updateProfile* = ref object of TLFunction
        flags*: int32
        first_name*: Option[string]
        last_name*: Option[string]
        about*: Option[string]

    account_updateStatus* = ref object of TLFunction
        offline*: bool

    account_getWallPapers* = ref object of TLFunction
        hash*: int32

    account_reportPeer* = ref object of TLFunction
        peer*: InputPeerI
        reason*: ReportReasonI

    account_checkUsername* = ref object of TLFunction
        username*: string

    account_updateUsername* = ref object of TLFunction
        username*: string

    account_getPrivacy* = ref object of TLFunction
        key*: InputPrivacyKeyI

    account_setPrivacy* = ref object of TLFunction
        key*: InputPrivacyKeyI
        rules*: seq[InputPrivacyRuleI]

    account_deleteAccount* = ref object of TLFunction
        reason*: string

    account_getAccountTTL* = ref object of TLFunction

    account_setAccountTTL* = ref object of TLFunction
        ttl*: AccountDaysTTLI

    account_sendChangePhoneCode* = ref object of TLFunction
        phone_number*: string
        settings*: CodeSettingsI

    account_changePhone* = ref object of TLFunction
        phone_number*: string
        phone_code_hash*: string
        phone_code*: string

    account_updateDeviceLocked* = ref object of TLFunction
        period*: int32

    account_getAuthorizations* = ref object of TLFunction

    account_resetAuthorization* = ref object of TLFunction
        hash*: int64

    account_getPassword* = ref object of TLFunction

    account_getPasswordSettings* = ref object of TLFunction
        password*: InputCheckPasswordSRPI

    account_updatePasswordSettings* = ref object of TLFunction
        password*: InputCheckPasswordSRPI
        new_settings*: account_PasswordInputSettingsI

    account_sendConfirmPhoneCode* = ref object of TLFunction
        hash*: string
        settings*: CodeSettingsI

    account_confirmPhone* = ref object of TLFunction
        phone_code_hash*: string
        phone_code*: string

    account_getTmpPassword* = ref object of TLFunction
        password*: InputCheckPasswordSRPI
        period*: int32

    account_getWebAuthorizations* = ref object of TLFunction

    account_resetWebAuthorization* = ref object of TLFunction
        hash*: int64

    account_resetWebAuthorizations* = ref object of TLFunction

    account_getAllSecureValues* = ref object of TLFunction

    account_getSecureValue* = ref object of TLFunction
        types*: seq[SecureValueTypeI]

    account_saveSecureValue* = ref object of TLFunction
        value*: InputSecureValueI
        secure_secret_id*: int64

    account_deleteSecureValue* = ref object of TLFunction
        types*: seq[SecureValueTypeI]

    account_getAuthorizationForm* = ref object of TLFunction
        bot_id*: int32
        scope*: string
        public_key*: string

    account_acceptAuthorization* = ref object of TLFunction
        bot_id*: int32
        scope*: string
        public_key*: string
        value_hashes*: seq[SecureValueHashI]
        credentials*: SecureCredentialsEncryptedI

    account_sendVerifyPhoneCode* = ref object of TLFunction
        phone_number*: string
        settings*: CodeSettingsI

    account_verifyPhone* = ref object of TLFunction
        phone_number*: string
        phone_code_hash*: string
        phone_code*: string

    account_sendVerifyEmailCode* = ref object of TLFunction
        email*: string

    account_verifyEmail* = ref object of TLFunction
        email*: string
        code*: string

    account_initTakeoutSession* = ref object of TLFunction
        flags*: int32
        contacts*: bool
        message_users*: bool
        message_chats*: bool
        message_megagroups*: bool
        message_channels*: bool
        files*: bool
        file_max_size*: Option[int32]

    account_finishTakeoutSession* = ref object of TLFunction
        flags*: int32
        success*: bool

    account_confirmPasswordEmail* = ref object of TLFunction
        code*: string

    account_resendPasswordEmail* = ref object of TLFunction

    account_cancelPasswordEmail* = ref object of TLFunction

    account_getContactSignUpNotification* = ref object of TLFunction

    account_setContactSignUpNotification* = ref object of TLFunction
        silent*: bool

    account_getNotifyExceptions* = ref object of TLFunction
        flags*: int32
        compare_sound*: bool
        peer*: Option[InputNotifyPeerI]

    account_getWallPaper* = ref object of TLFunction
        wallpaper*: InputWallPaperI

    account_uploadWallPaper* = ref object of TLFunction
        file*: InputFileI
        mime_type*: string
        settings*: WallPaperSettingsI

    account_saveWallPaper* = ref object of TLFunction
        wallpaper*: InputWallPaperI
        unsave*: bool
        settings*: WallPaperSettingsI

    account_installWallPaper* = ref object of TLFunction
        wallpaper*: InputWallPaperI
        settings*: WallPaperSettingsI

    account_resetWallPapers* = ref object of TLFunction

    account_getAutoDownloadSettings* = ref object of TLFunction

    account_saveAutoDownloadSettings* = ref object of TLFunction
        flags*: int32
        low*: bool
        high*: bool
        settings*: AutoDownloadSettingsI

    account_uploadTheme* = ref object of TLFunction
        flags*: int32
        file*: InputFileI
        thumb*: Option[InputFileI]
        file_name*: string
        mime_type*: string

    account_createTheme* = ref object of TLFunction
        flags*: int32
        slug*: string
        title*: string
        document*: Option[InputDocumentI]
        settings*: Option[InputThemeSettingsI]

    account_updateTheme* = ref object of TLFunction
        flags*: int32
        format*: string
        theme*: InputThemeI
        slug*: Option[string]
        title*: Option[string]
        document*: Option[InputDocumentI]
        settings*: Option[InputThemeSettingsI]

    account_saveTheme* = ref object of TLFunction
        theme*: InputThemeI
        unsave*: bool

    account_installTheme* = ref object of TLFunction
        flags*: int32
        dark*: bool
        format*: Option[string]
        theme*: Option[InputThemeI]

    account_getTheme* = ref object of TLFunction
        format*: string
        theme*: InputThemeI
        document_id*: int64

    account_getThemes* = ref object of TLFunction
        format*: string
        hash*: int32

    account_setContentSettings* = ref object of TLFunction
        flags*: int32
        sensitive_enabled*: bool

    account_getContentSettings* = ref object of TLFunction

    account_getMultiWallPapers* = ref object of TLFunction
        wallpapers*: seq[InputWallPaperI]

    account_getGlobalPrivacySettings* = ref object of TLFunction

    account_setGlobalPrivacySettings* = ref object of TLFunction
        settings*: GlobalPrivacySettingsI

    users_getUsers* = ref object of TLFunction
        id*: seq[InputUserI]

    users_getFullUser* = ref object of TLFunction
        id*: InputUserI

    users_setSecureValueErrors* = ref object of TLFunction
        id*: InputUserI
        errors*: seq[SecureValueErrorI]

    contacts_getContactIDs* = ref object of TLFunction
        hash*: int32

    contacts_getStatuses* = ref object of TLFunction

    contacts_getContacts* = ref object of TLFunction
        hash*: int32

    contacts_importContacts* = ref object of TLFunction
        contacts*: seq[InputContactI]

    contacts_deleteContacts* = ref object of TLFunction
        id*: seq[InputUserI]

    contacts_deleteByPhones* = ref object of TLFunction
        phones*: seq[string]

    contacts_block* = ref object of TLFunction
        id*: InputPeerI

    contacts_unblock* = ref object of TLFunction
        id*: InputPeerI

    contacts_getBlocked* = ref object of TLFunction
        offset*: int32
        limit*: int32

    contacts_search* = ref object of TLFunction
        q*: string
        limit*: int32

    contacts_resolveUsername* = ref object of TLFunction
        username*: string

    contacts_getTopPeers* = ref object of TLFunction
        flags*: int32
        correspondents*: bool
        bots_pm*: bool
        bots_inline*: bool
        phone_calls*: bool
        forward_users*: bool
        forward_chats*: bool
        groups*: bool
        channels*: bool
        offset*: int32
        limit*: int32
        hash*: int32

    contacts_resetTopPeerRating* = ref object of TLFunction
        category*: TopPeerCategoryI
        peer*: InputPeerI

    contacts_resetSaved* = ref object of TLFunction

    contacts_getSaved* = ref object of TLFunction

    contacts_toggleTopPeers* = ref object of TLFunction
        enabled*: bool

    contacts_addContact* = ref object of TLFunction
        flags*: int32
        add_phone_privacy_exception*: bool
        id*: InputUserI
        first_name*: string
        last_name*: string
        phone*: string

    contacts_acceptContact* = ref object of TLFunction
        id*: InputUserI

    contacts_getLocated* = ref object of TLFunction
        flags*: int32
        background*: bool
        geo_point*: InputGeoPointI
        self_expires*: Option[int32]

    contacts_blockFromReplies* = ref object of TLFunction
        flags*: int32
        delete_message*: bool
        delete_history*: bool
        report_spam*: bool
        msg_id*: int32

    messages_getMessages* = ref object of TLFunction
        id*: seq[InputMessageI]

    messages_getDialogs* = ref object of TLFunction
        flags*: int32
        exclude_pinned*: bool
        folder_id*: Option[int32]
        offset_date*: int32
        offset_id*: int32
        offset_peer*: InputPeerI
        limit*: int32
        hash*: int32

    messages_getHistory* = ref object of TLFunction
        peer*: InputPeerI
        offset_id*: int32
        offset_date*: int32
        add_offset*: int32
        limit*: int32
        max_id*: int32
        min_id*: int32
        hash*: int32

    messages_search* = ref object of TLFunction
        flags*: int32
        peer*: InputPeerI
        q*: string
        from_id*: Option[InputPeerI]
        top_msg_id*: Option[int32]
        filter*: MessagesFilterI
        min_date*: int32
        max_date*: int32
        offset_id*: int32
        add_offset*: int32
        limit*: int32
        max_id*: int32
        min_id*: int32
        hash*: int32

    messages_readHistory* = ref object of TLFunction
        peer*: InputPeerI
        max_id*: int32

    messages_deleteHistory* = ref object of TLFunction
        flags*: int32
        just_clear*: bool
        revoke*: bool
        peer*: InputPeerI
        max_id*: int32

    messages_deleteMessages* = ref object of TLFunction
        flags*: int32
        revoke*: bool
        id*: seq[int32]

    messages_receivedMessages* = ref object of TLFunction
        max_id*: int32

    messages_setTyping* = ref object of TLFunction
        flags*: int32
        peer*: InputPeerI
        top_msg_id*: Option[int32]
        action*: SendMessageActionI

    messages_sendMessage* = ref object of TLFunction
        flags*: int32
        no_webpage*: bool
        silent*: bool
        background*: bool
        clear_draft*: bool
        peer*: InputPeerI
        reply_to_msg_id*: Option[int32]
        message*: string
        random_id*: int64
        reply_markup*: Option[ReplyMarkupI]
        entities*: Option[seq[MessageEntityI]]
        schedule_date*: Option[int32]

    messages_sendMedia* = ref object of TLFunction
        flags*: int32
        silent*: bool
        background*: bool
        clear_draft*: bool
        peer*: InputPeerI
        reply_to_msg_id*: Option[int32]
        media*: InputMediaI
        message*: string
        random_id*: int64
        reply_markup*: Option[ReplyMarkupI]
        entities*: Option[seq[MessageEntityI]]
        schedule_date*: Option[int32]

    messages_forwardMessages* = ref object of TLFunction
        flags*: int32
        silent*: bool
        background*: bool
        with_my_score*: bool
        from_peer*: InputPeerI
        id*: seq[int32]
        random_id*: seq[int64]
        to_peer*: InputPeerI
        schedule_date*: Option[int32]

    messages_reportSpam* = ref object of TLFunction
        peer*: InputPeerI

    messages_getPeerSettings* = ref object of TLFunction
        peer*: InputPeerI

    messages_report* = ref object of TLFunction
        peer*: InputPeerI
        id*: seq[int32]
        reason*: ReportReasonI

    messages_getChats* = ref object of TLFunction
        id*: seq[int32]

    messages_getFullChat* = ref object of TLFunction
        chat_id*: int32

    messages_editChatTitle* = ref object of TLFunction
        chat_id*: int32
        title*: string

    messages_editChatPhoto* = ref object of TLFunction
        chat_id*: int32
        photo*: InputChatPhotoI

    messages_addChatUser* = ref object of TLFunction
        chat_id*: int32
        user_id*: InputUserI
        fwd_limit*: int32

    messages_deleteChatUser* = ref object of TLFunction
        chat_id*: int32
        user_id*: InputUserI

    messages_createChat* = ref object of TLFunction
        users*: seq[InputUserI]
        title*: string

    messages_getDhConfig* = ref object of TLFunction
        version*: int32
        random_length*: int32

    messages_requestEncryption* = ref object of TLFunction
        user_id*: InputUserI
        random_id*: int32
        g_a*: seq[uint8]

    messages_acceptEncryption* = ref object of TLFunction
        peer*: InputEncryptedChatI
        g_b*: seq[uint8]
        key_fingerprint*: int64

    messages_discardEncryption* = ref object of TLFunction
        chat_id*: int32

    messages_setEncryptedTyping* = ref object of TLFunction
        peer*: InputEncryptedChatI
        typing*: bool

    messages_readEncryptedHistory* = ref object of TLFunction
        peer*: InputEncryptedChatI
        max_date*: int32

    messages_sendEncrypted* = ref object of TLFunction
        flags*: int32
        silent*: bool
        peer*: InputEncryptedChatI
        random_id*: int64
        data*: seq[uint8]

    messages_sendEncryptedFile* = ref object of TLFunction
        flags*: int32
        silent*: bool
        peer*: InputEncryptedChatI
        random_id*: int64
        data*: seq[uint8]
        file*: InputEncryptedFileI

    messages_sendEncryptedService* = ref object of TLFunction
        peer*: InputEncryptedChatI
        random_id*: int64
        data*: seq[uint8]

    messages_receivedQueue* = ref object of TLFunction
        max_qts*: int32

    messages_reportEncryptedSpam* = ref object of TLFunction
        peer*: InputEncryptedChatI

    messages_readMessageContents* = ref object of TLFunction
        id*: seq[int32]

    messages_getStickers* = ref object of TLFunction
        emoticon*: string
        hash*: int32

    messages_getAllStickers* = ref object of TLFunction
        hash*: int32

    messages_getWebPagePreview* = ref object of TLFunction
        flags*: int32
        message*: string
        entities*: Option[seq[MessageEntityI]]

    messages_exportChatInvite* = ref object of TLFunction
        peer*: InputPeerI

    messages_checkChatInvite* = ref object of TLFunction
        hash*: string

    messages_importChatInvite* = ref object of TLFunction
        hash*: string

    messages_getStickerSet* = ref object of TLFunction
        stickerset*: InputStickerSetI

    messages_installStickerSet* = ref object of TLFunction
        stickerset*: InputStickerSetI
        archived*: bool

    messages_uninstallStickerSet* = ref object of TLFunction
        stickerset*: InputStickerSetI

    messages_startBot* = ref object of TLFunction
        bot*: InputUserI
        peer*: InputPeerI
        random_id*: int64
        start_param*: string

    messages_getMessagesViews* = ref object of TLFunction
        peer*: InputPeerI
        id*: seq[int32]
        increment*: bool

    messages_editChatAdmin* = ref object of TLFunction
        chat_id*: int32
        user_id*: InputUserI
        is_admin*: bool

    messages_migrateChat* = ref object of TLFunction
        chat_id*: int32

    messages_searchGlobal* = ref object of TLFunction
        flags*: int32
        folder_id*: Option[int32]
        q*: string
        filter*: MessagesFilterI
        min_date*: int32
        max_date*: int32
        offset_rate*: int32
        offset_peer*: InputPeerI
        offset_id*: int32
        limit*: int32

    messages_reorderStickerSets* = ref object of TLFunction
        flags*: int32
        masks*: bool
        order*: seq[int64]

    messages_getDocumentByHash* = ref object of TLFunction
        sha256*: seq[uint8]
        size*: int32
        mime_type*: string

    messages_getSavedGifs* = ref object of TLFunction
        hash*: int32

    messages_saveGif* = ref object of TLFunction
        id*: InputDocumentI
        unsave*: bool

    messages_getInlineBotResults* = ref object of TLFunction
        flags*: int32
        bot*: InputUserI
        peer*: InputPeerI
        geo_point*: Option[InputGeoPointI]
        query*: string
        offset*: string

    messages_setInlineBotResults* = ref object of TLFunction
        flags*: int32
        gallery*: bool
        private*: bool
        query_id*: int64
        results*: seq[InputBotInlineResultI]
        cache_time*: int32
        next_offset*: Option[string]
        switch_pm*: Option[InlineBotSwitchPMI]

    messages_sendInlineBotResult* = ref object of TLFunction
        flags*: int32
        silent*: bool
        background*: bool
        clear_draft*: bool
        hide_via*: bool
        peer*: InputPeerI
        reply_to_msg_id*: Option[int32]
        random_id*: int64
        query_id*: int64
        id*: string
        schedule_date*: Option[int32]

    messages_getMessageEditData* = ref object of TLFunction
        peer*: InputPeerI
        id*: int32

    messages_editMessage* = ref object of TLFunction
        flags*: int32
        no_webpage*: bool
        peer*: InputPeerI
        id*: int32
        message*: Option[string]
        media*: Option[InputMediaI]
        reply_markup*: Option[ReplyMarkupI]
        entities*: Option[seq[MessageEntityI]]
        schedule_date*: Option[int32]

    messages_editInlineBotMessage* = ref object of TLFunction
        flags*: int32
        no_webpage*: bool
        id*: InputBotInlineMessageIDI
        message*: Option[string]
        media*: Option[InputMediaI]
        reply_markup*: Option[ReplyMarkupI]
        entities*: Option[seq[MessageEntityI]]

    messages_getBotCallbackAnswer* = ref object of TLFunction
        flags*: int32
        game*: bool
        peer*: InputPeerI
        msg_id*: int32
        data*: Option[seq[uint8]]
        password*: Option[InputCheckPasswordSRPI]

    messages_setBotCallbackAnswer* = ref object of TLFunction
        flags*: int32
        alert*: bool
        query_id*: int64
        message*: Option[string]
        url*: Option[string]
        cache_time*: int32

    messages_getPeerDialogs* = ref object of TLFunction
        peers*: seq[InputDialogPeerI]

    messages_saveDraft* = ref object of TLFunction
        flags*: int32
        no_webpage*: bool
        reply_to_msg_id*: Option[int32]
        peer*: InputPeerI
        message*: string
        entities*: Option[seq[MessageEntityI]]

    messages_getAllDrafts* = ref object of TLFunction

    messages_getFeaturedStickers* = ref object of TLFunction
        hash*: int32

    messages_readFeaturedStickers* = ref object of TLFunction
        id*: seq[int64]

    messages_getRecentStickers* = ref object of TLFunction
        flags*: int32
        attached*: bool
        hash*: int32

    messages_saveRecentSticker* = ref object of TLFunction
        flags*: int32
        attached*: bool
        id*: InputDocumentI
        unsave*: bool

    messages_clearRecentStickers* = ref object of TLFunction
        flags*: int32
        attached*: bool

    messages_getArchivedStickers* = ref object of TLFunction
        flags*: int32
        masks*: bool
        offset_id*: int64
        limit*: int32

    messages_getMaskStickers* = ref object of TLFunction
        hash*: int32

    messages_getAttachedStickers* = ref object of TLFunction
        media*: InputStickeredMediaI

    messages_setGameScore* = ref object of TLFunction
        flags*: int32
        edit_message*: bool
        force*: bool
        peer*: InputPeerI
        id*: int32
        user_id*: InputUserI
        score*: int32

    messages_setInlineGameScore* = ref object of TLFunction
        flags*: int32
        edit_message*: bool
        force*: bool
        id*: InputBotInlineMessageIDI
        user_id*: InputUserI
        score*: int32

    messages_getGameHighScores* = ref object of TLFunction
        peer*: InputPeerI
        id*: int32
        user_id*: InputUserI

    messages_getInlineGameHighScores* = ref object of TLFunction
        id*: InputBotInlineMessageIDI
        user_id*: InputUserI

    messages_getCommonChats* = ref object of TLFunction
        user_id*: InputUserI
        max_id*: int32
        limit*: int32

    messages_getAllChats* = ref object of TLFunction
        except_ids*: seq[int32]

    messages_getWebPage* = ref object of TLFunction
        url*: string
        hash*: int32

    messages_toggleDialogPin* = ref object of TLFunction
        flags*: int32
        pinned*: bool
        peer*: InputDialogPeerI

    messages_reorderPinnedDialogs* = ref object of TLFunction
        flags*: int32
        force*: bool
        folder_id*: int32
        order*: seq[InputDialogPeerI]

    messages_getPinnedDialogs* = ref object of TLFunction
        folder_id*: int32

    messages_setBotShippingResults* = ref object of TLFunction
        flags*: int32
        query_id*: int64
        error*: Option[string]
        shipping_options*: Option[seq[ShippingOptionI]]

    messages_setBotPrecheckoutResults* = ref object of TLFunction
        flags*: int32
        success*: bool
        query_id*: int64
        error*: Option[string]

    messages_uploadMedia* = ref object of TLFunction
        peer*: InputPeerI
        media*: InputMediaI

    messages_sendScreenshotNotification* = ref object of TLFunction
        peer*: InputPeerI
        reply_to_msg_id*: int32
        random_id*: int64

    messages_getFavedStickers* = ref object of TLFunction
        hash*: int32

    messages_faveSticker* = ref object of TLFunction
        id*: InputDocumentI
        unfave*: bool

    messages_getUnreadMentions* = ref object of TLFunction
        peer*: InputPeerI
        offset_id*: int32
        add_offset*: int32
        limit*: int32
        max_id*: int32
        min_id*: int32

    messages_readMentions* = ref object of TLFunction
        peer*: InputPeerI

    messages_getRecentLocations* = ref object of TLFunction
        peer*: InputPeerI
        limit*: int32
        hash*: int32

    messages_sendMultiMedia* = ref object of TLFunction
        flags*: int32
        silent*: bool
        background*: bool
        clear_draft*: bool
        peer*: InputPeerI
        reply_to_msg_id*: Option[int32]
        multi_media*: seq[InputSingleMediaI]
        schedule_date*: Option[int32]

    messages_uploadEncryptedFile* = ref object of TLFunction
        peer*: InputEncryptedChatI
        file*: InputEncryptedFileI

    messages_searchStickerSets* = ref object of TLFunction
        flags*: int32
        exclude_featured*: bool
        q*: string
        hash*: int32

    messages_getSplitRanges* = ref object of TLFunction

    messages_markDialogUnread* = ref object of TLFunction
        flags*: int32
        unread*: bool
        peer*: InputDialogPeerI

    messages_getDialogUnreadMarks* = ref object of TLFunction

    messages_clearAllDrafts* = ref object of TLFunction

    messages_updatePinnedMessage* = ref object of TLFunction
        flags*: int32
        silent*: bool
        unpin*: bool
        pm_oneside*: bool
        peer*: InputPeerI
        id*: int32

    messages_sendVote* = ref object of TLFunction
        peer*: InputPeerI
        msg_id*: int32
        options*: seq[seq[uint8]]

    messages_getPollResults* = ref object of TLFunction
        peer*: InputPeerI
        msg_id*: int32

    messages_getOnlines* = ref object of TLFunction
        peer*: InputPeerI

    messages_getStatsURL* = ref object of TLFunction
        flags*: int32
        dark*: bool
        peer*: InputPeerI
        params*: string

    messages_editChatAbout* = ref object of TLFunction
        peer*: InputPeerI
        about*: string

    messages_editChatDefaultBannedRights* = ref object of TLFunction
        peer*: InputPeerI
        banned_rights*: ChatBannedRightsI

    messages_getEmojiKeywords* = ref object of TLFunction
        lang_code*: string

    messages_getEmojiKeywordsDifference* = ref object of TLFunction
        lang_code*: string
        from_version*: int32

    messages_getEmojiKeywordsLanguages* = ref object of TLFunction
        lang_codes*: seq[string]

    messages_getEmojiURL* = ref object of TLFunction
        lang_code*: string

    messages_getSearchCounters* = ref object of TLFunction
        peer*: InputPeerI
        filters*: seq[MessagesFilterI]

    messages_requestUrlAuth* = ref object of TLFunction
        peer*: InputPeerI
        msg_id*: int32
        button_id*: int32

    messages_acceptUrlAuth* = ref object of TLFunction
        flags*: int32
        write_allowed*: bool
        peer*: InputPeerI
        msg_id*: int32
        button_id*: int32

    messages_hidePeerSettingsBar* = ref object of TLFunction
        peer*: InputPeerI

    messages_getScheduledHistory* = ref object of TLFunction
        peer*: InputPeerI
        hash*: int32

    messages_getScheduledMessages* = ref object of TLFunction
        peer*: InputPeerI
        id*: seq[int32]

    messages_sendScheduledMessages* = ref object of TLFunction
        peer*: InputPeerI
        id*: seq[int32]

    messages_deleteScheduledMessages* = ref object of TLFunction
        peer*: InputPeerI
        id*: seq[int32]

    messages_getPollVotes* = ref object of TLFunction
        flags*: int32
        peer*: InputPeerI
        id*: int32
        option*: Option[seq[uint8]]
        offset*: Option[string]
        limit*: int32

    messages_toggleStickerSets* = ref object of TLFunction
        flags*: int32
        uninstall*: bool
        archive*: bool
        unarchive*: bool
        stickersets*: seq[InputStickerSetI]

    messages_getDialogFilters* = ref object of TLFunction

    messages_getSuggestedDialogFilters* = ref object of TLFunction

    messages_updateDialogFilter* = ref object of TLFunction
        flags*: int32
        id*: int32
        filter*: Option[DialogFilterI]

    messages_updateDialogFiltersOrder* = ref object of TLFunction
        order*: seq[int32]

    messages_getOldFeaturedStickers* = ref object of TLFunction
        offset*: int32
        limit*: int32
        hash*: int32

    messages_getReplies* = ref object of TLFunction
        peer*: InputPeerI
        msg_id*: int32
        offset_id*: int32
        offset_date*: int32
        add_offset*: int32
        limit*: int32
        max_id*: int32
        min_id*: int32
        hash*: int32

    messages_getDiscussionMessage* = ref object of TLFunction
        peer*: InputPeerI
        msg_id*: int32

    messages_readDiscussion* = ref object of TLFunction
        peer*: InputPeerI
        msg_id*: int32
        read_max_id*: int32

    messages_unpinAllMessages* = ref object of TLFunction
        peer*: InputPeerI

    updates_getState* = ref object of TLFunction

    updates_getDifference* = ref object of TLFunction
        flags*: int32
        pts*: int32
        pts_total_limit*: Option[int32]
        date*: int32
        qts*: int32

    updates_getChannelDifference* = ref object of TLFunction
        flags*: int32
        force*: bool
        channel*: InputChannelI
        filter*: ChannelMessagesFilterI
        pts*: int32
        limit*: int32

    photos_updateProfilePhoto* = ref object of TLFunction
        id*: InputPhotoI

    photos_uploadProfilePhoto* = ref object of TLFunction
        flags*: int32
        file*: Option[InputFileI]
        video*: Option[InputFileI]
        video_start_ts*: Option[float64]

    photos_deletePhotos* = ref object of TLFunction
        id*: seq[InputPhotoI]

    photos_getUserPhotos* = ref object of TLFunction
        user_id*: InputUserI
        offset*: int32
        max_id*: int64
        limit*: int32

    upload_saveFilePart* = ref object of TLFunction
        file_id*: int64
        file_part*: int32
        bytes*: seq[uint8]

    upload_getFile* = ref object of TLFunction
        flags*: int32
        precise*: bool
        cdn_supported*: bool
        location*: InputFileLocationI
        offset*: int32
        limit*: int32

    upload_saveBigFilePart* = ref object of TLFunction
        file_id*: int64
        file_part*: int32
        file_total_parts*: int32
        bytes*: seq[uint8]

    upload_getWebFile* = ref object of TLFunction
        location*: InputWebFileLocationI
        offset*: int32
        limit*: int32

    upload_getCdnFile* = ref object of TLFunction
        file_token*: seq[uint8]
        offset*: int32
        limit*: int32

    upload_reuploadCdnFile* = ref object of TLFunction
        file_token*: seq[uint8]
        request_token*: seq[uint8]

    upload_getCdnFileHashes* = ref object of TLFunction
        file_token*: seq[uint8]
        offset*: int32

    upload_getFileHashes* = ref object of TLFunction
        location*: InputFileLocationI
        offset*: int32

    help_getConfig* = ref object of TLFunction

    help_getNearestDc* = ref object of TLFunction

    help_getAppUpdate* = ref object of TLFunction
        source*: string

    help_getInviteText* = ref object of TLFunction

    help_getSupport* = ref object of TLFunction

    help_getAppChangelog* = ref object of TLFunction
        prev_app_version*: string

    help_setBotUpdatesStatus* = ref object of TLFunction
        pending_updates_count*: int32
        message*: string

    help_getCdnConfig* = ref object of TLFunction

    help_getRecentMeUrls* = ref object of TLFunction
        referer*: string

    help_getTermsOfServiceUpdate* = ref object of TLFunction

    help_acceptTermsOfService* = ref object of TLFunction
        id*: DataJSONI

    help_getDeepLinkInfo* = ref object of TLFunction
        path*: string

    help_getAppConfig* = ref object of TLFunction

    help_saveAppLog* = ref object of TLFunction
        events*: seq[InputAppEventI]

    help_getPassportConfig* = ref object of TLFunction
        hash*: int32

    help_getSupportName* = ref object of TLFunction

    help_getUserInfo* = ref object of TLFunction
        user_id*: InputUserI

    help_editUserInfo* = ref object of TLFunction
        user_id*: InputUserI
        message*: string
        entities*: seq[MessageEntityI]

    help_getPromoData* = ref object of TLFunction

    help_hidePromoData* = ref object of TLFunction
        peer*: InputPeerI

    help_dismissSuggestion* = ref object of TLFunction
        suggestion*: string

    help_getCountriesList* = ref object of TLFunction
        lang_code*: string
        hash*: int32

    channels_readHistory* = ref object of TLFunction
        channel*: InputChannelI
        max_id*: int32

    channels_deleteMessages* = ref object of TLFunction
        channel*: InputChannelI
        id*: seq[int32]

    channels_deleteUserHistory* = ref object of TLFunction
        channel*: InputChannelI
        user_id*: InputUserI

    channels_reportSpam* = ref object of TLFunction
        channel*: InputChannelI
        user_id*: InputUserI
        id*: seq[int32]

    channels_getMessages* = ref object of TLFunction
        channel*: InputChannelI
        id*: seq[InputMessageI]

    channels_getParticipants* = ref object of TLFunction
        channel*: InputChannelI
        filter*: ChannelParticipantsFilterI
        offset*: int32
        limit*: int32
        hash*: int32

    channels_getParticipant* = ref object of TLFunction
        channel*: InputChannelI
        user_id*: InputUserI

    channels_getChannels* = ref object of TLFunction
        id*: seq[InputChannelI]

    channels_getFullChannel* = ref object of TLFunction
        channel*: InputChannelI

    channels_createChannel* = ref object of TLFunction
        flags*: int32
        broadcast*: bool
        megagroup*: bool
        title*: string
        about*: string
        geo_point*: Option[InputGeoPointI]
        address*: Option[string]

    channels_editAdmin* = ref object of TLFunction
        channel*: InputChannelI
        user_id*: InputUserI
        admin_rights*: ChatAdminRightsI
        rank*: string

    channels_editTitle* = ref object of TLFunction
        channel*: InputChannelI
        title*: string

    channels_editPhoto* = ref object of TLFunction
        channel*: InputChannelI
        photo*: InputChatPhotoI

    channels_checkUsername* = ref object of TLFunction
        channel*: InputChannelI
        username*: string

    channels_updateUsername* = ref object of TLFunction
        channel*: InputChannelI
        username*: string

    channels_joinChannel* = ref object of TLFunction
        channel*: InputChannelI

    channels_leaveChannel* = ref object of TLFunction
        channel*: InputChannelI

    channels_inviteToChannel* = ref object of TLFunction
        channel*: InputChannelI
        users*: seq[InputUserI]

    channels_deleteChannel* = ref object of TLFunction
        channel*: InputChannelI

    channels_exportMessageLink* = ref object of TLFunction
        flags*: int32
        grouped*: bool
        thread*: bool
        channel*: InputChannelI
        id*: int32

    channels_toggleSignatures* = ref object of TLFunction
        channel*: InputChannelI
        enabled*: bool

    channels_getAdminedPublicChannels* = ref object of TLFunction
        flags*: int32
        by_location*: bool
        check_limit*: bool

    channels_editBanned* = ref object of TLFunction
        channel*: InputChannelI
        user_id*: InputUserI
        banned_rights*: ChatBannedRightsI

    channels_getAdminLog* = ref object of TLFunction
        flags*: int32
        channel*: InputChannelI
        q*: string
        events_filter*: Option[ChannelAdminLogEventsFilterI]
        admins*: Option[seq[InputUserI]]
        max_id*: int64
        min_id*: int64
        limit*: int32

    channels_setStickers* = ref object of TLFunction
        channel*: InputChannelI
        stickerset*: InputStickerSetI

    channels_readMessageContents* = ref object of TLFunction
        channel*: InputChannelI
        id*: seq[int32]

    channels_deleteHistory* = ref object of TLFunction
        channel*: InputChannelI
        max_id*: int32

    channels_togglePreHistoryHidden* = ref object of TLFunction
        channel*: InputChannelI
        enabled*: bool

    channels_getLeftChannels* = ref object of TLFunction
        offset*: int32

    channels_getGroupsForDiscussion* = ref object of TLFunction

    channels_setDiscussionGroup* = ref object of TLFunction
        broadcast*: InputChannelI
        group*: InputChannelI

    channels_editCreator* = ref object of TLFunction
        channel*: InputChannelI
        user_id*: InputUserI
        password*: InputCheckPasswordSRPI

    channels_editLocation* = ref object of TLFunction
        channel*: InputChannelI
        geo_point*: InputGeoPointI
        address*: string

    channels_toggleSlowMode* = ref object of TLFunction
        channel*: InputChannelI
        seconds*: int32

    channels_getInactiveChannels* = ref object of TLFunction

    bots_sendCustomRequest* = ref object of TLFunction
        custom_method*: string
        params*: DataJSONI

    bots_answerWebhookJSONQuery* = ref object of TLFunction
        query_id*: int64
        data*: DataJSONI

    bots_setBotCommands* = ref object of TLFunction
        commands*: seq[BotCommandI]

    payments_getPaymentForm* = ref object of TLFunction
        msg_id*: int32

    payments_getPaymentReceipt* = ref object of TLFunction
        msg_id*: int32

    payments_validateRequestedInfo* = ref object of TLFunction
        flags*: int32
        save*: bool
        msg_id*: int32
        info*: PaymentRequestedInfoI

    payments_sendPaymentForm* = ref object of TLFunction
        flags*: int32
        msg_id*: int32
        requested_info_id*: Option[string]
        shipping_option_id*: Option[string]
        credentials*: InputPaymentCredentialsI

    payments_getSavedInfo* = ref object of TLFunction

    payments_clearSavedInfo* = ref object of TLFunction
        flags*: int32
        credentials*: bool
        info*: bool

    payments_getBankCardData* = ref object of TLFunction
        number*: string

    stickers_createStickerSet* = ref object of TLFunction
        flags*: int32
        masks*: bool
        animated*: bool
        user_id*: InputUserI
        title*: string
        short_name*: string
        thumb*: Option[InputDocumentI]
        stickers*: seq[InputStickerSetItemI]

    stickers_removeStickerFromSet* = ref object of TLFunction
        sticker*: InputDocumentI

    stickers_changeStickerPosition* = ref object of TLFunction
        sticker*: InputDocumentI
        position*: int32

    stickers_addStickerToSet* = ref object of TLFunction
        stickerset*: InputStickerSetI
        sticker*: InputStickerSetItemI

    stickers_setStickerSetThumb* = ref object of TLFunction
        stickerset*: InputStickerSetI
        thumb*: InputDocumentI

    phone_getCallConfig* = ref object of TLFunction

    phone_requestCall* = ref object of TLFunction
        flags*: int32
        video*: bool
        user_id*: InputUserI
        random_id*: int32
        g_a_hash*: seq[uint8]
        protocol*: PhoneCallProtocolI

    phone_acceptCall* = ref object of TLFunction
        peer*: InputPhoneCallI
        g_b*: seq[uint8]
        protocol*: PhoneCallProtocolI

    phone_confirmCall* = ref object of TLFunction
        peer*: InputPhoneCallI
        g_a*: seq[uint8]
        key_fingerprint*: int64
        protocol*: PhoneCallProtocolI

    phone_receivedCall* = ref object of TLFunction
        peer*: InputPhoneCallI

    phone_discardCall* = ref object of TLFunction
        flags*: int32
        video*: bool
        peer*: InputPhoneCallI
        duration*: int32
        reason*: PhoneCallDiscardReasonI
        connection_id*: int64

    phone_setCallRating* = ref object of TLFunction
        flags*: int32
        user_initiative*: bool
        peer*: InputPhoneCallI
        rating*: int32
        comment*: string

    phone_saveCallDebug* = ref object of TLFunction
        peer*: InputPhoneCallI
        debug*: DataJSONI

    phone_sendSignalingData* = ref object of TLFunction
        peer*: InputPhoneCallI
        data*: seq[uint8]

    langpack_getLangPack* = ref object of TLFunction
        lang_pack*: string
        lang_code*: string

    langpack_getStrings* = ref object of TLFunction
        lang_pack*: string
        lang_code*: string
        keys*: seq[string]

    langpack_getDifference* = ref object of TLFunction
        lang_pack*: string
        lang_code*: string
        from_version*: int32

    langpack_getLanguages* = ref object of TLFunction
        lang_pack*: string

    langpack_getLanguage* = ref object of TLFunction
        lang_pack*: string
        lang_code*: string

    folders_editPeerFolders* = ref object of TLFunction
        folder_peers*: seq[InputFolderPeerI]

    folders_deleteFolder* = ref object of TLFunction
        folder_id*: int32

    stats_getBroadcastStats* = ref object of TLFunction
        flags*: int32
        dark*: bool
        channel*: InputChannelI

    stats_loadAsyncGraph* = ref object of TLFunction
        flags*: int32
        token*: string
        x*: Option[int64]

    stats_getMegagroupStats* = ref object of TLFunction
        flags*: int32
        dark*: bool
        channel*: InputChannelI

    stats_getMessagePublicForwards* = ref object of TLFunction
        channel*: InputChannelI
        msg_id*: int32
        offset_rate*: int32
        offset_peer*: InputPeerI
        offset_id*: int32
        limit*: int32

    stats_getMessageStats* = ref object of TLFunction
        flags*: int32
        dark*: bool
        channel*: InputChannelI
        msg_id*: int32



proc TLEncodeApiGeneric*(obj: TLFunction): seq[uint8]

proc TLEncodeFunction*(obj: invokeAfterMsg): seq[uint8] = 
    result = result & TLEncode(int32(-878758099))
    result = result & TLEncode(obj.msg_id)

    result = result & TLEncodeApiGeneric(obj.query)


proc TLEncodeFunction*(obj: invokeAfterMsgs): seq[uint8] = 
    result = result & TLEncode(int32(1036301552))
    result = result & TLEncode(obj.msg_ids)

    result = result & TLEncodeApiGeneric(obj.query)


proc TLEncodeFunction*(obj: initConnection): seq[uint8] = 
    obj.flags = 0
    result = result & TLEncode(uint32(3251461801))
    #[if obj.proxy.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.params.isSome():
        obj.flags = obj.flags or 1 shl 1]#

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.api_id)

    result = result & TLEncode(obj.device_model)

    result = result & TLEncode(obj.system_version)

    result = result & TLEncode(obj.app_version)

    result = result & TLEncode(obj.system_lang_code)

    result = result & TLEncode(obj.lang_pack)

    result = result & TLEncode(obj.lang_code)

    if obj.proxy.isSome():
        result = result & TLEncode(obj.proxy.get())

    if obj.params.isSome():
        result = result & TLEncode(obj.params.get())

    result = result & TLEncodeApiGeneric(obj.query)



proc TLEncodeFunction*(obj: invokeWithLayer): seq[uint8] = 
    result = result & TLEncode(uint32(3667594509))
    result = result & TLEncode(obj.layer)

    result = result & TLEncodeApiGeneric(obj.query)


proc TLEncodeFunction*(obj: invokeWithoutUpdates): seq[uint8] = 
    result = result & TLEncode(int32(-1080796745))
    result = result & TLEncodeApiGeneric(obj.query)


proc TLEncodeFunction*(obj: invokeWithMessagesRange): seq[uint8] = 
    result = result & TLEncode(int32(911373810))
    result = result & TLEncode(obj.range)

    result = result & TLEncodeApiGeneric(obj.query)


proc TLEncodeFunction*(obj: invokeWithTakeout): seq[uint8] = 
    result = result & TLEncode(int32(-1398145746))
    result = result & TLEncode(obj.takeout_id)

    result = result & TLEncodeApiGeneric(obj.query)


proc TLEncodeFunction*(obj: auth_sendCode): seq[uint8] = 
    result = result & TLEncode(int32(-1502141361))
    result = result & TLEncode(obj.phone_number)

    result = result & TLEncode(obj.api_id)

    result = result & TLEncode(obj.api_hash)

    result = result & TLEncode(obj.settings)


proc TLEncodeFunction*(obj: auth_signUp): seq[uint8] = 
    result = result & TLEncode(int32(-2131827673))
    result = result & TLEncode(obj.phone_number)

    result = result & TLEncode(obj.phone_code_hash)

    result = result & TLEncode(obj.first_name)

    result = result & TLEncode(obj.last_name)


proc TLEncodeFunction*(obj: auth_signIn): seq[uint8] = 
    result = result & TLEncode(int32(-1126886015))
    result = result & TLEncode(obj.phone_number)

    result = result & TLEncode(obj.phone_code_hash)

    result = result & TLEncode(obj.phone_code)


proc TLEncodeFunction*(obj: auth_logOut): seq[uint8] = 
    result = result & TLEncode(int32(1461180992))

proc TLEncodeFunction*(obj: auth_resetAuthorizations): seq[uint8] = 
    result = result & TLEncode(int32(-1616179942))

proc TLEncodeFunction*(obj: auth_exportAuthorization): seq[uint8] = 
    result = result & TLEncode(int32(-440401971))
    result = result & TLEncode(obj.dc_id)


proc TLEncodeFunction*(obj: auth_importAuthorization): seq[uint8] = 
    result = result & TLEncode(int32(-470837741))
    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.bytes)


proc TLEncodeFunction*(obj: auth_bindTempAuthKey): seq[uint8] = 
    result = result & TLEncode(int32(-841733627))
    result = result & TLEncode(obj.perm_auth_key_id)

    result = result & TLEncode(obj.nonce)

    result = result & TLEncode(obj.expires_at)

    result = result & TLEncode(obj.encrypted_message)


proc TLEncodeFunction*(obj: auth_importBotAuthorization): seq[uint8] = 
    result = result & TLEncode(int32(1738800940))
    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.api_id)

    result = result & TLEncode(obj.api_hash)

    result = result & TLEncode(obj.bot_auth_token)


proc TLEncodeFunction*(obj: auth_checkPassword): seq[uint8] = 
    result = result & TLEncode(int32(-779399914))
    result = result & TLEncode(obj.password)


proc TLEncodeFunction*(obj: auth_requestPasswordRecovery): seq[uint8] = 
    result = result & TLEncode(int32(-661144474))

proc TLEncodeFunction*(obj: auth_recoverPassword): seq[uint8] = 
    result = result & TLEncode(int32(1319464594))
    result = result & TLEncode(obj.code)


proc TLEncodeFunction*(obj: auth_resendCode): seq[uint8] = 
    result = result & TLEncode(int32(1056025023))
    result = result & TLEncode(obj.phone_number)

    result = result & TLEncode(obj.phone_code_hash)


proc TLEncodeFunction*(obj: auth_cancelCode): seq[uint8] = 
    result = result & TLEncode(int32(520357240))
    result = result & TLEncode(obj.phone_number)

    result = result & TLEncode(obj.phone_code_hash)


proc TLEncodeFunction*(obj: auth_dropTempAuthKeys): seq[uint8] = 
    result = result & TLEncode(int32(-1907842680))
    result = result & TLEncode(obj.except_auth_keys)


proc TLEncodeFunction*(obj: auth_exportLoginToken): seq[uint8] = 
    result = result & TLEncode(int32(-1313598185))
    result = result & TLEncode(obj.api_id)

    result = result & TLEncode(obj.api_hash)

    result = result & TLEncode(obj.except_ids)


proc TLEncodeFunction*(obj: auth_importLoginToken): seq[uint8] = 
    result = result & TLEncode(int32(-1783866140))
    result = result & TLEncode(obj.token)


proc TLEncodeFunction*(obj: auth_acceptLoginToken): seq[uint8] = 
    result = result & TLEncode(int32(-392909491))
    result = result & TLEncode(obj.token)


proc TLEncodeFunction*(obj: account_registerDevice): seq[uint8] = 
    result = result & TLEncode(int32(1754754159))
    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.token_type)

    result = result & TLEncode(obj.token)

    result = result & TLEncode(obj.app_sandbox)

    result = result & TLEncode(obj.secret)

    result = result & TLEncode(obj.other_uids)


proc TLEncodeFunction*(obj: account_unregisterDevice): seq[uint8] = 
    result = result & TLEncode(int32(813089983))
    result = result & TLEncode(obj.token_type)

    result = result & TLEncode(obj.token)

    result = result & TLEncode(obj.other_uids)


proc TLEncodeFunction*(obj: account_updateNotifySettings): seq[uint8] = 
    result = result & TLEncode(int32(-2067899501))
    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.settings)


proc TLEncodeFunction*(obj: account_getNotifySettings): seq[uint8] = 
    result = result & TLEncode(int32(313765169))
    result = result & TLEncode(obj.peer)


proc TLEncodeFunction*(obj: account_resetNotifySettings): seq[uint8] = 
    result = result & TLEncode(int32(-612493497))

proc TLEncodeFunction*(obj: account_updateProfile): seq[uint8] = 
    result = result & TLEncode(int32(2018596725))
    if obj.first_name.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.last_name.isSome():
        obj.flags = obj.flags or 1 shl 1

    if obj.about.isSome():
        obj.flags = obj.flags or 1 shl 2

    result = result & TLEncode(obj.flags)

    if obj.first_name.isSome():
        result = result & TLEncode(obj.first_name.get())

    if obj.last_name.isSome():
        result = result & TLEncode(obj.last_name.get())

    if obj.about.isSome():
        result = result & TLEncode(obj.about.get())


proc TLEncodeFunction*(obj: account_updateStatus): seq[uint8] = 
    result = result & TLEncode(int32(1713919532))
    result = result & TLEncode(obj.offline)


proc TLEncodeFunction*(obj: account_getWallPapers): seq[uint8] = 
    result = result & TLEncode(int32(-1430579357))
    result = result & TLEncode(obj.hash)


proc TLEncodeFunction*(obj: account_reportPeer): seq[uint8] = 
    result = result & TLEncode(int32(-1374118561))
    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.reason)


proc TLEncodeFunction*(obj: account_checkUsername): seq[uint8] = 
    result = result & TLEncode(int32(655677548))
    result = result & TLEncode(obj.username)


proc TLEncodeFunction*(obj: account_updateUsername): seq[uint8] = 
    result = result & TLEncode(int32(1040964988))
    result = result & TLEncode(obj.username)


proc TLEncodeFunction*(obj: account_getPrivacy): seq[uint8] = 
    result = result & TLEncode(int32(-623130288))
    result = result & TLEncode(obj.key)


proc TLEncodeFunction*(obj: account_setPrivacy): seq[uint8] = 
    result = result & TLEncode(int32(-906486552))
    result = result & TLEncode(obj.key)

    result = result & TLEncode(obj.rules)


proc TLEncodeFunction*(obj: account_deleteAccount): seq[uint8] = 
    result = result & TLEncode(int32(1099779595))
    result = result & TLEncode(obj.reason)


proc TLEncodeFunction*(obj: account_getAccountTTL): seq[uint8] = 
    result = result & TLEncode(int32(-1882779184))

proc TLEncodeFunction*(obj: account_setAccountTTL): seq[uint8] = 
    result = result & TLEncode(int32(608323678))
    result = result & TLEncode(obj.ttl)


proc TLEncodeFunction*(obj: account_sendChangePhoneCode): seq[uint8] = 
    result = result & TLEncode(int32(-2108208411))
    result = result & TLEncode(obj.phone_number)

    result = result & TLEncode(obj.settings)


proc TLEncodeFunction*(obj: account_changePhone): seq[uint8] = 
    result = result & TLEncode(int32(1891839707))
    result = result & TLEncode(obj.phone_number)

    result = result & TLEncode(obj.phone_code_hash)

    result = result & TLEncode(obj.phone_code)


proc TLEncodeFunction*(obj: account_updateDeviceLocked): seq[uint8] = 
    result = result & TLEncode(int32(954152242))
    result = result & TLEncode(obj.period)


proc TLEncodeFunction*(obj: account_getAuthorizations): seq[uint8] = 
    result = result & TLEncode(int32(-484392616))

proc TLEncodeFunction*(obj: account_resetAuthorization): seq[uint8] = 
    result = result & TLEncode(int32(-545786948))
    result = result & TLEncode(obj.hash)


proc TLEncodeFunction*(obj: account_getPassword): seq[uint8] = 
    result = result & TLEncode(int32(1418342645))

proc TLEncodeFunction*(obj: account_getPasswordSettings): seq[uint8] = 
    result = result & TLEncode(int32(-1663767815))
    result = result & TLEncode(obj.password)


proc TLEncodeFunction*(obj: account_updatePasswordSettings): seq[uint8] = 
    result = result & TLEncode(int32(-1516564433))
    result = result & TLEncode(obj.password)

    result = result & TLEncode(obj.new_settings)


proc TLEncodeFunction*(obj: account_sendConfirmPhoneCode): seq[uint8] = 
    result = result & TLEncode(int32(457157256))
    result = result & TLEncode(obj.hash)

    result = result & TLEncode(obj.settings)


proc TLEncodeFunction*(obj: account_confirmPhone): seq[uint8] = 
    result = result & TLEncode(int32(1596029123))
    result = result & TLEncode(obj.phone_code_hash)

    result = result & TLEncode(obj.phone_code)


proc TLEncodeFunction*(obj: account_getTmpPassword): seq[uint8] = 
    result = result & TLEncode(int32(1151208273))
    result = result & TLEncode(obj.password)

    result = result & TLEncode(obj.period)


proc TLEncodeFunction*(obj: account_getWebAuthorizations): seq[uint8] = 
    result = result & TLEncode(int32(405695855))

proc TLEncodeFunction*(obj: account_resetWebAuthorization): seq[uint8] = 
    result = result & TLEncode(int32(755087855))
    result = result & TLEncode(obj.hash)


proc TLEncodeFunction*(obj: account_resetWebAuthorizations): seq[uint8] = 
    result = result & TLEncode(int32(1747789204))

proc TLEncodeFunction*(obj: account_getAllSecureValues): seq[uint8] = 
    result = result & TLEncode(int32(-1299661699))

proc TLEncodeFunction*(obj: account_getSecureValue): seq[uint8] = 
    result = result & TLEncode(int32(1936088002))
    result = result & TLEncode(obj.types)


proc TLEncodeFunction*(obj: account_saveSecureValue): seq[uint8] = 
    result = result & TLEncode(int32(-1986010339))
    result = result & TLEncode(obj.value)

    result = result & TLEncode(obj.secure_secret_id)


proc TLEncodeFunction*(obj: account_deleteSecureValue): seq[uint8] = 
    result = result & TLEncode(int32(-1199522741))
    result = result & TLEncode(obj.types)


proc TLEncodeFunction*(obj: account_getAuthorizationForm): seq[uint8] = 
    result = result & TLEncode(int32(-1200903967))
    result = result & TLEncode(obj.bot_id)

    result = result & TLEncode(obj.scope)

    result = result & TLEncode(obj.public_key)


proc TLEncodeFunction*(obj: account_acceptAuthorization): seq[uint8] = 
    result = result & TLEncode(int32(-419267436))
    result = result & TLEncode(obj.bot_id)

    result = result & TLEncode(obj.scope)

    result = result & TLEncode(obj.public_key)

    result = result & TLEncode(obj.value_hashes)

    result = result & TLEncode(obj.credentials)


proc TLEncodeFunction*(obj: account_sendVerifyPhoneCode): seq[uint8] = 
    result = result & TLEncode(int32(-1516022023))
    result = result & TLEncode(obj.phone_number)

    result = result & TLEncode(obj.settings)


proc TLEncodeFunction*(obj: account_verifyPhone): seq[uint8] = 
    result = result & TLEncode(int32(1305716726))
    result = result & TLEncode(obj.phone_number)

    result = result & TLEncode(obj.phone_code_hash)

    result = result & TLEncode(obj.phone_code)


proc TLEncodeFunction*(obj: account_sendVerifyEmailCode): seq[uint8] = 
    result = result & TLEncode(int32(1880182943))
    result = result & TLEncode(obj.email)


proc TLEncodeFunction*(obj: account_verifyEmail): seq[uint8] = 
    result = result & TLEncode(int32(-323339813))
    result = result & TLEncode(obj.email)

    result = result & TLEncode(obj.code)


proc TLEncodeFunction*(obj: account_initTakeoutSession): seq[uint8] = 
    result = result & TLEncode(int32(-262453244))
    if obj.file_max_size.isSome():
        obj.flags = obj.flags or 1 shl 5

    result = result & TLEncode(obj.flags)

    if obj.file_max_size.isSome():
        result = result & TLEncode(obj.file_max_size.get())


proc TLEncodeFunction*(obj: account_finishTakeoutSession): seq[uint8] = 
    result = result & TLEncode(int32(489050862))
    result = result & TLEncode(obj.flags)


proc TLEncodeFunction*(obj: account_confirmPasswordEmail): seq[uint8] = 
    result = result & TLEncode(int32(-1881204448))
    result = result & TLEncode(obj.code)


proc TLEncodeFunction*(obj: account_resendPasswordEmail): seq[uint8] = 
    result = result & TLEncode(int32(2055154197))

proc TLEncodeFunction*(obj: account_cancelPasswordEmail): seq[uint8] = 
    result = result & TLEncode(int32(-1043606090))

proc TLEncodeFunction*(obj: account_getContactSignUpNotification): seq[uint8] = 
    result = result & TLEncode(int32(-1626880216))

proc TLEncodeFunction*(obj: account_setContactSignUpNotification): seq[uint8] = 
    result = result & TLEncode(int32(-806076575))
    result = result & TLEncode(obj.silent)


proc TLEncodeFunction*(obj: account_getNotifyExceptions): seq[uint8] = 
    result = result & TLEncode(int32(1398240377))
    if obj.peer.isSome():
        obj.flags = obj.flags or 1 shl 0

    result = result & TLEncode(obj.flags)

    if obj.peer.isSome():
        result = result & TLEncode(obj.peer.get())


proc TLEncodeFunction*(obj: account_getWallPaper): seq[uint8] = 
    result = result & TLEncode(int32(-57811990))
    result = result & TLEncode(obj.wallpaper)


proc TLEncodeFunction*(obj: account_uploadWallPaper): seq[uint8] = 
    result = result & TLEncode(int32(-578472351))
    result = result & TLEncode(obj.file)

    result = result & TLEncode(obj.mime_type)

    result = result & TLEncode(obj.settings)


proc TLEncodeFunction*(obj: account_saveWallPaper): seq[uint8] = 
    result = result & TLEncode(int32(1817860919))
    result = result & TLEncode(obj.wallpaper)

    result = result & TLEncode(obj.unsave)

    result = result & TLEncode(obj.settings)


proc TLEncodeFunction*(obj: account_installWallPaper): seq[uint8] = 
    result = result & TLEncode(int32(-18000023))
    result = result & TLEncode(obj.wallpaper)

    result = result & TLEncode(obj.settings)


proc TLEncodeFunction*(obj: account_resetWallPapers): seq[uint8] = 
    result = result & TLEncode(int32(-1153722364))

proc TLEncodeFunction*(obj: account_getAutoDownloadSettings): seq[uint8] = 
    result = result & TLEncode(int32(1457130303))

proc TLEncodeFunction*(obj: account_saveAutoDownloadSettings): seq[uint8] = 
    result = result & TLEncode(int32(1995661875))
    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.settings)


proc TLEncodeFunction*(obj: account_uploadTheme): seq[uint8] = 
    result = result & TLEncode(int32(473805619))
    if obj.thumb.isSome():
        obj.flags = obj.flags or 1 shl 0

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.file)

    if obj.thumb.isSome():
        result = result & TLEncode(obj.thumb.get())

    result = result & TLEncode(obj.file_name)

    result = result & TLEncode(obj.mime_type)


proc TLEncodeFunction*(obj: account_createTheme): seq[uint8] = 
    result = result & TLEncode(int32(-2077048289))
    if obj.document.isSome():
        obj.flags = obj.flags or 1 shl 2

    if obj.settings.isSome():
        obj.flags = obj.flags or 1 shl 3

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.slug)

    result = result & TLEncode(obj.title)

    if obj.document.isSome():
        result = result & TLEncode(obj.document.get())

    if obj.settings.isSome():
        result = result & TLEncode(obj.settings.get())


proc TLEncodeFunction*(obj: account_updateTheme): seq[uint8] = 
    result = result & TLEncode(int32(1555261397))
    if obj.slug.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.title.isSome():
        obj.flags = obj.flags or 1 shl 1

    if obj.document.isSome():
        obj.flags = obj.flags or 1 shl 2

    if obj.settings.isSome():
        obj.flags = obj.flags or 1 shl 3

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.format)

    result = result & TLEncode(obj.theme)

    if obj.slug.isSome():
        result = result & TLEncode(obj.slug.get())

    if obj.title.isSome():
        result = result & TLEncode(obj.title.get())

    if obj.document.isSome():
        result = result & TLEncode(obj.document.get())

    if obj.settings.isSome():
        result = result & TLEncode(obj.settings.get())


proc TLEncodeFunction*(obj: account_saveTheme): seq[uint8] = 
    result = result & TLEncode(int32(-229175188))
    result = result & TLEncode(obj.theme)

    result = result & TLEncode(obj.unsave)


proc TLEncodeFunction*(obj: account_installTheme): seq[uint8] = 
    result = result & TLEncode(int32(2061776695))
    if obj.format.isSome():
        obj.flags = obj.flags or 1 shl 1

    if obj.theme.isSome():
        obj.flags = obj.flags or 1 shl 1

    result = result & TLEncode(obj.flags)

    if obj.format.isSome():
        result = result & TLEncode(obj.format.get())

    if obj.theme.isSome():
        result = result & TLEncode(obj.theme.get())


proc TLEncodeFunction*(obj: account_getTheme): seq[uint8] = 
    result = result & TLEncode(int32(-1919060949))
    result = result & TLEncode(obj.format)

    result = result & TLEncode(obj.theme)

    result = result & TLEncode(obj.document_id)


proc TLEncodeFunction*(obj: account_getThemes): seq[uint8] = 
    result = result & TLEncode(int32(676939512))
    result = result & TLEncode(obj.format)

    result = result & TLEncode(obj.hash)


proc TLEncodeFunction*(obj: account_setContentSettings): seq[uint8] = 
    result = result & TLEncode(int32(-1250643605))
    result = result & TLEncode(obj.flags)


proc TLEncodeFunction*(obj: account_getContentSettings): seq[uint8] = 
    result = result & TLEncode(int32(-1952756306))

proc TLEncodeFunction*(obj: account_getMultiWallPapers): seq[uint8] = 
    result = result & TLEncode(int32(1705865692))
    result = result & TLEncode(obj.wallpapers)


proc TLEncodeFunction*(obj: account_getGlobalPrivacySettings): seq[uint8] = 
    result = result & TLEncode(int32(-349483786))

proc TLEncodeFunction*(obj: account_setGlobalPrivacySettings): seq[uint8] = 
    result = result & TLEncode(int32(517647042))
    result = result & TLEncode(obj.settings)


proc TLEncodeFunction*(obj: users_getUsers): seq[uint8] = 
    result = result & TLEncode(int32(-652585856))
    result = result & TLEncode(obj.id)


proc TLEncodeFunction*(obj: users_getFullUser): seq[uint8] = 
    result = result & TLEncode(int32(-902781519))
    result = result & TLEncode(obj.id)


proc TLEncodeFunction*(obj: users_setSecureValueErrors): seq[uint8] = 
    result = result & TLEncode(int32(-1865902923))
    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.errors)


proc TLEncodeFunction*(obj: contacts_getContactIDs): seq[uint8] = 
    result = result & TLEncode(int32(749357634))
    result = result & TLEncode(obj.hash)


proc TLEncodeFunction*(obj: contacts_getStatuses): seq[uint8] = 
    result = result & TLEncode(int32(-995929106))

proc TLEncodeFunction*(obj: contacts_getContacts): seq[uint8] = 
    result = result & TLEncode(int32(-1071414113))
    result = result & TLEncode(obj.hash)


proc TLEncodeFunction*(obj: contacts_importContacts): seq[uint8] = 
    result = result & TLEncode(int32(746589157))
    result = result & TLEncode(obj.contacts)


proc TLEncodeFunction*(obj: contacts_deleteContacts): seq[uint8] = 
    result = result & TLEncode(int32(-1767841792))
    result = result & TLEncode(obj.id)


proc TLEncodeFunction*(obj: contacts_deleteByPhones): seq[uint8] = 
    result = result & TLEncode(int32(269745566))
    result = result & TLEncode(obj.phones)


proc TLEncodeFunction*(obj: contacts_block): seq[uint8] = 
    result = result & TLEncode(int32(1758204945))
    result = result & TLEncode(obj.id)


proc TLEncodeFunction*(obj: contacts_unblock): seq[uint8] = 
    result = result & TLEncode(int32(-1096393392))
    result = result & TLEncode(obj.id)


proc TLEncodeFunction*(obj: contacts_getBlocked): seq[uint8] = 
    result = result & TLEncode(int32(-176409329))
    result = result & TLEncode(obj.offset)

    result = result & TLEncode(obj.limit)


proc TLEncodeFunction*(obj: contacts_search): seq[uint8] = 
    result = result & TLEncode(int32(301470424))
    result = result & TLEncode(obj.q)

    result = result & TLEncode(obj.limit)


proc TLEncodeFunction*(obj: contacts_resolveUsername): seq[uint8] = 
    result = result & TLEncode(int32(-113456221))
    result = result & TLEncode(obj.username)


proc TLEncodeFunction*(obj: contacts_getTopPeers): seq[uint8] = 
    result = result & TLEncode(int32(-728224331))
    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.offset)

    result = result & TLEncode(obj.limit)

    result = result & TLEncode(obj.hash)


proc TLEncodeFunction*(obj: contacts_resetTopPeerRating): seq[uint8] = 
    result = result & TLEncode(int32(451113900))
    result = result & TLEncode(obj.category)

    result = result & TLEncode(obj.peer)


proc TLEncodeFunction*(obj: contacts_resetSaved): seq[uint8] = 
    result = result & TLEncode(int32(-2020263951))

proc TLEncodeFunction*(obj: contacts_getSaved): seq[uint8] = 
    result = result & TLEncode(int32(-2098076769))

proc TLEncodeFunction*(obj: contacts_toggleTopPeers): seq[uint8] = 
    result = result & TLEncode(int32(-2062238246))
    result = result & TLEncode(obj.enabled)


proc TLEncodeFunction*(obj: contacts_addContact): seq[uint8] = 
    result = result & TLEncode(int32(-386636848))
    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.first_name)

    result = result & TLEncode(obj.last_name)

    result = result & TLEncode(obj.phone)


proc TLEncodeFunction*(obj: contacts_acceptContact): seq[uint8] = 
    result = result & TLEncode(int32(-130964977))
    result = result & TLEncode(obj.id)


proc TLEncodeFunction*(obj: contacts_getLocated): seq[uint8] = 
    result = result & TLEncode(int32(-750207932))
    if obj.self_expires.isSome():
        obj.flags = obj.flags or 1 shl 0

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.geo_point)

    if obj.self_expires.isSome():
        result = result & TLEncode(obj.self_expires.get())


proc TLEncodeFunction*(obj: contacts_blockFromReplies): seq[uint8] = 
    result = result & TLEncode(int32(698914348))
    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.msg_id)


proc TLEncodeFunction*(obj: messages_getMessages): seq[uint8] = 
    result = result & TLEncode(int32(1673946374))
    result = result & TLEncode(obj.id)


proc TLEncodeFunction*(obj: messages_getDialogs): seq[uint8] = 
    result = result & TLEncode(int32(-1594999949))
    if obj.folder_id.isSome():
        obj.flags = obj.flags or 1 shl 1

    result = result & TLEncode(obj.flags)

    if obj.folder_id.isSome():
        result = result & TLEncode(obj.folder_id.get())

    result = result & TLEncode(obj.offset_date)

    result = result & TLEncode(obj.offset_id)

    result = result & TLEncode(obj.offset_peer)

    result = result & TLEncode(obj.limit)

    result = result & TLEncode(obj.hash)


proc TLEncodeFunction*(obj: messages_getHistory): seq[uint8] = 
    result = result & TLEncode(int32(-591691168))
    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.offset_id)

    result = result & TLEncode(obj.offset_date)

    result = result & TLEncode(obj.add_offset)

    result = result & TLEncode(obj.limit)

    result = result & TLEncode(obj.max_id)

    result = result & TLEncode(obj.min_id)

    result = result & TLEncode(obj.hash)


proc TLEncodeFunction*(obj: messages_search): seq[uint8] = 
    result = result & TLEncode(int32(-1017975104))
    if obj.from_id.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.top_msg_id.isSome():
        obj.flags = obj.flags or 1 shl 1

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.q)

    if obj.from_id.isSome():
        result = result & TLEncode(obj.from_id.get())

    if obj.top_msg_id.isSome():
        result = result & TLEncode(obj.top_msg_id.get())

    result = result & TLEncode(obj.filter)

    result = result & TLEncode(obj.min_date)

    result = result & TLEncode(obj.max_date)

    result = result & TLEncode(obj.offset_id)

    result = result & TLEncode(obj.add_offset)

    result = result & TLEncode(obj.limit)

    result = result & TLEncode(obj.max_id)

    result = result & TLEncode(obj.min_id)

    result = result & TLEncode(obj.hash)


proc TLEncodeFunction*(obj: messages_readHistory): seq[uint8] = 
    result = result & TLEncode(int32(-486091872))
    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.max_id)


proc TLEncodeFunction*(obj: messages_deleteHistory): seq[uint8] = 
    result = result & TLEncode(int32(469850889))
    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.max_id)


proc TLEncodeFunction*(obj: messages_deleteMessages): seq[uint8] = 
    result = result & TLEncode(int32(-443640366))
    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.id)


proc TLEncodeFunction*(obj: messages_receivedMessages): seq[uint8] = 
    result = result & TLEncode(int32(1519733760))
    result = result & TLEncode(obj.max_id)


proc TLEncodeFunction*(obj: messages_setTyping): seq[uint8] = 
    result = result & TLEncode(int32(1486110434))
    if obj.top_msg_id.isSome():
        obj.flags = obj.flags or 1 shl 0

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.peer)

    if obj.top_msg_id.isSome():
        result = result & TLEncode(obj.top_msg_id.get())

    result = result & TLEncode(obj.action)


proc TLEncodeFunction*(obj: messages_sendMessage): seq[uint8] = 
    result = result & TLEncode(int32(1376532592))
    if obj.reply_to_msg_id.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.reply_markup.isSome():
        obj.flags = obj.flags or 1 shl 2

    if obj.entities.isSome():
        obj.flags = obj.flags or 1 shl 3

    if obj.schedule_date.isSome():
        obj.flags = obj.flags or 1 shl 10

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.peer)

    if obj.reply_to_msg_id.isSome():
        result = result & TLEncode(obj.reply_to_msg_id.get())

    result = result & TLEncode(obj.message)

    result = result & TLEncode(obj.random_id)

    if obj.reply_markup.isSome():
        result = result & TLEncode(obj.reply_markup.get())

    if obj.entities.isSome():
        result = result & TLEncode(obj.entities.get())

    if obj.schedule_date.isSome():
        result = result & TLEncode(obj.schedule_date.get())


proc TLEncodeFunction*(obj: messages_sendMedia): seq[uint8] = 
    result = result & TLEncode(int32(881978281))
    if obj.reply_to_msg_id.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.reply_markup.isSome():
        obj.flags = obj.flags or 1 shl 2

    if obj.entities.isSome():
        obj.flags = obj.flags or 1 shl 3

    if obj.schedule_date.isSome():
        obj.flags = obj.flags or 1 shl 10

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.peer)

    if obj.reply_to_msg_id.isSome():
        result = result & TLEncode(obj.reply_to_msg_id.get())

    result = result & TLEncode(obj.media)

    result = result & TLEncode(obj.message)

    result = result & TLEncode(obj.random_id)

    if obj.reply_markup.isSome():
        result = result & TLEncode(obj.reply_markup.get())

    if obj.entities.isSome():
        result = result & TLEncode(obj.entities.get())

    if obj.schedule_date.isSome():
        result = result & TLEncode(obj.schedule_date.get())


proc TLEncodeFunction*(obj: messages_forwardMessages): seq[uint8] = 
    result = result & TLEncode(int32(-637606386))
    if obj.schedule_date.isSome():
        obj.flags = obj.flags or 1 shl 10

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.from_peer)

    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.random_id)

    result = result & TLEncode(obj.to_peer)

    if obj.schedule_date.isSome():
        result = result & TLEncode(obj.schedule_date.get())


proc TLEncodeFunction*(obj: messages_reportSpam): seq[uint8] = 
    result = result & TLEncode(int32(-820669733))
    result = result & TLEncode(obj.peer)


proc TLEncodeFunction*(obj: messages_getPeerSettings): seq[uint8] = 
    result = result & TLEncode(int32(913498268))
    result = result & TLEncode(obj.peer)


proc TLEncodeFunction*(obj: messages_report): seq[uint8] = 
    result = result & TLEncode(int32(-1115507112))
    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.reason)


proc TLEncodeFunction*(obj: messages_getChats): seq[uint8] = 
    result = result & TLEncode(int32(1013621127))
    result = result & TLEncode(obj.id)


proc TLEncodeFunction*(obj: messages_getFullChat): seq[uint8] = 
    result = result & TLEncode(int32(998448230))
    result = result & TLEncode(obj.chat_id)


proc TLEncodeFunction*(obj: messages_editChatTitle): seq[uint8] = 
    result = result & TLEncode(int32(-599447467))
    result = result & TLEncode(obj.chat_id)

    result = result & TLEncode(obj.title)


proc TLEncodeFunction*(obj: messages_editChatPhoto): seq[uint8] = 
    result = result & TLEncode(int32(-900957736))
    result = result & TLEncode(obj.chat_id)

    result = result & TLEncode(obj.photo)


proc TLEncodeFunction*(obj: messages_addChatUser): seq[uint8] = 
    result = result & TLEncode(int32(-106911223))
    result = result & TLEncode(obj.chat_id)

    result = result & TLEncode(obj.user_id)

    result = result & TLEncode(obj.fwd_limit)


proc TLEncodeFunction*(obj: messages_deleteChatUser): seq[uint8] = 
    result = result & TLEncode(int32(-530505962))
    result = result & TLEncode(obj.chat_id)

    result = result & TLEncode(obj.user_id)


proc TLEncodeFunction*(obj: messages_createChat): seq[uint8] = 
    result = result & TLEncode(int32(-1666111776))
    result = result & TLEncode(obj.users)

    result = result & TLEncode(obj.title)


proc TLEncodeFunction*(obj: messages_getDhConfig): seq[uint8] = 
    result = result & TLEncode(int32(651135312))
    result = result & TLEncode(obj.version)

    result = result & TLEncode(obj.random_length)


proc TLEncodeFunction*(obj: messages_requestEncryption): seq[uint8] = 
    result = result & TLEncode(int32(-162681021))
    result = result & TLEncode(obj.user_id)

    result = result & TLEncode(obj.random_id)

    result = result & TLEncode(obj.g_a)


proc TLEncodeFunction*(obj: messages_acceptEncryption): seq[uint8] = 
    result = result & TLEncode(int32(1035731989))
    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.g_b)

    result = result & TLEncode(obj.key_fingerprint)


proc TLEncodeFunction*(obj: messages_discardEncryption): seq[uint8] = 
    result = result & TLEncode(int32(-304536635))
    result = result & TLEncode(obj.chat_id)


proc TLEncodeFunction*(obj: messages_setEncryptedTyping): seq[uint8] = 
    result = result & TLEncode(int32(2031374829))
    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.typing)


proc TLEncodeFunction*(obj: messages_readEncryptedHistory): seq[uint8] = 
    result = result & TLEncode(int32(2135648522))
    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.max_date)


proc TLEncodeFunction*(obj: messages_sendEncrypted): seq[uint8] = 
    result = result & TLEncode(int32(1157265941))
    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.random_id)

    result = result & TLEncode(obj.data)


proc TLEncodeFunction*(obj: messages_sendEncryptedFile): seq[uint8] = 
    result = result & TLEncode(int32(1431914525))
    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.random_id)

    result = result & TLEncode(obj.data)

    result = result & TLEncode(obj.file)


proc TLEncodeFunction*(obj: messages_sendEncryptedService): seq[uint8] = 
    result = result & TLEncode(int32(852769188))
    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.random_id)

    result = result & TLEncode(obj.data)


proc TLEncodeFunction*(obj: messages_receivedQueue): seq[uint8] = 
    result = result & TLEncode(int32(1436924774))
    result = result & TLEncode(obj.max_qts)


proc TLEncodeFunction*(obj: messages_reportEncryptedSpam): seq[uint8] = 
    result = result & TLEncode(int32(1259113487))
    result = result & TLEncode(obj.peer)


proc TLEncodeFunction*(obj: messages_readMessageContents): seq[uint8] = 
    result = result & TLEncode(int32(916930423))
    result = result & TLEncode(obj.id)


proc TLEncodeFunction*(obj: messages_getStickers): seq[uint8] = 
    result = result & TLEncode(int32(1138029248))
    result = result & TLEncode(obj.emoticon)

    result = result & TLEncode(obj.hash)


proc TLEncodeFunction*(obj: messages_getAllStickers): seq[uint8] = 
    result = result & TLEncode(int32(479598769))
    result = result & TLEncode(obj.hash)


proc TLEncodeFunction*(obj: messages_getWebPagePreview): seq[uint8] = 
    result = result & TLEncode(int32(-1956073268))
    if obj.entities.isSome():
        obj.flags = obj.flags or 1 shl 3

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.message)

    if obj.entities.isSome():
        result = result & TLEncode(obj.entities.get())


proc TLEncodeFunction*(obj: messages_exportChatInvite): seq[uint8] = 
    result = result & TLEncode(int32(-545966912))
    result = result & TLEncode(obj.peer)


proc TLEncodeFunction*(obj: messages_checkChatInvite): seq[uint8] = 
    result = result & TLEncode(int32(1051570619))
    result = result & TLEncode(obj.hash)


proc TLEncodeFunction*(obj: messages_importChatInvite): seq[uint8] = 
    result = result & TLEncode(int32(1817183516))
    result = result & TLEncode(obj.hash)


proc TLEncodeFunction*(obj: messages_getStickerSet): seq[uint8] = 
    result = result & TLEncode(int32(639215886))
    result = result & TLEncode(obj.stickerset)


proc TLEncodeFunction*(obj: messages_installStickerSet): seq[uint8] = 
    result = result & TLEncode(int32(-946871200))
    result = result & TLEncode(obj.stickerset)

    result = result & TLEncode(obj.archived)


proc TLEncodeFunction*(obj: messages_uninstallStickerSet): seq[uint8] = 
    result = result & TLEncode(int32(-110209570))
    result = result & TLEncode(obj.stickerset)


proc TLEncodeFunction*(obj: messages_startBot): seq[uint8] = 
    result = result & TLEncode(int32(-421563528))
    result = result & TLEncode(obj.bot)

    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.random_id)

    result = result & TLEncode(obj.start_param)


proc TLEncodeFunction*(obj: messages_getMessagesViews): seq[uint8] = 
    result = result & TLEncode(int32(1468322785))
    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.increment)


proc TLEncodeFunction*(obj: messages_editChatAdmin): seq[uint8] = 
    result = result & TLEncode(int32(-1444503762))
    result = result & TLEncode(obj.chat_id)

    result = result & TLEncode(obj.user_id)

    result = result & TLEncode(obj.is_admin)


proc TLEncodeFunction*(obj: messages_migrateChat): seq[uint8] = 
    result = result & TLEncode(int32(363051235))
    result = result & TLEncode(obj.chat_id)


proc TLEncodeFunction*(obj: messages_searchGlobal): seq[uint8] = 
    result = result & TLEncode(int32(1271290010))
    if obj.folder_id.isSome():
        obj.flags = obj.flags or 1 shl 0

    result = result & TLEncode(obj.flags)

    if obj.folder_id.isSome():
        result = result & TLEncode(obj.folder_id.get())

    result = result & TLEncode(obj.q)

    result = result & TLEncode(obj.filter)

    result = result & TLEncode(obj.min_date)

    result = result & TLEncode(obj.max_date)

    result = result & TLEncode(obj.offset_rate)

    result = result & TLEncode(obj.offset_peer)

    result = result & TLEncode(obj.offset_id)

    result = result & TLEncode(obj.limit)


proc TLEncodeFunction*(obj: messages_reorderStickerSets): seq[uint8] = 
    result = result & TLEncode(int32(2016638777))
    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.order)


proc TLEncodeFunction*(obj: messages_getDocumentByHash): seq[uint8] = 
    result = result & TLEncode(int32(864953444))
    result = result & TLEncode(obj.sha256)

    result = result & TLEncode(obj.size)

    result = result & TLEncode(obj.mime_type)


proc TLEncodeFunction*(obj: messages_getSavedGifs): seq[uint8] = 
    result = result & TLEncode(int32(-2084618926))
    result = result & TLEncode(obj.hash)


proc TLEncodeFunction*(obj: messages_saveGif): seq[uint8] = 
    result = result & TLEncode(int32(846868683))
    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.unsave)


proc TLEncodeFunction*(obj: messages_getInlineBotResults): seq[uint8] = 
    result = result & TLEncode(int32(1364105629))
    if obj.geo_point.isSome():
        obj.flags = obj.flags or 1 shl 0

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.bot)

    result = result & TLEncode(obj.peer)

    if obj.geo_point.isSome():
        result = result & TLEncode(obj.geo_point.get())

    result = result & TLEncode(obj.query)

    result = result & TLEncode(obj.offset)


proc TLEncodeFunction*(obj: messages_setInlineBotResults): seq[uint8] = 
    result = result & TLEncode(int32(-346119674))
    if obj.next_offset.isSome():
        obj.flags = obj.flags or 1 shl 2

    if obj.switch_pm.isSome():
        obj.flags = obj.flags or 1 shl 3

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.query_id)

    result = result & TLEncode(obj.results)

    result = result & TLEncode(obj.cache_time)

    if obj.next_offset.isSome():
        result = result & TLEncode(obj.next_offset.get())

    if obj.switch_pm.isSome():
        result = result & TLEncode(obj.switch_pm.get())


proc TLEncodeFunction*(obj: messages_sendInlineBotResult): seq[uint8] = 
    result = result & TLEncode(int32(570955184))
    if obj.reply_to_msg_id.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.schedule_date.isSome():
        obj.flags = obj.flags or 1 shl 10

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.peer)

    if obj.reply_to_msg_id.isSome():
        result = result & TLEncode(obj.reply_to_msg_id.get())

    result = result & TLEncode(obj.random_id)

    result = result & TLEncode(obj.query_id)

    result = result & TLEncode(obj.id)

    if obj.schedule_date.isSome():
        result = result & TLEncode(obj.schedule_date.get())


proc TLEncodeFunction*(obj: messages_getMessageEditData): seq[uint8] = 
    result = result & TLEncode(int32(-39416522))
    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.id)


proc TLEncodeFunction*(obj: messages_editMessage): seq[uint8] = 
    result = result & TLEncode(int32(1224152952))
    if obj.message.isSome():
        obj.flags = obj.flags or 1 shl 11

    if obj.media.isSome():
        obj.flags = obj.flags or 1 shl 14

    if obj.reply_markup.isSome():
        obj.flags = obj.flags or 1 shl 2

    if obj.entities.isSome():
        obj.flags = obj.flags or 1 shl 3

    if obj.schedule_date.isSome():
        obj.flags = obj.flags or 1 shl 15

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.id)

    if obj.message.isSome():
        result = result & TLEncode(obj.message.get())

    if obj.media.isSome():
        result = result & TLEncode(obj.media.get())

    if obj.reply_markup.isSome():
        result = result & TLEncode(obj.reply_markup.get())

    if obj.entities.isSome():
        result = result & TLEncode(obj.entities.get())

    if obj.schedule_date.isSome():
        result = result & TLEncode(obj.schedule_date.get())


proc TLEncodeFunction*(obj: messages_editInlineBotMessage): seq[uint8] = 
    result = result & TLEncode(int32(-2091549254))
    if obj.message.isSome():
        obj.flags = obj.flags or 1 shl 11

    if obj.media.isSome():
        obj.flags = obj.flags or 1 shl 14

    if obj.reply_markup.isSome():
        obj.flags = obj.flags or 1 shl 2

    if obj.entities.isSome():
        obj.flags = obj.flags or 1 shl 3

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.id)

    if obj.message.isSome():
        result = result & TLEncode(obj.message.get())

    if obj.media.isSome():
        result = result & TLEncode(obj.media.get())

    if obj.reply_markup.isSome():
        result = result & TLEncode(obj.reply_markup.get())

    if obj.entities.isSome():
        result = result & TLEncode(obj.entities.get())


proc TLEncodeFunction*(obj: messages_getBotCallbackAnswer): seq[uint8] = 
    result = result & TLEncode(int32(-1824339449))
    if obj.data.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.password.isSome():
        obj.flags = obj.flags or 1 shl 2

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.msg_id)

    if obj.data.isSome():
        result = result & TLEncode(obj.data.get())

    if obj.password.isSome():
        result = result & TLEncode(obj.password.get())


proc TLEncodeFunction*(obj: messages_setBotCallbackAnswer): seq[uint8] = 
    result = result & TLEncode(int32(-712043766))
    if obj.message.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.url.isSome():
        obj.flags = obj.flags or 1 shl 2

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.query_id)

    if obj.message.isSome():
        result = result & TLEncode(obj.message.get())

    if obj.url.isSome():
        result = result & TLEncode(obj.url.get())

    result = result & TLEncode(obj.cache_time)


proc TLEncodeFunction*(obj: messages_getPeerDialogs): seq[uint8] = 
    result = result & TLEncode(int32(-462373635))
    result = result & TLEncode(obj.peers)


proc TLEncodeFunction*(obj: messages_saveDraft): seq[uint8] = 
    result = result & TLEncode(int32(-1137057461))
    if obj.reply_to_msg_id.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.entities.isSome():
        obj.flags = obj.flags or 1 shl 3

    result = result & TLEncode(obj.flags)

    if obj.reply_to_msg_id.isSome():
        result = result & TLEncode(obj.reply_to_msg_id.get())

    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.message)

    if obj.entities.isSome():
        result = result & TLEncode(obj.entities.get())


proc TLEncodeFunction*(obj: messages_getAllDrafts): seq[uint8] = 
    result = result & TLEncode(int32(1782549861))

proc TLEncodeFunction*(obj: messages_getFeaturedStickers): seq[uint8] = 
    result = result & TLEncode(int32(766298703))
    result = result & TLEncode(obj.hash)


proc TLEncodeFunction*(obj: messages_readFeaturedStickers): seq[uint8] = 
    result = result & TLEncode(int32(1527873830))
    result = result & TLEncode(obj.id)


proc TLEncodeFunction*(obj: messages_getRecentStickers): seq[uint8] = 
    result = result & TLEncode(int32(1587647177))
    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.hash)


proc TLEncodeFunction*(obj: messages_saveRecentSticker): seq[uint8] = 
    result = result & TLEncode(int32(958863608))
    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.unsave)


proc TLEncodeFunction*(obj: messages_clearRecentStickers): seq[uint8] = 
    result = result & TLEncode(int32(-1986437075))
    result = result & TLEncode(obj.flags)


proc TLEncodeFunction*(obj: messages_getArchivedStickers): seq[uint8] = 
    result = result & TLEncode(int32(1475442322))
    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.offset_id)

    result = result & TLEncode(obj.limit)


proc TLEncodeFunction*(obj: messages_getMaskStickers): seq[uint8] = 
    result = result & TLEncode(int32(1706608543))
    result = result & TLEncode(obj.hash)


proc TLEncodeFunction*(obj: messages_getAttachedStickers): seq[uint8] = 
    result = result & TLEncode(int32(-866424884))
    result = result & TLEncode(obj.media)


proc TLEncodeFunction*(obj: messages_setGameScore): seq[uint8] = 
    result = result & TLEncode(int32(-1896289088))
    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.user_id)

    result = result & TLEncode(obj.score)


proc TLEncodeFunction*(obj: messages_setInlineGameScore): seq[uint8] = 
    result = result & TLEncode(int32(363700068))
    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.user_id)

    result = result & TLEncode(obj.score)


proc TLEncodeFunction*(obj: messages_getGameHighScores): seq[uint8] = 
    result = result & TLEncode(int32(-400399203))
    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.user_id)


proc TLEncodeFunction*(obj: messages_getInlineGameHighScores): seq[uint8] = 
    result = result & TLEncode(int32(-164240976))
    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.user_id)


proc TLEncodeFunction*(obj: messages_getCommonChats): seq[uint8] = 
    result = result & TLEncode(int32(-794522560))
    result = result & TLEncode(obj.user_id)

    result = result & TLEncode(obj.max_id)

    result = result & TLEncode(obj.limit)


proc TLEncodeFunction*(obj: messages_getAllChats): seq[uint8] = 
    result = result & TLEncode(int32(-341307408))
    result = result & TLEncode(obj.except_ids)


proc TLEncodeFunction*(obj: messages_getWebPage): seq[uint8] = 
    result = result & TLEncode(int32(852135825))
    result = result & TLEncode(obj.url)

    result = result & TLEncode(obj.hash)


proc TLEncodeFunction*(obj: messages_toggleDialogPin): seq[uint8] = 
    result = result & TLEncode(int32(-1489903017))
    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.peer)


proc TLEncodeFunction*(obj: messages_reorderPinnedDialogs): seq[uint8] = 
    result = result & TLEncode(int32(991616823))
    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.folder_id)

    result = result & TLEncode(obj.order)


proc TLEncodeFunction*(obj: messages_getPinnedDialogs): seq[uint8] = 
    result = result & TLEncode(int32(-692498958))
    result = result & TLEncode(obj.folder_id)


proc TLEncodeFunction*(obj: messages_setBotShippingResults): seq[uint8] = 
    result = result & TLEncode(int32(-436833542))
    if obj.error.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.shipping_options.isSome():
        obj.flags = obj.flags or 1 shl 1

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.query_id)

    if obj.error.isSome():
        result = result & TLEncode(obj.error.get())

    if obj.shipping_options.isSome():
        result = result & TLEncode(obj.shipping_options.get())


proc TLEncodeFunction*(obj: messages_setBotPrecheckoutResults): seq[uint8] = 
    result = result & TLEncode(int32(-1674716848))
    if obj.error.isSome():
        obj.flags = obj.flags or 1 shl 0

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.query_id)

    if obj.error.isSome():
        result = result & TLEncode(obj.error.get())


proc TLEncodeFunction*(obj: messages_uploadMedia): seq[uint8] = 
    result = result & TLEncode(int32(1369162417))
    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.media)


proc TLEncodeFunction*(obj: messages_sendScreenshotNotification): seq[uint8] = 
    result = result & TLEncode(int32(-914493408))
    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.reply_to_msg_id)

    result = result & TLEncode(obj.random_id)


proc TLEncodeFunction*(obj: messages_getFavedStickers): seq[uint8] = 
    result = result & TLEncode(int32(567151374))
    result = result & TLEncode(obj.hash)


proc TLEncodeFunction*(obj: messages_faveSticker): seq[uint8] = 
    result = result & TLEncode(int32(-1174420133))
    result = result & TLEncode(obj.id)

    result = result & TLEncode(obj.unfave)


proc TLEncodeFunction*(obj: messages_getUnreadMentions): seq[uint8] = 
    result = result & TLEncode(int32(1180140658))
    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.offset_id)

    result = result & TLEncode(obj.add_offset)

    result = result & TLEncode(obj.limit)

    result = result & TLEncode(obj.max_id)

    result = result & TLEncode(obj.min_id)


proc TLEncodeFunction*(obj: messages_readMentions): seq[uint8] = 
    result = result & TLEncode(int32(-266822352))
    result = result & TLEncode(obj.peer)


proc TLEncodeFunction*(obj: messages_getRecentLocations): seq[uint8] = 
    result = result & TLEncode(int32(-1144759543))
    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.limit)

    result = result & TLEncode(obj.hash)


proc TLEncodeFunction*(obj: messages_sendMultiMedia): seq[uint8] = 
    result = result & TLEncode(int32(-872345397))
    if obj.reply_to_msg_id.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.schedule_date.isSome():
        obj.flags = obj.flags or 1 shl 10

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.peer)

    if obj.reply_to_msg_id.isSome():
        result = result & TLEncode(obj.reply_to_msg_id.get())

    result = result & TLEncode(obj.multi_media)

    if obj.schedule_date.isSome():
        result = result & TLEncode(obj.schedule_date.get())


proc TLEncodeFunction*(obj: messages_uploadEncryptedFile): seq[uint8] = 
    result = result & TLEncode(int32(1347929239))
    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.file)


proc TLEncodeFunction*(obj: messages_searchStickerSets): seq[uint8] = 
    result = result & TLEncode(int32(-1028140917))
    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.q)

    result = result & TLEncode(obj.hash)


proc TLEncodeFunction*(obj: messages_getSplitRanges): seq[uint8] = 
    result = result & TLEncode(int32(486505992))

proc TLEncodeFunction*(obj: messages_markDialogUnread): seq[uint8] = 
    result = result & TLEncode(int32(-1031349873))
    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.peer)


proc TLEncodeFunction*(obj: messages_getDialogUnreadMarks): seq[uint8] = 
    result = result & TLEncode(int32(585256482))

proc TLEncodeFunction*(obj: messages_clearAllDrafts): seq[uint8] = 
    result = result & TLEncode(int32(2119757468))

proc TLEncodeFunction*(obj: messages_updatePinnedMessage): seq[uint8] = 
    result = result & TLEncode(int32(-760547348))
    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.id)


proc TLEncodeFunction*(obj: messages_sendVote): seq[uint8] = 
    result = result & TLEncode(int32(283795844))
    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.msg_id)

    result = result & TLEncode(obj.options)


proc TLEncodeFunction*(obj: messages_getPollResults): seq[uint8] = 
    result = result & TLEncode(int32(1941660731))
    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.msg_id)


proc TLEncodeFunction*(obj: messages_getOnlines): seq[uint8] = 
    result = result & TLEncode(int32(1848369232))
    result = result & TLEncode(obj.peer)


proc TLEncodeFunction*(obj: messages_getStatsURL): seq[uint8] = 
    result = result & TLEncode(int32(-2127811866))
    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.params)


proc TLEncodeFunction*(obj: messages_editChatAbout): seq[uint8] = 
    result = result & TLEncode(int32(-554301545))
    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.about)


proc TLEncodeFunction*(obj: messages_editChatDefaultBannedRights): seq[uint8] = 
    result = result & TLEncode(int32(-1517917375))
    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.banned_rights)


proc TLEncodeFunction*(obj: messages_getEmojiKeywords): seq[uint8] = 
    result = result & TLEncode(int32(899735650))
    result = result & TLEncode(obj.lang_code)


proc TLEncodeFunction*(obj: messages_getEmojiKeywordsDifference): seq[uint8] = 
    result = result & TLEncode(int32(352892591))
    result = result & TLEncode(obj.lang_code)

    result = result & TLEncode(obj.from_version)


proc TLEncodeFunction*(obj: messages_getEmojiKeywordsLanguages): seq[uint8] = 
    result = result & TLEncode(int32(1318675378))
    result = result & TLEncode(obj.lang_codes)


proc TLEncodeFunction*(obj: messages_getEmojiURL): seq[uint8] = 
    result = result & TLEncode(int32(-709817306))
    result = result & TLEncode(obj.lang_code)


proc TLEncodeFunction*(obj: messages_getSearchCounters): seq[uint8] = 
    result = result & TLEncode(int32(1932455680))
    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.filters)


proc TLEncodeFunction*(obj: messages_requestUrlAuth): seq[uint8] = 
    result = result & TLEncode(int32(-482388461))
    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.msg_id)

    result = result & TLEncode(obj.button_id)


proc TLEncodeFunction*(obj: messages_acceptUrlAuth): seq[uint8] = 
    result = result & TLEncode(int32(-148247912))
    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.msg_id)

    result = result & TLEncode(obj.button_id)


proc TLEncodeFunction*(obj: messages_hidePeerSettingsBar): seq[uint8] = 
    result = result & TLEncode(int32(1336717624))
    result = result & TLEncode(obj.peer)


proc TLEncodeFunction*(obj: messages_getScheduledHistory): seq[uint8] = 
    result = result & TLEncode(int32(-490575781))
    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.hash)


proc TLEncodeFunction*(obj: messages_getScheduledMessages): seq[uint8] = 
    result = result & TLEncode(int32(-1111817116))
    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.id)


proc TLEncodeFunction*(obj: messages_sendScheduledMessages): seq[uint8] = 
    result = result & TLEncode(int32(-1120369398))
    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.id)


proc TLEncodeFunction*(obj: messages_deleteScheduledMessages): seq[uint8] = 
    result = result & TLEncode(int32(1504586518))
    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.id)


proc TLEncodeFunction*(obj: messages_getPollVotes): seq[uint8] = 
    result = result & TLEncode(int32(-1200736242))
    if obj.option.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.offset.isSome():
        obj.flags = obj.flags or 1 shl 1

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.id)

    if obj.option.isSome():
        result = result & TLEncode(obj.option.get())

    if obj.offset.isSome():
        result = result & TLEncode(obj.offset.get())

    result = result & TLEncode(obj.limit)


proc TLEncodeFunction*(obj: messages_toggleStickerSets): seq[uint8] = 
    result = result & TLEncode(int32(-1257951254))
    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.stickersets)


proc TLEncodeFunction*(obj: messages_getDialogFilters): seq[uint8] = 
    result = result & TLEncode(int32(-241247891))

proc TLEncodeFunction*(obj: messages_getSuggestedDialogFilters): seq[uint8] = 
    result = result & TLEncode(int32(-1566780372))

proc TLEncodeFunction*(obj: messages_updateDialogFilter): seq[uint8] = 
    result = result & TLEncode(int32(450142282))
    if obj.filter.isSome():
        obj.flags = obj.flags or 1 shl 0

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.id)

    if obj.filter.isSome():
        result = result & TLEncode(obj.filter.get())


proc TLEncodeFunction*(obj: messages_updateDialogFiltersOrder): seq[uint8] = 
    result = result & TLEncode(int32(-983318044))
    result = result & TLEncode(obj.order)


proc TLEncodeFunction*(obj: messages_getOldFeaturedStickers): seq[uint8] = 
    result = result & TLEncode(int32(1608974939))
    result = result & TLEncode(obj.offset)

    result = result & TLEncode(obj.limit)

    result = result & TLEncode(obj.hash)


proc TLEncodeFunction*(obj: messages_getReplies): seq[uint8] = 
    result = result & TLEncode(int32(615875002))
    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.msg_id)

    result = result & TLEncode(obj.offset_id)

    result = result & TLEncode(obj.offset_date)

    result = result & TLEncode(obj.add_offset)

    result = result & TLEncode(obj.limit)

    result = result & TLEncode(obj.max_id)

    result = result & TLEncode(obj.min_id)

    result = result & TLEncode(obj.hash)


proc TLEncodeFunction*(obj: messages_getDiscussionMessage): seq[uint8] = 
    result = result & TLEncode(int32(1147761405))
    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.msg_id)


proc TLEncodeFunction*(obj: messages_readDiscussion): seq[uint8] = 
    result = result & TLEncode(int32(-147740172))
    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.msg_id)

    result = result & TLEncode(obj.read_max_id)


proc TLEncodeFunction*(obj: messages_unpinAllMessages): seq[uint8] = 
    result = result & TLEncode(int32(-265962357))
    result = result & TLEncode(obj.peer)


proc TLEncodeFunction*(obj: updates_getState): seq[uint8] = 
    result = result & TLEncode(int32(-304838614))

proc TLEncodeFunction*(obj: updates_getDifference): seq[uint8] = 
    result = result & TLEncode(int32(630429265))
    if obj.pts_total_limit.isSome():
        obj.flags = obj.flags or 1 shl 0

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.pts)

    if obj.pts_total_limit.isSome():
        result = result & TLEncode(obj.pts_total_limit.get())

    result = result & TLEncode(obj.date)

    result = result & TLEncode(obj.qts)


proc TLEncodeFunction*(obj: updates_getChannelDifference): seq[uint8] = 
    result = result & TLEncode(int32(829675392))
    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.channel)

    result = result & TLEncode(obj.filter)

    result = result & TLEncode(obj.pts)

    result = result & TLEncode(obj.limit)


proc TLEncodeFunction*(obj: photos_updateProfilePhoto): seq[uint8] = 
    result = result & TLEncode(int32(1926525996))
    result = result & TLEncode(obj.id)


proc TLEncodeFunction*(obj: photos_uploadProfilePhoto): seq[uint8] = 
    result = result & TLEncode(int32(-1980559511))
    if obj.file.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.video.isSome():
        obj.flags = obj.flags or 1 shl 1

    if obj.video_start_ts.isSome():
        obj.flags = obj.flags or 1 shl 2

    result = result & TLEncode(obj.flags)

    if obj.file.isSome():
        result = result & TLEncode(obj.file.get())

    if obj.video.isSome():
        result = result & TLEncode(obj.video.get())

    if obj.video_start_ts.isSome():
        result = result & TLEncode(obj.video_start_ts.get())


proc TLEncodeFunction*(obj: photos_deletePhotos): seq[uint8] = 
    result = result & TLEncode(int32(-2016444625))
    result = result & TLEncode(obj.id)


proc TLEncodeFunction*(obj: photos_getUserPhotos): seq[uint8] = 
    result = result & TLEncode(int32(-1848823128))
    result = result & TLEncode(obj.user_id)

    result = result & TLEncode(obj.offset)

    result = result & TLEncode(obj.max_id)

    result = result & TLEncode(obj.limit)


proc TLEncodeFunction*(obj: upload_saveFilePart): seq[uint8] = 
    result = result & TLEncode(int32(-1291540959))
    result = result & TLEncode(obj.file_id)

    result = result & TLEncode(obj.file_part)

    result = result & TLEncode(obj.bytes)


proc TLEncodeFunction*(obj: upload_getFile): seq[uint8] = 
    result = result & TLEncode(int32(-1319462148))
    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.location)

    result = result & TLEncode(obj.offset)

    result = result & TLEncode(obj.limit)


proc TLEncodeFunction*(obj: upload_saveBigFilePart): seq[uint8] = 
    result = result & TLEncode(int32(-562337987))
    result = result & TLEncode(obj.file_id)

    result = result & TLEncode(obj.file_part)

    result = result & TLEncode(obj.file_total_parts)

    result = result & TLEncode(obj.bytes)


proc TLEncodeFunction*(obj: upload_getWebFile): seq[uint8] = 
    result = result & TLEncode(int32(619086221))
    result = result & TLEncode(obj.location)

    result = result & TLEncode(obj.offset)

    result = result & TLEncode(obj.limit)


proc TLEncodeFunction*(obj: upload_getCdnFile): seq[uint8] = 
    result = result & TLEncode(int32(536919235))
    result = result & TLEncode(obj.file_token)

    result = result & TLEncode(obj.offset)

    result = result & TLEncode(obj.limit)


proc TLEncodeFunction*(obj: upload_reuploadCdnFile): seq[uint8] = 
    result = result & TLEncode(int32(-1691921240))
    result = result & TLEncode(obj.file_token)

    result = result & TLEncode(obj.request_token)


proc TLEncodeFunction*(obj: upload_getCdnFileHashes): seq[uint8] = 
    result = result & TLEncode(int32(1302676017))
    result = result & TLEncode(obj.file_token)

    result = result & TLEncode(obj.offset)


proc TLEncodeFunction*(obj: upload_getFileHashes): seq[uint8] = 
    result = result & TLEncode(int32(-956147407))
    result = result & TLEncode(obj.location)

    result = result & TLEncode(obj.offset)


proc TLEncodeFunction*(obj: help_getConfig): seq[uint8] = 
    result = result & TLEncode(uint32(3304659051))

proc TLEncodeFunction*(obj: help_getNearestDc): seq[uint8] = 
    result = result & TLEncode(int32(531836966))

proc TLEncodeFunction*(obj: help_getAppUpdate): seq[uint8] = 
    result = result & TLEncode(int32(1378703997))
    result = result & TLEncode(obj.source)


proc TLEncodeFunction*(obj: help_getInviteText): seq[uint8] = 
    result = result & TLEncode(int32(1295590211))

proc TLEncodeFunction*(obj: help_getSupport): seq[uint8] = 
    result = result & TLEncode(int32(-1663104819))

proc TLEncodeFunction*(obj: help_getAppChangelog): seq[uint8] = 
    result = result & TLEncode(int32(-1877938321))
    result = result & TLEncode(obj.prev_app_version)


proc TLEncodeFunction*(obj: help_setBotUpdatesStatus): seq[uint8] = 
    result = result & TLEncode(int32(-333262899))
    result = result & TLEncode(obj.pending_updates_count)

    result = result & TLEncode(obj.message)


proc TLEncodeFunction*(obj: help_getCdnConfig): seq[uint8] = 
    result = result & TLEncode(int32(1375900482))

proc TLEncodeFunction*(obj: help_getRecentMeUrls): seq[uint8] = 
    result = result & TLEncode(int32(1036054804))
    result = result & TLEncode(obj.referer)


proc TLEncodeFunction*(obj: help_getTermsOfServiceUpdate): seq[uint8] = 
    result = result & TLEncode(int32(749019089))

proc TLEncodeFunction*(obj: help_acceptTermsOfService): seq[uint8] = 
    result = result & TLEncode(int32(-294455398))
    result = result & TLEncode(obj.id)


proc TLEncodeFunction*(obj: help_getDeepLinkInfo): seq[uint8] = 
    result = result & TLEncode(int32(1072547679))
    result = result & TLEncode(obj.path)


proc TLEncodeFunction*(obj: help_getAppConfig): seq[uint8] = 
    result = result & TLEncode(int32(-1735311088))

proc TLEncodeFunction*(obj: help_saveAppLog): seq[uint8] = 
    result = result & TLEncode(int32(1862465352))
    result = result & TLEncode(obj.events)


proc TLEncodeFunction*(obj: help_getPassportConfig): seq[uint8] = 
    result = result & TLEncode(int32(-966677240))
    result = result & TLEncode(obj.hash)


proc TLEncodeFunction*(obj: help_getSupportName): seq[uint8] = 
    result = result & TLEncode(int32(-748624084))

proc TLEncodeFunction*(obj: help_getUserInfo): seq[uint8] = 
    result = result & TLEncode(int32(950046000))
    result = result & TLEncode(obj.user_id)


proc TLEncodeFunction*(obj: help_editUserInfo): seq[uint8] = 
    result = result & TLEncode(int32(1723407216))
    result = result & TLEncode(obj.user_id)

    result = result & TLEncode(obj.message)

    result = result & TLEncode(obj.entities)


proc TLEncodeFunction*(obj: help_getPromoData): seq[uint8] = 
    result = result & TLEncode(int32(-1063816159))

proc TLEncodeFunction*(obj: help_hidePromoData): seq[uint8] = 
    result = result & TLEncode(int32(505748629))
    result = result & TLEncode(obj.peer)


proc TLEncodeFunction*(obj: help_dismissSuggestion): seq[uint8] = 
    result = result & TLEncode(int32(2012912112))
    result = result & TLEncode(obj.suggestion)


proc TLEncodeFunction*(obj: help_getCountriesList): seq[uint8] = 
    result = result & TLEncode(int32(1935116200))
    result = result & TLEncode(obj.lang_code)

    result = result & TLEncode(obj.hash)


proc TLEncodeFunction*(obj: channels_readHistory): seq[uint8] = 
    result = result & TLEncode(int32(-871347913))
    result = result & TLEncode(obj.channel)

    result = result & TLEncode(obj.max_id)


proc TLEncodeFunction*(obj: channels_deleteMessages): seq[uint8] = 
    result = result & TLEncode(int32(-2067661490))
    result = result & TLEncode(obj.channel)

    result = result & TLEncode(obj.id)


proc TLEncodeFunction*(obj: channels_deleteUserHistory): seq[uint8] = 
    result = result & TLEncode(int32(-787622117))
    result = result & TLEncode(obj.channel)

    result = result & TLEncode(obj.user_id)


proc TLEncodeFunction*(obj: channels_reportSpam): seq[uint8] = 
    result = result & TLEncode(int32(-32999408))
    result = result & TLEncode(obj.channel)

    result = result & TLEncode(obj.user_id)

    result = result & TLEncode(obj.id)


proc TLEncodeFunction*(obj: channels_getMessages): seq[uint8] = 
    result = result & TLEncode(int32(-1383294429))
    result = result & TLEncode(obj.channel)

    result = result & TLEncode(obj.id)


proc TLEncodeFunction*(obj: channels_getParticipants): seq[uint8] = 
    result = result & TLEncode(int32(306054633))
    result = result & TLEncode(obj.channel)

    result = result & TLEncode(obj.filter)

    result = result & TLEncode(obj.offset)

    result = result & TLEncode(obj.limit)

    result = result & TLEncode(obj.hash)


proc TLEncodeFunction*(obj: channels_getParticipant): seq[uint8] = 
    result = result & TLEncode(int32(1416484774))
    result = result & TLEncode(obj.channel)

    result = result & TLEncode(obj.user_id)


proc TLEncodeFunction*(obj: channels_getChannels): seq[uint8] = 
    result = result & TLEncode(int32(-1477002320))
    result = result & TLEncode(obj.id)


proc TLEncodeFunction*(obj: channels_getFullChannel): seq[uint8] = 
    result = result & TLEncode(int32(-2026463088))
    result = result & TLEncode(obj.channel)


proc TLEncodeFunction*(obj: channels_createChannel): seq[uint8] = 
    result = result & TLEncode(int32(1029681423))
    if obj.geo_point.isSome():
        obj.flags = obj.flags or 1 shl 2

    if obj.address.isSome():
        obj.flags = obj.flags or 1 shl 2

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.title)

    result = result & TLEncode(obj.about)

    if obj.geo_point.isSome():
        result = result & TLEncode(obj.geo_point.get())

    if obj.address.isSome():
        result = result & TLEncode(obj.address.get())


proc TLEncodeFunction*(obj: channels_editAdmin): seq[uint8] = 
    result = result & TLEncode(int32(-751007486))
    result = result & TLEncode(obj.channel)

    result = result & TLEncode(obj.user_id)

    result = result & TLEncode(obj.admin_rights)

    result = result & TLEncode(obj.rank)


proc TLEncodeFunction*(obj: channels_editTitle): seq[uint8] = 
    result = result & TLEncode(int32(1450044624))
    result = result & TLEncode(obj.channel)

    result = result & TLEncode(obj.title)


proc TLEncodeFunction*(obj: channels_editPhoto): seq[uint8] = 
    result = result & TLEncode(int32(-248621111))
    result = result & TLEncode(obj.channel)

    result = result & TLEncode(obj.photo)


proc TLEncodeFunction*(obj: channels_checkUsername): seq[uint8] = 
    result = result & TLEncode(int32(283557164))
    result = result & TLEncode(obj.channel)

    result = result & TLEncode(obj.username)


proc TLEncodeFunction*(obj: channels_updateUsername): seq[uint8] = 
    result = result & TLEncode(int32(890549214))
    result = result & TLEncode(obj.channel)

    result = result & TLEncode(obj.username)


proc TLEncodeFunction*(obj: channels_joinChannel): seq[uint8] = 
    result = result & TLEncode(int32(615851205))
    result = result & TLEncode(obj.channel)


proc TLEncodeFunction*(obj: channels_leaveChannel): seq[uint8] = 
    result = result & TLEncode(int32(-130635115))
    result = result & TLEncode(obj.channel)


proc TLEncodeFunction*(obj: channels_inviteToChannel): seq[uint8] = 
    result = result & TLEncode(int32(429865580))
    result = result & TLEncode(obj.channel)

    result = result & TLEncode(obj.users)


proc TLEncodeFunction*(obj: channels_deleteChannel): seq[uint8] = 
    result = result & TLEncode(int32(-1072619549))
    result = result & TLEncode(obj.channel)


proc TLEncodeFunction*(obj: channels_exportMessageLink): seq[uint8] = 
    result = result & TLEncode(int32(-432034325))
    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.channel)

    result = result & TLEncode(obj.id)


proc TLEncodeFunction*(obj: channels_toggleSignatures): seq[uint8] = 
    result = result & TLEncode(int32(527021574))
    result = result & TLEncode(obj.channel)

    result = result & TLEncode(obj.enabled)


proc TLEncodeFunction*(obj: channels_getAdminedPublicChannels): seq[uint8] = 
    result = result & TLEncode(int32(-122669393))
    result = result & TLEncode(obj.flags)


proc TLEncodeFunction*(obj: channels_editBanned): seq[uint8] = 
    result = result & TLEncode(int32(1920559378))
    result = result & TLEncode(obj.channel)

    result = result & TLEncode(obj.user_id)

    result = result & TLEncode(obj.banned_rights)


proc TLEncodeFunction*(obj: channels_getAdminLog): seq[uint8] = 
    result = result & TLEncode(int32(870184064))
    if obj.events_filter.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.admins.isSome():
        obj.flags = obj.flags or 1 shl 1

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.channel)

    result = result & TLEncode(obj.q)

    if obj.events_filter.isSome():
        result = result & TLEncode(obj.events_filter.get())

    if obj.admins.isSome():
        result = result & TLEncode(obj.admins.get())

    result = result & TLEncode(obj.max_id)

    result = result & TLEncode(obj.min_id)

    result = result & TLEncode(obj.limit)


proc TLEncodeFunction*(obj: channels_setStickers): seq[uint8] = 
    result = result & TLEncode(int32(-359881479))
    result = result & TLEncode(obj.channel)

    result = result & TLEncode(obj.stickerset)


proc TLEncodeFunction*(obj: channels_readMessageContents): seq[uint8] = 
    result = result & TLEncode(int32(-357180360))
    result = result & TLEncode(obj.channel)

    result = result & TLEncode(obj.id)


proc TLEncodeFunction*(obj: channels_deleteHistory): seq[uint8] = 
    result = result & TLEncode(int32(-1355375294))
    result = result & TLEncode(obj.channel)

    result = result & TLEncode(obj.max_id)


proc TLEncodeFunction*(obj: channels_togglePreHistoryHidden): seq[uint8] = 
    result = result & TLEncode(int32(-356796084))
    result = result & TLEncode(obj.channel)

    result = result & TLEncode(obj.enabled)


proc TLEncodeFunction*(obj: channels_getLeftChannels): seq[uint8] = 
    result = result & TLEncode(int32(-2092831552))
    result = result & TLEncode(obj.offset)


proc TLEncodeFunction*(obj: channels_getGroupsForDiscussion): seq[uint8] = 
    result = result & TLEncode(int32(-170208392))

proc TLEncodeFunction*(obj: channels_setDiscussionGroup): seq[uint8] = 
    result = result & TLEncode(int32(1079520178))
    result = result & TLEncode(obj.broadcast)

    result = result & TLEncode(obj.group)


proc TLEncodeFunction*(obj: channels_editCreator): seq[uint8] = 
    result = result & TLEncode(int32(-1892102881))
    result = result & TLEncode(obj.channel)

    result = result & TLEncode(obj.user_id)

    result = result & TLEncode(obj.password)


proc TLEncodeFunction*(obj: channels_editLocation): seq[uint8] = 
    result = result & TLEncode(int32(1491484525))
    result = result & TLEncode(obj.channel)

    result = result & TLEncode(obj.geo_point)

    result = result & TLEncode(obj.address)


proc TLEncodeFunction*(obj: channels_toggleSlowMode): seq[uint8] = 
    result = result & TLEncode(int32(-304832784))
    result = result & TLEncode(obj.channel)

    result = result & TLEncode(obj.seconds)


proc TLEncodeFunction*(obj: channels_getInactiveChannels): seq[uint8] = 
    result = result & TLEncode(int32(300429806))

proc TLEncodeFunction*(obj: bots_sendCustomRequest): seq[uint8] = 
    result = result & TLEncode(int32(-1440257555))
    result = result & TLEncode(obj.custom_method)

    result = result & TLEncode(obj.params)


proc TLEncodeFunction*(obj: bots_answerWebhookJSONQuery): seq[uint8] = 
    result = result & TLEncode(int32(-434028723))
    result = result & TLEncode(obj.query_id)

    result = result & TLEncode(obj.data)


proc TLEncodeFunction*(obj: bots_setBotCommands): seq[uint8] = 
    result = result & TLEncode(int32(-2141370634))
    result = result & TLEncode(obj.commands)


proc TLEncodeFunction*(obj: payments_getPaymentForm): seq[uint8] = 
    result = result & TLEncode(int32(-1712285883))
    result = result & TLEncode(obj.msg_id)


proc TLEncodeFunction*(obj: payments_getPaymentReceipt): seq[uint8] = 
    result = result & TLEncode(int32(-1601001088))
    result = result & TLEncode(obj.msg_id)


proc TLEncodeFunction*(obj: payments_validateRequestedInfo): seq[uint8] = 
    result = result & TLEncode(int32(1997180532))
    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.msg_id)

    result = result & TLEncode(obj.info)


proc TLEncodeFunction*(obj: payments_sendPaymentForm): seq[uint8] = 
    result = result & TLEncode(int32(730364339))
    if obj.requested_info_id.isSome():
        obj.flags = obj.flags or 1 shl 0

    if obj.shipping_option_id.isSome():
        obj.flags = obj.flags or 1 shl 1

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.msg_id)

    if obj.requested_info_id.isSome():
        result = result & TLEncode(obj.requested_info_id.get())

    if obj.shipping_option_id.isSome():
        result = result & TLEncode(obj.shipping_option_id.get())

    result = result & TLEncode(obj.credentials)


proc TLEncodeFunction*(obj: payments_getSavedInfo): seq[uint8] = 
    result = result & TLEncode(int32(578650699))

proc TLEncodeFunction*(obj: payments_clearSavedInfo): seq[uint8] = 
    result = result & TLEncode(int32(-667062079))
    result = result & TLEncode(obj.flags)


proc TLEncodeFunction*(obj: payments_getBankCardData): seq[uint8] = 
    result = result & TLEncode(int32(779736953))
    result = result & TLEncode(obj.number)


proc TLEncodeFunction*(obj: stickers_createStickerSet): seq[uint8] = 
    result = result & TLEncode(int32(-251435136))
    if obj.thumb.isSome():
        obj.flags = obj.flags or 1 shl 2

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.user_id)

    result = result & TLEncode(obj.title)

    result = result & TLEncode(obj.short_name)

    if obj.thumb.isSome():
        result = result & TLEncode(obj.thumb.get())

    result = result & TLEncode(obj.stickers)


proc TLEncodeFunction*(obj: stickers_removeStickerFromSet): seq[uint8] = 
    result = result & TLEncode(int32(-143257775))
    result = result & TLEncode(obj.sticker)


proc TLEncodeFunction*(obj: stickers_changeStickerPosition): seq[uint8] = 
    result = result & TLEncode(int32(-4795190))
    result = result & TLEncode(obj.sticker)

    result = result & TLEncode(obj.position)


proc TLEncodeFunction*(obj: stickers_addStickerToSet): seq[uint8] = 
    result = result & TLEncode(int32(-2041315650))
    result = result & TLEncode(obj.stickerset)

    result = result & TLEncode(obj.sticker)


proc TLEncodeFunction*(obj: stickers_setStickerSetThumb): seq[uint8] = 
    result = result & TLEncode(int32(-1707717072))
    result = result & TLEncode(obj.stickerset)

    result = result & TLEncode(obj.thumb)


proc TLEncodeFunction*(obj: phone_getCallConfig): seq[uint8] = 
    result = result & TLEncode(int32(1430593449))

proc TLEncodeFunction*(obj: phone_requestCall): seq[uint8] = 
    result = result & TLEncode(int32(1124046573))
    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.user_id)

    result = result & TLEncode(obj.random_id)

    result = result & TLEncode(obj.g_a_hash)

    result = result & TLEncode(obj.protocol)


proc TLEncodeFunction*(obj: phone_acceptCall): seq[uint8] = 
    result = result & TLEncode(int32(1003664544))
    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.g_b)

    result = result & TLEncode(obj.protocol)


proc TLEncodeFunction*(obj: phone_confirmCall): seq[uint8] = 
    result = result & TLEncode(int32(788404002))
    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.g_a)

    result = result & TLEncode(obj.key_fingerprint)

    result = result & TLEncode(obj.protocol)


proc TLEncodeFunction*(obj: phone_receivedCall): seq[uint8] = 
    result = result & TLEncode(int32(399855457))
    result = result & TLEncode(obj.peer)


proc TLEncodeFunction*(obj: phone_discardCall): seq[uint8] = 
    result = result & TLEncode(int32(-1295269440))
    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.duration)

    result = result & TLEncode(obj.reason)

    result = result & TLEncode(obj.connection_id)


proc TLEncodeFunction*(obj: phone_setCallRating): seq[uint8] = 
    result = result & TLEncode(int32(1508562471))
    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.rating)

    result = result & TLEncode(obj.comment)


proc TLEncodeFunction*(obj: phone_saveCallDebug): seq[uint8] = 
    result = result & TLEncode(int32(662363518))
    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.debug)


proc TLEncodeFunction*(obj: phone_sendSignalingData): seq[uint8] = 
    result = result & TLEncode(int32(-8744061))
    result = result & TLEncode(obj.peer)

    result = result & TLEncode(obj.data)


proc TLEncodeFunction*(obj: langpack_getLangPack): seq[uint8] = 
    result = result & TLEncode(int32(-219008246))
    result = result & TLEncode(obj.lang_pack)

    result = result & TLEncode(obj.lang_code)


proc TLEncodeFunction*(obj: langpack_getStrings): seq[uint8] = 
    result = result & TLEncode(int32(-269862909))
    result = result & TLEncode(obj.lang_pack)

    result = result & TLEncode(obj.lang_code)

    result = result & TLEncode(obj.keys)


proc TLEncodeFunction*(obj: langpack_getDifference): seq[uint8] = 
    result = result & TLEncode(int32(-845657435))
    result = result & TLEncode(obj.lang_pack)

    result = result & TLEncode(obj.lang_code)

    result = result & TLEncode(obj.from_version)


proc TLEncodeFunction*(obj: langpack_getLanguages): seq[uint8] = 
    result = result & TLEncode(int32(1120311183))
    result = result & TLEncode(obj.lang_pack)


proc TLEncodeFunction*(obj: langpack_getLanguage): seq[uint8] = 
    result = result & TLEncode(int32(1784243458))
    result = result & TLEncode(obj.lang_pack)

    result = result & TLEncode(obj.lang_code)


proc TLEncodeFunction*(obj: folders_editPeerFolders): seq[uint8] = 
    result = result & TLEncode(int32(1749536939))
    result = result & TLEncode(obj.folder_peers)


proc TLEncodeFunction*(obj: folders_deleteFolder): seq[uint8] = 
    result = result & TLEncode(int32(472471681))
    result = result & TLEncode(obj.folder_id)


proc TLEncodeFunction*(obj: stats_getBroadcastStats): seq[uint8] = 
    result = result & TLEncode(int32(-1421720550))
    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.channel)


proc TLEncodeFunction*(obj: stats_loadAsyncGraph): seq[uint8] = 
    result = result & TLEncode(int32(1646092192))
    if obj.x.isSome():
        obj.flags = obj.flags or 1 shl 0

    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.token)

    if obj.x.isSome():
        result = result & TLEncode(obj.x.get())


proc TLEncodeFunction*(obj: stats_getMegagroupStats): seq[uint8] = 
    result = result & TLEncode(int32(-589330937))
    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.channel)


proc TLEncodeFunction*(obj: stats_getMessagePublicForwards): seq[uint8] = 
    result = result & TLEncode(int32(1445996571))
    result = result & TLEncode(obj.channel)

    result = result & TLEncode(obj.msg_id)

    result = result & TLEncode(obj.offset_rate)

    result = result & TLEncode(obj.offset_peer)

    result = result & TLEncode(obj.offset_id)

    result = result & TLEncode(obj.limit)


proc TLEncodeFunction*(obj: stats_getMessageStats): seq[uint8] = 
    result = result & TLEncode(int32(-1226791947))
    result = result & TLEncode(obj.flags)

    result = result & TLEncode(obj.channel)

    result = result & TLEncode(obj.msg_id)




proc TLEncodeApiGeneric*(obj: TLFunction): seq[uint8] = 
    if obj of invokeAfterMsg:
        return cast[invokeAfterMsg](obj).TLEncodeFunction()
    if obj of invokeAfterMsgs:
        return cast[invokeAfterMsgs](obj).TLEncodeFunction()
    if obj of initConnection:
        return cast[initConnection](obj).TLEncodeFunction()
    if obj of invokeWithLayer:
        return cast[invokeWithLayer](obj).TLEncodeFunction()
    if obj of invokeWithoutUpdates:
        return cast[invokeWithoutUpdates](obj).TLEncodeFunction()
    if obj of invokeWithMessagesRange:
        return cast[invokeWithMessagesRange](obj).TLEncodeFunction()
    if obj of invokeWithTakeout:
        return cast[invokeWithTakeout](obj).TLEncodeFunction()
    if obj of auth_sendCode:
        return cast[auth_sendCode](obj).TLEncodeFunction()
    if obj of auth_signUp:
        return cast[auth_signUp](obj).TLEncodeFunction()
    if obj of auth_signIn:
        return cast[auth_signIn](obj).TLEncodeFunction()
    if obj of auth_logOut:
        return cast[auth_logOut](obj).TLEncodeFunction()
    if obj of auth_resetAuthorizations:
        return cast[auth_resetAuthorizations](obj).TLEncodeFunction()
    if obj of auth_exportAuthorization:
        return cast[auth_exportAuthorization](obj).TLEncodeFunction()
    if obj of auth_importAuthorization:
        return cast[auth_importAuthorization](obj).TLEncodeFunction()
    if obj of auth_bindTempAuthKey:
        return cast[auth_bindTempAuthKey](obj).TLEncodeFunction()
    if obj of auth_importBotAuthorization:
        return cast[auth_importBotAuthorization](obj).TLEncodeFunction()
    if obj of auth_checkPassword:
        return cast[auth_checkPassword](obj).TLEncodeFunction()
    if obj of auth_requestPasswordRecovery:
        return cast[auth_requestPasswordRecovery](obj).TLEncodeFunction()
    if obj of auth_recoverPassword:
        return cast[auth_recoverPassword](obj).TLEncodeFunction()
    if obj of auth_resendCode:
        return cast[auth_resendCode](obj).TLEncodeFunction()
    if obj of auth_cancelCode:
        return cast[auth_cancelCode](obj).TLEncodeFunction()
    if obj of auth_dropTempAuthKeys:
        return cast[auth_dropTempAuthKeys](obj).TLEncodeFunction()
    if obj of auth_exportLoginToken:
        return cast[auth_exportLoginToken](obj).TLEncodeFunction()
    if obj of auth_importLoginToken:
        return cast[auth_importLoginToken](obj).TLEncodeFunction()
    if obj of auth_acceptLoginToken:
        return cast[auth_acceptLoginToken](obj).TLEncodeFunction()
    if obj of account_registerDevice:
        return cast[account_registerDevice](obj).TLEncodeFunction()
    if obj of account_unregisterDevice:
        return cast[account_unregisterDevice](obj).TLEncodeFunction()
    if obj of account_updateNotifySettings:
        return cast[account_updateNotifySettings](obj).TLEncodeFunction()
    if obj of account_getNotifySettings:
        return cast[account_getNotifySettings](obj).TLEncodeFunction()
    if obj of account_resetNotifySettings:
        return cast[account_resetNotifySettings](obj).TLEncodeFunction()
    if obj of account_updateProfile:
        return cast[account_updateProfile](obj).TLEncodeFunction()
    if obj of account_updateStatus:
        return cast[account_updateStatus](obj).TLEncodeFunction()
    if obj of account_getWallPapers:
        return cast[account_getWallPapers](obj).TLEncodeFunction()
    if obj of account_reportPeer:
        return cast[account_reportPeer](obj).TLEncodeFunction()
    if obj of account_checkUsername:
        return cast[account_checkUsername](obj).TLEncodeFunction()
    if obj of account_updateUsername:
        return cast[account_updateUsername](obj).TLEncodeFunction()
    if obj of account_getPrivacy:
        return cast[account_getPrivacy](obj).TLEncodeFunction()
    if obj of account_setPrivacy:
        return cast[account_setPrivacy](obj).TLEncodeFunction()
    if obj of account_deleteAccount:
        return cast[account_deleteAccount](obj).TLEncodeFunction()
    if obj of account_getAccountTTL:
        return cast[account_getAccountTTL](obj).TLEncodeFunction()
    if obj of account_setAccountTTL:
        return cast[account_setAccountTTL](obj).TLEncodeFunction()
    if obj of account_sendChangePhoneCode:
        return cast[account_sendChangePhoneCode](obj).TLEncodeFunction()
    if obj of account_changePhone:
        return cast[account_changePhone](obj).TLEncodeFunction()
    if obj of account_updateDeviceLocked:
        return cast[account_updateDeviceLocked](obj).TLEncodeFunction()
    if obj of account_getAuthorizations:
        return cast[account_getAuthorizations](obj).TLEncodeFunction()
    if obj of account_resetAuthorization:
        return cast[account_resetAuthorization](obj).TLEncodeFunction()
    if obj of account_getPassword:
        return cast[account_getPassword](obj).TLEncodeFunction()
    if obj of account_getPasswordSettings:
        return cast[account_getPasswordSettings](obj).TLEncodeFunction()
    if obj of account_updatePasswordSettings:
        return cast[account_updatePasswordSettings](obj).TLEncodeFunction()
    if obj of account_sendConfirmPhoneCode:
        return cast[account_sendConfirmPhoneCode](obj).TLEncodeFunction()
    if obj of account_confirmPhone:
        return cast[account_confirmPhone](obj).TLEncodeFunction()
    if obj of account_getTmpPassword:
        return cast[account_getTmpPassword](obj).TLEncodeFunction()
    if obj of account_getWebAuthorizations:
        return cast[account_getWebAuthorizations](obj).TLEncodeFunction()
    if obj of account_resetWebAuthorization:
        return cast[account_resetWebAuthorization](obj).TLEncodeFunction()
    if obj of account_resetWebAuthorizations:
        return cast[account_resetWebAuthorizations](obj).TLEncodeFunction()
    if obj of account_getAllSecureValues:
        return cast[account_getAllSecureValues](obj).TLEncodeFunction()
    if obj of account_getSecureValue:
        return cast[account_getSecureValue](obj).TLEncodeFunction()
    if obj of account_saveSecureValue:
        return cast[account_saveSecureValue](obj).TLEncodeFunction()
    if obj of account_deleteSecureValue:
        return cast[account_deleteSecureValue](obj).TLEncodeFunction()
    if obj of account_getAuthorizationForm:
        return cast[account_getAuthorizationForm](obj).TLEncodeFunction()
    if obj of account_acceptAuthorization:
        return cast[account_acceptAuthorization](obj).TLEncodeFunction()
    if obj of account_sendVerifyPhoneCode:
        return cast[account_sendVerifyPhoneCode](obj).TLEncodeFunction()
    if obj of account_verifyPhone:
        return cast[account_verifyPhone](obj).TLEncodeFunction()
    if obj of account_sendVerifyEmailCode:
        return cast[account_sendVerifyEmailCode](obj).TLEncodeFunction()
    if obj of account_verifyEmail:
        return cast[account_verifyEmail](obj).TLEncodeFunction()
    if obj of account_initTakeoutSession:
        return cast[account_initTakeoutSession](obj).TLEncodeFunction()
    if obj of account_finishTakeoutSession:
        return cast[account_finishTakeoutSession](obj).TLEncodeFunction()
    if obj of account_confirmPasswordEmail:
        return cast[account_confirmPasswordEmail](obj).TLEncodeFunction()
    if obj of account_resendPasswordEmail:
        return cast[account_resendPasswordEmail](obj).TLEncodeFunction()
    if obj of account_cancelPasswordEmail:
        return cast[account_cancelPasswordEmail](obj).TLEncodeFunction()
    if obj of account_getContactSignUpNotification:
        return cast[account_getContactSignUpNotification](obj).TLEncodeFunction()
    if obj of account_setContactSignUpNotification:
        return cast[account_setContactSignUpNotification](obj).TLEncodeFunction()
    if obj of account_getNotifyExceptions:
        return cast[account_getNotifyExceptions](obj).TLEncodeFunction()
    if obj of account_getWallPaper:
        return cast[account_getWallPaper](obj).TLEncodeFunction()
    if obj of account_uploadWallPaper:
        return cast[account_uploadWallPaper](obj).TLEncodeFunction()
    if obj of account_saveWallPaper:
        return cast[account_saveWallPaper](obj).TLEncodeFunction()
    if obj of account_installWallPaper:
        return cast[account_installWallPaper](obj).TLEncodeFunction()
    if obj of account_resetWallPapers:
        return cast[account_resetWallPapers](obj).TLEncodeFunction()
    if obj of account_getAutoDownloadSettings:
        return cast[account_getAutoDownloadSettings](obj).TLEncodeFunction()
    if obj of account_saveAutoDownloadSettings:
        return cast[account_saveAutoDownloadSettings](obj).TLEncodeFunction()
    if obj of account_uploadTheme:
        return cast[account_uploadTheme](obj).TLEncodeFunction()
    if obj of account_createTheme:
        return cast[account_createTheme](obj).TLEncodeFunction()
    if obj of account_updateTheme:
        return cast[account_updateTheme](obj).TLEncodeFunction()
    if obj of account_saveTheme:
        return cast[account_saveTheme](obj).TLEncodeFunction()
    if obj of account_installTheme:
        return cast[account_installTheme](obj).TLEncodeFunction()
    if obj of account_getTheme:
        return cast[account_getTheme](obj).TLEncodeFunction()
    if obj of account_getThemes:
        return cast[account_getThemes](obj).TLEncodeFunction()
    if obj of account_setContentSettings:
        return cast[account_setContentSettings](obj).TLEncodeFunction()
    if obj of account_getContentSettings:
        return cast[account_getContentSettings](obj).TLEncodeFunction()
    if obj of account_getMultiWallPapers:
        return cast[account_getMultiWallPapers](obj).TLEncodeFunction()
    if obj of account_getGlobalPrivacySettings:
        return cast[account_getGlobalPrivacySettings](obj).TLEncodeFunction()
    if obj of account_setGlobalPrivacySettings:
        return cast[account_setGlobalPrivacySettings](obj).TLEncodeFunction()
    if obj of users_getUsers:
        return cast[users_getUsers](obj).TLEncodeFunction()
    if obj of users_getFullUser:
        return cast[users_getFullUser](obj).TLEncodeFunction()
    if obj of users_setSecureValueErrors:
        return cast[users_setSecureValueErrors](obj).TLEncodeFunction()
    if obj of contacts_getContactIDs:
        return cast[contacts_getContactIDs](obj).TLEncodeFunction()
    if obj of contacts_getStatuses:
        return cast[contacts_getStatuses](obj).TLEncodeFunction()
    if obj of contacts_getContacts:
        return cast[contacts_getContacts](obj).TLEncodeFunction()
    if obj of contacts_importContacts:
        return cast[contacts_importContacts](obj).TLEncodeFunction()
    if obj of contacts_deleteContacts:
        return cast[contacts_deleteContacts](obj).TLEncodeFunction()
    if obj of contacts_deleteByPhones:
        return cast[contacts_deleteByPhones](obj).TLEncodeFunction()
    if obj of contacts_block:
        return cast[contacts_block](obj).TLEncodeFunction()
    if obj of contacts_unblock:
        return cast[contacts_unblock](obj).TLEncodeFunction()
    if obj of contacts_getBlocked:
        return cast[contacts_getBlocked](obj).TLEncodeFunction()
    if obj of contacts_search:
        return cast[contacts_search](obj).TLEncodeFunction()
    if obj of contacts_resolveUsername:
        return cast[contacts_resolveUsername](obj).TLEncodeFunction()
    if obj of contacts_getTopPeers:
        return cast[contacts_getTopPeers](obj).TLEncodeFunction()
    if obj of contacts_resetTopPeerRating:
        return cast[contacts_resetTopPeerRating](obj).TLEncodeFunction()
    if obj of contacts_resetSaved:
        return cast[contacts_resetSaved](obj).TLEncodeFunction()
    if obj of contacts_getSaved:
        return cast[contacts_getSaved](obj).TLEncodeFunction()
    if obj of contacts_toggleTopPeers:
        return cast[contacts_toggleTopPeers](obj).TLEncodeFunction()
    if obj of contacts_addContact:
        return cast[contacts_addContact](obj).TLEncodeFunction()
    if obj of contacts_acceptContact:
        return cast[contacts_acceptContact](obj).TLEncodeFunction()
    if obj of contacts_getLocated:
        return cast[contacts_getLocated](obj).TLEncodeFunction()
    if obj of contacts_blockFromReplies:
        return cast[contacts_blockFromReplies](obj).TLEncodeFunction()
    if obj of messages_getMessages:
        return cast[messages_getMessages](obj).TLEncodeFunction()
    if obj of messages_getDialogs:
        return cast[messages_getDialogs](obj).TLEncodeFunction()
    if obj of messages_getHistory:
        return cast[messages_getHistory](obj).TLEncodeFunction()
    if obj of messages_search:
        return cast[messages_search](obj).TLEncodeFunction()
    if obj of messages_readHistory:
        return cast[messages_readHistory](obj).TLEncodeFunction()
    if obj of messages_deleteHistory:
        return cast[messages_deleteHistory](obj).TLEncodeFunction()
    if obj of messages_deleteMessages:
        return cast[messages_deleteMessages](obj).TLEncodeFunction()
    if obj of messages_receivedMessages:
        return cast[messages_receivedMessages](obj).TLEncodeFunction()
    if obj of messages_setTyping:
        return cast[messages_setTyping](obj).TLEncodeFunction()
    if obj of messages_sendMessage:
        return cast[messages_sendMessage](obj).TLEncodeFunction()
    if obj of messages_sendMedia:
        return cast[messages_sendMedia](obj).TLEncodeFunction()
    if obj of messages_forwardMessages:
        return cast[messages_forwardMessages](obj).TLEncodeFunction()
    if obj of messages_reportSpam:
        return cast[messages_reportSpam](obj).TLEncodeFunction()
    if obj of messages_getPeerSettings:
        return cast[messages_getPeerSettings](obj).TLEncodeFunction()
    if obj of messages_report:
        return cast[messages_report](obj).TLEncodeFunction()
    if obj of messages_getChats:
        return cast[messages_getChats](obj).TLEncodeFunction()
    if obj of messages_getFullChat:
        return cast[messages_getFullChat](obj).TLEncodeFunction()
    if obj of messages_editChatTitle:
        return cast[messages_editChatTitle](obj).TLEncodeFunction()
    if obj of messages_editChatPhoto:
        return cast[messages_editChatPhoto](obj).TLEncodeFunction()
    if obj of messages_addChatUser:
        return cast[messages_addChatUser](obj).TLEncodeFunction()
    if obj of messages_deleteChatUser:
        return cast[messages_deleteChatUser](obj).TLEncodeFunction()
    if obj of messages_createChat:
        return cast[messages_createChat](obj).TLEncodeFunction()
    if obj of messages_getDhConfig:
        return cast[messages_getDhConfig](obj).TLEncodeFunction()
    if obj of messages_requestEncryption:
        return cast[messages_requestEncryption](obj).TLEncodeFunction()
    if obj of messages_acceptEncryption:
        return cast[messages_acceptEncryption](obj).TLEncodeFunction()
    if obj of messages_discardEncryption:
        return cast[messages_discardEncryption](obj).TLEncodeFunction()
    if obj of messages_setEncryptedTyping:
        return cast[messages_setEncryptedTyping](obj).TLEncodeFunction()
    if obj of messages_readEncryptedHistory:
        return cast[messages_readEncryptedHistory](obj).TLEncodeFunction()
    if obj of messages_sendEncrypted:
        return cast[messages_sendEncrypted](obj).TLEncodeFunction()
    if obj of messages_sendEncryptedFile:
        return cast[messages_sendEncryptedFile](obj).TLEncodeFunction()
    if obj of messages_sendEncryptedService:
        return cast[messages_sendEncryptedService](obj).TLEncodeFunction()
    if obj of messages_receivedQueue:
        return cast[messages_receivedQueue](obj).TLEncodeFunction()
    if obj of messages_reportEncryptedSpam:
        return cast[messages_reportEncryptedSpam](obj).TLEncodeFunction()
    if obj of messages_readMessageContents:
        return cast[messages_readMessageContents](obj).TLEncodeFunction()
    if obj of messages_getStickers:
        return cast[messages_getStickers](obj).TLEncodeFunction()
    if obj of messages_getAllStickers:
        return cast[messages_getAllStickers](obj).TLEncodeFunction()
    if obj of messages_getWebPagePreview:
        return cast[messages_getWebPagePreview](obj).TLEncodeFunction()
    if obj of messages_exportChatInvite:
        return cast[messages_exportChatInvite](obj).TLEncodeFunction()
    if obj of messages_checkChatInvite:
        return cast[messages_checkChatInvite](obj).TLEncodeFunction()
    if obj of messages_importChatInvite:
        return cast[messages_importChatInvite](obj).TLEncodeFunction()
    if obj of messages_getStickerSet:
        return cast[messages_getStickerSet](obj).TLEncodeFunction()
    if obj of messages_installStickerSet:
        return cast[messages_installStickerSet](obj).TLEncodeFunction()
    if obj of messages_uninstallStickerSet:
        return cast[messages_uninstallStickerSet](obj).TLEncodeFunction()
    if obj of messages_startBot:
        return cast[messages_startBot](obj).TLEncodeFunction()
    if obj of messages_getMessagesViews:
        return cast[messages_getMessagesViews](obj).TLEncodeFunction()
    if obj of messages_editChatAdmin:
        return cast[messages_editChatAdmin](obj).TLEncodeFunction()
    if obj of messages_migrateChat:
        return cast[messages_migrateChat](obj).TLEncodeFunction()
    if obj of messages_searchGlobal:
        return cast[messages_searchGlobal](obj).TLEncodeFunction()
    if obj of messages_reorderStickerSets:
        return cast[messages_reorderStickerSets](obj).TLEncodeFunction()
    if obj of messages_getDocumentByHash:
        return cast[messages_getDocumentByHash](obj).TLEncodeFunction()
    if obj of messages_getSavedGifs:
        return cast[messages_getSavedGifs](obj).TLEncodeFunction()
    if obj of messages_saveGif:
        return cast[messages_saveGif](obj).TLEncodeFunction()
    if obj of messages_getInlineBotResults:
        return cast[messages_getInlineBotResults](obj).TLEncodeFunction()
    if obj of messages_setInlineBotResults:
        return cast[messages_setInlineBotResults](obj).TLEncodeFunction()
    if obj of messages_sendInlineBotResult:
        return cast[messages_sendInlineBotResult](obj).TLEncodeFunction()
    if obj of messages_getMessageEditData:
        return cast[messages_getMessageEditData](obj).TLEncodeFunction()
    if obj of messages_editMessage:
        return cast[messages_editMessage](obj).TLEncodeFunction()
    if obj of messages_editInlineBotMessage:
        return cast[messages_editInlineBotMessage](obj).TLEncodeFunction()
    if obj of messages_getBotCallbackAnswer:
        return cast[messages_getBotCallbackAnswer](obj).TLEncodeFunction()
    if obj of messages_setBotCallbackAnswer:
        return cast[messages_setBotCallbackAnswer](obj).TLEncodeFunction()
    if obj of messages_getPeerDialogs:
        return cast[messages_getPeerDialogs](obj).TLEncodeFunction()
    if obj of messages_saveDraft:
        return cast[messages_saveDraft](obj).TLEncodeFunction()
    if obj of messages_getAllDrafts:
        return cast[messages_getAllDrafts](obj).TLEncodeFunction()
    if obj of messages_getFeaturedStickers:
        return cast[messages_getFeaturedStickers](obj).TLEncodeFunction()
    if obj of messages_readFeaturedStickers:
        return cast[messages_readFeaturedStickers](obj).TLEncodeFunction()
    if obj of messages_getRecentStickers:
        return cast[messages_getRecentStickers](obj).TLEncodeFunction()
    if obj of messages_saveRecentSticker:
        return cast[messages_saveRecentSticker](obj).TLEncodeFunction()
    if obj of messages_clearRecentStickers:
        return cast[messages_clearRecentStickers](obj).TLEncodeFunction()
    if obj of messages_getArchivedStickers:
        return cast[messages_getArchivedStickers](obj).TLEncodeFunction()
    if obj of messages_getMaskStickers:
        return cast[messages_getMaskStickers](obj).TLEncodeFunction()
    if obj of messages_getAttachedStickers:
        return cast[messages_getAttachedStickers](obj).TLEncodeFunction()
    if obj of messages_setGameScore:
        return cast[messages_setGameScore](obj).TLEncodeFunction()
    if obj of messages_setInlineGameScore:
        return cast[messages_setInlineGameScore](obj).TLEncodeFunction()
    if obj of messages_getGameHighScores:
        return cast[messages_getGameHighScores](obj).TLEncodeFunction()
    if obj of messages_getInlineGameHighScores:
        return cast[messages_getInlineGameHighScores](obj).TLEncodeFunction()
    if obj of messages_getCommonChats:
        return cast[messages_getCommonChats](obj).TLEncodeFunction()
    if obj of messages_getAllChats:
        return cast[messages_getAllChats](obj).TLEncodeFunction()
    if obj of messages_getWebPage:
        return cast[messages_getWebPage](obj).TLEncodeFunction()
    if obj of messages_toggleDialogPin:
        return cast[messages_toggleDialogPin](obj).TLEncodeFunction()
    if obj of messages_reorderPinnedDialogs:
        return cast[messages_reorderPinnedDialogs](obj).TLEncodeFunction()
    if obj of messages_getPinnedDialogs:
        return cast[messages_getPinnedDialogs](obj).TLEncodeFunction()
    if obj of messages_setBotShippingResults:
        return cast[messages_setBotShippingResults](obj).TLEncodeFunction()
    if obj of messages_setBotPrecheckoutResults:
        return cast[messages_setBotPrecheckoutResults](obj).TLEncodeFunction()
    if obj of messages_uploadMedia:
        return cast[messages_uploadMedia](obj).TLEncodeFunction()
    if obj of messages_sendScreenshotNotification:
        return cast[messages_sendScreenshotNotification](obj).TLEncodeFunction()
    if obj of messages_getFavedStickers:
        return cast[messages_getFavedStickers](obj).TLEncodeFunction()
    if obj of messages_faveSticker:
        return cast[messages_faveSticker](obj).TLEncodeFunction()
    if obj of messages_getUnreadMentions:
        return cast[messages_getUnreadMentions](obj).TLEncodeFunction()
    if obj of messages_readMentions:
        return cast[messages_readMentions](obj).TLEncodeFunction()
    if obj of messages_getRecentLocations:
        return cast[messages_getRecentLocations](obj).TLEncodeFunction()
    if obj of messages_sendMultiMedia:
        return cast[messages_sendMultiMedia](obj).TLEncodeFunction()
    if obj of messages_uploadEncryptedFile:
        return cast[messages_uploadEncryptedFile](obj).TLEncodeFunction()
    if obj of messages_searchStickerSets:
        return cast[messages_searchStickerSets](obj).TLEncodeFunction()
    if obj of messages_getSplitRanges:
        return cast[messages_getSplitRanges](obj).TLEncodeFunction()
    if obj of messages_markDialogUnread:
        return cast[messages_markDialogUnread](obj).TLEncodeFunction()
    if obj of messages_getDialogUnreadMarks:
        return cast[messages_getDialogUnreadMarks](obj).TLEncodeFunction()
    if obj of messages_clearAllDrafts:
        return cast[messages_clearAllDrafts](obj).TLEncodeFunction()
    if obj of messages_updatePinnedMessage:
        return cast[messages_updatePinnedMessage](obj).TLEncodeFunction()
    if obj of messages_sendVote:
        return cast[messages_sendVote](obj).TLEncodeFunction()
    if obj of messages_getPollResults:
        return cast[messages_getPollResults](obj).TLEncodeFunction()
    if obj of messages_getOnlines:
        return cast[messages_getOnlines](obj).TLEncodeFunction()
    if obj of messages_getStatsURL:
        return cast[messages_getStatsURL](obj).TLEncodeFunction()
    if obj of messages_editChatAbout:
        return cast[messages_editChatAbout](obj).TLEncodeFunction()
    if obj of messages_editChatDefaultBannedRights:
        return cast[messages_editChatDefaultBannedRights](obj).TLEncodeFunction()
    if obj of messages_getEmojiKeywords:
        return cast[messages_getEmojiKeywords](obj).TLEncodeFunction()
    if obj of messages_getEmojiKeywordsDifference:
        return cast[messages_getEmojiKeywordsDifference](obj).TLEncodeFunction()
    if obj of messages_getEmojiKeywordsLanguages:
        return cast[messages_getEmojiKeywordsLanguages](obj).TLEncodeFunction()
    if obj of messages_getEmojiURL:
        return cast[messages_getEmojiURL](obj).TLEncodeFunction()
    if obj of messages_getSearchCounters:
        return cast[messages_getSearchCounters](obj).TLEncodeFunction()
    if obj of messages_requestUrlAuth:
        return cast[messages_requestUrlAuth](obj).TLEncodeFunction()
    if obj of messages_acceptUrlAuth:
        return cast[messages_acceptUrlAuth](obj).TLEncodeFunction()
    if obj of messages_hidePeerSettingsBar:
        return cast[messages_hidePeerSettingsBar](obj).TLEncodeFunction()
    if obj of messages_getScheduledHistory:
        return cast[messages_getScheduledHistory](obj).TLEncodeFunction()
    if obj of messages_getScheduledMessages:
        return cast[messages_getScheduledMessages](obj).TLEncodeFunction()
    if obj of messages_sendScheduledMessages:
        return cast[messages_sendScheduledMessages](obj).TLEncodeFunction()
    if obj of messages_deleteScheduledMessages:
        return cast[messages_deleteScheduledMessages](obj).TLEncodeFunction()
    if obj of messages_getPollVotes:
        return cast[messages_getPollVotes](obj).TLEncodeFunction()
    if obj of messages_toggleStickerSets:
        return cast[messages_toggleStickerSets](obj).TLEncodeFunction()
    if obj of messages_getDialogFilters:
        return cast[messages_getDialogFilters](obj).TLEncodeFunction()
    if obj of messages_getSuggestedDialogFilters:
        return cast[messages_getSuggestedDialogFilters](obj).TLEncodeFunction()
    if obj of messages_updateDialogFilter:
        return cast[messages_updateDialogFilter](obj).TLEncodeFunction()
    if obj of messages_updateDialogFiltersOrder:
        return cast[messages_updateDialogFiltersOrder](obj).TLEncodeFunction()
    if obj of messages_getOldFeaturedStickers:
        return cast[messages_getOldFeaturedStickers](obj).TLEncodeFunction()
    if obj of messages_getReplies:
        return cast[messages_getReplies](obj).TLEncodeFunction()
    if obj of messages_getDiscussionMessage:
        return cast[messages_getDiscussionMessage](obj).TLEncodeFunction()
    if obj of messages_readDiscussion:
        return cast[messages_readDiscussion](obj).TLEncodeFunction()
    if obj of messages_unpinAllMessages:
        return cast[messages_unpinAllMessages](obj).TLEncodeFunction()
    if obj of updates_getState:
        return cast[updates_getState](obj).TLEncodeFunction()
    if obj of updates_getDifference:
        return cast[updates_getDifference](obj).TLEncodeFunction()
    if obj of updates_getChannelDifference:
        return cast[updates_getChannelDifference](obj).TLEncodeFunction()
    if obj of photos_updateProfilePhoto:
        return cast[photos_updateProfilePhoto](obj).TLEncodeFunction()
    if obj of photos_uploadProfilePhoto:
        return cast[photos_uploadProfilePhoto](obj).TLEncodeFunction()
    if obj of photos_deletePhotos:
        return cast[photos_deletePhotos](obj).TLEncodeFunction()
    if obj of photos_getUserPhotos:
        return cast[photos_getUserPhotos](obj).TLEncodeFunction()
    if obj of upload_saveFilePart:
        return cast[upload_saveFilePart](obj).TLEncodeFunction()
    if obj of upload_getFile:
        return cast[upload_getFile](obj).TLEncodeFunction()
    if obj of upload_saveBigFilePart:
        return cast[upload_saveBigFilePart](obj).TLEncodeFunction()
    if obj of upload_getWebFile:
        return cast[upload_getWebFile](obj).TLEncodeFunction()
    if obj of upload_getCdnFile:
        return cast[upload_getCdnFile](obj).TLEncodeFunction()
    if obj of upload_reuploadCdnFile:
        return cast[upload_reuploadCdnFile](obj).TLEncodeFunction()
    if obj of upload_getCdnFileHashes:
        return cast[upload_getCdnFileHashes](obj).TLEncodeFunction()
    if obj of upload_getFileHashes:
        return cast[upload_getFileHashes](obj).TLEncodeFunction()
    if obj of help_getConfig:
        return cast[help_getConfig](obj).TLEncodeFunction()
    if obj of help_getNearestDc:
        return cast[help_getNearestDc](obj).TLEncodeFunction()
    if obj of help_getAppUpdate:
        return cast[help_getAppUpdate](obj).TLEncodeFunction()
    if obj of help_getInviteText:
        return cast[help_getInviteText](obj).TLEncodeFunction()
    if obj of help_getSupport:
        return cast[help_getSupport](obj).TLEncodeFunction()
    if obj of help_getAppChangelog:
        return cast[help_getAppChangelog](obj).TLEncodeFunction()
    if obj of help_setBotUpdatesStatus:
        return cast[help_setBotUpdatesStatus](obj).TLEncodeFunction()
    if obj of help_getCdnConfig:
        return cast[help_getCdnConfig](obj).TLEncodeFunction()
    if obj of help_getRecentMeUrls:
        return cast[help_getRecentMeUrls](obj).TLEncodeFunction()
    if obj of help_getTermsOfServiceUpdate:
        return cast[help_getTermsOfServiceUpdate](obj).TLEncodeFunction()
    if obj of help_acceptTermsOfService:
        return cast[help_acceptTermsOfService](obj).TLEncodeFunction()
    if obj of help_getDeepLinkInfo:
        return cast[help_getDeepLinkInfo](obj).TLEncodeFunction()
    if obj of help_getAppConfig:
        return cast[help_getAppConfig](obj).TLEncodeFunction()
    if obj of help_saveAppLog:
        return cast[help_saveAppLog](obj).TLEncodeFunction()
    if obj of help_getPassportConfig:
        return cast[help_getPassportConfig](obj).TLEncodeFunction()
    if obj of help_getSupportName:
        return cast[help_getSupportName](obj).TLEncodeFunction()
    if obj of help_getUserInfo:
        return cast[help_getUserInfo](obj).TLEncodeFunction()
    if obj of help_editUserInfo:
        return cast[help_editUserInfo](obj).TLEncodeFunction()
    if obj of help_getPromoData:
        return cast[help_getPromoData](obj).TLEncodeFunction()
    if obj of help_hidePromoData:
        return cast[help_hidePromoData](obj).TLEncodeFunction()
    if obj of help_dismissSuggestion:
        return cast[help_dismissSuggestion](obj).TLEncodeFunction()
    if obj of help_getCountriesList:
        return cast[help_getCountriesList](obj).TLEncodeFunction()
    if obj of channels_readHistory:
        return cast[channels_readHistory](obj).TLEncodeFunction()
    if obj of channels_deleteMessages:
        return cast[channels_deleteMessages](obj).TLEncodeFunction()
    if obj of channels_deleteUserHistory:
        return cast[channels_deleteUserHistory](obj).TLEncodeFunction()
    if obj of channels_reportSpam:
        return cast[channels_reportSpam](obj).TLEncodeFunction()
    if obj of channels_getMessages:
        return cast[channels_getMessages](obj).TLEncodeFunction()
    if obj of channels_getParticipants:
        return cast[channels_getParticipants](obj).TLEncodeFunction()
    if obj of channels_getParticipant:
        return cast[channels_getParticipant](obj).TLEncodeFunction()
    if obj of channels_getChannels:
        return cast[channels_getChannels](obj).TLEncodeFunction()
    if obj of channels_getFullChannel:
        return cast[channels_getFullChannel](obj).TLEncodeFunction()
    if obj of channels_createChannel:
        return cast[channels_createChannel](obj).TLEncodeFunction()
    if obj of channels_editAdmin:
        return cast[channels_editAdmin](obj).TLEncodeFunction()
    if obj of channels_editTitle:
        return cast[channels_editTitle](obj).TLEncodeFunction()
    if obj of channels_editPhoto:
        return cast[channels_editPhoto](obj).TLEncodeFunction()
    if obj of channels_checkUsername:
        return cast[channels_checkUsername](obj).TLEncodeFunction()
    if obj of channels_updateUsername:
        return cast[channels_updateUsername](obj).TLEncodeFunction()
    if obj of channels_joinChannel:
        return cast[channels_joinChannel](obj).TLEncodeFunction()
    if obj of channels_leaveChannel:
        return cast[channels_leaveChannel](obj).TLEncodeFunction()
    if obj of channels_inviteToChannel:
        return cast[channels_inviteToChannel](obj).TLEncodeFunction()
    if obj of channels_deleteChannel:
        return cast[channels_deleteChannel](obj).TLEncodeFunction()
    if obj of channels_exportMessageLink:
        return cast[channels_exportMessageLink](obj).TLEncodeFunction()
    if obj of channels_toggleSignatures:
        return cast[channels_toggleSignatures](obj).TLEncodeFunction()
    if obj of channels_getAdminedPublicChannels:
        return cast[channels_getAdminedPublicChannels](obj).TLEncodeFunction()
    if obj of channels_editBanned:
        return cast[channels_editBanned](obj).TLEncodeFunction()
    if obj of channels_getAdminLog:
        return cast[channels_getAdminLog](obj).TLEncodeFunction()
    if obj of channels_setStickers:
        return cast[channels_setStickers](obj).TLEncodeFunction()
    if obj of channels_readMessageContents:
        return cast[channels_readMessageContents](obj).TLEncodeFunction()
    if obj of channels_deleteHistory:
        return cast[channels_deleteHistory](obj).TLEncodeFunction()
    if obj of channels_togglePreHistoryHidden:
        return cast[channels_togglePreHistoryHidden](obj).TLEncodeFunction()
    if obj of channels_getLeftChannels:
        return cast[channels_getLeftChannels](obj).TLEncodeFunction()
    if obj of channels_getGroupsForDiscussion:
        return cast[channels_getGroupsForDiscussion](obj).TLEncodeFunction()
    if obj of channels_setDiscussionGroup:
        return cast[channels_setDiscussionGroup](obj).TLEncodeFunction()
    if obj of channels_editCreator:
        return cast[channels_editCreator](obj).TLEncodeFunction()
    if obj of channels_editLocation:
        return cast[channels_editLocation](obj).TLEncodeFunction()
    if obj of channels_toggleSlowMode:
        return cast[channels_toggleSlowMode](obj).TLEncodeFunction()
    if obj of channels_getInactiveChannels:
        return cast[channels_getInactiveChannels](obj).TLEncodeFunction()
    if obj of bots_sendCustomRequest:
        return cast[bots_sendCustomRequest](obj).TLEncodeFunction()
    if obj of bots_answerWebhookJSONQuery:
        return cast[bots_answerWebhookJSONQuery](obj).TLEncodeFunction()
    if obj of bots_setBotCommands:
        return cast[bots_setBotCommands](obj).TLEncodeFunction()
    if obj of payments_getPaymentForm:
        return cast[payments_getPaymentForm](obj).TLEncodeFunction()
    if obj of payments_getPaymentReceipt:
        return cast[payments_getPaymentReceipt](obj).TLEncodeFunction()
    if obj of payments_validateRequestedInfo:
        return cast[payments_validateRequestedInfo](obj).TLEncodeFunction()
    if obj of payments_sendPaymentForm:
        return cast[payments_sendPaymentForm](obj).TLEncodeFunction()
    if obj of payments_getSavedInfo:
        return cast[payments_getSavedInfo](obj).TLEncodeFunction()
    if obj of payments_clearSavedInfo:
        return cast[payments_clearSavedInfo](obj).TLEncodeFunction()
    if obj of payments_getBankCardData:
        return cast[payments_getBankCardData](obj).TLEncodeFunction()
    if obj of stickers_createStickerSet:
        return cast[stickers_createStickerSet](obj).TLEncodeFunction()
    if obj of stickers_removeStickerFromSet:
        return cast[stickers_removeStickerFromSet](obj).TLEncodeFunction()
    if obj of stickers_changeStickerPosition:
        return cast[stickers_changeStickerPosition](obj).TLEncodeFunction()
    if obj of stickers_addStickerToSet:
        return cast[stickers_addStickerToSet](obj).TLEncodeFunction()
    if obj of stickers_setStickerSetThumb:
        return cast[stickers_setStickerSetThumb](obj).TLEncodeFunction()
    if obj of phone_getCallConfig:
        return cast[phone_getCallConfig](obj).TLEncodeFunction()
    if obj of phone_requestCall:
        return cast[phone_requestCall](obj).TLEncodeFunction()
    if obj of phone_acceptCall:
        return cast[phone_acceptCall](obj).TLEncodeFunction()
    if obj of phone_confirmCall:
        return cast[phone_confirmCall](obj).TLEncodeFunction()
    if obj of phone_receivedCall:
        return cast[phone_receivedCall](obj).TLEncodeFunction()
    if obj of phone_discardCall:
        return cast[phone_discardCall](obj).TLEncodeFunction()
    if obj of phone_setCallRating:
        return cast[phone_setCallRating](obj).TLEncodeFunction()
    if obj of phone_saveCallDebug:
        return cast[phone_saveCallDebug](obj).TLEncodeFunction()
    if obj of phone_sendSignalingData:
        return cast[phone_sendSignalingData](obj).TLEncodeFunction()
    if obj of langpack_getLangPack:
        return cast[langpack_getLangPack](obj).TLEncodeFunction()
    if obj of langpack_getStrings:
        return cast[langpack_getStrings](obj).TLEncodeFunction()
    if obj of langpack_getDifference:
        return cast[langpack_getDifference](obj).TLEncodeFunction()
    if obj of langpack_getLanguages:
        return cast[langpack_getLanguages](obj).TLEncodeFunction()
    if obj of langpack_getLanguage:
        return cast[langpack_getLanguage](obj).TLEncodeFunction()
    if obj of folders_editPeerFolders:
        return cast[folders_editPeerFolders](obj).TLEncodeFunction()
    if obj of folders_deleteFolder:
        return cast[folders_deleteFolder](obj).TLEncodeFunction()
    if obj of stats_getBroadcastStats:
        return cast[stats_getBroadcastStats](obj).TLEncodeFunction()
    if obj of stats_loadAsyncGraph:
        return cast[stats_loadAsyncGraph](obj).TLEncodeFunction()
    if obj of stats_getMegagroupStats:
        return cast[stats_getMegagroupStats](obj).TLEncodeFunction()
    if obj of stats_getMessagePublicForwards:
        return cast[stats_getMessagePublicForwards](obj).TLEncodeFunction()
    if obj of stats_getMessageStats:
        return cast[stats_getMessageStats](obj).TLEncodeFunction()
